!function(n){function r(e){if(t[e])return t[e].exports;var o=t[e]={i:e,l:!1,exports:{}};return n[e].call(o.exports,o,o.exports,r),o.l=!0,o.exports}var t={};r.m=n,r.c=t,r.d=function(n,t,e){r.o(n,t)||Object.defineProperty(n,t,{configurable:!1,enumerable:!0,get:e})},r.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(t,"a",t),t},r.o=function(n,r){return Object.prototype.hasOwnProperty.call(n,r)},r.p="",r(r.s=0)}([function(n,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var e=t(9),o=(t.n(e),t(2));t.n(o),t(1);"serviceWorker"in navigator&&navigator.serviceWorker.register("/sw.js").then(function(n){console.log("Successfully registered service worker",n)}).catch(function(n){console.warn("Error whilst registering service worker",n)}),window.addEventListener("online",function(n){console.log("You are online")},!1),window.addEventListener("offline",function(n){console.log("You are offline")},!1)},function(n,r,t){var e;!function(r,t){"use strict";"object"==typeof n&&"object"==typeof n.exports?n.exports=r.document?t(r,!0):function(n){if(!n.document)throw new Error("jQuery requires a window with a document");return t(n)}:t(r)}("undefined"!=typeof window?window:this,function(t,o){"use strict";function i(n,r){var t=(r=r||J).createElement("script");t.text=n,r.head.appendChild(t).parentNode.removeChild(t)}function a(n){var r=!!n&&"length"in n&&n.length,t=pn.type(n);return"function"!==t&&!pn.isWindow(n)&&("array"===t||0===r||"number"==typeof r&&r>0&&r-1 in n)}function l(n,r){return n.nodeName&&n.nodeName.toLowerCase()===r.toLowerCase()}function s(n,r,t){return pn.isFunction(r)?pn.grep(n,function(n,e){return!!r.call(n,e,n)!==t}):r.nodeType?pn.grep(n,function(n){return n===r!==t}):"string"!=typeof r?pn.grep(n,function(n){return en.call(r,n)>-1!==t}):wn.test(r)?pn.filter(r,n,t):(r=pn.filter(r,n),pn.grep(n,function(n){return en.call(r,n)>-1!==t&&1===n.nodeType}))}function d(n,r){for(;(n=n[r])&&1!==n.nodeType;);return n}function c(n){return n}function p(n){throw n}function m(n,r,t,e){var o;try{n&&pn.isFunction(o=n.promise)?o.call(n).done(r).fail(t):n&&pn.isFunction(o=n.then)?o.call(n,r,t):r.apply(void 0,[n].slice(e))}catch(n){t.apply(void 0,[n])}}function f(){J.removeEventListener("DOMContentLoaded",f),t.removeEventListener("load",f),pn.ready()}function u(){this.expando=pn.expando+u.uid++}function g(n,r,t){var e;if(void 0===t&&1===n.nodeType)if(e="data-"+r.replace(Ln,"-$&").toLowerCase(),"string"==typeof(t=n.getAttribute(e))){try{t=function(n){return"true"===n||"false"!==n&&("null"===n?null:n===+n+""?+n:jn.test(n)?JSON.parse(n):n)}(t)}catch(n){}On.set(n,r,t)}else t=void 0;return t}function h(n,r,t,e){var o,i=1,a=20,l=e?function(){return e.cur()}:function(){return pn.css(n,r,"")},s=l(),d=t&&t[3]||(pn.cssNumber[r]?"":"px"),c=(pn.cssNumber[r]||"px"!==d&&+s)&&Hn.exec(pn.css(n,r));if(c&&c[3]!==d){d=d||c[3],t=t||[],c=+s||1;do{c/=i=i||".5",pn.style(n,r,c+d)}while(i!==(i=l()/s)&&1!==i&&--a)}return t&&(c=+c||+s||0,o=t[1]?c+(t[1]+1)*t[2]:+t[2],e&&(e.unit=d,e.start=c,e.end=o)),o}function b(n){var r,t=n.ownerDocument,e=n.nodeName,o=Wn[e];return o||(r=t.body.appendChild(t.createElement(e)),o=pn.css(r,"display"),r.parentNode.removeChild(r),"none"===o&&(o="block"),Wn[e]=o,o)}function v(n,r){for(var t,e,o=[],i=0,a=n.length;i<a;i++)(e=n[i]).style&&(t=e.style.display,r?("none"===t&&(o[i]=In.get(e,"display")||null,o[i]||(e.style.display="")),""===e.style.display&&Mn(e)&&(o[i]=b(e))):"none"!==t&&(o[i]="none",In.set(e,"display",t)));for(i=0;i<a;i++)null!=o[i]&&(n[i].style.display=o[i]);return n}function x(n,r){var t;return t=void 0!==n.getElementsByTagName?n.getElementsByTagName(r||"*"):void 0!==n.querySelectorAll?n.querySelectorAll(r||"*"):[],void 0===r||r&&l(n,r)?pn.merge([n],t):t}function y(n,r){for(var t=0,e=n.length;t<e;t++)In.set(n[t],"globalEval",!r||In.get(r[t],"globalEval"))}function w(n,r,t,e,o){for(var i,a,l,s,d,c,p=r.createDocumentFragment(),m=[],f=0,u=n.length;f<u;f++)if((i=n[f])||0===i)if("object"===pn.type(i))pn.merge(m,i.nodeType?[i]:i);else if(Vn.test(i)){for(a=a||p.appendChild(r.createElement("div")),l=(qn.exec(i)||["",""])[1].toLowerCase(),s=Un[l]||Un._default,a.innerHTML=s[1]+pn.htmlPrefilter(i)+s[2],c=s[0];c--;)a=a.lastChild;pn.merge(m,a.childNodes),(a=p.firstChild).textContent=""}else m.push(r.createTextNode(i));for(p.textContent="",f=0;i=m[f++];)if(e&&pn.inArray(i,e)>-1)o&&o.push(i);else if(d=pn.contains(i.ownerDocument,i),a=x(p.appendChild(i),"script"),d&&y(a),t)for(c=0;i=a[c++];)zn.test(i.type||"")&&t.push(i);return p}function k(){return!0}function _(){return!1}function E(){try{return J.activeElement}catch(n){}}function T(n,r,t,e,o,i){var a,l;if("object"==typeof r){"string"!=typeof t&&(e=e||t,t=void 0);for(l in r)T(n,l,t,e,r[l],i);return n}if(null==e&&null==o?(o=t,e=t=void 0):null==o&&("string"==typeof t?(o=e,e=void 0):(o=e,e=t,t=void 0)),!1===o)o=_;else if(!o)return n;return 1===i&&(a=o,(o=function(n){return pn().off(n),a.apply(this,arguments)}).guid=a.guid||(a.guid=pn.guid++)),n.each(function(){pn.event.add(this,r,o,e,t)})}function C(n,r){return l(n,"table")&&l(11!==r.nodeType?r:r.firstChild,"tr")?pn(">tbody",n)[0]||n:n}function A(n){return n.type=(null!==n.getAttribute("type"))+"/"+n.type,n}function S(n){var r=Zn.exec(n.type);return r?n.type=r[1]:n.removeAttribute("type"),n}function D(n,r){var t,e,o,i,a,l,s,d;if(1===r.nodeType){if(In.hasData(n)&&(i=In.access(n),a=In.set(r,i),d=i.events)){delete a.handle,a.events={};for(o in d)for(t=0,e=d[o].length;t<e;t++)pn.event.add(r,o,d[o][t])}On.hasData(n)&&(l=On.access(n),s=pn.extend({},l),On.set(r,s))}}function N(n,r){var t=r.nodeName.toLowerCase();"input"===t&&Bn.test(n.type)?r.checked=n.checked:"input"!==t&&"textarea"!==t||(r.defaultValue=n.defaultValue)}function I(n,r,t,e){r=rn.apply([],r);var o,a,l,s,d,c,p=0,m=n.length,f=m-1,u=r[0],g=pn.isFunction(u);if(g||m>1&&"string"==typeof u&&!cn.checkClone&&Jn.test(u))return n.each(function(o){var i=n.eq(o);g&&(r[0]=u.call(this,o,i.html())),I(i,r,t,e)});if(m&&(o=w(r,n[0].ownerDocument,!1,n,e),a=o.firstChild,1===o.childNodes.length&&(o=a),a||e)){for(s=(l=pn.map(x(o,"script"),A)).length;p<m;p++)d=o,p!==f&&(d=pn.clone(d,!0,!0),s&&pn.merge(l,x(d,"script"))),t.call(n[p],d,p);if(s)for(c=l[l.length-1].ownerDocument,pn.map(l,S),p=0;p<s;p++)d=l[p],zn.test(d.type||"")&&!In.access(d,"globalEval")&&pn.contains(c,d)&&(d.src?pn._evalUrl&&pn._evalUrl(d.src):i(d.textContent.replace(nr,""),c))}return n}function O(n,r,t){for(var e,o=r?pn.filter(r,n):n,i=0;null!=(e=o[i]);i++)t||1!==e.nodeType||pn.cleanData(x(e)),e.parentNode&&(t&&pn.contains(e.ownerDocument,e)&&y(x(e,"script")),e.parentNode.removeChild(e));return n}function j(n,r,t){var e,o,i,a,l=n.style;return(t=t||er(n))&&(""!==(a=t.getPropertyValue(r)||t[r])||pn.contains(n.ownerDocument,n)||(a=pn.style(n,r)),!cn.pixelMarginRight()&&tr.test(a)&&rr.test(r)&&(e=l.width,o=l.minWidth,i=l.maxWidth,l.minWidth=l.maxWidth=l.width=a,a=t.width,l.width=e,l.minWidth=o,l.maxWidth=i)),void 0!==a?a+"":a}function L(n,r){return{get:function(){if(!n())return(this.get=r).apply(this,arguments);delete this.get}}}function P(n){var r=pn.cssProps[n];return r||(r=pn.cssProps[n]=function(n){if(n in dr)return n;for(var r=n[0].toUpperCase()+n.slice(1),t=sr.length;t--;)if((n=sr[t]+r)in dr)return n}(n)||n),r}function H(n,r,t){var e=Hn.exec(r);return e?Math.max(0,e[2]-(t||0))+(e[3]||"px"):r}function R(n,r,t,e,o){var i,a=0;for(i=t===(e?"border":"content")?4:"width"===r?1:0;i<4;i+=2)"margin"===t&&(a+=pn.css(n,t+Rn[i],!0,o)),e?("content"===t&&(a-=pn.css(n,"padding"+Rn[i],!0,o)),"margin"!==t&&(a-=pn.css(n,"border"+Rn[i]+"Width",!0,o))):(a+=pn.css(n,"padding"+Rn[i],!0,o),"padding"!==t&&(a+=pn.css(n,"border"+Rn[i]+"Width",!0,o)));return a}function M(n,r,t){var e,o=er(n),i=j(n,r,o),a="border-box"===pn.css(n,"boxSizing",!1,o);return tr.test(i)?i:(e=a&&(cn.boxSizingReliable()||i===n.style[r]),"auto"===i&&(i=n["offset"+r[0].toUpperCase()+r.slice(1)]),(i=parseFloat(i)||0)+R(n,r,t||(a?"border":"content"),e,o)+"px")}function F(n,r,t,e,o){return new F.prototype.init(n,r,t,e,o)}function W(){pr&&(!1===J.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(W):t.setTimeout(W,pn.fx.interval),pn.fx.tick())}function B(){return t.setTimeout(function(){cr=void 0}),cr=pn.now()}function q(n,r){var t,e=0,o={height:n};for(r=r?1:0;e<4;e+=2-r)o["margin"+(t=Rn[e])]=o["padding"+t]=n;return r&&(o.opacity=o.width=n),o}function z(n,r,t){for(var e,o=(U.tweeners[r]||[]).concat(U.tweeners["*"]),i=0,a=o.length;i<a;i++)if(e=o[i].call(t,r,n))return e}function U(n,r,t){var e,o,i=0,a=U.prefilters.length,l=pn.Deferred().always(function(){delete s.elem}),s=function(){if(o)return!1;for(var r=cr||B(),t=Math.max(0,d.startTime+d.duration-r),e=1-(t/d.duration||0),i=0,a=d.tweens.length;i<a;i++)d.tweens[i].run(e);return l.notifyWith(n,[d,e,t]),e<1&&a?t:(a||l.notifyWith(n,[d,1,0]),l.resolveWith(n,[d]),!1)},d=l.promise({elem:n,props:pn.extend({},r),opts:pn.extend(!0,{specialEasing:{},easing:pn.easing._default},t),originalProperties:r,originalOptions:t,startTime:cr||B(),duration:t.duration,tweens:[],createTween:function(r,t){var e=pn.Tween(n,d.opts,r,t,d.opts.specialEasing[r]||d.opts.easing);return d.tweens.push(e),e},stop:function(r){var t=0,e=r?d.tweens.length:0;if(o)return this;for(o=!0;t<e;t++)d.tweens[t].run(1);return r?(l.notifyWith(n,[d,1,0]),l.resolveWith(n,[d,r])):l.rejectWith(n,[d,r]),this}}),c=d.props;for(!function(n,r){var t,e,o,i,a;for(t in n)if(e=pn.camelCase(t),o=r[e],i=n[t],Array.isArray(i)&&(o=i[1],i=n[t]=i[0]),t!==e&&(n[e]=i,delete n[t]),(a=pn.cssHooks[e])&&"expand"in a){i=a.expand(i),delete n[e];for(t in i)t in n||(n[t]=i[t],r[t]=o)}else r[e]=o}(c,d.opts.specialEasing);i<a;i++)if(e=U.prefilters[i].call(d,n,c,d.opts))return pn.isFunction(e.stop)&&(pn._queueHooks(d.elem,d.opts.queue).stop=pn.proxy(e.stop,e)),e;return pn.map(c,z,d),pn.isFunction(d.opts.start)&&d.opts.start.call(n,d),d.progress(d.opts.progress).done(d.opts.done,d.opts.complete).fail(d.opts.fail).always(d.opts.always),pn.fx.timer(pn.extend(s,{elem:n,anim:d,queue:d.opts.queue})),d}function V(n){return(n.match(Cn)||[]).join(" ")}function K(n){return n.getAttribute&&n.getAttribute("class")||""}function $(n,r,t,e){var o;if(Array.isArray(r))pn.each(r,function(r,o){t||_r.test(n)?e(n,o):$(n+"["+("object"==typeof o&&null!=o?r:"")+"]",o,t,e)});else if(t||"object"!==pn.type(r))e(n,r);else for(o in r)$(n+"["+o+"]",r[o],t,e)}function Q(n){return function(r,t){"string"!=typeof r&&(t=r,r="*");var e,o=0,i=r.toLowerCase().match(Cn)||[];if(pn.isFunction(t))for(;e=i[o++];)"+"===e[0]?(e=e.slice(1)||"*",(n[e]=n[e]||[]).unshift(t)):(n[e]=n[e]||[]).push(t)}}function Y(n,r,t,e){function o(l){var s;return i[l]=!0,pn.each(n[l]||[],function(n,l){var d=l(r,t,e);return"string"!=typeof d||a||i[d]?a?!(s=d):void 0:(r.dataTypes.unshift(d),o(d),!1)}),s}var i={},a=n===Lr;return o(r.dataTypes[0])||!i["*"]&&o("*")}function G(n,r){var t,e,o=pn.ajaxSettings.flatOptions||{};for(t in r)void 0!==r[t]&&((o[t]?n:e||(e={}))[t]=r[t]);return e&&pn.extend(!0,n,e),n}var X=[],J=t.document,Z=Object.getPrototypeOf,nn=X.slice,rn=X.concat,tn=X.push,en=X.indexOf,on={},an=on.toString,ln=on.hasOwnProperty,sn=ln.toString,dn=sn.call(Object),cn={},pn=function(n,r){return new pn.fn.init(n,r)},mn=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,fn=/^-ms-/,un=/-([a-z])/g,gn=function(n,r){return r.toUpperCase()};pn.fn=pn.prototype={jquery:"3.2.1",constructor:pn,length:0,toArray:function(){return nn.call(this)},get:function(n){return null==n?nn.call(this):n<0?this[n+this.length]:this[n]},pushStack:function(n){var r=pn.merge(this.constructor(),n);return r.prevObject=this,r},each:function(n){return pn.each(this,n)},map:function(n){return this.pushStack(pn.map(this,function(r,t){return n.call(r,t,r)}))},slice:function(){return this.pushStack(nn.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(n){var r=this.length,t=+n+(n<0?r:0);return this.pushStack(t>=0&&t<r?[this[t]]:[])},end:function(){return this.prevObject||this.constructor()},push:tn,sort:X.sort,splice:X.splice},pn.extend=pn.fn.extend=function(){var n,r,t,e,o,i,a=arguments[0]||{},l=1,s=arguments.length,d=!1;for("boolean"==typeof a&&(d=a,a=arguments[l]||{},l++),"object"==typeof a||pn.isFunction(a)||(a={}),l===s&&(a=this,l--);l<s;l++)if(null!=(n=arguments[l]))for(r in n)t=a[r],a!==(e=n[r])&&(d&&e&&(pn.isPlainObject(e)||(o=Array.isArray(e)))?(o?(o=!1,i=t&&Array.isArray(t)?t:[]):i=t&&pn.isPlainObject(t)?t:{},a[r]=pn.extend(d,i,e)):void 0!==e&&(a[r]=e));return a},pn.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(n){throw new Error(n)},noop:function(){},isFunction:function(n){return"function"===pn.type(n)},isWindow:function(n){return null!=n&&n===n.window},isNumeric:function(n){var r=pn.type(n);return("number"===r||"string"===r)&&!isNaN(n-parseFloat(n))},isPlainObject:function(n){var r,t;return!(!n||"[object Object]"!==an.call(n))&&(!(r=Z(n))||"function"==typeof(t=ln.call(r,"constructor")&&r.constructor)&&sn.call(t)===dn)},isEmptyObject:function(n){var r;for(r in n)return!1;return!0},type:function(n){return null==n?n+"":"object"==typeof n||"function"==typeof n?on[an.call(n)]||"object":typeof n},globalEval:function(n){i(n)},camelCase:function(n){return n.replace(fn,"ms-").replace(un,gn)},each:function(n,r){var t,e=0;if(a(n))for(t=n.length;e<t&&!1!==r.call(n[e],e,n[e]);e++);else for(e in n)if(!1===r.call(n[e],e,n[e]))break;return n},trim:function(n){return null==n?"":(n+"").replace(mn,"")},makeArray:function(n,r){var t=r||[];return null!=n&&(a(Object(n))?pn.merge(t,"string"==typeof n?[n]:n):tn.call(t,n)),t},inArray:function(n,r,t){return null==r?-1:en.call(r,n,t)},merge:function(n,r){for(var t=+r.length,e=0,o=n.length;e<t;e++)n[o++]=r[e];return n.length=o,n},grep:function(n,r,t){for(var e=[],o=0,i=n.length,a=!t;o<i;o++)!r(n[o],o)!==a&&e.push(n[o]);return e},map:function(n,r,t){var e,o,i=0,l=[];if(a(n))for(e=n.length;i<e;i++)null!=(o=r(n[i],i,t))&&l.push(o);else for(i in n)null!=(o=r(n[i],i,t))&&l.push(o);return rn.apply([],l)},guid:1,proxy:function(n,r){var t,e,o;if("string"==typeof r&&(t=n[r],r=n,n=t),pn.isFunction(n))return e=nn.call(arguments,2),o=function(){return n.apply(r||this,e.concat(nn.call(arguments)))},o.guid=n.guid=n.guid||pn.guid++,o},now:Date.now,support:cn}),"function"==typeof Symbol&&(pn.fn[Symbol.iterator]=X[Symbol.iterator]),pn.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(n,r){on["[object "+r+"]"]=r.toLowerCase()});var hn=function(n){function r(n,r,t,e){var o,i,a,l,s,d,c,m=r&&r.ownerDocument,u=r?r.nodeType:9;if(t=t||[],"string"!=typeof n||!n||1!==u&&9!==u&&11!==u)return t;if(!e&&((r?r.ownerDocument||r:F)!==I&&N(r),r=r||I,j)){if(11!==u&&(s=hn.exec(n)))if(o=s[1]){if(9===u){if(!(a=r.getElementById(o)))return t;if(a.id===o)return t.push(a),t}else if(m&&(a=m.getElementById(o))&&R(r,a)&&a.id===o)return t.push(a),t}else{if(s[2])return G.apply(t,r.getElementsByTagName(n)),t;if((o=s[3])&&y.getElementsByClassName&&r.getElementsByClassName)return G.apply(t,r.getElementsByClassName(o)),t}if(y.qsa&&!U[n+" "]&&(!L||!L.test(n))){if(1!==u)m=r,c=n;else if("object"!==r.nodeName.toLowerCase()){for((l=r.getAttribute("id"))?l=l.replace(yn,wn):r.setAttribute("id",l=M),i=(d=E(n)).length;i--;)d[i]="#"+l+" "+f(d[i]);c=d.join(","),m=bn.test(n)&&p(r.parentNode)||r}if(c)try{return G.apply(t,m.querySelectorAll(c)),t}catch(n){}finally{l===M&&r.removeAttribute("id")}}}return C(n.replace(an,"$1"),r,t,e)}function t(){function n(t,e){return r.push(t+" ")>w.cacheLength&&delete n[r.shift()],n[t+" "]=e}var r=[];return n}function e(n){return n[M]=!0,n}function o(n){var r=I.createElement("fieldset");try{return!!n(r)}catch(n){return!1}finally{r.parentNode&&r.parentNode.removeChild(r),r=null}}function i(n,r){for(var t=n.split("|"),e=t.length;e--;)w.attrHandle[t[e]]=r}function a(n,r){var t=r&&n,e=t&&1===n.nodeType&&1===r.nodeType&&n.sourceIndex-r.sourceIndex;if(e)return e;if(t)for(;t=t.nextSibling;)if(t===r)return-1;return n?1:-1}function l(n){return function(r){return"input"===r.nodeName.toLowerCase()&&r.type===n}}function s(n){return function(r){var t=r.nodeName.toLowerCase();return("input"===t||"button"===t)&&r.type===n}}function d(n){return function(r){return"form"in r?r.parentNode&&!1===r.disabled?"label"in r?"label"in r.parentNode?r.parentNode.disabled===n:r.disabled===n:r.isDisabled===n||r.isDisabled!==!n&&_n(r)===n:r.disabled===n:"label"in r&&r.disabled===n}}function c(n){return e(function(r){return r=+r,e(function(t,e){for(var o,i=n([],t.length,r),a=i.length;a--;)t[o=i[a]]&&(t[o]=!(e[o]=t[o]))})})}function p(n){return n&&void 0!==n.getElementsByTagName&&n}function m(){}function f(n){for(var r=0,t=n.length,e="";r<t;r++)e+=n[r].value;return e}function u(n,r,t){var e=r.dir,o=r.next,i=o||e,a=t&&"parentNode"===i,l=B++;return r.first?function(r,t,o){for(;r=r[e];)if(1===r.nodeType||a)return n(r,t,o);return!1}:function(r,t,s){var d,c,p,m=[W,l];if(s){for(;r=r[e];)if((1===r.nodeType||a)&&n(r,t,s))return!0}else for(;r=r[e];)if(1===r.nodeType||a)if(p=r[M]||(r[M]={}),c=p[r.uniqueID]||(p[r.uniqueID]={}),o&&o===r.nodeName.toLowerCase())r=r[e]||r;else{if((d=c[i])&&d[0]===W&&d[1]===l)return m[2]=d[2];if(c[i]=m,m[2]=n(r,t,s))return!0}return!1}}function g(n){return n.length>1?function(r,t,e){for(var o=n.length;o--;)if(!n[o](r,t,e))return!1;return!0}:n[0]}function h(n,r,t,e,o){for(var i,a=[],l=0,s=n.length,d=null!=r;l<s;l++)(i=n[l])&&(t&&!t(i,e,o)||(a.push(i),d&&r.push(l)));return a}function b(n,t,o,i,a,l){return i&&!i[M]&&(i=b(i)),a&&!a[M]&&(a=b(a,l)),e(function(e,l,s,d){var c,p,m,f=[],u=[],g=l.length,b=e||function(n,t,e){for(var o=0,i=t.length;o<i;o++)r(n,t[o],e);return e}(t||"*",s.nodeType?[s]:s,[]),v=!n||!e&&t?b:h(b,f,n,s,d),x=o?a||(e?n:g||i)?[]:l:v;if(o&&o(v,x,s,d),i)for(c=h(x,u),i(c,[],s,d),p=c.length;p--;)(m=c[p])&&(x[u[p]]=!(v[u[p]]=m));if(e){if(a||n){if(a){for(c=[],p=x.length;p--;)(m=x[p])&&c.push(v[p]=m);a(null,x=[],c,d)}for(p=x.length;p--;)(m=x[p])&&(c=a?J(e,m):f[p])>-1&&(e[c]=!(l[c]=m))}}else x=h(x===l?x.splice(g,x.length):x),a?a(null,l,x,d):G.apply(l,x)})}function v(n){for(var r,t,e,o=n.length,i=w.relative[n[0].type],a=i||w.relative[" "],l=i?1:0,s=u(function(n){return n===r},a,!0),d=u(function(n){return J(r,n)>-1},a,!0),c=[function(n,t,e){var o=!i&&(e||t!==A)||((r=t).nodeType?s(n,t,e):d(n,t,e));return r=null,o}];l<o;l++)if(t=w.relative[n[l].type])c=[u(g(c),t)];else{if((t=w.filter[n[l].type].apply(null,n[l].matches))[M]){for(e=++l;e<o&&!w.relative[n[e].type];e++);return b(l>1&&g(c),l>1&&f(n.slice(0,l-1).concat({value:" "===n[l-2].type?"*":""})).replace(an,"$1"),t,l<e&&v(n.slice(l,e)),e<o&&v(n=n.slice(e)),e<o&&f(n))}c.push(t)}return g(c)}var x,y,w,k,_,E,T,C,A,S,D,N,I,O,j,L,P,H,R,M="sizzle"+1*new Date,F=n.document,W=0,B=0,q=t(),z=t(),U=t(),V=function(n,r){return n===r&&(D=!0),0},K={}.hasOwnProperty,$=[],Q=$.pop,Y=$.push,G=$.push,X=$.slice,J=function(n,r){for(var t=0,e=n.length;t<e;t++)if(n[t]===r)return t;return-1},Z="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nn="[\\x20\\t\\r\\n\\f]",rn="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",tn="\\["+nn+"*("+rn+")(?:"+nn+"*([*^$|!~]?=)"+nn+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+rn+"))|)"+nn+"*\\]",en=":("+rn+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+tn+")*)|.*)\\)|)",on=new RegExp(nn+"+","g"),an=new RegExp("^"+nn+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nn+"+$","g"),ln=new RegExp("^"+nn+"*,"+nn+"*"),sn=new RegExp("^"+nn+"*([>+~]|"+nn+")"+nn+"*"),dn=new RegExp("="+nn+"*([^\\]'\"]*?)"+nn+"*\\]","g"),cn=new RegExp(en),pn=new RegExp("^"+rn+"$"),mn={ID:new RegExp("^#("+rn+")"),CLASS:new RegExp("^\\.("+rn+")"),TAG:new RegExp("^("+rn+"|[*])"),ATTR:new RegExp("^"+tn),PSEUDO:new RegExp("^"+en),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nn+"*(even|odd|(([+-]|)(\\d*)n|)"+nn+"*(?:([+-]|)"+nn+"*(\\d+)|))"+nn+"*\\)|)","i"),bool:new RegExp("^(?:"+Z+")$","i"),needsContext:new RegExp("^"+nn+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nn+"*((?:-\\d)?\\d*)"+nn+"*\\)|)(?=[^-]|$)","i")},fn=/^(?:input|select|textarea|button)$/i,un=/^h\d$/i,gn=/^[^{]+\{\s*\[native \w/,hn=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,bn=/[+~]/,vn=new RegExp("\\\\([\\da-f]{1,6}"+nn+"?|("+nn+")|.)","ig"),xn=function(n,r,t){var e="0x"+r-65536;return e!=e||t?r:e<0?String.fromCharCode(e+65536):String.fromCharCode(e>>10|55296,1023&e|56320)},yn=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,wn=function(n,r){return r?"\0"===n?"�":n.slice(0,-1)+"\\"+n.charCodeAt(n.length-1).toString(16)+" ":"\\"+n},kn=function(){N()},_n=u(function(n){return!0===n.disabled&&("form"in n||"label"in n)},{dir:"parentNode",next:"legend"});try{G.apply($=X.call(F.childNodes),F.childNodes),$[F.childNodes.length].nodeType}catch(n){G={apply:$.length?function(n,r){Y.apply(n,X.call(r))}:function(n,r){for(var t=n.length,e=0;n[t++]=r[e++];);n.length=t-1}}}y=r.support={},_=r.isXML=function(n){var r=n&&(n.ownerDocument||n).documentElement;return!!r&&"HTML"!==r.nodeName},N=r.setDocument=function(n){var r,t,e=n?n.ownerDocument||n:F;return e!==I&&9===e.nodeType&&e.documentElement?(I=e,O=I.documentElement,j=!_(I),F!==I&&(t=I.defaultView)&&t.top!==t&&(t.addEventListener?t.addEventListener("unload",kn,!1):t.attachEvent&&t.attachEvent("onunload",kn)),y.attributes=o(function(n){return n.className="i",!n.getAttribute("className")}),y.getElementsByTagName=o(function(n){return n.appendChild(I.createComment("")),!n.getElementsByTagName("*").length}),y.getElementsByClassName=gn.test(I.getElementsByClassName),y.getById=o(function(n){return O.appendChild(n).id=M,!I.getElementsByName||!I.getElementsByName(M).length}),y.getById?(w.filter.ID=function(n){var r=n.replace(vn,xn);return function(n){return n.getAttribute("id")===r}},w.find.ID=function(n,r){if(void 0!==r.getElementById&&j){var t=r.getElementById(n);return t?[t]:[]}}):(w.filter.ID=function(n){var r=n.replace(vn,xn);return function(n){var t=void 0!==n.getAttributeNode&&n.getAttributeNode("id");return t&&t.value===r}},w.find.ID=function(n,r){if(void 0!==r.getElementById&&j){var t,e,o,i=r.getElementById(n);if(i){if((t=i.getAttributeNode("id"))&&t.value===n)return[i];for(o=r.getElementsByName(n),e=0;i=o[e++];)if((t=i.getAttributeNode("id"))&&t.value===n)return[i]}return[]}}),w.find.TAG=y.getElementsByTagName?function(n,r){return void 0!==r.getElementsByTagName?r.getElementsByTagName(n):y.qsa?r.querySelectorAll(n):void 0}:function(n,r){var t,e=[],o=0,i=r.getElementsByTagName(n);if("*"===n){for(;t=i[o++];)1===t.nodeType&&e.push(t);return e}return i},w.find.CLASS=y.getElementsByClassName&&function(n,r){if(void 0!==r.getElementsByClassName&&j)return r.getElementsByClassName(n)},P=[],L=[],(y.qsa=gn.test(I.querySelectorAll))&&(o(function(n){O.appendChild(n).innerHTML="<a id='"+M+"'></a><select id='"+M+"-\r\\' msallowcapture=''><option selected=''></option></select>",n.querySelectorAll("[msallowcapture^='']").length&&L.push("[*^$]="+nn+"*(?:''|\"\")"),n.querySelectorAll("[selected]").length||L.push("\\["+nn+"*(?:value|"+Z+")"),n.querySelectorAll("[id~="+M+"-]").length||L.push("~="),n.querySelectorAll(":checked").length||L.push(":checked"),n.querySelectorAll("a#"+M+"+*").length||L.push(".#.+[+~]")}),o(function(n){n.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var r=I.createElement("input");r.setAttribute("type","hidden"),n.appendChild(r).setAttribute("name","D"),n.querySelectorAll("[name=d]").length&&L.push("name"+nn+"*[*^$|!~]?="),2!==n.querySelectorAll(":enabled").length&&L.push(":enabled",":disabled"),O.appendChild(n).disabled=!0,2!==n.querySelectorAll(":disabled").length&&L.push(":enabled",":disabled"),n.querySelectorAll("*,:x"),L.push(",.*:")})),(y.matchesSelector=gn.test(H=O.matches||O.webkitMatchesSelector||O.mozMatchesSelector||O.oMatchesSelector||O.msMatchesSelector))&&o(function(n){y.disconnectedMatch=H.call(n,"*"),H.call(n,"[s!='']:x"),P.push("!=",en)}),L=L.length&&new RegExp(L.join("|")),P=P.length&&new RegExp(P.join("|")),r=gn.test(O.compareDocumentPosition),R=r||gn.test(O.contains)?function(n,r){var t=9===n.nodeType?n.documentElement:n,e=r&&r.parentNode;return n===e||!(!e||1!==e.nodeType||!(t.contains?t.contains(e):n.compareDocumentPosition&&16&n.compareDocumentPosition(e)))}:function(n,r){if(r)for(;r=r.parentNode;)if(r===n)return!0;return!1},V=r?function(n,r){if(n===r)return D=!0,0;var t=!n.compareDocumentPosition-!r.compareDocumentPosition;return t||(1&(t=(n.ownerDocument||n)===(r.ownerDocument||r)?n.compareDocumentPosition(r):1)||!y.sortDetached&&r.compareDocumentPosition(n)===t?n===I||n.ownerDocument===F&&R(F,n)?-1:r===I||r.ownerDocument===F&&R(F,r)?1:S?J(S,n)-J(S,r):0:4&t?-1:1)}:function(n,r){if(n===r)return D=!0,0;var t,e=0,o=n.parentNode,i=r.parentNode,l=[n],s=[r];if(!o||!i)return n===I?-1:r===I?1:o?-1:i?1:S?J(S,n)-J(S,r):0;if(o===i)return a(n,r);for(t=n;t=t.parentNode;)l.unshift(t);for(t=r;t=t.parentNode;)s.unshift(t);for(;l[e]===s[e];)e++;return e?a(l[e],s[e]):l[e]===F?-1:s[e]===F?1:0},I):I},r.matches=function(n,t){return r(n,null,null,t)},r.matchesSelector=function(n,t){if((n.ownerDocument||n)!==I&&N(n),t=t.replace(dn,"='$1']"),y.matchesSelector&&j&&!U[t+" "]&&(!P||!P.test(t))&&(!L||!L.test(t)))try{var e=H.call(n,t);if(e||y.disconnectedMatch||n.document&&11!==n.document.nodeType)return e}catch(n){}return r(t,I,null,[n]).length>0},r.contains=function(n,r){return(n.ownerDocument||n)!==I&&N(n),R(n,r)},r.attr=function(n,r){(n.ownerDocument||n)!==I&&N(n);var t=w.attrHandle[r.toLowerCase()],e=t&&K.call(w.attrHandle,r.toLowerCase())?t(n,r,!j):void 0;return void 0!==e?e:y.attributes||!j?n.getAttribute(r):(e=n.getAttributeNode(r))&&e.specified?e.value:null},r.escape=function(n){return(n+"").replace(yn,wn)},r.error=function(n){throw new Error("Syntax error, unrecognized expression: "+n)},r.uniqueSort=function(n){var r,t=[],e=0,o=0;if(D=!y.detectDuplicates,S=!y.sortStable&&n.slice(0),n.sort(V),D){for(;r=n[o++];)r===n[o]&&(e=t.push(o));for(;e--;)n.splice(t[e],1)}return S=null,n},k=r.getText=function(n){var r,t="",e=0,o=n.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof n.textContent)return n.textContent;for(n=n.firstChild;n;n=n.nextSibling)t+=k(n)}else if(3===o||4===o)return n.nodeValue}else for(;r=n[e++];)t+=k(r);return t},(w=r.selectors={cacheLength:50,createPseudo:e,match:mn,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(n){return n[1]=n[1].replace(vn,xn),n[3]=(n[3]||n[4]||n[5]||"").replace(vn,xn),"~="===n[2]&&(n[3]=" "+n[3]+" "),n.slice(0,4)},CHILD:function(n){return n[1]=n[1].toLowerCase(),"nth"===n[1].slice(0,3)?(n[3]||r.error(n[0]),n[4]=+(n[4]?n[5]+(n[6]||1):2*("even"===n[3]||"odd"===n[3])),n[5]=+(n[7]+n[8]||"odd"===n[3])):n[3]&&r.error(n[0]),n},PSEUDO:function(n){var r,t=!n[6]&&n[2];return mn.CHILD.test(n[0])?null:(n[3]?n[2]=n[4]||n[5]||"":t&&cn.test(t)&&(r=E(t,!0))&&(r=t.indexOf(")",t.length-r)-t.length)&&(n[0]=n[0].slice(0,r),n[2]=t.slice(0,r)),n.slice(0,3))}},filter:{TAG:function(n){var r=n.replace(vn,xn).toLowerCase();return"*"===n?function(){return!0}:function(n){return n.nodeName&&n.nodeName.toLowerCase()===r}},CLASS:function(n){var r=q[n+" "];return r||(r=new RegExp("(^|"+nn+")"+n+"("+nn+"|$)"))&&q(n,function(n){return r.test("string"==typeof n.className&&n.className||void 0!==n.getAttribute&&n.getAttribute("class")||"")})},ATTR:function(n,t,e){return function(o){var i=r.attr(o,n);return null==i?"!="===t:!t||(i+="","="===t?i===e:"!="===t?i!==e:"^="===t?e&&0===i.indexOf(e):"*="===t?e&&i.indexOf(e)>-1:"$="===t?e&&i.slice(-e.length)===e:"~="===t?(" "+i.replace(on," ")+" ").indexOf(e)>-1:"|="===t&&(i===e||i.slice(0,e.length+1)===e+"-"))}},CHILD:function(n,r,t,e,o){var i="nth"!==n.slice(0,3),a="last"!==n.slice(-4),l="of-type"===r;return 1===e&&0===o?function(n){return!!n.parentNode}:function(r,t,s){var d,c,p,m,f,u,g=i!==a?"nextSibling":"previousSibling",h=r.parentNode,b=l&&r.nodeName.toLowerCase(),v=!s&&!l,x=!1;if(h){if(i){for(;g;){for(m=r;m=m[g];)if(l?m.nodeName.toLowerCase()===b:1===m.nodeType)return!1;u=g="only"===n&&!u&&"nextSibling"}return!0}if(u=[a?h.firstChild:h.lastChild],a&&v){for(x=(f=(d=(c=(p=(m=h)[M]||(m[M]={}))[m.uniqueID]||(p[m.uniqueID]={}))[n]||[])[0]===W&&d[1])&&d[2],m=f&&h.childNodes[f];m=++f&&m&&m[g]||(x=f=0)||u.pop();)if(1===m.nodeType&&++x&&m===r){c[n]=[W,f,x];break}}else if(v&&(x=f=(d=(c=(p=(m=r)[M]||(m[M]={}))[m.uniqueID]||(p[m.uniqueID]={}))[n]||[])[0]===W&&d[1]),!1===x)for(;(m=++f&&m&&m[g]||(x=f=0)||u.pop())&&((l?m.nodeName.toLowerCase()!==b:1!==m.nodeType)||!++x||(v&&((c=(p=m[M]||(m[M]={}))[m.uniqueID]||(p[m.uniqueID]={}))[n]=[W,x]),m!==r)););return(x-=o)===e||x%e==0&&x/e>=0}}},PSEUDO:function(n,t){var o,i=w.pseudos[n]||w.setFilters[n.toLowerCase()]||r.error("unsupported pseudo: "+n);return i[M]?i(t):i.length>1?(o=[n,n,"",t],w.setFilters.hasOwnProperty(n.toLowerCase())?e(function(n,r){for(var e,o=i(n,t),a=o.length;a--;)n[e=J(n,o[a])]=!(r[e]=o[a])}):function(n){return i(n,0,o)}):i}},pseudos:{not:e(function(n){var r=[],t=[],o=T(n.replace(an,"$1"));return o[M]?e(function(n,r,t,e){for(var i,a=o(n,null,e,[]),l=n.length;l--;)(i=a[l])&&(n[l]=!(r[l]=i))}):function(n,e,i){return r[0]=n,o(r,null,i,t),r[0]=null,!t.pop()}}),has:e(function(n){return function(t){return r(n,t).length>0}}),contains:e(function(n){return n=n.replace(vn,xn),function(r){return(r.textContent||r.innerText||k(r)).indexOf(n)>-1}}),lang:e(function(n){return pn.test(n||"")||r.error("unsupported lang: "+n),n=n.replace(vn,xn).toLowerCase(),function(r){var t;do{if(t=j?r.lang:r.getAttribute("xml:lang")||r.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((r=r.parentNode)&&1===r.nodeType);return!1}}),target:function(r){var t=n.location&&n.location.hash;return t&&t.slice(1)===r.id},root:function(n){return n===O},focus:function(n){return n===I.activeElement&&(!I.hasFocus||I.hasFocus())&&!!(n.type||n.href||~n.tabIndex)},enabled:d(!1),disabled:d(!0),checked:function(n){var r=n.nodeName.toLowerCase();return"input"===r&&!!n.checked||"option"===r&&!!n.selected},selected:function(n){return n.parentNode&&n.parentNode.selectedIndex,!0===n.selected},empty:function(n){for(n=n.firstChild;n;n=n.nextSibling)if(n.nodeType<6)return!1;return!0},parent:function(n){return!w.pseudos.empty(n)},header:function(n){return un.test(n.nodeName)},input:function(n){return fn.test(n.nodeName)},button:function(n){var r=n.nodeName.toLowerCase();return"input"===r&&"button"===n.type||"button"===r},text:function(n){var r;return"input"===n.nodeName.toLowerCase()&&"text"===n.type&&(null==(r=n.getAttribute("type"))||"text"===r.toLowerCase())},first:c(function(){return[0]}),last:c(function(n,r){return[r-1]}),eq:c(function(n,r,t){return[t<0?t+r:t]}),even:c(function(n,r){for(var t=0;t<r;t+=2)n.push(t);return n}),odd:c(function(n,r){for(var t=1;t<r;t+=2)n.push(t);return n}),lt:c(function(n,r,t){for(var e=t<0?t+r:t;--e>=0;)n.push(e);return n}),gt:c(function(n,r,t){for(var e=t<0?t+r:t;++e<r;)n.push(e);return n})}}).pseudos.nth=w.pseudos.eq;for(x in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[x]=l(x);for(x in{submit:!0,reset:!0})w.pseudos[x]=s(x);return m.prototype=w.filters=w.pseudos,w.setFilters=new m,E=r.tokenize=function(n,t){var e,o,i,a,l,s,d,c=z[n+" "];if(c)return t?0:c.slice(0);for(l=n,s=[],d=w.preFilter;l;){e&&!(o=ln.exec(l))||(o&&(l=l.slice(o[0].length)||l),s.push(i=[])),e=!1,(o=sn.exec(l))&&(e=o.shift(),i.push({value:e,type:o[0].replace(an," ")}),l=l.slice(e.length));for(a in w.filter)!(o=mn[a].exec(l))||d[a]&&!(o=d[a](o))||(e=o.shift(),i.push({value:e,type:a,matches:o}),l=l.slice(e.length));if(!e)break}return t?l.length:l?r.error(n):z(n,s).slice(0)},T=r.compile=function(n,t){var o,i=[],a=[],l=U[n+" "];if(!l){for(t||(t=E(n)),o=t.length;o--;)(l=v(t[o]))[M]?i.push(l):a.push(l);(l=U(n,function(n,t){var o=t.length>0,i=n.length>0,a=function(e,a,l,s,d){var c,p,m,f=0,u="0",g=e&&[],b=[],v=A,x=e||i&&w.find.TAG("*",d),y=W+=null==v?1:Math.random()||.1,k=x.length;for(d&&(A=a===I||a||d);u!==k&&null!=(c=x[u]);u++){if(i&&c){for(p=0,a||c.ownerDocument===I||(N(c),l=!j);m=n[p++];)if(m(c,a||I,l)){s.push(c);break}d&&(W=y)}o&&((c=!m&&c)&&f--,e&&g.push(c))}if(f+=u,o&&u!==f){for(p=0;m=t[p++];)m(g,b,a,l);if(e){if(f>0)for(;u--;)g[u]||b[u]||(b[u]=Q.call(s));b=h(b)}G.apply(s,b),d&&!e&&b.length>0&&f+t.length>1&&r.uniqueSort(s)}return d&&(W=y,A=v),g};return o?e(a):a}(a,i))).selector=n}return l},C=r.select=function(n,r,t,e){var o,i,a,l,s,d="function"==typeof n&&n,c=!e&&E(n=d.selector||n);if(t=t||[],1===c.length){if((i=c[0]=c[0].slice(0)).length>2&&"ID"===(a=i[0]).type&&9===r.nodeType&&j&&w.relative[i[1].type]){if(!(r=(w.find.ID(a.matches[0].replace(vn,xn),r)||[])[0]))return t;d&&(r=r.parentNode),n=n.slice(i.shift().value.length)}for(o=mn.needsContext.test(n)?0:i.length;o--&&(a=i[o],!w.relative[l=a.type]);)if((s=w.find[l])&&(e=s(a.matches[0].replace(vn,xn),bn.test(i[0].type)&&p(r.parentNode)||r))){if(i.splice(o,1),!(n=e.length&&f(i)))return G.apply(t,e),t;break}}return(d||T(n,c))(e,r,!j,t,!r||bn.test(n)&&p(r.parentNode)||r),t},y.sortStable=M.split("").sort(V).join("")===M,y.detectDuplicates=!!D,N(),y.sortDetached=o(function(n){return 1&n.compareDocumentPosition(I.createElement("fieldset"))}),o(function(n){return n.innerHTML="<a href='#'></a>","#"===n.firstChild.getAttribute("href")})||i("type|href|height|width",function(n,r,t){if(!t)return n.getAttribute(r,"type"===r.toLowerCase()?1:2)}),y.attributes&&o(function(n){return n.innerHTML="<input/>",n.firstChild.setAttribute("value",""),""===n.firstChild.getAttribute("value")})||i("value",function(n,r,t){if(!t&&"input"===n.nodeName.toLowerCase())return n.defaultValue}),o(function(n){return null==n.getAttribute("disabled")})||i(Z,function(n,r,t){var e;if(!t)return!0===n[r]?r.toLowerCase():(e=n.getAttributeNode(r))&&e.specified?e.value:null}),r}(t);pn.find=hn,pn.expr=hn.selectors,pn.expr[":"]=pn.expr.pseudos,pn.uniqueSort=pn.unique=hn.uniqueSort,pn.text=hn.getText,pn.isXMLDoc=hn.isXML,pn.contains=hn.contains,pn.escapeSelector=hn.escape;var bn=function(n,r,t){for(var e=[],o=void 0!==t;(n=n[r])&&9!==n.nodeType;)if(1===n.nodeType){if(o&&pn(n).is(t))break;e.push(n)}return e},vn=function(n,r){for(var t=[];n;n=n.nextSibling)1===n.nodeType&&n!==r&&t.push(n);return t},xn=pn.expr.match.needsContext,yn=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,wn=/^.[^:#\[\.,]*$/;pn.filter=function(n,r,t){var e=r[0];return t&&(n=":not("+n+")"),1===r.length&&1===e.nodeType?pn.find.matchesSelector(e,n)?[e]:[]:pn.find.matches(n,pn.grep(r,function(n){return 1===n.nodeType}))},pn.fn.extend({find:function(n){var r,t,e=this.length,o=this;if("string"!=typeof n)return this.pushStack(pn(n).filter(function(){for(r=0;r<e;r++)if(pn.contains(o[r],this))return!0}));for(t=this.pushStack([]),r=0;r<e;r++)pn.find(n,o[r],t);return e>1?pn.uniqueSort(t):t},filter:function(n){return this.pushStack(s(this,n||[],!1))},not:function(n){return this.pushStack(s(this,n||[],!0))},is:function(n){return!!s(this,"string"==typeof n&&xn.test(n)?pn(n):n||[],!1).length}});var kn,_n=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(pn.fn.init=function(n,r,t){var e,o;if(!n)return this;if(t=t||kn,"string"==typeof n){if(!(e="<"===n[0]&&">"===n[n.length-1]&&n.length>=3?[null,n,null]:_n.exec(n))||!e[1]&&r)return!r||r.jquery?(r||t).find(n):this.constructor(r).find(n);if(e[1]){if(r=r instanceof pn?r[0]:r,pn.merge(this,pn.parseHTML(e[1],r&&r.nodeType?r.ownerDocument||r:J,!0)),yn.test(e[1])&&pn.isPlainObject(r))for(e in r)pn.isFunction(this[e])?this[e](r[e]):this.attr(e,r[e]);return this}return(o=J.getElementById(e[2]))&&(this[0]=o,this.length=1),this}return n.nodeType?(this[0]=n,this.length=1,this):pn.isFunction(n)?void 0!==t.ready?t.ready(n):n(pn):pn.makeArray(n,this)}).prototype=pn.fn,kn=pn(J);var En=/^(?:parents|prev(?:Until|All))/,Tn={children:!0,contents:!0,next:!0,prev:!0};pn.fn.extend({has:function(n){var r=pn(n,this),t=r.length;return this.filter(function(){for(var n=0;n<t;n++)if(pn.contains(this,r[n]))return!0})},closest:function(n,r){var t,e=0,o=this.length,i=[],a="string"!=typeof n&&pn(n);if(!xn.test(n))for(;e<o;e++)for(t=this[e];t&&t!==r;t=t.parentNode)if(t.nodeType<11&&(a?a.index(t)>-1:1===t.nodeType&&pn.find.matchesSelector(t,n))){i.push(t);break}return this.pushStack(i.length>1?pn.uniqueSort(i):i)},index:function(n){return n?"string"==typeof n?en.call(pn(n),this[0]):en.call(this,n.jquery?n[0]:n):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(n,r){return this.pushStack(pn.uniqueSort(pn.merge(this.get(),pn(n,r))))},addBack:function(n){return this.add(null==n?this.prevObject:this.prevObject.filter(n))}}),pn.each({parent:function(n){var r=n.parentNode;return r&&11!==r.nodeType?r:null},parents:function(n){return bn(n,"parentNode")},parentsUntil:function(n,r,t){return bn(n,"parentNode",t)},next:function(n){return d(n,"nextSibling")},prev:function(n){return d(n,"previousSibling")},nextAll:function(n){return bn(n,"nextSibling")},prevAll:function(n){return bn(n,"previousSibling")},nextUntil:function(n,r,t){return bn(n,"nextSibling",t)},prevUntil:function(n,r,t){return bn(n,"previousSibling",t)},siblings:function(n){return vn((n.parentNode||{}).firstChild,n)},children:function(n){return vn(n.firstChild)},contents:function(n){return l(n,"iframe")?n.contentDocument:(l(n,"template")&&(n=n.content||n),pn.merge([],n.childNodes))}},function(n,r){pn.fn[n]=function(t,e){var o=pn.map(this,r,t);return"Until"!==n.slice(-5)&&(e=t),e&&"string"==typeof e&&(o=pn.filter(e,o)),this.length>1&&(Tn[n]||pn.uniqueSort(o),En.test(n)&&o.reverse()),this.pushStack(o)}});var Cn=/[^\x20\t\r\n\f]+/g;pn.Callbacks=function(n){n="string"==typeof n?function(n){var r={};return pn.each(n.match(Cn)||[],function(n,t){r[t]=!0}),r}(n):pn.extend({},n);var r,t,e,o,i=[],a=[],l=-1,s=function(){for(o=o||n.once,e=r=!0;a.length;l=-1)for(t=a.shift();++l<i.length;)!1===i[l].apply(t[0],t[1])&&n.stopOnFalse&&(l=i.length,t=!1);n.memory||(t=!1),r=!1,o&&(i=t?[]:"")},d={add:function(){return i&&(t&&!r&&(l=i.length-1,a.push(t)),function r(t){pn.each(t,function(t,e){pn.isFunction(e)?n.unique&&d.has(e)||i.push(e):e&&e.length&&"string"!==pn.type(e)&&r(e)})}(arguments),t&&!r&&s()),this},remove:function(){return pn.each(arguments,function(n,r){for(var t;(t=pn.inArray(r,i,t))>-1;)i.splice(t,1),t<=l&&l--}),this},has:function(n){return n?pn.inArray(n,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=a=[],i=t="",this},disabled:function(){return!i},lock:function(){return o=a=[],t||r||(i=t=""),this},locked:function(){return!!o},fireWith:function(n,t){return o||(t=[n,(t=t||[]).slice?t.slice():t],a.push(t),r||s()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!e}};return d},pn.extend({Deferred:function(n){var r=[["notify","progress",pn.Callbacks("memory"),pn.Callbacks("memory"),2],["resolve","done",pn.Callbacks("once memory"),pn.Callbacks("once memory"),0,"resolved"],["reject","fail",pn.Callbacks("once memory"),pn.Callbacks("once memory"),1,"rejected"]],e="pending",o={state:function(){return e},always:function(){return i.done(arguments).fail(arguments),this},catch:function(n){return o.then(null,n)},pipe:function(){var n=arguments;return pn.Deferred(function(t){pn.each(r,function(r,e){var o=pn.isFunction(n[e[4]])&&n[e[4]];i[e[1]](function(){var n=o&&o.apply(this,arguments);n&&pn.isFunction(n.promise)?n.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[e[0]+"With"](this,o?[n]:arguments)})}),n=null}).promise()},then:function(n,e,o){function i(n,r,e,o){return function(){var l=this,s=arguments,d=function(){var t,d;if(!(n<a)){if((t=e.apply(l,s))===r.promise())throw new TypeError("Thenable self-resolution");d=t&&("object"==typeof t||"function"==typeof t)&&t.then,pn.isFunction(d)?o?d.call(t,i(a,r,c,o),i(a,r,p,o)):(a++,d.call(t,i(a,r,c,o),i(a,r,p,o),i(a,r,c,r.notifyWith))):(e!==c&&(l=void 0,s=[t]),(o||r.resolveWith)(l,s))}},m=o?d:function(){try{d()}catch(t){pn.Deferred.exceptionHook&&pn.Deferred.exceptionHook(t,m.stackTrace),n+1>=a&&(e!==p&&(l=void 0,s=[t]),r.rejectWith(l,s))}};n?m():(pn.Deferred.getStackHook&&(m.stackTrace=pn.Deferred.getStackHook()),t.setTimeout(m))}}var a=0;return pn.Deferred(function(t){r[0][3].add(i(0,t,pn.isFunction(o)?o:c,t.notifyWith)),r[1][3].add(i(0,t,pn.isFunction(n)?n:c)),r[2][3].add(i(0,t,pn.isFunction(e)?e:p))}).promise()},promise:function(n){return null!=n?pn.extend(n,o):o}},i={};return pn.each(r,function(n,t){var a=t[2],l=t[5];o[t[1]]=a.add,l&&a.add(function(){e=l},r[3-n][2].disable,r[0][2].lock),a.add(t[3].fire),i[t[0]]=function(){return i[t[0]+"With"](this===i?void 0:this,arguments),this},i[t[0]+"With"]=a.fireWith}),o.promise(i),n&&n.call(i,i),i},when:function(n){var r=arguments.length,t=r,e=Array(t),o=nn.call(arguments),i=pn.Deferred(),a=function(n){return function(t){e[n]=this,o[n]=arguments.length>1?nn.call(arguments):t,--r||i.resolveWith(e,o)}};if(r<=1&&(m(n,i.done(a(t)).resolve,i.reject,!r),"pending"===i.state()||pn.isFunction(o[t]&&o[t].then)))return i.then();for(;t--;)m(o[t],a(t),i.reject);return i.promise()}});var An=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;pn.Deferred.exceptionHook=function(n,r){t.console&&t.console.warn&&n&&An.test(n.name)&&t.console.warn("jQuery.Deferred exception: "+n.message,n.stack,r)},pn.readyException=function(n){t.setTimeout(function(){throw n})};var Sn=pn.Deferred();pn.fn.ready=function(n){return Sn.then(n).catch(function(n){pn.readyException(n)}),this},pn.extend({isReady:!1,readyWait:1,ready:function(n){(!0===n?--pn.readyWait:pn.isReady)||(pn.isReady=!0,!0!==n&&--pn.readyWait>0||Sn.resolveWith(J,[pn]))}}),pn.ready.then=Sn.then,"complete"===J.readyState||"loading"!==J.readyState&&!J.documentElement.doScroll?t.setTimeout(pn.ready):(J.addEventListener("DOMContentLoaded",f),t.addEventListener("load",f));var Dn=function(n,r,t,e,o,i,a){var l=0,s=n.length,d=null==t;if("object"===pn.type(t)){o=!0;for(l in t)Dn(n,r,l,t[l],!0,i,a)}else if(void 0!==e&&(o=!0,pn.isFunction(e)||(a=!0),d&&(a?(r.call(n,e),r=null):(d=r,r=function(n,r,t){return d.call(pn(n),t)})),r))for(;l<s;l++)r(n[l],t,a?e:e.call(n[l],l,r(n[l],t)));return o?n:d?r.call(n):s?r(n[0],t):i},Nn=function(n){return 1===n.nodeType||9===n.nodeType||!+n.nodeType};u.uid=1,u.prototype={cache:function(n){var r=n[this.expando];return r||(r={},Nn(n)&&(n.nodeType?n[this.expando]=r:Object.defineProperty(n,this.expando,{value:r,configurable:!0}))),r},set:function(n,r,t){var e,o=this.cache(n);if("string"==typeof r)o[pn.camelCase(r)]=t;else for(e in r)o[pn.camelCase(e)]=r[e];return o},get:function(n,r){return void 0===r?this.cache(n):n[this.expando]&&n[this.expando][pn.camelCase(r)]},access:function(n,r,t){return void 0===r||r&&"string"==typeof r&&void 0===t?this.get(n,r):(this.set(n,r,t),void 0!==t?t:r)},remove:function(n,r){var t,e=n[this.expando];if(void 0!==e){if(void 0!==r){t=(r=Array.isArray(r)?r.map(pn.camelCase):(r=pn.camelCase(r))in e?[r]:r.match(Cn)||[]).length;for(;t--;)delete e[r[t]]}(void 0===r||pn.isEmptyObject(e))&&(n.nodeType?n[this.expando]=void 0:delete n[this.expando])}},hasData:function(n){var r=n[this.expando];return void 0!==r&&!pn.isEmptyObject(r)}};var In=new u,On=new u,jn=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ln=/[A-Z]/g;pn.extend({hasData:function(n){return On.hasData(n)||In.hasData(n)},data:function(n,r,t){return On.access(n,r,t)},removeData:function(n,r){On.remove(n,r)},_data:function(n,r,t){return In.access(n,r,t)},_removeData:function(n,r){In.remove(n,r)}}),pn.fn.extend({data:function(n,r){var t,e,o,i=this[0],a=i&&i.attributes;if(void 0===n){if(this.length&&(o=On.get(i),1===i.nodeType&&!In.get(i,"hasDataAttrs"))){for(t=a.length;t--;)a[t]&&0===(e=a[t].name).indexOf("data-")&&(e=pn.camelCase(e.slice(5)),g(i,e,o[e]));In.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof n?this.each(function(){On.set(this,n)}):Dn(this,function(r){var t;if(i&&void 0===r){if(void 0!==(t=On.get(i,n)))return t;if(void 0!==(t=g(i,n)))return t}else this.each(function(){On.set(this,n,r)})},null,r,arguments.length>1,null,!0)},removeData:function(n){return this.each(function(){On.remove(this,n)})}}),pn.extend({queue:function(n,r,t){var e;if(n)return r=(r||"fx")+"queue",e=In.get(n,r),t&&(!e||Array.isArray(t)?e=In.access(n,r,pn.makeArray(t)):e.push(t)),e||[]},dequeue:function(n,r){r=r||"fx";var t=pn.queue(n,r),e=t.length,o=t.shift(),i=pn._queueHooks(n,r),a=function(){pn.dequeue(n,r)};"inprogress"===o&&(o=t.shift(),e--),o&&("fx"===r&&t.unshift("inprogress"),delete i.stop,o.call(n,a,i)),!e&&i&&i.empty.fire()},_queueHooks:function(n,r){var t=r+"queueHooks";return In.get(n,t)||In.access(n,t,{empty:pn.Callbacks("once memory").add(function(){In.remove(n,[r+"queue",t])})})}}),pn.fn.extend({queue:function(n,r){var t=2;return"string"!=typeof n&&(r=n,n="fx",t--),arguments.length<t?pn.queue(this[0],n):void 0===r?this:this.each(function(){var t=pn.queue(this,n,r);pn._queueHooks(this,n),"fx"===n&&"inprogress"!==t[0]&&pn.dequeue(this,n)})},dequeue:function(n){return this.each(function(){pn.dequeue(this,n)})},clearQueue:function(n){return this.queue(n||"fx",[])},promise:function(n,r){var t,e=1,o=pn.Deferred(),i=this,a=this.length,l=function(){--e||o.resolveWith(i,[i])};for("string"!=typeof n&&(r=n,n=void 0),n=n||"fx";a--;)(t=In.get(i[a],n+"queueHooks"))&&t.empty&&(e++,t.empty.add(l));return l(),o.promise(r)}});var Pn=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Hn=new RegExp("^(?:([+-])=|)("+Pn+")([a-z%]*)$","i"),Rn=["Top","Right","Bottom","Left"],Mn=function(n,r){return"none"===(n=r||n).style.display||""===n.style.display&&pn.contains(n.ownerDocument,n)&&"none"===pn.css(n,"display")},Fn=function(n,r,t,e){var o,i,a={};for(i in r)a[i]=n.style[i],n.style[i]=r[i];o=t.apply(n,e||[]);for(i in r)n.style[i]=a[i];return o},Wn={};pn.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(n){return"boolean"==typeof n?n?this.show():this.hide():this.each(function(){Mn(this)?pn(this).show():pn(this).hide()})}});var Bn=/^(?:checkbox|radio)$/i,qn=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,zn=/^$|\/(?:java|ecma)script/i,Un={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Un.optgroup=Un.option,Un.tbody=Un.tfoot=Un.colgroup=Un.caption=Un.thead,Un.th=Un.td;var Vn=/<|&#?\w+;/;!function(){var n=J.createDocumentFragment().appendChild(J.createElement("div")),r=J.createElement("input");r.setAttribute("type","radio"),r.setAttribute("checked","checked"),r.setAttribute("name","t"),n.appendChild(r),cn.checkClone=n.cloneNode(!0).cloneNode(!0).lastChild.checked,n.innerHTML="<textarea>x</textarea>",cn.noCloneChecked=!!n.cloneNode(!0).lastChild.defaultValue}();var Kn=J.documentElement,$n=/^key/,Qn=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Yn=/^([^.]*)(?:\.(.+)|)/;pn.event={global:{},add:function(n,r,t,e,o){var i,a,l,s,d,c,p,m,f,u,g,h=In.get(n);if(h)for(t.handler&&(t=(i=t).handler,o=i.selector),o&&pn.find.matchesSelector(Kn,o),t.guid||(t.guid=pn.guid++),(s=h.events)||(s=h.events={}),(a=h.handle)||(a=h.handle=function(r){return void 0!==pn&&pn.event.triggered!==r.type?pn.event.dispatch.apply(n,arguments):void 0}),d=(r=(r||"").match(Cn)||[""]).length;d--;)f=g=(l=Yn.exec(r[d])||[])[1],u=(l[2]||"").split(".").sort(),f&&(p=pn.event.special[f]||{},f=(o?p.delegateType:p.bindType)||f,p=pn.event.special[f]||{},c=pn.extend({type:f,origType:g,data:e,handler:t,guid:t.guid,selector:o,needsContext:o&&pn.expr.match.needsContext.test(o),namespace:u.join(".")},i),(m=s[f])||((m=s[f]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(n,e,u,a)||n.addEventListener&&n.addEventListener(f,a)),p.add&&(p.add.call(n,c),c.handler.guid||(c.handler.guid=t.guid)),o?m.splice(m.delegateCount++,0,c):m.push(c),pn.event.global[f]=!0)},remove:function(n,r,t,e,o){var i,a,l,s,d,c,p,m,f,u,g,h=In.hasData(n)&&In.get(n);if(h&&(s=h.events)){for(d=(r=(r||"").match(Cn)||[""]).length;d--;)if(l=Yn.exec(r[d])||[],f=g=l[1],u=(l[2]||"").split(".").sort(),f){for(p=pn.event.special[f]||{},m=s[f=(e?p.delegateType:p.bindType)||f]||[],l=l[2]&&new RegExp("(^|\\.)"+u.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=i=m.length;i--;)c=m[i],!o&&g!==c.origType||t&&t.guid!==c.guid||l&&!l.test(c.namespace)||e&&e!==c.selector&&("**"!==e||!c.selector)||(m.splice(i,1),c.selector&&m.delegateCount--,p.remove&&p.remove.call(n,c));a&&!m.length&&(p.teardown&&!1!==p.teardown.call(n,u,h.handle)||pn.removeEvent(n,f,h.handle),delete s[f])}else for(f in s)pn.event.remove(n,f+r[d],t,e,!0);pn.isEmptyObject(s)&&In.remove(n,"handle events")}},dispatch:function(n){var r,t,e,o,i,a,l=pn.event.fix(n),s=new Array(arguments.length),d=(In.get(this,"events")||{})[l.type]||[],c=pn.event.special[l.type]||{};for(s[0]=l,r=1;r<arguments.length;r++)s[r]=arguments[r];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(a=pn.event.handlers.call(this,l,d),r=0;(o=a[r++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,t=0;(i=o.handlers[t++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!l.rnamespace.test(i.namespace)||(l.handleObj=i,l.data=i.data,void 0!==(e=((pn.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,s))&&!1===(l.result=e)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(n,r){var t,e,o,i,a,l=[],s=r.delegateCount,d=n.target;if(s&&d.nodeType&&!("click"===n.type&&n.button>=1))for(;d!==this;d=d.parentNode||this)if(1===d.nodeType&&("click"!==n.type||!0!==d.disabled)){for(i=[],a={},t=0;t<s;t++)void 0===a[o=(e=r[t]).selector+" "]&&(a[o]=e.needsContext?pn(o,this).index(d)>-1:pn.find(o,this,null,[d]).length),a[o]&&i.push(e);i.length&&l.push({elem:d,handlers:i})}return d=this,s<r.length&&l.push({elem:d,handlers:r.slice(s)}),l},addProp:function(n,r){Object.defineProperty(pn.Event.prototype,n,{enumerable:!0,configurable:!0,get:pn.isFunction(r)?function(){if(this.originalEvent)return r(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[n]},set:function(r){Object.defineProperty(this,n,{enumerable:!0,configurable:!0,writable:!0,value:r})}})},fix:function(n){return n[pn.expando]?n:new pn.Event(n)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==E()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===E()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&l(this,"input"))return this.click(),!1},_default:function(n){return l(n.target,"a")}},beforeunload:{postDispatch:function(n){void 0!==n.result&&n.originalEvent&&(n.originalEvent.returnValue=n.result)}}}},pn.removeEvent=function(n,r,t){n.removeEventListener&&n.removeEventListener(r,t)},pn.Event=function(n,r){if(!(this instanceof pn.Event))return new pn.Event(n,r);n&&n.type?(this.originalEvent=n,this.type=n.type,this.isDefaultPrevented=n.defaultPrevented||void 0===n.defaultPrevented&&!1===n.returnValue?k:_,this.target=n.target&&3===n.target.nodeType?n.target.parentNode:n.target,this.currentTarget=n.currentTarget,this.relatedTarget=n.relatedTarget):this.type=n,r&&pn.extend(this,r),this.timeStamp=n&&n.timeStamp||pn.now(),this[pn.expando]=!0},pn.Event.prototype={constructor:pn.Event,isDefaultPrevented:_,isPropagationStopped:_,isImmediatePropagationStopped:_,isSimulated:!1,preventDefault:function(){var n=this.originalEvent;this.isDefaultPrevented=k,n&&!this.isSimulated&&n.preventDefault()},stopPropagation:function(){var n=this.originalEvent;this.isPropagationStopped=k,n&&!this.isSimulated&&n.stopPropagation()},stopImmediatePropagation:function(){var n=this.originalEvent;this.isImmediatePropagationStopped=k,n&&!this.isSimulated&&n.stopImmediatePropagation(),this.stopPropagation()}},pn.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(n){var r=n.button;return null==n.which&&$n.test(n.type)?null!=n.charCode?n.charCode:n.keyCode:!n.which&&void 0!==r&&Qn.test(n.type)?1&r?1:2&r?3:4&r?2:0:n.which}},pn.event.addProp),pn.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(n,r){pn.event.special[n]={delegateType:r,bindType:r,handle:function(n){var t,e=n.relatedTarget,o=n.handleObj;return e&&(e===this||pn.contains(this,e))||(n.type=o.origType,t=o.handler.apply(this,arguments),n.type=r),t}}}),pn.fn.extend({on:function(n,r,t,e){return T(this,n,r,t,e)},one:function(n,r,t,e){return T(this,n,r,t,e,1)},off:function(n,r,t){var e,o;if(n&&n.preventDefault&&n.handleObj)return e=n.handleObj,pn(n.delegateTarget).off(e.namespace?e.origType+"."+e.namespace:e.origType,e.selector,e.handler),this;if("object"==typeof n){for(o in n)this.off(o,r,n[o]);return this}return!1!==r&&"function"!=typeof r||(t=r,r=void 0),!1===t&&(t=_),this.each(function(){pn.event.remove(this,n,t,r)})}});var Gn=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Xn=/<script|<style|<link/i,Jn=/checked\s*(?:[^=]|=\s*.checked.)/i,Zn=/^true\/(.*)/,nr=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;pn.extend({htmlPrefilter:function(n){return n.replace(Gn,"<$1></$2>")},clone:function(n,r,t){var e,o,i,a,l=n.cloneNode(!0),s=pn.contains(n.ownerDocument,n);if(!(cn.noCloneChecked||1!==n.nodeType&&11!==n.nodeType||pn.isXMLDoc(n)))for(a=x(l),e=0,o=(i=x(n)).length;e<o;e++)N(i[e],a[e]);if(r)if(t)for(i=i||x(n),a=a||x(l),e=0,o=i.length;e<o;e++)D(i[e],a[e]);else D(n,l);return(a=x(l,"script")).length>0&&y(a,!s&&x(n,"script")),l},cleanData:function(n){for(var r,t,e,o=pn.event.special,i=0;void 0!==(t=n[i]);i++)if(Nn(t)){if(r=t[In.expando]){if(r.events)for(e in r.events)o[e]?pn.event.remove(t,e):pn.removeEvent(t,e,r.handle);t[In.expando]=void 0}t[On.expando]&&(t[On.expando]=void 0)}}}),pn.fn.extend({detach:function(n){return O(this,n,!0)},remove:function(n){return O(this,n)},text:function(n){return Dn(this,function(n){return void 0===n?pn.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=n)})},null,n,arguments.length)},append:function(){return I(this,arguments,function(n){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){C(this,n).appendChild(n)}})},prepend:function(){return I(this,arguments,function(n){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var r=C(this,n);r.insertBefore(n,r.firstChild)}})},before:function(){return I(this,arguments,function(n){this.parentNode&&this.parentNode.insertBefore(n,this)})},after:function(){return I(this,arguments,function(n){this.parentNode&&this.parentNode.insertBefore(n,this.nextSibling)})},empty:function(){for(var n,r=0;null!=(n=this[r]);r++)1===n.nodeType&&(pn.cleanData(x(n,!1)),n.textContent="");return this},clone:function(n,r){return n=null!=n&&n,r=null==r?n:r,this.map(function(){return pn.clone(this,n,r)})},html:function(n){return Dn(this,function(n){var r=this[0]||{},t=0,e=this.length;if(void 0===n&&1===r.nodeType)return r.innerHTML;if("string"==typeof n&&!Xn.test(n)&&!Un[(qn.exec(n)||["",""])[1].toLowerCase()]){n=pn.htmlPrefilter(n);try{for(;t<e;t++)1===(r=this[t]||{}).nodeType&&(pn.cleanData(x(r,!1)),r.innerHTML=n);r=0}catch(n){}}r&&this.empty().append(n)},null,n,arguments.length)},replaceWith:function(){var n=[];return I(this,arguments,function(r){var t=this.parentNode;pn.inArray(this,n)<0&&(pn.cleanData(x(this)),t&&t.replaceChild(r,this))},n)}}),pn.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(n,r){pn.fn[n]=function(n){for(var t,e=[],o=pn(n),i=o.length-1,a=0;a<=i;a++)t=a===i?this:this.clone(!0),pn(o[a])[r](t),tn.apply(e,t.get());return this.pushStack(e)}});var rr=/^margin/,tr=new RegExp("^("+Pn+")(?!px)[a-z%]+$","i"),er=function(n){var r=n.ownerDocument.defaultView;return r&&r.opener||(r=t),r.getComputedStyle(n)};!function(){function n(){if(l){l.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",l.innerHTML="",Kn.appendChild(a);var n=t.getComputedStyle(l);r="1%"!==n.top,i="2px"===n.marginLeft,e="4px"===n.width,l.style.marginRight="50%",o="4px"===n.marginRight,Kn.removeChild(a),l=null}}var r,e,o,i,a=J.createElement("div"),l=J.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",cn.clearCloneStyle="content-box"===l.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(l),pn.extend(cn,{pixelPosition:function(){return n(),r},boxSizingReliable:function(){return n(),e},pixelMarginRight:function(){return n(),o},reliableMarginLeft:function(){return n(),i}}))}();var or=/^(none|table(?!-c[ea]).+)/,ir=/^--/,ar={position:"absolute",visibility:"hidden",display:"block"},lr={letterSpacing:"0",fontWeight:"400"},sr=["Webkit","Moz","ms"],dr=J.createElement("div").style;pn.extend({cssHooks:{opacity:{get:function(n,r){if(r){var t=j(n,"opacity");return""===t?"1":t}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(n,r,t,e){if(n&&3!==n.nodeType&&8!==n.nodeType&&n.style){var o,i,a,l=pn.camelCase(r),s=ir.test(r),d=n.style;if(s||(r=P(l)),a=pn.cssHooks[r]||pn.cssHooks[l],void 0===t)return a&&"get"in a&&void 0!==(o=a.get(n,!1,e))?o:d[r];"string"==(i=typeof t)&&(o=Hn.exec(t))&&o[1]&&(t=h(n,r,o),i="number"),null!=t&&t==t&&("number"===i&&(t+=o&&o[3]||(pn.cssNumber[l]?"":"px")),cn.clearCloneStyle||""!==t||0!==r.indexOf("background")||(d[r]="inherit"),a&&"set"in a&&void 0===(t=a.set(n,t,e))||(s?d.setProperty(r,t):d[r]=t))}},css:function(n,r,t,e){var o,i,a,l=pn.camelCase(r);return ir.test(r)||(r=P(l)),(a=pn.cssHooks[r]||pn.cssHooks[l])&&"get"in a&&(o=a.get(n,!0,t)),void 0===o&&(o=j(n,r,e)),"normal"===o&&r in lr&&(o=lr[r]),""===t||t?(i=parseFloat(o),!0===t||isFinite(i)?i||0:o):o}}),pn.each(["height","width"],function(n,r){pn.cssHooks[r]={get:function(n,t,e){if(t)return!or.test(pn.css(n,"display"))||n.getClientRects().length&&n.getBoundingClientRect().width?M(n,r,e):Fn(n,ar,function(){return M(n,r,e)})},set:function(n,t,e){var o,i=e&&er(n),a=e&&R(n,r,e,"border-box"===pn.css(n,"boxSizing",!1,i),i);return a&&(o=Hn.exec(t))&&"px"!==(o[3]||"px")&&(n.style[r]=t,t=pn.css(n,r)),H(0,t,a)}}}),pn.cssHooks.marginLeft=L(cn.reliableMarginLeft,function(n,r){if(r)return(parseFloat(j(n,"marginLeft"))||n.getBoundingClientRect().left-Fn(n,{marginLeft:0},function(){return n.getBoundingClientRect().left}))+"px"}),pn.each({margin:"",padding:"",border:"Width"},function(n,r){pn.cssHooks[n+r]={expand:function(t){for(var e=0,o={},i="string"==typeof t?t.split(" "):[t];e<4;e++)o[n+Rn[e]+r]=i[e]||i[e-2]||i[0];return o}},rr.test(n)||(pn.cssHooks[n+r].set=H)}),pn.fn.extend({css:function(n,r){return Dn(this,function(n,r,t){var e,o,i={},a=0;if(Array.isArray(r)){for(e=er(n),o=r.length;a<o;a++)i[r[a]]=pn.css(n,r[a],!1,e);return i}return void 0!==t?pn.style(n,r,t):pn.css(n,r)},n,r,arguments.length>1)}}),pn.Tween=F,(F.prototype={constructor:F,init:function(n,r,t,e,o,i){this.elem=n,this.prop=t,this.easing=o||pn.easing._default,this.options=r,this.start=this.now=this.cur(),this.end=e,this.unit=i||(pn.cssNumber[t]?"":"px")},cur:function(){var n=F.propHooks[this.prop];return n&&n.get?n.get(this):F.propHooks._default.get(this)},run:function(n){var r,t=F.propHooks[this.prop];return this.options.duration?this.pos=r=pn.easing[this.easing](n,this.options.duration*n,0,1,this.options.duration):this.pos=r=n,this.now=(this.end-this.start)*r+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),t&&t.set?t.set(this):F.propHooks._default.set(this),this}}).init.prototype=F.prototype,(F.propHooks={_default:{get:function(n){var r;return 1!==n.elem.nodeType||null!=n.elem[n.prop]&&null==n.elem.style[n.prop]?n.elem[n.prop]:(r=pn.css(n.elem,n.prop,""))&&"auto"!==r?r:0},set:function(n){pn.fx.step[n.prop]?pn.fx.step[n.prop](n):1!==n.elem.nodeType||null==n.elem.style[pn.cssProps[n.prop]]&&!pn.cssHooks[n.prop]?n.elem[n.prop]=n.now:pn.style(n.elem,n.prop,n.now+n.unit)}}}).scrollTop=F.propHooks.scrollLeft={set:function(n){n.elem.nodeType&&n.elem.parentNode&&(n.elem[n.prop]=n.now)}},pn.easing={linear:function(n){return n},swing:function(n){return.5-Math.cos(n*Math.PI)/2},_default:"swing"},pn.fx=F.prototype.init,pn.fx.step={};var cr,pr,mr=/^(?:toggle|show|hide)$/,fr=/queueHooks$/;pn.Animation=pn.extend(U,{tweeners:{"*":[function(n,r){var t=this.createTween(n,r);return h(t.elem,n,Hn.exec(r),t),t}]},tweener:function(n,r){pn.isFunction(n)?(r=n,n=["*"]):n=n.match(Cn);for(var t,e=0,o=n.length;e<o;e++)t=n[e],U.tweeners[t]=U.tweeners[t]||[],U.tweeners[t].unshift(r)},prefilters:[function(n,r,t){var e,o,i,a,l,s,d,c,p="width"in r||"height"in r,m=this,f={},u=n.style,g=n.nodeType&&Mn(n),h=In.get(n,"fxshow");t.queue||(null==(a=pn._queueHooks(n,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,m.always(function(){m.always(function(){a.unqueued--,pn.queue(n,"fx").length||a.empty.fire()})}));for(e in r)if(o=r[e],mr.test(o)){if(delete r[e],i=i||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!h||void 0===h[e])continue;g=!0}f[e]=h&&h[e]||pn.style(n,e)}if((s=!pn.isEmptyObject(r))||!pn.isEmptyObject(f)){p&&1===n.nodeType&&(t.overflow=[u.overflow,u.overflowX,u.overflowY],null==(d=h&&h.display)&&(d=In.get(n,"display")),"none"===(c=pn.css(n,"display"))&&(d?c=d:(v([n],!0),d=n.style.display||d,c=pn.css(n,"display"),v([n]))),("inline"===c||"inline-block"===c&&null!=d)&&"none"===pn.css(n,"float")&&(s||(m.done(function(){u.display=d}),null==d&&(c=u.display,d="none"===c?"":c)),u.display="inline-block")),t.overflow&&(u.overflow="hidden",m.always(function(){u.overflow=t.overflow[0],u.overflowX=t.overflow[1],u.overflowY=t.overflow[2]})),s=!1;for(e in f)s||(h?"hidden"in h&&(g=h.hidden):h=In.access(n,"fxshow",{display:d}),i&&(h.hidden=!g),g&&v([n],!0),m.done(function(){g||v([n]),In.remove(n,"fxshow");for(e in f)pn.style(n,e,f[e])})),s=z(g?h[e]:0,e,m),e in h||(h[e]=s.start,g&&(s.end=s.start,s.start=0))}}],prefilter:function(n,r){r?U.prefilters.unshift(n):U.prefilters.push(n)}}),pn.speed=function(n,r,t){var e=n&&"object"==typeof n?pn.extend({},n):{complete:t||!t&&r||pn.isFunction(n)&&n,duration:n,easing:t&&r||r&&!pn.isFunction(r)&&r};return pn.fx.off?e.duration=0:"number"!=typeof e.duration&&(e.duration in pn.fx.speeds?e.duration=pn.fx.speeds[e.duration]:e.duration=pn.fx.speeds._default),null!=e.queue&&!0!==e.queue||(e.queue="fx"),e.old=e.complete,e.complete=function(){pn.isFunction(e.old)&&e.old.call(this),e.queue&&pn.dequeue(this,e.queue)},e},pn.fn.extend({fadeTo:function(n,r,t,e){return this.filter(Mn).css("opacity",0).show().end().animate({opacity:r},n,t,e)},animate:function(n,r,t,e){var o=pn.isEmptyObject(n),i=pn.speed(r,t,e),a=function(){var r=U(this,pn.extend({},n),i);(o||In.get(this,"finish"))&&r.stop(!0)};return a.finish=a,o||!1===i.queue?this.each(a):this.queue(i.queue,a)},stop:function(n,r,t){var e=function(n){var r=n.stop;delete n.stop,r(t)};return"string"!=typeof n&&(t=r,r=n,n=void 0),r&&!1!==n&&this.queue(n||"fx",[]),this.each(function(){var r=!0,o=null!=n&&n+"queueHooks",i=pn.timers,a=In.get(this);if(o)a[o]&&a[o].stop&&e(a[o]);else for(o in a)a[o]&&a[o].stop&&fr.test(o)&&e(a[o]);for(o=i.length;o--;)i[o].elem!==this||null!=n&&i[o].queue!==n||(i[o].anim.stop(t),r=!1,i.splice(o,1));!r&&t||pn.dequeue(this,n)})},finish:function(n){return!1!==n&&(n=n||"fx"),this.each(function(){var r,t=In.get(this),e=t[n+"queue"],o=t[n+"queueHooks"],i=pn.timers,a=e?e.length:0;for(t.finish=!0,pn.queue(this,n,[]),o&&o.stop&&o.stop.call(this,!0),r=i.length;r--;)i[r].elem===this&&i[r].queue===n&&(i[r].anim.stop(!0),i.splice(r,1));for(r=0;r<a;r++)e[r]&&e[r].finish&&e[r].finish.call(this);delete t.finish})}}),pn.each(["toggle","show","hide"],function(n,r){var t=pn.fn[r];pn.fn[r]=function(n,e,o){return null==n||"boolean"==typeof n?t.apply(this,arguments):this.animate(q(r,!0),n,e,o)}}),pn.each({slideDown:q("show"),slideUp:q("hide"),slideToggle:q("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(n,r){pn.fn[n]=function(n,t,e){return this.animate(r,n,t,e)}}),pn.timers=[],pn.fx.tick=function(){var n,r=0,t=pn.timers;for(cr=pn.now();r<t.length;r++)(n=t[r])()||t[r]!==n||t.splice(r--,1);t.length||pn.fx.stop(),cr=void 0},pn.fx.timer=function(n){pn.timers.push(n),pn.fx.start()},pn.fx.interval=13,pn.fx.start=function(){pr||(pr=!0,W())},pn.fx.stop=function(){pr=null},pn.fx.speeds={slow:600,fast:200,_default:400},pn.fn.delay=function(n,r){return n=pn.fx?pn.fx.speeds[n]||n:n,r=r||"fx",this.queue(r,function(r,e){var o=t.setTimeout(r,n);e.stop=function(){t.clearTimeout(o)}})},function(){var n=J.createElement("input"),r=J.createElement("select").appendChild(J.createElement("option"));n.type="checkbox",cn.checkOn=""!==n.value,cn.optSelected=r.selected,(n=J.createElement("input")).value="t",n.type="radio",cn.radioValue="t"===n.value}();var ur,gr=pn.expr.attrHandle;pn.fn.extend({attr:function(n,r){return Dn(this,pn.attr,n,r,arguments.length>1)},removeAttr:function(n){return this.each(function(){pn.removeAttr(this,n)})}}),pn.extend({attr:function(n,r,t){var e,o,i=n.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===n.getAttribute?pn.prop(n,r,t):(1===i&&pn.isXMLDoc(n)||(o=pn.attrHooks[r.toLowerCase()]||(pn.expr.match.bool.test(r)?ur:void 0)),void 0!==t?null===t?void pn.removeAttr(n,r):o&&"set"in o&&void 0!==(e=o.set(n,t,r))?e:(n.setAttribute(r,t+""),t):o&&"get"in o&&null!==(e=o.get(n,r))?e:null==(e=pn.find.attr(n,r))?void 0:e)},attrHooks:{type:{set:function(n,r){if(!cn.radioValue&&"radio"===r&&l(n,"input")){var t=n.value;return n.setAttribute("type",r),t&&(n.value=t),r}}}},removeAttr:function(n,r){var t,e=0,o=r&&r.match(Cn);if(o&&1===n.nodeType)for(;t=o[e++];)n.removeAttribute(t)}}),ur={set:function(n,r,t){return!1===r?pn.removeAttr(n,t):n.setAttribute(t,t),t}},pn.each(pn.expr.match.bool.source.match(/\w+/g),function(n,r){var t=gr[r]||pn.find.attr;gr[r]=function(n,r,e){var o,i,a=r.toLowerCase();return e||(i=gr[a],gr[a]=o,o=null!=t(n,r,e)?a:null,gr[a]=i),o}});var hr=/^(?:input|select|textarea|button)$/i,br=/^(?:a|area)$/i;pn.fn.extend({prop:function(n,r){return Dn(this,pn.prop,n,r,arguments.length>1)},removeProp:function(n){return this.each(function(){delete this[pn.propFix[n]||n]})}}),pn.extend({prop:function(n,r,t){var e,o,i=n.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&pn.isXMLDoc(n)||(r=pn.propFix[r]||r,o=pn.propHooks[r]),void 0!==t?o&&"set"in o&&void 0!==(e=o.set(n,t,r))?e:n[r]=t:o&&"get"in o&&null!==(e=o.get(n,r))?e:n[r]},propHooks:{tabIndex:{get:function(n){var r=pn.find.attr(n,"tabindex");return r?parseInt(r,10):hr.test(n.nodeName)||br.test(n.nodeName)&&n.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),cn.optSelected||(pn.propHooks.selected={get:function(n){var r=n.parentNode;return r&&r.parentNode&&r.parentNode.selectedIndex,null},set:function(n){var r=n.parentNode;r&&(r.selectedIndex,r.parentNode&&r.parentNode.selectedIndex)}}),pn.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){pn.propFix[this.toLowerCase()]=this}),pn.fn.extend({addClass:function(n){var r,t,e,o,i,a,l,s=0;if(pn.isFunction(n))return this.each(function(r){pn(this).addClass(n.call(this,r,K(this)))});if("string"==typeof n&&n)for(r=n.match(Cn)||[];t=this[s++];)if(o=K(t),e=1===t.nodeType&&" "+V(o)+" "){for(a=0;i=r[a++];)e.indexOf(" "+i+" ")<0&&(e+=i+" ");o!==(l=V(e))&&t.setAttribute("class",l)}return this},removeClass:function(n){var r,t,e,o,i,a,l,s=0;if(pn.isFunction(n))return this.each(function(r){pn(this).removeClass(n.call(this,r,K(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof n&&n)for(r=n.match(Cn)||[];t=this[s++];)if(o=K(t),e=1===t.nodeType&&" "+V(o)+" "){for(a=0;i=r[a++];)for(;e.indexOf(" "+i+" ")>-1;)e=e.replace(" "+i+" "," ");o!==(l=V(e))&&t.setAttribute("class",l)}return this},toggleClass:function(n,r){var t=typeof n;return"boolean"==typeof r&&"string"===t?r?this.addClass(n):this.removeClass(n):pn.isFunction(n)?this.each(function(t){pn(this).toggleClass(n.call(this,t,K(this),r),r)}):this.each(function(){var r,e,o,i;if("string"===t)for(e=0,o=pn(this),i=n.match(Cn)||[];r=i[e++];)o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==n&&"boolean"!==t||((r=K(this))&&In.set(this,"__className__",r),this.setAttribute&&this.setAttribute("class",r||!1===n?"":In.get(this,"__className__")||""))})},hasClass:function(n){var r,t,e=0;for(r=" "+n+" ";t=this[e++];)if(1===t.nodeType&&(" "+V(K(t))+" ").indexOf(r)>-1)return!0;return!1}});var vr=/\r/g;pn.fn.extend({val:function(n){var r,t,e,o=this[0];if(arguments.length)return e=pn.isFunction(n),this.each(function(t){var o;1===this.nodeType&&(null==(o=e?n.call(this,t,pn(this).val()):n)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=pn.map(o,function(n){return null==n?"":n+""})),(r=pn.valHooks[this.type]||pn.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&void 0!==r.set(this,o,"value")||(this.value=o))});if(o)return(r=pn.valHooks[o.type]||pn.valHooks[o.nodeName.toLowerCase()])&&"get"in r&&void 0!==(t=r.get(o,"value"))?t:"string"==typeof(t=o.value)?t.replace(vr,""):null==t?"":t}}),pn.extend({valHooks:{option:{get:function(n){var r=pn.find.attr(n,"value");return null!=r?r:V(pn.text(n))}},select:{get:function(n){var r,t,e,o=n.options,i=n.selectedIndex,a="select-one"===n.type,s=a?null:[],d=a?i+1:o.length;for(e=i<0?d:a?i:0;e<d;e++)if(((t=o[e]).selected||e===i)&&!t.disabled&&(!t.parentNode.disabled||!l(t.parentNode,"optgroup"))){if(r=pn(t).val(),a)return r;s.push(r)}return s},set:function(n,r){for(var t,e,o=n.options,i=pn.makeArray(r),a=o.length;a--;)((e=o[a]).selected=pn.inArray(pn.valHooks.option.get(e),i)>-1)&&(t=!0);return t||(n.selectedIndex=-1),i}}}}),pn.each(["radio","checkbox"],function(){pn.valHooks[this]={set:function(n,r){if(Array.isArray(r))return n.checked=pn.inArray(pn(n).val(),r)>-1}},cn.checkOn||(pn.valHooks[this].get=function(n){return null===n.getAttribute("value")?"on":n.value})});var xr=/^(?:focusinfocus|focusoutblur)$/;pn.extend(pn.event,{trigger:function(n,r,e,o){var i,a,l,s,d,c,p,m=[e||J],f=ln.call(n,"type")?n.type:n,u=ln.call(n,"namespace")?n.namespace.split("."):[];if(a=l=e=e||J,3!==e.nodeType&&8!==e.nodeType&&!xr.test(f+pn.event.triggered)&&(f.indexOf(".")>-1&&(f=(u=f.split(".")).shift(),u.sort()),d=f.indexOf(":")<0&&"on"+f,n=n[pn.expando]?n:new pn.Event(f,"object"==typeof n&&n),n.isTrigger=o?2:3,n.namespace=u.join("."),n.rnamespace=n.namespace?new RegExp("(^|\\.)"+u.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,n.result=void 0,n.target||(n.target=e),r=null==r?[n]:pn.makeArray(r,[n]),p=pn.event.special[f]||{},o||!p.trigger||!1!==p.trigger.apply(e,r))){if(!o&&!p.noBubble&&!pn.isWindow(e)){for(s=p.delegateType||f,xr.test(s+f)||(a=a.parentNode);a;a=a.parentNode)m.push(a),l=a;l===(e.ownerDocument||J)&&m.push(l.defaultView||l.parentWindow||t)}for(i=0;(a=m[i++])&&!n.isPropagationStopped();)n.type=i>1?s:p.bindType||f,(c=(In.get(a,"events")||{})[n.type]&&In.get(a,"handle"))&&c.apply(a,r),(c=d&&a[d])&&c.apply&&Nn(a)&&(n.result=c.apply(a,r),!1===n.result&&n.preventDefault());return n.type=f,o||n.isDefaultPrevented()||p._default&&!1!==p._default.apply(m.pop(),r)||!Nn(e)||d&&pn.isFunction(e[f])&&!pn.isWindow(e)&&((l=e[d])&&(e[d]=null),pn.event.triggered=f,e[f](),pn.event.triggered=void 0,l&&(e[d]=l)),n.result}},simulate:function(n,r,t){var e=pn.extend(new pn.Event,t,{type:n,isSimulated:!0});pn.event.trigger(e,null,r)}}),pn.fn.extend({trigger:function(n,r){return this.each(function(){pn.event.trigger(n,r,this)})},triggerHandler:function(n,r){var t=this[0];if(t)return pn.event.trigger(n,r,t,!0)}}),pn.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(n,r){pn.fn[r]=function(n,t){return arguments.length>0?this.on(r,null,n,t):this.trigger(r)}}),pn.fn.extend({hover:function(n,r){return this.mouseenter(n).mouseleave(r||n)}}),cn.focusin="onfocusin"in t,cn.focusin||pn.each({focus:"focusin",blur:"focusout"},function(n,r){var t=function(n){pn.event.simulate(r,n.target,pn.event.fix(n))};pn.event.special[r]={setup:function(){var e=this.ownerDocument||this,o=In.access(e,r);o||e.addEventListener(n,t,!0),In.access(e,r,(o||0)+1)},teardown:function(){var e=this.ownerDocument||this,o=In.access(e,r)-1;o?In.access(e,r,o):(e.removeEventListener(n,t,!0),In.remove(e,r))}}});var yr=t.location,wr=pn.now(),kr=/\?/;pn.parseXML=function(n){var r;if(!n||"string"!=typeof n)return null;try{r=(new t.DOMParser).parseFromString(n,"text/xml")}catch(n){r=void 0}return r&&!r.getElementsByTagName("parsererror").length||pn.error("Invalid XML: "+n),r};var _r=/\[\]$/,Er=/\r?\n/g,Tr=/^(?:submit|button|image|reset|file)$/i,Cr=/^(?:input|select|textarea|keygen)/i;pn.param=function(n,r){var t,e=[],o=function(n,r){var t=pn.isFunction(r)?r():r;e[e.length]=encodeURIComponent(n)+"="+encodeURIComponent(null==t?"":t)};if(Array.isArray(n)||n.jquery&&!pn.isPlainObject(n))pn.each(n,function(){o(this.name,this.value)});else for(t in n)$(t,n[t],r,o);return e.join("&")},pn.fn.extend({serialize:function(){return pn.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var n=pn.prop(this,"elements");return n?pn.makeArray(n):this}).filter(function(){var n=this.type;return this.name&&!pn(this).is(":disabled")&&Cr.test(this.nodeName)&&!Tr.test(n)&&(this.checked||!Bn.test(n))}).map(function(n,r){var t=pn(this).val();return null==t?null:Array.isArray(t)?pn.map(t,function(n){return{name:r.name,value:n.replace(Er,"\r\n")}}):{name:r.name,value:t.replace(Er,"\r\n")}}).get()}});var Ar=/%20/g,Sr=/#.*$/,Dr=/([?&])_=[^&]*/,Nr=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ir=/^(?:GET|HEAD)$/,Or=/^\/\//,jr={},Lr={},Pr="*/".concat("*"),Hr=J.createElement("a");Hr.href=yr.href,pn.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:yr.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(yr.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Pr,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":pn.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(n,r){return r?G(G(n,pn.ajaxSettings),r):G(pn.ajaxSettings,n)},ajaxPrefilter:Q(jr),ajaxTransport:Q(Lr),ajax:function(n,r){function e(n,r,e,l){var d,m,f,y,w,k=r;c||(c=!0,s&&t.clearTimeout(s),o=void 0,a=l||"",_.readyState=n>0?4:0,d=n>=200&&n<300||304===n,e&&(y=function(n,r,t){for(var e,o,i,a,l=n.contents,s=n.dataTypes;"*"===s[0];)s.shift(),void 0===e&&(e=n.mimeType||r.getResponseHeader("Content-Type"));if(e)for(o in l)if(l[o]&&l[o].test(e)){s.unshift(o);break}if(s[0]in t)i=s[0];else{for(o in t){if(!s[0]||n.converters[o+" "+s[0]]){i=o;break}a||(a=o)}i=i||a}if(i)return i!==s[0]&&s.unshift(i),t[i]}(u,_,e)),y=function(n,r,t,e){var o,i,a,l,s,d={},c=n.dataTypes.slice();if(c[1])for(a in n.converters)d[a.toLowerCase()]=n.converters[a];for(i=c.shift();i;)if(n.responseFields[i]&&(t[n.responseFields[i]]=r),!s&&e&&n.dataFilter&&(r=n.dataFilter(r,n.dataType)),s=i,i=c.shift())if("*"===i)i=s;else if("*"!==s&&s!==i){if(!(a=d[s+" "+i]||d["* "+i]))for(o in d)if((l=o.split(" "))[1]===i&&(a=d[s+" "+l[0]]||d["* "+l[0]])){!0===a?a=d[o]:!0!==d[o]&&(i=l[0],c.unshift(l[1]));break}if(!0!==a)if(a&&n.throws)r=a(r);else try{r=a(r)}catch(n){return{state:"parsererror",error:a?n:"No conversion from "+s+" to "+i}}}return{state:"success",data:r}}(u,y,_,d),d?(u.ifModified&&((w=_.getResponseHeader("Last-Modified"))&&(pn.lastModified[i]=w),(w=_.getResponseHeader("etag"))&&(pn.etag[i]=w)),204===n||"HEAD"===u.type?k="nocontent":304===n?k="notmodified":(k=y.state,m=y.data,d=!(f=y.error))):(f=k,!n&&k||(k="error",n<0&&(n=0))),_.status=n,_.statusText=(r||k)+"",d?b.resolveWith(g,[m,k,_]):b.rejectWith(g,[_,k,f]),_.statusCode(x),x=void 0,p&&h.trigger(d?"ajaxSuccess":"ajaxError",[_,u,d?m:f]),v.fireWith(g,[_,k]),p&&(h.trigger("ajaxComplete",[_,u]),--pn.active||pn.event.trigger("ajaxStop")))}"object"==typeof n&&(r=n,n=void 0),r=r||{};var o,i,a,l,s,d,c,p,m,f,u=pn.ajaxSetup({},r),g=u.context||u,h=u.context&&(g.nodeType||g.jquery)?pn(g):pn.event,b=pn.Deferred(),v=pn.Callbacks("once memory"),x=u.statusCode||{},y={},w={},k="canceled",_={readyState:0,getResponseHeader:function(n){var r;if(c){if(!l)for(l={};r=Nr.exec(a);)l[r[1].toLowerCase()]=r[2];r=l[n.toLowerCase()]}return null==r?null:r},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(n,r){return null==c&&(n=w[n.toLowerCase()]=w[n.toLowerCase()]||n,y[n]=r),this},overrideMimeType:function(n){return null==c&&(u.mimeType=n),this},statusCode:function(n){var r;if(n)if(c)_.always(n[_.status]);else for(r in n)x[r]=[x[r],n[r]];return this},abort:function(n){var r=n||k;return o&&o.abort(r),e(0,r),this}};if(b.promise(_),u.url=((n||u.url||yr.href)+"").replace(Or,yr.protocol+"//"),u.type=r.method||r.type||u.method||u.type,u.dataTypes=(u.dataType||"*").toLowerCase().match(Cn)||[""],null==u.crossDomain){d=J.createElement("a");try{d.href=u.url,d.href=d.href,u.crossDomain=Hr.protocol+"//"+Hr.host!=d.protocol+"//"+d.host}catch(n){u.crossDomain=!0}}if(u.data&&u.processData&&"string"!=typeof u.data&&(u.data=pn.param(u.data,u.traditional)),Y(jr,u,r,_),c)return _;(p=pn.event&&u.global)&&0==pn.active++&&pn.event.trigger("ajaxStart"),u.type=u.type.toUpperCase(),u.hasContent=!Ir.test(u.type),i=u.url.replace(Sr,""),u.hasContent?u.data&&u.processData&&0===(u.contentType||"").indexOf("application/x-www-form-urlencoded")&&(u.data=u.data.replace(Ar,"+")):(f=u.url.slice(i.length),u.data&&(i+=(kr.test(i)?"&":"?")+u.data,delete u.data),!1===u.cache&&(i=i.replace(Dr,"$1"),f=(kr.test(i)?"&":"?")+"_="+wr+++f),u.url=i+f),u.ifModified&&(pn.lastModified[i]&&_.setRequestHeader("If-Modified-Since",pn.lastModified[i]),pn.etag[i]&&_.setRequestHeader("If-None-Match",pn.etag[i])),(u.data&&u.hasContent&&!1!==u.contentType||r.contentType)&&_.setRequestHeader("Content-Type",u.contentType),_.setRequestHeader("Accept",u.dataTypes[0]&&u.accepts[u.dataTypes[0]]?u.accepts[u.dataTypes[0]]+("*"!==u.dataTypes[0]?", "+Pr+"; q=0.01":""):u.accepts["*"]);for(m in u.headers)_.setRequestHeader(m,u.headers[m]);if(u.beforeSend&&(!1===u.beforeSend.call(g,_,u)||c))return _.abort();if(k="abort",v.add(u.complete),_.done(u.success),_.fail(u.error),o=Y(Lr,u,r,_)){if(_.readyState=1,p&&h.trigger("ajaxSend",[_,u]),c)return _;u.async&&u.timeout>0&&(s=t.setTimeout(function(){_.abort("timeout")},u.timeout));try{c=!1,o.send(y,e)}catch(n){if(c)throw n;e(-1,n)}}else e(-1,"No Transport");return _},getJSON:function(n,r,t){return pn.get(n,r,t,"json")},getScript:function(n,r){return pn.get(n,void 0,r,"script")}}),pn.each(["get","post"],function(n,r){pn[r]=function(n,t,e,o){return pn.isFunction(t)&&(o=o||e,e=t,t=void 0),pn.ajax(pn.extend({url:n,type:r,dataType:o,data:t,success:e},pn.isPlainObject(n)&&n))}}),pn._evalUrl=function(n){return pn.ajax({url:n,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},pn.fn.extend({wrapAll:function(n){var r;return this[0]&&(pn.isFunction(n)&&(n=n.call(this[0])),r=pn(n,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&r.insertBefore(this[0]),r.map(function(){for(var n=this;n.firstElementChild;)n=n.firstElementChild;return n}).append(this)),this},wrapInner:function(n){return pn.isFunction(n)?this.each(function(r){pn(this).wrapInner(n.call(this,r))}):this.each(function(){var r=pn(this),t=r.contents();t.length?t.wrapAll(n):r.append(n)})},wrap:function(n){var r=pn.isFunction(n);return this.each(function(t){pn(this).wrapAll(r?n.call(this,t):n)})},unwrap:function(n){return this.parent(n).not("body").each(function(){pn(this).replaceWith(this.childNodes)}),this}}),pn.expr.pseudos.hidden=function(n){return!pn.expr.pseudos.visible(n)},pn.expr.pseudos.visible=function(n){return!!(n.offsetWidth||n.offsetHeight||n.getClientRects().length)},pn.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(n){}};var Rr={0:200,1223:204},Mr=pn.ajaxSettings.xhr();cn.cors=!!Mr&&"withCredentials"in Mr,cn.ajax=Mr=!!Mr,pn.ajaxTransport(function(n){var r,e;if(cn.cors||Mr&&!n.crossDomain)return{send:function(o,i){var a,l=n.xhr();if(l.open(n.type,n.url,n.async,n.username,n.password),n.xhrFields)for(a in n.xhrFields)l[a]=n.xhrFields[a];n.mimeType&&l.overrideMimeType&&l.overrideMimeType(n.mimeType),n.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest");for(a in o)l.setRequestHeader(a,o[a]);r=function(n){return function(){r&&(r=e=l.onload=l.onerror=l.onabort=l.onreadystatechange=null,"abort"===n?l.abort():"error"===n?"number"!=typeof l.status?i(0,"error"):i(l.status,l.statusText):i(Rr[l.status]||l.status,l.statusText,"text"!==(l.responseType||"text")||"string"!=typeof l.responseText?{binary:l.response}:{text:l.responseText},l.getAllResponseHeaders()))}},l.onload=r(),e=l.onerror=r("error"),void 0!==l.onabort?l.onabort=e:l.onreadystatechange=function(){4===l.readyState&&t.setTimeout(function(){r&&e()})},r=r("abort");try{l.send(n.hasContent&&n.data||null)}catch(n){if(r)throw n}},abort:function(){r&&r()}}}),pn.ajaxPrefilter(function(n){n.crossDomain&&(n.contents.script=!1)}),pn.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(n){return pn.globalEval(n),n}}}),pn.ajaxPrefilter("script",function(n){void 0===n.cache&&(n.cache=!1),n.crossDomain&&(n.type="GET")}),pn.ajaxTransport("script",function(n){if(n.crossDomain){var r,t;return{send:function(e,o){r=pn("<script>").prop({charset:n.scriptCharset,src:n.url}).on("load error",t=function(n){r.remove(),t=null,n&&o("error"===n.type?404:200,n.type)}),J.head.appendChild(r[0])},abort:function(){t&&t()}}}});var Fr=[],Wr=/(=)\?(?=&|$)|\?\?/;pn.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var n=Fr.pop()||pn.expando+"_"+wr++;return this[n]=!0,n}}),pn.ajaxPrefilter("json jsonp",function(n,r,e){var o,i,a,l=!1!==n.jsonp&&(Wr.test(n.url)?"url":"string"==typeof n.data&&0===(n.contentType||"").indexOf("application/x-www-form-urlencoded")&&Wr.test(n.data)&&"data");if(l||"jsonp"===n.dataTypes[0])return o=n.jsonpCallback=pn.isFunction(n.jsonpCallback)?n.jsonpCallback():n.jsonpCallback,l?n[l]=n[l].replace(Wr,"$1"+o):!1!==n.jsonp&&(n.url+=(kr.test(n.url)?"&":"?")+n.jsonp+"="+o),n.converters["script json"]=function(){return a||pn.error(o+" was not called"),a[0]},n.dataTypes[0]="json",i=t[o],t[o]=function(){a=arguments},e.always(function(){void 0===i?pn(t).removeProp(o):t[o]=i,n[o]&&(n.jsonpCallback=r.jsonpCallback,Fr.push(o)),a&&pn.isFunction(i)&&i(a[0]),a=i=void 0}),"script"}),cn.createHTMLDocument=function(){var n=J.implementation.createHTMLDocument("").body;return n.innerHTML="<form></form><form></form>",2===n.childNodes.length}(),pn.parseHTML=function(n,r,t){if("string"!=typeof n)return[];"boolean"==typeof r&&(t=r,r=!1);var e,o,i;return r||(cn.createHTMLDocument?((e=(r=J.implementation.createHTMLDocument("")).createElement("base")).href=J.location.href,r.head.appendChild(e)):r=J),o=yn.exec(n),i=!t&&[],o?[r.createElement(o[1])]:(o=w([n],r,i),i&&i.length&&pn(i).remove(),pn.merge([],o.childNodes))},pn.fn.load=function(n,r,t){var e,o,i,a=this,l=n.indexOf(" ");return l>-1&&(e=V(n.slice(l)),n=n.slice(0,l)),pn.isFunction(r)?(t=r,r=void 0):r&&"object"==typeof r&&(o="POST"),a.length>0&&pn.ajax({url:n,type:o||"GET",dataType:"html",data:r}).done(function(n){i=arguments,a.html(e?pn("<div>").append(pn.parseHTML(n)).find(e):n)}).always(t&&function(n,r){a.each(function(){t.apply(this,i||[n.responseText,r,n])})}),this},pn.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(n,r){pn.fn[r]=function(n){return this.on(r,n)}}),pn.expr.pseudos.animated=function(n){return pn.grep(pn.timers,function(r){return n===r.elem}).length},pn.offset={setOffset:function(n,r,t){var e,o,i,a,l,s,d=pn.css(n,"position"),c=pn(n),p={};"static"===d&&(n.style.position="relative"),l=c.offset(),i=pn.css(n,"top"),s=pn.css(n,"left"),("absolute"===d||"fixed"===d)&&(i+s).indexOf("auto")>-1?(a=(e=c.position()).top,o=e.left):(a=parseFloat(i)||0,o=parseFloat(s)||0),pn.isFunction(r)&&(r=r.call(n,t,pn.extend({},l))),null!=r.top&&(p.top=r.top-l.top+a),null!=r.left&&(p.left=r.left-l.left+o),"using"in r?r.using.call(n,p):c.css(p)}},pn.fn.extend({offset:function(n){if(arguments.length)return void 0===n?this:this.each(function(r){pn.offset.setOffset(this,n,r)});var r,t,e,o,i=this[0];if(i)return i.getClientRects().length?(e=i.getBoundingClientRect(),r=i.ownerDocument,t=r.documentElement,o=r.defaultView,{top:e.top+o.pageYOffset-t.clientTop,left:e.left+o.pageXOffset-t.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var n,r,t=this[0],e={top:0,left:0};return"fixed"===pn.css(t,"position")?r=t.getBoundingClientRect():(n=this.offsetParent(),r=this.offset(),l(n[0],"html")||(e=n.offset()),e={top:e.top+pn.css(n[0],"borderTopWidth",!0),left:e.left+pn.css(n[0],"borderLeftWidth",!0)}),{top:r.top-e.top-pn.css(t,"marginTop",!0),left:r.left-e.left-pn.css(t,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var n=this.offsetParent;n&&"static"===pn.css(n,"position");)n=n.offsetParent;return n||Kn})}}),pn.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(n,r){var t="pageYOffset"===r;pn.fn[n]=function(e){return Dn(this,function(n,e,o){var i;if(pn.isWindow(n)?i=n:9===n.nodeType&&(i=n.defaultView),void 0===o)return i?i[r]:n[e];i?i.scrollTo(t?i.pageXOffset:o,t?o:i.pageYOffset):n[e]=o},n,e,arguments.length)}}),pn.each(["top","left"],function(n,r){pn.cssHooks[r]=L(cn.pixelPosition,function(n,t){if(t)return t=j(n,r),tr.test(t)?pn(n).position()[r]+"px":t})}),pn.each({Height:"height",Width:"width"},function(n,r){pn.each({padding:"inner"+n,content:r,"":"outer"+n},function(t,e){pn.fn[e]=function(o,i){var a=arguments.length&&(t||"boolean"!=typeof o),l=t||(!0===o||!0===i?"margin":"border");return Dn(this,function(r,t,o){var i;return pn.isWindow(r)?0===e.indexOf("outer")?r["inner"+n]:r.document.documentElement["client"+n]:9===r.nodeType?(i=r.documentElement,Math.max(r.body["scroll"+n],i["scroll"+n],r.body["offset"+n],i["offset"+n],i["client"+n])):void 0===o?pn.css(r,t,l):pn.style(r,t,o,l)},r,a?o:void 0,a)}})}),pn.fn.extend({bind:function(n,r,t){return this.on(n,null,r,t)},unbind:function(n,r){return this.off(n,null,r)},delegate:function(n,r,t,e){return this.on(r,n,t,e)},undelegate:function(n,r,t){return 1===arguments.length?this.off(n,"**"):this.off(r,n||"**",t)}}),pn.holdReady=function(n){n?pn.readyWait++:pn.ready(!0)},pn.isArray=Array.isArray,pn.parseJSON=JSON.parse,pn.nodeName=l,void 0===(e=function(){return pn}.apply(r,[]))||(n.exports=e);var Br=t.jQuery,qr=t.$;return pn.noConflict=function(n){return t.$===pn&&(t.$=qr),n&&t.jQuery===pn&&(t.jQuery=Br),pn},o||(t.jQuery=t.$=pn),pn})},function(n,r,t){var e=t(3);"string"==typeof e&&(e=[[n.i,e,""]]);var o={hmr:!0};o.transform=void 0;t(5)(e,o);e.locals&&(n.exports=e.locals)},function(n,r,t){(n.exports=t(4)(void 0)).push([n.i,'@media print {\r\n  *,\r\n  *::before,\r\n  *::after {\r\n    text-shadow: none !important;\r\n    box-shadow: none !important; }\r\n\r\n  a,\r\n  a:visited {\r\n    text-decoration: underline; }\r\n\r\n  abbr[title]::after {\r\n    content: " (" attr(title) ")"; }\r\n\r\n  pre {\r\n    white-space: pre-wrap !important; }\r\n\r\n  pre,\r\n  blockquote {\r\n    border: 1px solid #999;\r\n    page-break-inside: avoid; }\r\n\r\n  thead {\r\n    display: table-header-group; }\r\n\r\n  tr,\r\n  img {\r\n    page-break-inside: avoid; }\r\n\r\n  p,\r\n  h2,\r\n  h3 {\r\n    orphans: 3;\r\n    widows: 3; }\r\n\r\n  h2,\r\n  h3 {\r\n    page-break-after: avoid; }\r\n\r\n  .navbar {\r\n    display: none; }\r\n\r\n  .badge {\r\n    border: 1px solid #000; }\r\n\r\n  .table {\r\n    border-collapse: collapse !important; }\r\n    .table td,\r\n    .table th {\r\n      background-color: #fff !important; }\r\n\r\n  .table-bordered th,\r\n  .table-bordered td {\r\n    border: 1px solid #ddd !important; } }\r\n*,\r\n*::before,\r\n*::after {\r\n  box-sizing: border-box; }\r\n\r\nhtml {\r\n  font-family: sans-serif;\r\n  line-height: 1.15;\r\n  -webkit-text-size-adjust: 100%;\r\n  -ms-text-size-adjust: 100%;\r\n  -ms-overflow-style: scrollbar;\r\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0); }\r\n\r\n@-ms-viewport {\r\n  width: device-width; }\r\narticle, aside, dialog, figcaption, figure, footer, header, hgroup, main, nav, section {\r\n  display: block; }\r\n\r\nbody {\r\n  margin: 0;\r\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\r\n  font-size: 1rem;\r\n  font-weight: normal;\r\n  line-height: 1.5;\r\n  color: #212529;\r\n  text-align: left;\r\n  background-color: #fff; }\r\n\r\n[tabindex="-1"]:focus {\r\n  outline: none !important; }\r\n\r\nhr {\r\n  box-sizing: content-box;\r\n  height: 0;\r\n  overflow: visible; }\r\n\r\nh1, h2, h3, h4, h5, h6 {\r\n  margin-top: 0;\r\n  margin-bottom: .5rem; }\r\n\r\np {\r\n  margin-top: 0;\r\n  margin-bottom: 1rem; }\r\n\r\nabbr[title],\r\nabbr[data-original-title] {\r\n  text-decoration: underline;\r\n  text-decoration: underline dotted;\r\n  cursor: help;\r\n  border-bottom: 0; }\r\n\r\naddress {\r\n  margin-bottom: 1rem;\r\n  font-style: normal;\r\n  line-height: inherit; }\r\n\r\nol,\r\nul,\r\ndl {\r\n  margin-top: 0;\r\n  margin-bottom: 1rem; }\r\n\r\nol ol,\r\nul ul,\r\nol ul,\r\nul ol {\r\n  margin-bottom: 0; }\r\n\r\ndt {\r\n  font-weight: bold; }\r\n\r\ndd {\r\n  margin-bottom: .5rem;\r\n  margin-left: 0; }\r\n\r\nblockquote {\r\n  margin: 0 0 1rem; }\r\n\r\ndfn {\r\n  font-style: italic; }\r\n\r\nb,\r\nstrong {\r\n  font-weight: bolder; }\r\n\r\nsmall {\r\n  font-size: 80%; }\r\n\r\nsub,\r\nsup {\r\n  position: relative;\r\n  font-size: 75%;\r\n  line-height: 0;\r\n  vertical-align: baseline; }\r\n\r\nsub {\r\n  bottom: -.25em; }\r\n\r\nsup {\r\n  top: -.5em; }\r\n\r\na {\r\n  color: #007bff;\r\n  text-decoration: none;\r\n  background-color: transparent;\r\n  -webkit-text-decoration-skip: objects; }\r\n  a:hover {\r\n    color: #0056b3;\r\n    text-decoration: underline; }\r\n\r\na:not([href]):not([tabindex]) {\r\n  color: inherit;\r\n  text-decoration: none; }\r\n  a:not([href]):not([tabindex]):focus, a:not([href]):not([tabindex]):hover {\r\n    color: inherit;\r\n    text-decoration: none; }\r\n  a:not([href]):not([tabindex]):focus {\r\n    outline: 0; }\r\n\r\npre,\r\ncode,\r\nkbd,\r\nsamp {\r\n  font-family: monospace, monospace;\r\n  font-size: 1em; }\r\n\r\npre {\r\n  margin-top: 0;\r\n  margin-bottom: 1rem;\r\n  overflow: auto; }\r\n\r\nfigure {\r\n  margin: 0 0 1rem; }\r\n\r\nimg {\r\n  vertical-align: middle;\r\n  border-style: none; }\r\n\r\nsvg:not(:root) {\r\n  overflow: hidden; }\r\n\r\na,\r\narea,\r\nbutton,\r\n[role="button"],\r\ninput,\r\nlabel,\r\nselect,\r\nsummary,\r\ntextarea {\r\n  touch-action: manipulation; }\r\n\r\ntable {\r\n  border-collapse: collapse; }\r\n\r\ncaption {\r\n  padding-top: 0.75rem;\r\n  padding-bottom: 0.75rem;\r\n  color: #868e96;\r\n  text-align: left;\r\n  caption-side: bottom; }\r\n\r\nth {\r\n  text-align: inherit; }\r\n\r\nlabel {\r\n  display: inline-block;\r\n  margin-bottom: .5rem; }\r\n\r\nbutton:focus {\r\n  outline: 1px dotted;\r\n  outline: 5px auto -webkit-focus-ring-color; }\r\n\r\ninput,\r\nbutton,\r\nselect,\r\noptgroup,\r\ntextarea {\r\n  margin: 0;\r\n  font-family: inherit;\r\n  font-size: inherit;\r\n  line-height: inherit; }\r\n\r\nbutton,\r\ninput {\r\n  overflow: visible; }\r\n\r\nbutton,\r\nselect {\r\n  text-transform: none; }\r\n\r\nbutton,\r\nhtml [type="button"],\r\n[type="reset"],\r\n[type="submit"] {\r\n  -webkit-appearance: button; }\r\n\r\nbutton::-moz-focus-inner,\r\n[type="button"]::-moz-focus-inner,\r\n[type="reset"]::-moz-focus-inner,\r\n[type="submit"]::-moz-focus-inner {\r\n  padding: 0;\r\n  border-style: none; }\r\n\r\ninput[type="radio"],\r\ninput[type="checkbox"] {\r\n  box-sizing: border-box;\r\n  padding: 0; }\r\n\r\ninput[type="date"],\r\ninput[type="time"],\r\ninput[type="datetime-local"],\r\ninput[type="month"] {\r\n  -webkit-appearance: listbox; }\r\n\r\ntextarea {\r\n  overflow: auto;\r\n  resize: vertical; }\r\n\r\nfieldset {\r\n  min-width: 0;\r\n  padding: 0;\r\n  margin: 0;\r\n  border: 0; }\r\n\r\nlegend {\r\n  display: block;\r\n  width: 100%;\r\n  max-width: 100%;\r\n  padding: 0;\r\n  margin-bottom: .5rem;\r\n  font-size: 1.5rem;\r\n  line-height: inherit;\r\n  color: inherit;\r\n  white-space: normal; }\r\n\r\nprogress {\r\n  vertical-align: baseline; }\r\n\r\n[type="number"]::-webkit-inner-spin-button,\r\n[type="number"]::-webkit-outer-spin-button {\r\n  height: auto; }\r\n\r\n[type="search"] {\r\n  outline-offset: -2px;\r\n  -webkit-appearance: none; }\r\n\r\n[type="search"]::-webkit-search-cancel-button,\r\n[type="search"]::-webkit-search-decoration {\r\n  -webkit-appearance: none; }\r\n\r\n::-webkit-file-upload-button {\r\n  font: inherit;\r\n  -webkit-appearance: button; }\r\n\r\noutput {\r\n  display: inline-block; }\r\n\r\nsummary {\r\n  display: list-item; }\r\n\r\ntemplate {\r\n  display: none; }\r\n\r\n[hidden] {\r\n  display: none !important; }\r\n\r\nh1, h2, h3, h4, h5, h6,\r\n.h1, .h2, .h3, .h4, .h5, .h6 {\r\n  margin-bottom: 0.5rem;\r\n  font-family: inherit;\r\n  font-weight: 500;\r\n  line-height: 1.1;\r\n  color: inherit; }\r\n\r\nh1, .h1 {\r\n  font-size: 2.5rem; }\r\n\r\nh2, .h2 {\r\n  font-size: 2rem; }\r\n\r\nh3, .h3 {\r\n  font-size: 1.75rem; }\r\n\r\nh4, .h4 {\r\n  font-size: 1.5rem; }\r\n\r\nh5, .h5 {\r\n  font-size: 1.25rem; }\r\n\r\nh6, .h6 {\r\n  font-size: 1rem; }\r\n\r\n.lead {\r\n  font-size: 1.25rem;\r\n  font-weight: 300; }\r\n\r\n.display-1 {\r\n  font-size: 6rem;\r\n  font-weight: 300;\r\n  line-height: 1.1; }\r\n\r\n.display-2 {\r\n  font-size: 5.5rem;\r\n  font-weight: 300;\r\n  line-height: 1.1; }\r\n\r\n.display-3 {\r\n  font-size: 4.5rem;\r\n  font-weight: 300;\r\n  line-height: 1.1; }\r\n\r\n.display-4 {\r\n  font-size: 3.5rem;\r\n  font-weight: 300;\r\n  line-height: 1.1; }\r\n\r\nhr {\r\n  margin-top: 1rem;\r\n  margin-bottom: 1rem;\r\n  border: 0;\r\n  border-top: 1px solid rgba(0, 0, 0, 0.1); }\r\n\r\nsmall,\r\n.small {\r\n  font-size: 80%;\r\n  font-weight: normal; }\r\n\r\nmark,\r\n.mark {\r\n  padding: 0.2em;\r\n  background-color: #fcf8e3; }\r\n\r\n.list-unstyled {\r\n  padding-left: 0;\r\n  list-style: none; }\r\n\r\n.list-inline {\r\n  padding-left: 0;\r\n  list-style: none; }\r\n\r\n.list-inline-item {\r\n  display: inline-block; }\r\n  .list-inline-item:not(:last-child) {\r\n    margin-right: 5px; }\r\n\r\n.initialism {\r\n  font-size: 90%;\r\n  text-transform: uppercase; }\r\n\r\n.blockquote {\r\n  margin-bottom: 1rem;\r\n  font-size: 1.25rem; }\r\n\r\n.blockquote-footer {\r\n  display: block;\r\n  font-size: 80%;\r\n  color: #868e96; }\r\n  .blockquote-footer::before {\r\n    content: "\\2014   \\A0"; }\r\n\r\n.img-fluid {\r\n  max-width: 100%;\r\n  height: auto; }\r\n\r\n.img-thumbnail {\r\n  padding: 0.25rem;\r\n  background-color: #fff;\r\n  border: 1px solid #ddd;\r\n  border-radius: 0.25rem;\r\n  transition: all 0.2s ease-in-out;\r\n  max-width: 100%;\r\n  height: auto; }\r\n\r\n.figure {\r\n  display: inline-block; }\r\n\r\n.figure-img {\r\n  margin-bottom: 0.5rem;\r\n  line-height: 1; }\r\n\r\n.figure-caption {\r\n  font-size: 90%;\r\n  color: #868e96; }\r\n\r\n.container {\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n  padding-right: 15px;\r\n  padding-left: 15px;\r\n  width: 100%; }\r\n  @media (min-width: 576px) {\r\n    .container {\r\n      max-width: 540px; } }\r\n  @media (min-width: 768px) {\r\n    .container {\r\n      max-width: 720px; } }\r\n  @media (min-width: 992px) {\r\n    .container {\r\n      max-width: 960px; } }\r\n  @media (min-width: 1200px) {\r\n    .container {\r\n      max-width: 1140px; } }\r\n\r\n.container-fluid {\r\n  width: 100%;\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n  padding-right: 15px;\r\n  padding-left: 15px;\r\n  width: 100%; }\r\n\r\n.row {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-right: -15px;\r\n  margin-left: -15px; }\r\n\r\n.no-gutters {\r\n  margin-right: 0;\r\n  margin-left: 0; }\r\n  .no-gutters > .col,\r\n  .no-gutters > [class*="col-"] {\r\n    padding-right: 0;\r\n    padding-left: 0; }\r\n\r\n.col-1, .col-2, .col-3, .col-4, .col-5, .col-6, .col-7, .col-8, .col-9, .col-10, .col-11, .col-12, .col,\r\n.col-auto, .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm,\r\n.col-sm-auto, .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12, .col-md,\r\n.col-md-auto, .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg,\r\n.col-lg-auto, .col-xl-1, .col-xl-2, .col-xl-3, .col-xl-4, .col-xl-5, .col-xl-6, .col-xl-7, .col-xl-8, .col-xl-9, .col-xl-10, .col-xl-11, .col-xl-12, .col-xl,\r\n.col-xl-auto {\r\n  position: relative;\r\n  width: 100%;\r\n  min-height: 1px;\r\n  padding-right: 15px;\r\n  padding-left: 15px; }\r\n\r\n.col {\r\n  flex-basis: 0;\r\n  flex-grow: 1;\r\n  max-width: 100%; }\r\n\r\n.col-auto {\r\n  flex: 0 0 auto;\r\n  width: auto;\r\n  max-width: none; }\r\n\r\n.col-1 {\r\n  flex: 0 0 8.3333333333%;\r\n  max-width: 8.3333333333%; }\r\n\r\n.col-2 {\r\n  flex: 0 0 16.6666666667%;\r\n  max-width: 16.6666666667%; }\r\n\r\n.col-3 {\r\n  flex: 0 0 25%;\r\n  max-width: 25%; }\r\n\r\n.col-4 {\r\n  flex: 0 0 33.3333333333%;\r\n  max-width: 33.3333333333%; }\r\n\r\n.col-5 {\r\n  flex: 0 0 41.6666666667%;\r\n  max-width: 41.6666666667%; }\r\n\r\n.col-6 {\r\n  flex: 0 0 50%;\r\n  max-width: 50%; }\r\n\r\n.col-7 {\r\n  flex: 0 0 58.3333333333%;\r\n  max-width: 58.3333333333%; }\r\n\r\n.col-8 {\r\n  flex: 0 0 66.6666666667%;\r\n  max-width: 66.6666666667%; }\r\n\r\n.col-9 {\r\n  flex: 0 0 75%;\r\n  max-width: 75%; }\r\n\r\n.col-10 {\r\n  flex: 0 0 83.3333333333%;\r\n  max-width: 83.3333333333%; }\r\n\r\n.col-11 {\r\n  flex: 0 0 91.6666666667%;\r\n  max-width: 91.6666666667%; }\r\n\r\n.col-12 {\r\n  flex: 0 0 100%;\r\n  max-width: 100%; }\r\n\r\n.order-1 {\r\n  order: 1; }\r\n\r\n.order-2 {\r\n  order: 2; }\r\n\r\n.order-3 {\r\n  order: 3; }\r\n\r\n.order-4 {\r\n  order: 4; }\r\n\r\n.order-5 {\r\n  order: 5; }\r\n\r\n.order-6 {\r\n  order: 6; }\r\n\r\n.order-7 {\r\n  order: 7; }\r\n\r\n.order-8 {\r\n  order: 8; }\r\n\r\n.order-9 {\r\n  order: 9; }\r\n\r\n.order-10 {\r\n  order: 10; }\r\n\r\n.order-11 {\r\n  order: 11; }\r\n\r\n.order-12 {\r\n  order: 12; }\r\n\r\n@media (min-width: 576px) {\r\n  .col-sm {\r\n    flex-basis: 0;\r\n    flex-grow: 1;\r\n    max-width: 100%; }\r\n\r\n  .col-sm-auto {\r\n    flex: 0 0 auto;\r\n    width: auto;\r\n    max-width: none; }\r\n\r\n  .col-sm-1 {\r\n    flex: 0 0 8.3333333333%;\r\n    max-width: 8.3333333333%; }\r\n\r\n  .col-sm-2 {\r\n    flex: 0 0 16.6666666667%;\r\n    max-width: 16.6666666667%; }\r\n\r\n  .col-sm-3 {\r\n    flex: 0 0 25%;\r\n    max-width: 25%; }\r\n\r\n  .col-sm-4 {\r\n    flex: 0 0 33.3333333333%;\r\n    max-width: 33.3333333333%; }\r\n\r\n  .col-sm-5 {\r\n    flex: 0 0 41.6666666667%;\r\n    max-width: 41.6666666667%; }\r\n\r\n  .col-sm-6 {\r\n    flex: 0 0 50%;\r\n    max-width: 50%; }\r\n\r\n  .col-sm-7 {\r\n    flex: 0 0 58.3333333333%;\r\n    max-width: 58.3333333333%; }\r\n\r\n  .col-sm-8 {\r\n    flex: 0 0 66.6666666667%;\r\n    max-width: 66.6666666667%; }\r\n\r\n  .col-sm-9 {\r\n    flex: 0 0 75%;\r\n    max-width: 75%; }\r\n\r\n  .col-sm-10 {\r\n    flex: 0 0 83.3333333333%;\r\n    max-width: 83.3333333333%; }\r\n\r\n  .col-sm-11 {\r\n    flex: 0 0 91.6666666667%;\r\n    max-width: 91.6666666667%; }\r\n\r\n  .col-sm-12 {\r\n    flex: 0 0 100%;\r\n    max-width: 100%; }\r\n\r\n  .order-sm-1 {\r\n    order: 1; }\r\n\r\n  .order-sm-2 {\r\n    order: 2; }\r\n\r\n  .order-sm-3 {\r\n    order: 3; }\r\n\r\n  .order-sm-4 {\r\n    order: 4; }\r\n\r\n  .order-sm-5 {\r\n    order: 5; }\r\n\r\n  .order-sm-6 {\r\n    order: 6; }\r\n\r\n  .order-sm-7 {\r\n    order: 7; }\r\n\r\n  .order-sm-8 {\r\n    order: 8; }\r\n\r\n  .order-sm-9 {\r\n    order: 9; }\r\n\r\n  .order-sm-10 {\r\n    order: 10; }\r\n\r\n  .order-sm-11 {\r\n    order: 11; }\r\n\r\n  .order-sm-12 {\r\n    order: 12; } }\r\n@media (min-width: 768px) {\r\n  .col-md {\r\n    flex-basis: 0;\r\n    flex-grow: 1;\r\n    max-width: 100%; }\r\n\r\n  .col-md-auto {\r\n    flex: 0 0 auto;\r\n    width: auto;\r\n    max-width: none; }\r\n\r\n  .col-md-1 {\r\n    flex: 0 0 8.3333333333%;\r\n    max-width: 8.3333333333%; }\r\n\r\n  .col-md-2 {\r\n    flex: 0 0 16.6666666667%;\r\n    max-width: 16.6666666667%; }\r\n\r\n  .col-md-3 {\r\n    flex: 0 0 25%;\r\n    max-width: 25%; }\r\n\r\n  .col-md-4 {\r\n    flex: 0 0 33.3333333333%;\r\n    max-width: 33.3333333333%; }\r\n\r\n  .col-md-5 {\r\n    flex: 0 0 41.6666666667%;\r\n    max-width: 41.6666666667%; }\r\n\r\n  .col-md-6 {\r\n    flex: 0 0 50%;\r\n    max-width: 50%; }\r\n\r\n  .col-md-7 {\r\n    flex: 0 0 58.3333333333%;\r\n    max-width: 58.3333333333%; }\r\n\r\n  .col-md-8 {\r\n    flex: 0 0 66.6666666667%;\r\n    max-width: 66.6666666667%; }\r\n\r\n  .col-md-9 {\r\n    flex: 0 0 75%;\r\n    max-width: 75%; }\r\n\r\n  .col-md-10 {\r\n    flex: 0 0 83.3333333333%;\r\n    max-width: 83.3333333333%; }\r\n\r\n  .col-md-11 {\r\n    flex: 0 0 91.6666666667%;\r\n    max-width: 91.6666666667%; }\r\n\r\n  .col-md-12 {\r\n    flex: 0 0 100%;\r\n    max-width: 100%; }\r\n\r\n  .order-md-1 {\r\n    order: 1; }\r\n\r\n  .order-md-2 {\r\n    order: 2; }\r\n\r\n  .order-md-3 {\r\n    order: 3; }\r\n\r\n  .order-md-4 {\r\n    order: 4; }\r\n\r\n  .order-md-5 {\r\n    order: 5; }\r\n\r\n  .order-md-6 {\r\n    order: 6; }\r\n\r\n  .order-md-7 {\r\n    order: 7; }\r\n\r\n  .order-md-8 {\r\n    order: 8; }\r\n\r\n  .order-md-9 {\r\n    order: 9; }\r\n\r\n  .order-md-10 {\r\n    order: 10; }\r\n\r\n  .order-md-11 {\r\n    order: 11; }\r\n\r\n  .order-md-12 {\r\n    order: 12; } }\r\n@media (min-width: 992px) {\r\n  .col-lg {\r\n    flex-basis: 0;\r\n    flex-grow: 1;\r\n    max-width: 100%; }\r\n\r\n  .col-lg-auto {\r\n    flex: 0 0 auto;\r\n    width: auto;\r\n    max-width: none; }\r\n\r\n  .col-lg-1 {\r\n    flex: 0 0 8.3333333333%;\r\n    max-width: 8.3333333333%; }\r\n\r\n  .col-lg-2 {\r\n    flex: 0 0 16.6666666667%;\r\n    max-width: 16.6666666667%; }\r\n\r\n  .col-lg-3 {\r\n    flex: 0 0 25%;\r\n    max-width: 25%; }\r\n\r\n  .col-lg-4 {\r\n    flex: 0 0 33.3333333333%;\r\n    max-width: 33.3333333333%; }\r\n\r\n  .col-lg-5 {\r\n    flex: 0 0 41.6666666667%;\r\n    max-width: 41.6666666667%; }\r\n\r\n  .col-lg-6 {\r\n    flex: 0 0 50%;\r\n    max-width: 50%; }\r\n\r\n  .col-lg-7 {\r\n    flex: 0 0 58.3333333333%;\r\n    max-width: 58.3333333333%; }\r\n\r\n  .col-lg-8 {\r\n    flex: 0 0 66.6666666667%;\r\n    max-width: 66.6666666667%; }\r\n\r\n  .col-lg-9 {\r\n    flex: 0 0 75%;\r\n    max-width: 75%; }\r\n\r\n  .col-lg-10 {\r\n    flex: 0 0 83.3333333333%;\r\n    max-width: 83.3333333333%; }\r\n\r\n  .col-lg-11 {\r\n    flex: 0 0 91.6666666667%;\r\n    max-width: 91.6666666667%; }\r\n\r\n  .col-lg-12 {\r\n    flex: 0 0 100%;\r\n    max-width: 100%; }\r\n\r\n  .order-lg-1 {\r\n    order: 1; }\r\n\r\n  .order-lg-2 {\r\n    order: 2; }\r\n\r\n  .order-lg-3 {\r\n    order: 3; }\r\n\r\n  .order-lg-4 {\r\n    order: 4; }\r\n\r\n  .order-lg-5 {\r\n    order: 5; }\r\n\r\n  .order-lg-6 {\r\n    order: 6; }\r\n\r\n  .order-lg-7 {\r\n    order: 7; }\r\n\r\n  .order-lg-8 {\r\n    order: 8; }\r\n\r\n  .order-lg-9 {\r\n    order: 9; }\r\n\r\n  .order-lg-10 {\r\n    order: 10; }\r\n\r\n  .order-lg-11 {\r\n    order: 11; }\r\n\r\n  .order-lg-12 {\r\n    order: 12; } }\r\n@media (min-width: 1200px) {\r\n  .col-xl {\r\n    flex-basis: 0;\r\n    flex-grow: 1;\r\n    max-width: 100%; }\r\n\r\n  .col-xl-auto {\r\n    flex: 0 0 auto;\r\n    width: auto;\r\n    max-width: none; }\r\n\r\n  .col-xl-1 {\r\n    flex: 0 0 8.3333333333%;\r\n    max-width: 8.3333333333%; }\r\n\r\n  .col-xl-2 {\r\n    flex: 0 0 16.6666666667%;\r\n    max-width: 16.6666666667%; }\r\n\r\n  .col-xl-3 {\r\n    flex: 0 0 25%;\r\n    max-width: 25%; }\r\n\r\n  .col-xl-4 {\r\n    flex: 0 0 33.3333333333%;\r\n    max-width: 33.3333333333%; }\r\n\r\n  .col-xl-5 {\r\n    flex: 0 0 41.6666666667%;\r\n    max-width: 41.6666666667%; }\r\n\r\n  .col-xl-6 {\r\n    flex: 0 0 50%;\r\n    max-width: 50%; }\r\n\r\n  .col-xl-7 {\r\n    flex: 0 0 58.3333333333%;\r\n    max-width: 58.3333333333%; }\r\n\r\n  .col-xl-8 {\r\n    flex: 0 0 66.6666666667%;\r\n    max-width: 66.6666666667%; }\r\n\r\n  .col-xl-9 {\r\n    flex: 0 0 75%;\r\n    max-width: 75%; }\r\n\r\n  .col-xl-10 {\r\n    flex: 0 0 83.3333333333%;\r\n    max-width: 83.3333333333%; }\r\n\r\n  .col-xl-11 {\r\n    flex: 0 0 91.6666666667%;\r\n    max-width: 91.6666666667%; }\r\n\r\n  .col-xl-12 {\r\n    flex: 0 0 100%;\r\n    max-width: 100%; }\r\n\r\n  .order-xl-1 {\r\n    order: 1; }\r\n\r\n  .order-xl-2 {\r\n    order: 2; }\r\n\r\n  .order-xl-3 {\r\n    order: 3; }\r\n\r\n  .order-xl-4 {\r\n    order: 4; }\r\n\r\n  .order-xl-5 {\r\n    order: 5; }\r\n\r\n  .order-xl-6 {\r\n    order: 6; }\r\n\r\n  .order-xl-7 {\r\n    order: 7; }\r\n\r\n  .order-xl-8 {\r\n    order: 8; }\r\n\r\n  .order-xl-9 {\r\n    order: 9; }\r\n\r\n  .order-xl-10 {\r\n    order: 10; }\r\n\r\n  .order-xl-11 {\r\n    order: 11; }\r\n\r\n  .order-xl-12 {\r\n    order: 12; } }\r\n.form-control {\r\n  display: block;\r\n  width: 100%;\r\n  padding: 0.5rem 0.75rem;\r\n  font-size: 1rem;\r\n  line-height: 1.25;\r\n  color: #495057;\r\n  background-color: #fff;\r\n  background-image: none;\r\n  background-clip: padding-box;\r\n  border: 1px solid rgba(0, 0, 0, 0.15);\r\n  border-radius: 0.25rem;\r\n  transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s; }\r\n  .form-control::-ms-expand {\r\n    background-color: transparent;\r\n    border: 0; }\r\n  .form-control:focus {\r\n    color: #495057;\r\n    background-color: #fff;\r\n    border-color: #80bdff;\r\n    outline: none; }\r\n  .form-control::placeholder {\r\n    color: #868e96;\r\n    opacity: 1; }\r\n  .form-control:disabled, .form-control[readonly] {\r\n    background-color: #e9ecef;\r\n    opacity: 1; }\r\n\r\nselect.form-control:not([size]):not([multiple]) {\r\n  height: calc(2.25rem + 2px); }\r\nselect.form-control:focus::-ms-value {\r\n  color: #495057;\r\n  background-color: #fff; }\r\n\r\n.form-control-file,\r\n.form-control-range {\r\n  display: block; }\r\n\r\n.col-form-label {\r\n  padding-top: calc(0.5rem - 1px * 2);\r\n  padding-bottom: calc(0.5rem - 1px * 2);\r\n  margin-bottom: 0; }\r\n\r\n.col-form-label-lg {\r\n  padding-top: calc(0.5rem - 1px * 2);\r\n  padding-bottom: calc(0.5rem - 1px * 2);\r\n  font-size: 1.25rem; }\r\n\r\n.col-form-label-sm {\r\n  padding-top: calc(0.25rem - 1px * 2);\r\n  padding-bottom: calc(0.25rem - 1px * 2);\r\n  font-size: 0.875rem; }\r\n\r\n.col-form-legend {\r\n  padding-top: 0.5rem;\r\n  padding-bottom: 0.5rem;\r\n  margin-bottom: 0;\r\n  font-size: 1rem; }\r\n\r\n.form-control-plaintext {\r\n  padding-top: 0.5rem;\r\n  padding-bottom: 0.5rem;\r\n  margin-bottom: 0;\r\n  line-height: 1.25;\r\n  border: solid transparent;\r\n  border-width: 1px 0; }\r\n  .form-control-plaintext.form-control-sm, .form-control-plaintext.form-control-lg {\r\n    padding-right: 0;\r\n    padding-left: 0; }\r\n\r\n.form-control-sm {\r\n  padding: 0.25rem 0.5rem;\r\n  font-size: 0.875rem;\r\n  line-height: 1.5;\r\n  border-radius: 0.2rem; }\r\n\r\nselect.form-control-sm:not([size]):not([multiple]) {\r\n  height: calc(1.8125rem + 2px); }\r\n\r\n.form-control-lg {\r\n  padding: 0.5rem 1rem;\r\n  font-size: 1.25rem;\r\n  line-height: 1.5;\r\n  border-radius: 0.3rem; }\r\n\r\nselect.form-control-lg:not([size]):not([multiple]) {\r\n  height: calc(2.875rem + 2px); }\r\n\r\n.form-group {\r\n  margin-bottom: 1rem; }\r\n\r\n.form-text {\r\n  display: block;\r\n  margin-top: 0.25rem; }\r\n\r\n.form-row {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-right: -5px;\r\n  margin-left: -5px; }\r\n  .form-row > .col,\r\n  .form-row > [class*="col-"] {\r\n    padding-right: 5px;\r\n    padding-left: 5px; }\r\n\r\n.form-check {\r\n  position: relative;\r\n  display: block;\r\n  margin-bottom: 0.5rem; }\r\n  .form-check.disabled .form-check-label {\r\n    color: #868e96; }\r\n\r\n.form-check-label {\r\n  padding-left: 1.25rem;\r\n  margin-bottom: 0; }\r\n\r\n.form-check-input {\r\n  position: absolute;\r\n  margin-top: 0.25rem;\r\n  margin-left: -1.25rem; }\r\n\r\n.form-check-inline {\r\n  display: inline-block; }\r\n  .form-check-inline .form-check-label {\r\n    vertical-align: middle; }\r\n  .form-check-inline + .form-check-inline {\r\n    margin-left: 0.75rem; }\r\n\r\n.invalid-feedback {\r\n  display: none;\r\n  margin-top: .25rem;\r\n  font-size: .875rem;\r\n  color: #dc3545; }\r\n\r\n.invalid-tooltip {\r\n  position: absolute;\r\n  top: 100%;\r\n  z-index: 5;\r\n  display: none;\r\n  width: 250px;\r\n  padding: .5rem;\r\n  margin-top: .1rem;\r\n  font-size: .875rem;\r\n  line-height: 1;\r\n  color: #fff;\r\n  background-color: rgba(220, 53, 69, 0.8);\r\n  border-radius: .2rem; }\r\n\r\n.was-validated .form-control:valid, .form-control.is-valid,\r\n.was-validated .custom-select:valid,\r\n.custom-select.is-valid {\r\n  border-color: #28a745; }\r\n  .was-validated .form-control:valid:focus, .form-control.is-valid:focus,\r\n  .was-validated .custom-select:valid:focus,\r\n  .custom-select.is-valid:focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25); }\r\n  .was-validated .form-control:valid ~ .invalid-feedback,\r\n  .was-validated .form-control:valid ~ .invalid-tooltip, .form-control.is-valid ~ .invalid-feedback,\r\n  .form-control.is-valid ~ .invalid-tooltip,\r\n  .was-validated .custom-select:valid ~ .invalid-feedback,\r\n  .was-validated .custom-select:valid ~ .invalid-tooltip,\r\n  .custom-select.is-valid ~ .invalid-feedback,\r\n  .custom-select.is-valid ~ .invalid-tooltip {\r\n    display: block; }\r\n\r\n.was-validated .form-check-input:valid + .form-check-label, .form-check-input.is-valid + .form-check-label {\r\n  color: #28a745; }\r\n\r\n.was-validated .custom-control-input:valid ~ .custom-control-indicator, .custom-control-input.is-valid ~ .custom-control-indicator {\r\n  background-color: rgba(40, 167, 69, 0.25); }\r\n.was-validated .custom-control-input:valid ~ .custom-control-description, .custom-control-input.is-valid ~ .custom-control-description {\r\n  color: #28a745; }\r\n\r\n.was-validated .custom-file-input:valid ~ .custom-file-control, .custom-file-input.is-valid ~ .custom-file-control {\r\n  border-color: #28a745; }\r\n  .was-validated .custom-file-input:valid ~ .custom-file-control::before, .custom-file-input.is-valid ~ .custom-file-control::before {\r\n    border-color: inherit; }\r\n.was-validated .custom-file-input:valid:focus, .custom-file-input.is-valid:focus {\r\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25); }\r\n\r\n.was-validated .form-control:invalid, .form-control.is-invalid,\r\n.was-validated .custom-select:invalid,\r\n.custom-select.is-invalid {\r\n  border-color: #dc3545; }\r\n  .was-validated .form-control:invalid:focus, .form-control.is-invalid:focus,\r\n  .was-validated .custom-select:invalid:focus,\r\n  .custom-select.is-invalid:focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25); }\r\n  .was-validated .form-control:invalid ~ .invalid-feedback,\r\n  .was-validated .form-control:invalid ~ .invalid-tooltip, .form-control.is-invalid ~ .invalid-feedback,\r\n  .form-control.is-invalid ~ .invalid-tooltip,\r\n  .was-validated .custom-select:invalid ~ .invalid-feedback,\r\n  .was-validated .custom-select:invalid ~ .invalid-tooltip,\r\n  .custom-select.is-invalid ~ .invalid-feedback,\r\n  .custom-select.is-invalid ~ .invalid-tooltip {\r\n    display: block; }\r\n\r\n.was-validated .form-check-input:invalid + .form-check-label, .form-check-input.is-invalid + .form-check-label {\r\n  color: #dc3545; }\r\n\r\n.was-validated .custom-control-input:invalid ~ .custom-control-indicator, .custom-control-input.is-invalid ~ .custom-control-indicator {\r\n  background-color: rgba(220, 53, 69, 0.25); }\r\n.was-validated .custom-control-input:invalid ~ .custom-control-description, .custom-control-input.is-invalid ~ .custom-control-description {\r\n  color: #dc3545; }\r\n\r\n.was-validated .custom-file-input:invalid ~ .custom-file-control, .custom-file-input.is-invalid ~ .custom-file-control {\r\n  border-color: #dc3545; }\r\n  .was-validated .custom-file-input:invalid ~ .custom-file-control::before, .custom-file-input.is-invalid ~ .custom-file-control::before {\r\n    border-color: inherit; }\r\n.was-validated .custom-file-input:invalid:focus, .custom-file-input.is-invalid:focus {\r\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25); }\r\n\r\n.form-inline {\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  align-items: center; }\r\n  .form-inline .form-check {\r\n    width: 100%; }\r\n  @media (min-width: 576px) {\r\n    .form-inline label {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      margin-bottom: 0; }\r\n    .form-inline .form-group {\r\n      display: flex;\r\n      flex: 0 0 auto;\r\n      flex-flow: row wrap;\r\n      align-items: center;\r\n      margin-bottom: 0; }\r\n    .form-inline .form-control {\r\n      display: inline-block;\r\n      width: auto;\r\n      vertical-align: middle; }\r\n    .form-inline .form-control-plaintext {\r\n      display: inline-block; }\r\n    .form-inline .input-group {\r\n      width: auto; }\r\n    .form-inline .form-control-label {\r\n      margin-bottom: 0;\r\n      vertical-align: middle; }\r\n    .form-inline .form-check {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      width: auto;\r\n      margin-top: 0;\r\n      margin-bottom: 0; }\r\n    .form-inline .form-check-label {\r\n      padding-left: 0; }\r\n    .form-inline .form-check-input {\r\n      position: relative;\r\n      margin-top: 0;\r\n      margin-right: 0.25rem;\r\n      margin-left: 0; }\r\n    .form-inline .custom-control {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      padding-left: 0; }\r\n    .form-inline .custom-control-indicator {\r\n      position: static;\r\n      display: inline-block;\r\n      margin-right: 0.25rem;\r\n      vertical-align: text-bottom; }\r\n    .form-inline .has-feedback .form-control-feedback {\r\n      top: 0; } }\r\n\r\n.btn {\r\n  display: inline-block;\r\n  font-weight: normal;\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  vertical-align: middle;\r\n  user-select: none;\r\n  border: 1px solid transparent;\r\n  padding: 0.5rem 0.75rem;\r\n  font-size: 1rem;\r\n  line-height: 1.25;\r\n  border-radius: 0.25rem;\r\n  transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out; }\r\n  .btn:focus, .btn:hover {\r\n    text-decoration: none; }\r\n  .btn:focus, .btn.focus {\r\n    outline: 0;\r\n    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25); }\r\n  .btn.disabled, .btn:disabled {\r\n    opacity: .65; }\r\n  .btn:active, .btn.active {\r\n    background-image: none; }\r\n\r\na.btn.disabled,\r\nfieldset[disabled] a.btn {\r\n  pointer-events: none; }\r\n\r\n.btn-primary {\r\n  color: #fff;\r\n  background-color: #007bff;\r\n  border-color: #007bff; }\r\n  .btn-primary:hover {\r\n    color: #fff;\r\n    background-color: #0069d9;\r\n    border-color: #0062cc; }\r\n  .btn-primary:focus, .btn-primary.focus {\r\n    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.5); }\r\n  .btn-primary.disabled, .btn-primary:disabled {\r\n    background-color: #007bff;\r\n    border-color: #007bff; }\r\n  .btn-primary:active, .btn-primary.active, .show > .btn-primary.dropdown-toggle {\r\n    background-color: #0069d9;\r\n    background-image: none;\r\n    border-color: #0062cc; }\r\n\r\n.btn-secondary {\r\n  color: #fff;\r\n  background-color: #868e96;\r\n  border-color: #868e96; }\r\n  .btn-secondary:hover {\r\n    color: #fff;\r\n    background-color: #727b84;\r\n    border-color: #6c757d; }\r\n  .btn-secondary:focus, .btn-secondary.focus {\r\n    box-shadow: 0 0 0 3px rgba(134, 142, 150, 0.5); }\r\n  .btn-secondary.disabled, .btn-secondary:disabled {\r\n    background-color: #868e96;\r\n    border-color: #868e96; }\r\n  .btn-secondary:active, .btn-secondary.active, .show > .btn-secondary.dropdown-toggle {\r\n    background-color: #727b84;\r\n    background-image: none;\r\n    border-color: #6c757d; }\r\n\r\n.btn-success {\r\n  color: #fff;\r\n  background-color: #28a745;\r\n  border-color: #28a745; }\r\n  .btn-success:hover {\r\n    color: #fff;\r\n    background-color: #218838;\r\n    border-color: #1e7e34; }\r\n  .btn-success:focus, .btn-success.focus {\r\n    box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.5); }\r\n  .btn-success.disabled, .btn-success:disabled {\r\n    background-color: #28a745;\r\n    border-color: #28a745; }\r\n  .btn-success:active, .btn-success.active, .show > .btn-success.dropdown-toggle {\r\n    background-color: #218838;\r\n    background-image: none;\r\n    border-color: #1e7e34; }\r\n\r\n.btn-info {\r\n  color: #fff;\r\n  background-color: #17a2b8;\r\n  border-color: #17a2b8; }\r\n  .btn-info:hover {\r\n    color: #fff;\r\n    background-color: #138496;\r\n    border-color: #117a8b; }\r\n  .btn-info:focus, .btn-info.focus {\r\n    box-shadow: 0 0 0 3px rgba(23, 162, 184, 0.5); }\r\n  .btn-info.disabled, .btn-info:disabled {\r\n    background-color: #17a2b8;\r\n    border-color: #17a2b8; }\r\n  .btn-info:active, .btn-info.active, .show > .btn-info.dropdown-toggle {\r\n    background-color: #138496;\r\n    background-image: none;\r\n    border-color: #117a8b; }\r\n\r\n.btn-warning {\r\n  color: #111;\r\n  background-color: #ffc107;\r\n  border-color: #ffc107; }\r\n  .btn-warning:hover {\r\n    color: #111;\r\n    background-color: #e0a800;\r\n    border-color: #d39e00; }\r\n  .btn-warning:focus, .btn-warning.focus {\r\n    box-shadow: 0 0 0 3px rgba(255, 193, 7, 0.5); }\r\n  .btn-warning.disabled, .btn-warning:disabled {\r\n    background-color: #ffc107;\r\n    border-color: #ffc107; }\r\n  .btn-warning:active, .btn-warning.active, .show > .btn-warning.dropdown-toggle {\r\n    background-color: #e0a800;\r\n    background-image: none;\r\n    border-color: #d39e00; }\r\n\r\n.btn-danger {\r\n  color: #fff;\r\n  background-color: #dc3545;\r\n  border-color: #dc3545; }\r\n  .btn-danger:hover {\r\n    color: #fff;\r\n    background-color: #c82333;\r\n    border-color: #bd2130; }\r\n  .btn-danger:focus, .btn-danger.focus {\r\n    box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.5); }\r\n  .btn-danger.disabled, .btn-danger:disabled {\r\n    background-color: #dc3545;\r\n    border-color: #dc3545; }\r\n  .btn-danger:active, .btn-danger.active, .show > .btn-danger.dropdown-toggle {\r\n    background-color: #c82333;\r\n    background-image: none;\r\n    border-color: #bd2130; }\r\n\r\n.btn-light {\r\n  color: #111;\r\n  background-color: #f8f9fa;\r\n  border-color: #f8f9fa; }\r\n  .btn-light:hover {\r\n    color: #111;\r\n    background-color: #e2e6ea;\r\n    border-color: #dae0e5; }\r\n  .btn-light:focus, .btn-light.focus {\r\n    box-shadow: 0 0 0 3px rgba(248, 249, 250, 0.5); }\r\n  .btn-light.disabled, .btn-light:disabled {\r\n    background-color: #f8f9fa;\r\n    border-color: #f8f9fa; }\r\n  .btn-light:active, .btn-light.active, .show > .btn-light.dropdown-toggle {\r\n    background-color: #e2e6ea;\r\n    background-image: none;\r\n    border-color: #dae0e5; }\r\n\r\n.btn-dark {\r\n  color: #fff;\r\n  background-color: #343a40;\r\n  border-color: #343a40; }\r\n  .btn-dark:hover {\r\n    color: #fff;\r\n    background-color: #23272b;\r\n    border-color: #1d2124; }\r\n  .btn-dark:focus, .btn-dark.focus {\r\n    box-shadow: 0 0 0 3px rgba(52, 58, 64, 0.5); }\r\n  .btn-dark.disabled, .btn-dark:disabled {\r\n    background-color: #343a40;\r\n    border-color: #343a40; }\r\n  .btn-dark:active, .btn-dark.active, .show > .btn-dark.dropdown-toggle {\r\n    background-color: #23272b;\r\n    background-image: none;\r\n    border-color: #1d2124; }\r\n\r\n.btn-outline-primary {\r\n  color: #007bff;\r\n  background-color: transparent;\r\n  background-image: none;\r\n  border-color: #007bff; }\r\n  .btn-outline-primary:hover {\r\n    color: #fff;\r\n    background-color: #007bff;\r\n    border-color: #007bff; }\r\n  .btn-outline-primary:focus, .btn-outline-primary.focus {\r\n    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.5); }\r\n  .btn-outline-primary.disabled, .btn-outline-primary:disabled {\r\n    color: #007bff;\r\n    background-color: transparent; }\r\n  .btn-outline-primary:active, .btn-outline-primary.active, .show > .btn-outline-primary.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #007bff;\r\n    border-color: #007bff; }\r\n\r\n.btn-outline-secondary {\r\n  color: #868e96;\r\n  background-color: transparent;\r\n  background-image: none;\r\n  border-color: #868e96; }\r\n  .btn-outline-secondary:hover {\r\n    color: #fff;\r\n    background-color: #868e96;\r\n    border-color: #868e96; }\r\n  .btn-outline-secondary:focus, .btn-outline-secondary.focus {\r\n    box-shadow: 0 0 0 3px rgba(134, 142, 150, 0.5); }\r\n  .btn-outline-secondary.disabled, .btn-outline-secondary:disabled {\r\n    color: #868e96;\r\n    background-color: transparent; }\r\n  .btn-outline-secondary:active, .btn-outline-secondary.active, .show > .btn-outline-secondary.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #868e96;\r\n    border-color: #868e96; }\r\n\r\n.btn-outline-success {\r\n  color: #28a745;\r\n  background-color: transparent;\r\n  background-image: none;\r\n  border-color: #28a745; }\r\n  .btn-outline-success:hover {\r\n    color: #fff;\r\n    background-color: #28a745;\r\n    border-color: #28a745; }\r\n  .btn-outline-success:focus, .btn-outline-success.focus {\r\n    box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.5); }\r\n  .btn-outline-success.disabled, .btn-outline-success:disabled {\r\n    color: #28a745;\r\n    background-color: transparent; }\r\n  .btn-outline-success:active, .btn-outline-success.active, .show > .btn-outline-success.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #28a745;\r\n    border-color: #28a745; }\r\n\r\n.btn-outline-info {\r\n  color: #17a2b8;\r\n  background-color: transparent;\r\n  background-image: none;\r\n  border-color: #17a2b8; }\r\n  .btn-outline-info:hover {\r\n    color: #fff;\r\n    background-color: #17a2b8;\r\n    border-color: #17a2b8; }\r\n  .btn-outline-info:focus, .btn-outline-info.focus {\r\n    box-shadow: 0 0 0 3px rgba(23, 162, 184, 0.5); }\r\n  .btn-outline-info.disabled, .btn-outline-info:disabled {\r\n    color: #17a2b8;\r\n    background-color: transparent; }\r\n  .btn-outline-info:active, .btn-outline-info.active, .show > .btn-outline-info.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #17a2b8;\r\n    border-color: #17a2b8; }\r\n\r\n.btn-outline-warning {\r\n  color: #ffc107;\r\n  background-color: transparent;\r\n  background-image: none;\r\n  border-color: #ffc107; }\r\n  .btn-outline-warning:hover {\r\n    color: #fff;\r\n    background-color: #ffc107;\r\n    border-color: #ffc107; }\r\n  .btn-outline-warning:focus, .btn-outline-warning.focus {\r\n    box-shadow: 0 0 0 3px rgba(255, 193, 7, 0.5); }\r\n  .btn-outline-warning.disabled, .btn-outline-warning:disabled {\r\n    color: #ffc107;\r\n    background-color: transparent; }\r\n  .btn-outline-warning:active, .btn-outline-warning.active, .show > .btn-outline-warning.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #ffc107;\r\n    border-color: #ffc107; }\r\n\r\n.btn-outline-danger {\r\n  color: #dc3545;\r\n  background-color: transparent;\r\n  background-image: none;\r\n  border-color: #dc3545; }\r\n  .btn-outline-danger:hover {\r\n    color: #fff;\r\n    background-color: #dc3545;\r\n    border-color: #dc3545; }\r\n  .btn-outline-danger:focus, .btn-outline-danger.focus {\r\n    box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.5); }\r\n  .btn-outline-danger.disabled, .btn-outline-danger:disabled {\r\n    color: #dc3545;\r\n    background-color: transparent; }\r\n  .btn-outline-danger:active, .btn-outline-danger.active, .show > .btn-outline-danger.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #dc3545;\r\n    border-color: #dc3545; }\r\n\r\n.btn-outline-light {\r\n  color: #f8f9fa;\r\n  background-color: transparent;\r\n  background-image: none;\r\n  border-color: #f8f9fa; }\r\n  .btn-outline-light:hover {\r\n    color: #fff;\r\n    background-color: #f8f9fa;\r\n    border-color: #f8f9fa; }\r\n  .btn-outline-light:focus, .btn-outline-light.focus {\r\n    box-shadow: 0 0 0 3px rgba(248, 249, 250, 0.5); }\r\n  .btn-outline-light.disabled, .btn-outline-light:disabled {\r\n    color: #f8f9fa;\r\n    background-color: transparent; }\r\n  .btn-outline-light:active, .btn-outline-light.active, .show > .btn-outline-light.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #f8f9fa;\r\n    border-color: #f8f9fa; }\r\n\r\n.btn-outline-dark {\r\n  color: #343a40;\r\n  background-color: transparent;\r\n  background-image: none;\r\n  border-color: #343a40; }\r\n  .btn-outline-dark:hover {\r\n    color: #fff;\r\n    background-color: #343a40;\r\n    border-color: #343a40; }\r\n  .btn-outline-dark:focus, .btn-outline-dark.focus {\r\n    box-shadow: 0 0 0 3px rgba(52, 58, 64, 0.5); }\r\n  .btn-outline-dark.disabled, .btn-outline-dark:disabled {\r\n    color: #343a40;\r\n    background-color: transparent; }\r\n  .btn-outline-dark:active, .btn-outline-dark.active, .show > .btn-outline-dark.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #343a40;\r\n    border-color: #343a40; }\r\n\r\n.btn-link {\r\n  font-weight: normal;\r\n  color: #007bff;\r\n  border-radius: 0; }\r\n  .btn-link, .btn-link:active, .btn-link.active, .btn-link:disabled {\r\n    background-color: transparent; }\r\n  .btn-link, .btn-link:focus, .btn-link:active {\r\n    border-color: transparent;\r\n    box-shadow: none; }\r\n  .btn-link:hover {\r\n    border-color: transparent; }\r\n  .btn-link:focus, .btn-link:hover {\r\n    color: #0056b3;\r\n    text-decoration: underline;\r\n    background-color: transparent; }\r\n  .btn-link:disabled {\r\n    color: #868e96; }\r\n    .btn-link:disabled:focus, .btn-link:disabled:hover {\r\n      text-decoration: none; }\r\n\r\n.btn-lg {\r\n  padding: 0.5rem 1rem;\r\n  font-size: 1.25rem;\r\n  line-height: 1.5;\r\n  border-radius: 0.3rem; }\r\n\r\n.btn-sm {\r\n  padding: 0.25rem 0.5rem;\r\n  font-size: 0.875rem;\r\n  line-height: 1.5;\r\n  border-radius: 0.2rem; }\r\n\r\n.btn-block {\r\n  display: block;\r\n  width: 100%; }\r\n\r\n.btn-block + .btn-block {\r\n  margin-top: 0.5rem; }\r\n\r\ninput[type="submit"].btn-block,\r\ninput[type="reset"].btn-block,\r\ninput[type="button"].btn-block {\r\n  width: 100%; }\r\n\r\n.fade {\r\n  opacity: 0;\r\n  transition: opacity 0.15s linear; }\r\n  .fade.show {\r\n    opacity: 1; }\r\n\r\n.collapse {\r\n  display: none; }\r\n  .collapse.show {\r\n    display: block; }\r\n\r\ntr.collapse.show {\r\n  display: table-row; }\r\n\r\ntbody.collapse.show {\r\n  display: table-row-group; }\r\n\r\n.collapsing {\r\n  position: relative;\r\n  height: 0;\r\n  overflow: hidden;\r\n  transition: height 0.35s ease; }\r\n\r\n.dropup,\r\n.dropdown {\r\n  position: relative; }\r\n\r\n.dropdown-toggle::after {\r\n  display: inline-block;\r\n  width: 0;\r\n  height: 0;\r\n  margin-left: 0.255em;\r\n  vertical-align: 0.255em;\r\n  content: "";\r\n  border-top: 0.3em solid;\r\n  border-right: 0.3em solid transparent;\r\n  border-left: 0.3em solid transparent; }\r\n.dropdown-toggle:empty::after {\r\n  margin-left: 0; }\r\n\r\n.dropup .dropdown-menu {\r\n  margin-top: 0;\r\n  margin-bottom: 0.125rem; }\r\n.dropup .dropdown-toggle::after {\r\n  border-top: 0;\r\n  border-bottom: 0.3em solid; }\r\n\r\n.dropdown-menu {\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n  z-index: 1000;\r\n  display: none;\r\n  float: left;\r\n  min-width: 10rem;\r\n  padding: 0.5rem 0;\r\n  margin: 0.125rem 0 0;\r\n  font-size: 1rem;\r\n  color: #212529;\r\n  text-align: left;\r\n  list-style: none;\r\n  background-color: #fff;\r\n  background-clip: padding-box;\r\n  border: 1px solid rgba(0, 0, 0, 0.15);\r\n  border-radius: 0.25rem; }\r\n\r\n.dropdown-divider {\r\n  height: 0;\r\n  margin: 0.5rem 0;\r\n  overflow: hidden;\r\n  border-top: 1px solid #e9ecef; }\r\n\r\n.dropdown-item {\r\n  display: block;\r\n  width: 100%;\r\n  padding: 0.25rem 1.5rem;\r\n  clear: both;\r\n  font-weight: normal;\r\n  color: #212529;\r\n  text-align: inherit;\r\n  white-space: nowrap;\r\n  background: none;\r\n  border: 0; }\r\n  .dropdown-item:focus, .dropdown-item:hover {\r\n    color: #16181b;\r\n    text-decoration: none;\r\n    background-color: #f8f9fa; }\r\n  .dropdown-item.active, .dropdown-item:active {\r\n    color: #fff;\r\n    text-decoration: none;\r\n    background-color: #007bff; }\r\n  .dropdown-item.disabled, .dropdown-item:disabled {\r\n    color: #868e96;\r\n    background-color: transparent; }\r\n\r\n.show > a {\r\n  outline: 0; }\r\n\r\n.dropdown-menu.show {\r\n  display: block; }\r\n\r\n.dropdown-header {\r\n  display: block;\r\n  padding: 0.5rem 1.5rem;\r\n  margin-bottom: 0;\r\n  font-size: 0.875rem;\r\n  color: #868e96;\r\n  white-space: nowrap; }\r\n\r\n.custom-control {\r\n  position: relative;\r\n  display: inline-flex;\r\n  min-height: 1.5rem;\r\n  padding-left: 1.5rem;\r\n  margin-right: 1rem; }\r\n\r\n.custom-control-input {\r\n  position: absolute;\r\n  z-index: -1;\r\n  opacity: 0; }\r\n  .custom-control-input:checked ~ .custom-control-indicator {\r\n    color: #fff;\r\n    background-color: #007bff; }\r\n  .custom-control-input:focus ~ .custom-control-indicator {\r\n    box-shadow: 0 0 0 1px #fff, 0 0 0 3px #007bff; }\r\n  .custom-control-input:active ~ .custom-control-indicator {\r\n    color: #fff;\r\n    background-color: #b3d7ff; }\r\n  .custom-control-input:disabled ~ .custom-control-indicator {\r\n    background-color: #e9ecef; }\r\n  .custom-control-input:disabled ~ .custom-control-description {\r\n    color: #868e96; }\r\n\r\n.custom-control-indicator {\r\n  position: absolute;\r\n  top: 0.25rem;\r\n  left: 0;\r\n  display: block;\r\n  width: 1rem;\r\n  height: 1rem;\r\n  pointer-events: none;\r\n  user-select: none;\r\n  background-color: #ddd;\r\n  background-repeat: no-repeat;\r\n  background-position: center center;\r\n  background-size: 50% 50%; }\r\n\r\n.custom-checkbox .custom-control-indicator {\r\n  border-radius: 0.25rem; }\r\n.custom-checkbox .custom-control-input:checked ~ .custom-control-indicator {\r\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 8 8\'%3E%3Cpath fill=\'%23fff\' d=\'M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z\'/%3E%3C/svg%3E"); }\r\n.custom-checkbox .custom-control-input:indeterminate ~ .custom-control-indicator {\r\n  background-color: #007bff;\r\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 4 4\'%3E%3Cpath stroke=\'%23fff\' d=\'M0 2h4\'/%3E%3C/svg%3E"); }\r\n\r\n.custom-radio .custom-control-indicator {\r\n  border-radius: 50%; }\r\n.custom-radio .custom-control-input:checked ~ .custom-control-indicator {\r\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'-4 -4 8 8\'%3E%3Ccircle r=\'3\' fill=\'%23fff\'/%3E%3C/svg%3E"); }\r\n\r\n.custom-controls-stacked {\r\n  display: flex;\r\n  flex-direction: column; }\r\n  .custom-controls-stacked .custom-control {\r\n    margin-bottom: 0.25rem; }\r\n    .custom-controls-stacked .custom-control + .custom-control {\r\n      margin-left: 0; }\r\n\r\n.custom-select {\r\n  display: inline-block;\r\n  max-width: 100%;\r\n  height: calc(2.25rem + 2px);\r\n  padding: 0.375rem 1.75rem 0.375rem 0.75rem;\r\n  line-height: 1.25;\r\n  color: #495057;\r\n  vertical-align: middle;\r\n  background: #fff url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 4 5\'%3E%3Cpath fill=\'%23333\' d=\'M2 0L0 2h4zm0 5L0 3h4z\'/%3E%3C/svg%3E") no-repeat right 0.75rem center;\r\n  background-clip: padding-box;\r\n  background-size: 8px 10px;\r\n  border: 1px solid rgba(0, 0, 0, 0.15);\r\n  border-radius: 0.25rem;\r\n  appearance: none; }\r\n  .custom-select:focus {\r\n    border-color: #80bdff;\r\n    outline: none; }\r\n    .custom-select:focus::-ms-value {\r\n      color: #495057;\r\n      background-color: #fff; }\r\n  .custom-select:disabled {\r\n    color: #868e96;\r\n    background-color: #e9ecef; }\r\n  .custom-select::-ms-expand {\r\n    opacity: 0; }\r\n\r\n.custom-select-sm {\r\n  height: calc(1.8125rem + 2px);\r\n  padding-top: 0.375rem;\r\n  padding-bottom: 0.375rem;\r\n  font-size: 75%; }\r\n\r\n.custom-file {\r\n  position: relative;\r\n  display: inline-block;\r\n  max-width: 100%;\r\n  height: calc(2.25rem + 2px);\r\n  margin-bottom: 0; }\r\n\r\n.custom-file-input {\r\n  min-width: 14rem;\r\n  max-width: 100%;\r\n  height: calc(2.25rem + 2px);\r\n  margin: 0;\r\n  opacity: 0; }\r\n  .custom-file-input:focus ~ .custom-file-control {\r\n    box-shadow: 0 0 0 0.075rem #fff, 0 0 0 0.2rem #007bff; }\r\n\r\n.custom-file-control {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n  z-index: 5;\r\n  height: calc(2.25rem + 2px);\r\n  padding: 0.5rem 0.75rem;\r\n  overflow: hidden;\r\n  line-height: 1.25;\r\n  color: #495057;\r\n  pointer-events: none;\r\n  user-select: none;\r\n  background-color: #fff;\r\n  background-clip: padding-box;\r\n  border: 1px solid rgba(0, 0, 0, 0.15);\r\n  border-radius: 0.25rem; }\r\n  .custom-file-control:lang(en):empty::after {\r\n    content: "Choose file..."; }\r\n  .custom-file-control::before {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    z-index: 6;\r\n    display: block;\r\n    height: calc(2.25rem + 2px);\r\n    padding: 0.5rem 0.75rem;\r\n    line-height: 1.25;\r\n    color: #495057;\r\n    background-color: #e9ecef;\r\n    border-left: 1px solid rgba(0, 0, 0, 0.15); }\r\n  .custom-file-control:lang(en)::before {\r\n    content: "Browse"; }\r\n\r\n.nav {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  padding-left: 0;\r\n  margin-bottom: 0;\r\n  list-style: none; }\r\n\r\n.nav-link {\r\n  display: block;\r\n  padding: 0.5rem 1rem; }\r\n  .nav-link:focus, .nav-link:hover {\r\n    text-decoration: none; }\r\n  .nav-link.disabled {\r\n    color: #868e96; }\r\n\r\n.nav-tabs {\r\n  border-bottom: 1px solid #ddd; }\r\n  .nav-tabs .nav-item {\r\n    margin-bottom: -1px; }\r\n  .nav-tabs .nav-link {\r\n    border: 1px solid transparent;\r\n    border-top-left-radius: 0.25rem;\r\n    border-top-right-radius: 0.25rem; }\r\n    .nav-tabs .nav-link:focus, .nav-tabs .nav-link:hover {\r\n      border-color: #e9ecef #e9ecef #ddd; }\r\n    .nav-tabs .nav-link.disabled {\r\n      color: #868e96;\r\n      background-color: transparent;\r\n      border-color: transparent; }\r\n  .nav-tabs .nav-link.active,\r\n  .nav-tabs .nav-item.show .nav-link {\r\n    color: #495057;\r\n    background-color: #fff;\r\n    border-color: #ddd #ddd #fff; }\r\n  .nav-tabs .dropdown-menu {\r\n    margin-top: -1px;\r\n    border-top-left-radius: 0;\r\n    border-top-right-radius: 0; }\r\n\r\n.nav-pills .nav-link {\r\n  border-radius: 0.25rem; }\r\n  .nav-pills .nav-link.active, .show > .nav-pills .nav-link {\r\n    color: #fff;\r\n    background-color: #007bff; }\r\n\r\n.nav-fill .nav-item {\r\n  flex: 1 1 auto;\r\n  text-align: center; }\r\n\r\n.nav-justified .nav-item {\r\n  flex-basis: 0;\r\n  flex-grow: 1;\r\n  text-align: center; }\r\n\r\n.tab-content > .tab-pane {\r\n  display: none; }\r\n.tab-content > .active {\r\n  display: block; }\r\n\r\n.navbar {\r\n  position: relative;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0.5rem 1rem; }\r\n  .navbar > .container,\r\n  .navbar > .container-fluid {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: space-between; }\r\n\r\n.navbar-brand {\r\n  display: inline-block;\r\n  padding-top: 0.3125rem;\r\n  padding-bottom: 0.3125rem;\r\n  margin-right: 1rem;\r\n  font-size: 1.25rem;\r\n  line-height: inherit;\r\n  white-space: nowrap; }\r\n  .navbar-brand:focus, .navbar-brand:hover {\r\n    text-decoration: none; }\r\n\r\n.navbar-nav {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-left: 0;\r\n  margin-bottom: 0;\r\n  list-style: none; }\r\n  .navbar-nav .nav-link {\r\n    padding-right: 0;\r\n    padding-left: 0; }\r\n  .navbar-nav .dropdown-menu {\r\n    position: static;\r\n    float: none; }\r\n\r\n.navbar-text {\r\n  display: inline-block;\r\n  padding-top: 0.5rem;\r\n  padding-bottom: 0.5rem; }\r\n\r\n.navbar-collapse {\r\n  flex-basis: 100%;\r\n  align-items: center; }\r\n\r\n.navbar-toggler {\r\n  padding: 0.25rem 0.75rem;\r\n  font-size: 1.25rem;\r\n  line-height: 1;\r\n  background: transparent;\r\n  border: 1px solid transparent;\r\n  border-radius: 0.25rem; }\r\n  .navbar-toggler:focus, .navbar-toggler:hover {\r\n    text-decoration: none; }\r\n\r\n.navbar-toggler-icon {\r\n  display: inline-block;\r\n  width: 1.5em;\r\n  height: 1.5em;\r\n  vertical-align: middle;\r\n  content: "";\r\n  background: no-repeat center center;\r\n  background-size: 100% 100%; }\r\n\r\n@media (max-width: 575px) {\r\n  .navbar-expand-sm > .container,\r\n  .navbar-expand-sm > .container-fluid {\r\n    padding-right: 0;\r\n    padding-left: 0; } }\r\n@media (min-width: 576px) {\r\n  .navbar-expand-sm {\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    justify-content: flex-start; }\r\n    .navbar-expand-sm .navbar-nav {\r\n      flex-direction: row; }\r\n      .navbar-expand-sm .navbar-nav .dropdown-menu {\r\n        position: absolute; }\r\n      .navbar-expand-sm .navbar-nav .dropdown-menu-right {\r\n        right: 0;\r\n        left: auto; }\r\n      .navbar-expand-sm .navbar-nav .nav-link {\r\n        padding-right: .5rem;\r\n        padding-left: .5rem; }\r\n    .navbar-expand-sm > .container,\r\n    .navbar-expand-sm > .container-fluid {\r\n      flex-wrap: nowrap; }\r\n    .navbar-expand-sm .navbar-collapse {\r\n      display: flex !important; }\r\n    .navbar-expand-sm .navbar-toggler {\r\n      display: none; } }\r\n@media (max-width: 767px) {\r\n  .navbar-expand-md > .container,\r\n  .navbar-expand-md > .container-fluid {\r\n    padding-right: 0;\r\n    padding-left: 0; } }\r\n@media (min-width: 768px) {\r\n  .navbar-expand-md {\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    justify-content: flex-start; }\r\n    .navbar-expand-md .navbar-nav {\r\n      flex-direction: row; }\r\n      .navbar-expand-md .navbar-nav .dropdown-menu {\r\n        position: absolute; }\r\n      .navbar-expand-md .navbar-nav .dropdown-menu-right {\r\n        right: 0;\r\n        left: auto; }\r\n      .navbar-expand-md .navbar-nav .nav-link {\r\n        padding-right: .5rem;\r\n        padding-left: .5rem; }\r\n    .navbar-expand-md > .container,\r\n    .navbar-expand-md > .container-fluid {\r\n      flex-wrap: nowrap; }\r\n    .navbar-expand-md .navbar-collapse {\r\n      display: flex !important; }\r\n    .navbar-expand-md .navbar-toggler {\r\n      display: none; } }\r\n@media (max-width: 991px) {\r\n  .navbar-expand-lg > .container,\r\n  .navbar-expand-lg > .container-fluid {\r\n    padding-right: 0;\r\n    padding-left: 0; } }\r\n@media (min-width: 992px) {\r\n  .navbar-expand-lg {\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    justify-content: flex-start; }\r\n    .navbar-expand-lg .navbar-nav {\r\n      flex-direction: row; }\r\n      .navbar-expand-lg .navbar-nav .dropdown-menu {\r\n        position: absolute; }\r\n      .navbar-expand-lg .navbar-nav .dropdown-menu-right {\r\n        right: 0;\r\n        left: auto; }\r\n      .navbar-expand-lg .navbar-nav .nav-link {\r\n        padding-right: .5rem;\r\n        padding-left: .5rem; }\r\n    .navbar-expand-lg > .container,\r\n    .navbar-expand-lg > .container-fluid {\r\n      flex-wrap: nowrap; }\r\n    .navbar-expand-lg .navbar-collapse {\r\n      display: flex !important; }\r\n    .navbar-expand-lg .navbar-toggler {\r\n      display: none; } }\r\n@media (max-width: 1199px) {\r\n  .navbar-expand-xl > .container,\r\n  .navbar-expand-xl > .container-fluid {\r\n    padding-right: 0;\r\n    padding-left: 0; } }\r\n@media (min-width: 1200px) {\r\n  .navbar-expand-xl {\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    justify-content: flex-start; }\r\n    .navbar-expand-xl .navbar-nav {\r\n      flex-direction: row; }\r\n      .navbar-expand-xl .navbar-nav .dropdown-menu {\r\n        position: absolute; }\r\n      .navbar-expand-xl .navbar-nav .dropdown-menu-right {\r\n        right: 0;\r\n        left: auto; }\r\n      .navbar-expand-xl .navbar-nav .nav-link {\r\n        padding-right: .5rem;\r\n        padding-left: .5rem; }\r\n    .navbar-expand-xl > .container,\r\n    .navbar-expand-xl > .container-fluid {\r\n      flex-wrap: nowrap; }\r\n    .navbar-expand-xl .navbar-collapse {\r\n      display: flex !important; }\r\n    .navbar-expand-xl .navbar-toggler {\r\n      display: none; } }\r\n.navbar-expand {\r\n  flex-direction: row;\r\n  flex-wrap: nowrap;\r\n  justify-content: flex-start; }\r\n  .navbar-expand > .container,\r\n  .navbar-expand > .container-fluid {\r\n    padding-right: 0;\r\n    padding-left: 0; }\r\n  .navbar-expand .navbar-nav {\r\n    flex-direction: row; }\r\n    .navbar-expand .navbar-nav .dropdown-menu {\r\n      position: absolute; }\r\n    .navbar-expand .navbar-nav .dropdown-menu-right {\r\n      right: 0;\r\n      left: auto; }\r\n    .navbar-expand .navbar-nav .nav-link {\r\n      padding-right: .5rem;\r\n      padding-left: .5rem; }\r\n  .navbar-expand > .container,\r\n  .navbar-expand > .container-fluid {\r\n    flex-wrap: nowrap; }\r\n  .navbar-expand .navbar-collapse {\r\n    display: flex !important; }\r\n  .navbar-expand .navbar-toggler {\r\n    display: none; }\r\n\r\n.navbar-light .navbar-brand {\r\n  color: rgba(0, 0, 0, 0.9); }\r\n  .navbar-light .navbar-brand:focus, .navbar-light .navbar-brand:hover {\r\n    color: rgba(0, 0, 0, 0.9); }\r\n.navbar-light .navbar-nav .nav-link {\r\n  color: rgba(0, 0, 0, 0.5); }\r\n  .navbar-light .navbar-nav .nav-link:focus, .navbar-light .navbar-nav .nav-link:hover {\r\n    color: rgba(0, 0, 0, 0.7); }\r\n  .navbar-light .navbar-nav .nav-link.disabled {\r\n    color: rgba(0, 0, 0, 0.3); }\r\n.navbar-light .navbar-nav .show > .nav-link,\r\n.navbar-light .navbar-nav .active > .nav-link,\r\n.navbar-light .navbar-nav .nav-link.show,\r\n.navbar-light .navbar-nav .nav-link.active {\r\n  color: rgba(0, 0, 0, 0.9); }\r\n.navbar-light .navbar-toggler {\r\n  color: rgba(0, 0, 0, 0.5);\r\n  border-color: rgba(0, 0, 0, 0.1); }\r\n.navbar-light .navbar-toggler-icon {\r\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg viewBox=\'0 0 30 30\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cpath stroke=\'rgba(0, 0, 0, 0.5)\' stroke-width=\'2\' stroke-linecap=\'round\' stroke-miterlimit=\'10\' d=\'M4 7h22M4 15h22M4 23h22\'/%3E%3C/svg%3E"); }\r\n.navbar-light .navbar-text {\r\n  color: rgba(0, 0, 0, 0.5); }\r\n\r\n.navbar-dark .navbar-brand {\r\n  color: white; }\r\n  .navbar-dark .navbar-brand:focus, .navbar-dark .navbar-brand:hover {\r\n    color: white; }\r\n.navbar-dark .navbar-nav .nav-link {\r\n  color: rgba(255, 255, 255, 0.5); }\r\n  .navbar-dark .navbar-nav .nav-link:focus, .navbar-dark .navbar-nav .nav-link:hover {\r\n    color: rgba(255, 255, 255, 0.75); }\r\n  .navbar-dark .navbar-nav .nav-link.disabled {\r\n    color: rgba(255, 255, 255, 0.25); }\r\n.navbar-dark .navbar-nav .show > .nav-link,\r\n.navbar-dark .navbar-nav .active > .nav-link,\r\n.navbar-dark .navbar-nav .nav-link.show,\r\n.navbar-dark .navbar-nav .nav-link.active {\r\n  color: white; }\r\n.navbar-dark .navbar-toggler {\r\n  color: rgba(255, 255, 255, 0.5);\r\n  border-color: rgba(255, 255, 255, 0.1); }\r\n.navbar-dark .navbar-toggler-icon {\r\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg viewBox=\'0 0 30 30\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cpath stroke=\'rgba(255, 255, 255, 0.5)\' stroke-width=\'2\' stroke-linecap=\'round\' stroke-miterlimit=\'10\' d=\'M4 7h22M4 15h22M4 23h22\'/%3E%3C/svg%3E"); }\r\n.navbar-dark .navbar-text {\r\n  color: rgba(255, 255, 255, 0.5); }\r\n\r\n.card {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-width: 0;\r\n  word-wrap: break-word;\r\n  background-color: #fff;\r\n  background-clip: border-box;\r\n  border: 1px solid rgba(0, 0, 0, 0.125);\r\n  border-radius: 0.25rem; }\r\n\r\n.card-body {\r\n  flex: 1 1 auto;\r\n  padding: 1.25rem; }\r\n\r\n.card-title {\r\n  margin-bottom: 0.75rem; }\r\n\r\n.card-subtitle {\r\n  margin-top: -0.375rem;\r\n  margin-bottom: 0; }\r\n\r\n.card-text:last-child {\r\n  margin-bottom: 0; }\r\n\r\n.card-link:hover {\r\n  text-decoration: none; }\r\n.card-link + .card-link {\r\n  margin-left: 1.25rem; }\r\n\r\n.card > .list-group:first-child .list-group-item:first-child {\r\n  border-top-left-radius: 0.25rem;\r\n  border-top-right-radius: 0.25rem; }\r\n.card > .list-group:last-child .list-group-item:last-child {\r\n  border-bottom-right-radius: 0.25rem;\r\n  border-bottom-left-radius: 0.25rem; }\r\n\r\n.card-header {\r\n  padding: 0.75rem 1.25rem;\r\n  margin-bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.03);\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.125); }\r\n  .card-header:first-child {\r\n    border-radius: calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0; }\r\n\r\n.card-footer {\r\n  padding: 0.75rem 1.25rem;\r\n  background-color: rgba(0, 0, 0, 0.03);\r\n  border-top: 1px solid rgba(0, 0, 0, 0.125); }\r\n  .card-footer:last-child {\r\n    border-radius: 0 0 calc(0.25rem - 1px) calc(0.25rem - 1px); }\r\n\r\n.card-header-tabs {\r\n  margin-right: -0.625rem;\r\n  margin-bottom: -0.75rem;\r\n  margin-left: -0.625rem;\r\n  border-bottom: 0; }\r\n\r\n.card-header-pills {\r\n  margin-right: -0.625rem;\r\n  margin-left: -0.625rem; }\r\n\r\n.card-img-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  padding: 1.25rem; }\r\n\r\n.card-img {\r\n  width: 100%;\r\n  border-radius: calc(0.25rem - 1px); }\r\n\r\n.card-img-top {\r\n  width: 100%;\r\n  border-top-left-radius: calc(0.25rem - 1px);\r\n  border-top-right-radius: calc(0.25rem - 1px); }\r\n\r\n.card-img-bottom {\r\n  width: 100%;\r\n  border-bottom-right-radius: calc(0.25rem - 1px);\r\n  border-bottom-left-radius: calc(0.25rem - 1px); }\r\n\r\n@media (min-width: 576px) {\r\n  .card-deck {\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    margin-right: -15px;\r\n    margin-left: -15px; }\r\n    .card-deck .card {\r\n      display: flex;\r\n      flex: 1 0 0%;\r\n      flex-direction: column;\r\n      margin-right: 15px;\r\n      margin-left: 15px; } }\r\n@media (min-width: 576px) {\r\n  .card-group {\r\n    display: flex;\r\n    flex-flow: row wrap; }\r\n    .card-group .card {\r\n      flex: 1 0 0%; }\r\n      .card-group .card + .card {\r\n        margin-left: 0;\r\n        border-left: 0; }\r\n      .card-group .card:first-child {\r\n        border-top-right-radius: 0;\r\n        border-bottom-right-radius: 0; }\r\n        .card-group .card:first-child .card-img-top {\r\n          border-top-right-radius: 0; }\r\n        .card-group .card:first-child .card-img-bottom {\r\n          border-bottom-right-radius: 0; }\r\n      .card-group .card:last-child {\r\n        border-top-left-radius: 0;\r\n        border-bottom-left-radius: 0; }\r\n        .card-group .card:last-child .card-img-top {\r\n          border-top-left-radius: 0; }\r\n        .card-group .card:last-child .card-img-bottom {\r\n          border-bottom-left-radius: 0; }\r\n      .card-group .card:not(:first-child):not(:last-child) {\r\n        border-radius: 0; }\r\n        .card-group .card:not(:first-child):not(:last-child) .card-img-top,\r\n        .card-group .card:not(:first-child):not(:last-child) .card-img-bottom {\r\n          border-radius: 0; } }\r\n.card-columns .card {\r\n  margin-bottom: 0.75rem; }\r\n@media (min-width: 576px) {\r\n  .card-columns {\r\n    column-count: 3;\r\n    column-gap: 1.25rem; }\r\n    .card-columns .card {\r\n      display: inline-block;\r\n      width: 100%; } }\r\n\r\n.breadcrumb {\r\n  padding: 0.75rem 1rem;\r\n  margin-bottom: 1rem;\r\n  list-style: none;\r\n  background-color: #e9ecef;\r\n  border-radius: 0.25rem; }\r\n  .breadcrumb::after {\r\n    display: block;\r\n    clear: both;\r\n    content: ""; }\r\n\r\n.breadcrumb-item {\r\n  float: left; }\r\n  .breadcrumb-item + .breadcrumb-item::before {\r\n    display: inline-block;\r\n    padding-right: 0.5rem;\r\n    padding-left: 0.5rem;\r\n    color: #868e96;\r\n    content: "/"; }\r\n  .breadcrumb-item + .breadcrumb-item:hover::before {\r\n    text-decoration: underline; }\r\n  .breadcrumb-item + .breadcrumb-item:hover::before {\r\n    text-decoration: none; }\r\n  .breadcrumb-item.active {\r\n    color: #868e96; }\r\n\r\n.pagination {\r\n  display: flex;\r\n  padding-left: 0;\r\n  list-style: none;\r\n  border-radius: 0.25rem; }\r\n\r\n.page-item:first-child .page-link {\r\n  margin-left: 0;\r\n  border-top-left-radius: 0.25rem;\r\n  border-bottom-left-radius: 0.25rem; }\r\n.page-item:last-child .page-link {\r\n  border-top-right-radius: 0.25rem;\r\n  border-bottom-right-radius: 0.25rem; }\r\n.page-item.active .page-link {\r\n  z-index: 2;\r\n  color: #fff;\r\n  background-color: #007bff;\r\n  border-color: #007bff; }\r\n.page-item.disabled .page-link {\r\n  color: #868e96;\r\n  pointer-events: none;\r\n  background-color: #fff;\r\n  border-color: #ddd; }\r\n\r\n.page-link {\r\n  position: relative;\r\n  display: block;\r\n  padding: 0.5rem 0.75rem;\r\n  margin-left: -1px;\r\n  line-height: 1.25;\r\n  color: #007bff;\r\n  background-color: #fff;\r\n  border: 1px solid #ddd; }\r\n  .page-link:focus, .page-link:hover {\r\n    color: #0056b3;\r\n    text-decoration: none;\r\n    background-color: #e9ecef;\r\n    border-color: #ddd; }\r\n\r\n.pagination-lg .page-link {\r\n  padding: 0.75rem 1.5rem;\r\n  font-size: 1.25rem;\r\n  line-height: 1.5; }\r\n.pagination-lg .page-item:first-child .page-link {\r\n  border-top-left-radius: 0.3rem;\r\n  border-bottom-left-radius: 0.3rem; }\r\n.pagination-lg .page-item:last-child .page-link {\r\n  border-top-right-radius: 0.3rem;\r\n  border-bottom-right-radius: 0.3rem; }\r\n\r\n.pagination-sm .page-link {\r\n  padding: 0.25rem 0.5rem;\r\n  font-size: 0.875rem;\r\n  line-height: 1.5; }\r\n.pagination-sm .page-item:first-child .page-link {\r\n  border-top-left-radius: 0.2rem;\r\n  border-bottom-left-radius: 0.2rem; }\r\n.pagination-sm .page-item:last-child .page-link {\r\n  border-top-right-radius: 0.2rem;\r\n  border-bottom-right-radius: 0.2rem; }\r\n\r\n.badge {\r\n  display: inline-block;\r\n  padding: 0.25em 0.4em;\r\n  font-size: 75%;\r\n  font-weight: bold;\r\n  line-height: 1;\r\n  color: #fff;\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  vertical-align: baseline;\r\n  border-radius: 0.25rem; }\r\n  .badge:empty {\r\n    display: none; }\r\n\r\n.btn .badge {\r\n  position: relative;\r\n  top: -1px; }\r\n\r\n.badge-pill {\r\n  padding-right: 0.6em;\r\n  padding-left: 0.6em;\r\n  border-radius: 10rem; }\r\n\r\n.badge-primary {\r\n  color: #fff;\r\n  background-color: #007bff; }\r\n  .badge-primary[href]:focus, .badge-primary[href]:hover {\r\n    color: #fff;\r\n    text-decoration: none;\r\n    background-color: #0062cc; }\r\n\r\n.badge-secondary {\r\n  color: #fff;\r\n  background-color: #868e96; }\r\n  .badge-secondary[href]:focus, .badge-secondary[href]:hover {\r\n    color: #fff;\r\n    text-decoration: none;\r\n    background-color: #6c757d; }\r\n\r\n.badge-success {\r\n  color: #fff;\r\n  background-color: #28a745; }\r\n  .badge-success[href]:focus, .badge-success[href]:hover {\r\n    color: #fff;\r\n    text-decoration: none;\r\n    background-color: #1e7e34; }\r\n\r\n.badge-info {\r\n  color: #fff;\r\n  background-color: #17a2b8; }\r\n  .badge-info[href]:focus, .badge-info[href]:hover {\r\n    color: #fff;\r\n    text-decoration: none;\r\n    background-color: #117a8b; }\r\n\r\n.badge-warning {\r\n  color: #111;\r\n  background-color: #ffc107; }\r\n  .badge-warning[href]:focus, .badge-warning[href]:hover {\r\n    color: #111;\r\n    text-decoration: none;\r\n    background-color: #d39e00; }\r\n\r\n.badge-danger {\r\n  color: #fff;\r\n  background-color: #dc3545; }\r\n  .badge-danger[href]:focus, .badge-danger[href]:hover {\r\n    color: #fff;\r\n    text-decoration: none;\r\n    background-color: #bd2130; }\r\n\r\n.badge-light {\r\n  color: #111;\r\n  background-color: #f8f9fa; }\r\n  .badge-light[href]:focus, .badge-light[href]:hover {\r\n    color: #111;\r\n    text-decoration: none;\r\n    background-color: #dae0e5; }\r\n\r\n.badge-dark {\r\n  color: #fff;\r\n  background-color: #343a40; }\r\n  .badge-dark[href]:focus, .badge-dark[href]:hover {\r\n    color: #fff;\r\n    text-decoration: none;\r\n    background-color: #1d2124; }\r\n\r\n.alert {\r\n  padding: 0.75rem 1.25rem;\r\n  margin-bottom: 1rem;\r\n  border: 1px solid transparent;\r\n  border-radius: 0.25rem; }\r\n\r\n.alert-heading {\r\n  color: inherit; }\r\n\r\n.alert-link {\r\n  font-weight: bold; }\r\n\r\n.alert-dismissible .close {\r\n  position: relative;\r\n  top: -0.75rem;\r\n  right: -1.25rem;\r\n  padding: 0.75rem 1.25rem;\r\n  color: inherit; }\r\n\r\n.alert-primary {\r\n  color: #004085;\r\n  background-color: #cce5ff;\r\n  border-color: #b8daff; }\r\n  .alert-primary hr {\r\n    border-top-color: #9fcdff; }\r\n  .alert-primary .alert-link {\r\n    color: #002752; }\r\n\r\n.alert-secondary {\r\n  color: #464a4e;\r\n  background-color: #e7e8ea;\r\n  border-color: #dddfe2; }\r\n  .alert-secondary hr {\r\n    border-top-color: #cfd2d6; }\r\n  .alert-secondary .alert-link {\r\n    color: #2e3133; }\r\n\r\n.alert-success {\r\n  color: #155724;\r\n  background-color: #d4edda;\r\n  border-color: #c3e6cb; }\r\n  .alert-success hr {\r\n    border-top-color: #b1dfbb; }\r\n  .alert-success .alert-link {\r\n    color: #0b2e13; }\r\n\r\n.alert-info {\r\n  color: #0c5460;\r\n  background-color: #d1ecf1;\r\n  border-color: #bee5eb; }\r\n  .alert-info hr {\r\n    border-top-color: #abdde5; }\r\n  .alert-info .alert-link {\r\n    color: #062c33; }\r\n\r\n.alert-warning {\r\n  color: #856404;\r\n  background-color: #fff3cd;\r\n  border-color: #ffeeba; }\r\n  .alert-warning hr {\r\n    border-top-color: #ffe8a1; }\r\n  .alert-warning .alert-link {\r\n    color: #533f03; }\r\n\r\n.alert-danger {\r\n  color: #721c24;\r\n  background-color: #f8d7da;\r\n  border-color: #f5c6cb; }\r\n  .alert-danger hr {\r\n    border-top-color: #f1b0b7; }\r\n  .alert-danger .alert-link {\r\n    color: #491217; }\r\n\r\n.alert-light {\r\n  color: #818182;\r\n  background-color: #fefefe;\r\n  border-color: #fdfdfe; }\r\n  .alert-light hr {\r\n    border-top-color: #ececf6; }\r\n  .alert-light .alert-link {\r\n    color: #686868; }\r\n\r\n.alert-dark {\r\n  color: #1b1e21;\r\n  background-color: #d6d8d9;\r\n  border-color: #c6c8ca; }\r\n  .alert-dark hr {\r\n    border-top-color: #b9bbbe; }\r\n  .alert-dark .alert-link {\r\n    color: #040505; }\r\n\r\n.media {\r\n  display: flex;\r\n  align-items: flex-start; }\r\n\r\n.media-body {\r\n  flex: 1; }\r\n\r\n.close {\r\n  float: right;\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n  line-height: 1;\r\n  color: #000;\r\n  text-shadow: 0 1px 0 #fff;\r\n  opacity: .5; }\r\n  .close:focus, .close:hover {\r\n    color: #000;\r\n    text-decoration: none;\r\n    opacity: .75; }\r\n\r\nbutton.close {\r\n  padding: 0;\r\n  background: transparent;\r\n  border: 0;\r\n  -webkit-appearance: none; }\r\n\r\n.modal-open {\r\n  overflow: hidden; }\r\n\r\n.modal {\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 1050;\r\n  display: none;\r\n  overflow: hidden;\r\n  outline: 0; }\r\n  .modal.fade .modal-dialog {\r\n    transition: transform 0.3s ease-out;\r\n    transform: translate(0, -25%); }\r\n  .modal.show .modal-dialog {\r\n    transform: translate(0, 0); }\r\n\r\n.modal-open .modal {\r\n  overflow-x: hidden;\r\n  overflow-y: auto; }\r\n\r\n.modal-dialog {\r\n  position: relative;\r\n  width: auto;\r\n  margin: 10px; }\r\n\r\n.modal-content {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #fff;\r\n  background-clip: padding-box;\r\n  border: 1px solid rgba(0, 0, 0, 0.2);\r\n  border-radius: 0.3rem;\r\n  outline: 0; }\r\n\r\n.modal-backdrop {\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 1040;\r\n  background-color: #000; }\r\n  .modal-backdrop.fade {\r\n    opacity: 0; }\r\n  .modal-backdrop.show {\r\n    opacity: 0.5; }\r\n\r\n.modal-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 15px;\r\n  border-bottom: 1px solid #e9ecef; }\r\n  .modal-header .close {\r\n    margin-left: auto; }\r\n\r\n.modal-title {\r\n  margin-bottom: 0;\r\n  line-height: 1.5; }\r\n\r\n.modal-body {\r\n  position: relative;\r\n  flex: 1 1 auto;\r\n  padding: 15px; }\r\n\r\n.modal-footer {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  padding: 15px;\r\n  border-top: 1px solid #e9ecef; }\r\n  .modal-footer > :not(:first-child) {\r\n    margin-left: .25rem; }\r\n  .modal-footer > :not(:last-child) {\r\n    margin-right: .25rem; }\r\n\r\n.modal-scrollbar-measure {\r\n  position: absolute;\r\n  top: -9999px;\r\n  width: 50px;\r\n  height: 50px;\r\n  overflow: scroll; }\r\n\r\n@media (min-width: 576px) {\r\n  .modal-dialog {\r\n    max-width: 500px;\r\n    margin: 30px auto; }\r\n\r\n  .modal-sm {\r\n    max-width: 300px; } }\r\n@media (min-width: 992px) {\r\n  .modal-lg {\r\n    max-width: 800px; } }\r\n.tooltip {\r\n  position: absolute;\r\n  z-index: 1070;\r\n  display: block;\r\n  margin: 0;\r\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  line-height: 1.5;\r\n  text-align: left;\r\n  text-align: start;\r\n  text-decoration: none;\r\n  text-shadow: none;\r\n  text-transform: none;\r\n  letter-spacing: normal;\r\n  word-break: normal;\r\n  word-spacing: normal;\r\n  white-space: normal;\r\n  line-break: auto;\r\n  font-size: 0.875rem;\r\n  word-wrap: break-word;\r\n  opacity: 0; }\r\n  .tooltip.show {\r\n    opacity: 0.9; }\r\n  .tooltip .arrow {\r\n    position: absolute;\r\n    display: block;\r\n    width: 5px;\r\n    height: 5px; }\r\n  .tooltip.bs-tooltip-top, .tooltip.bs-tooltip-auto[x-placement^="top"] {\r\n    padding: 5px 0; }\r\n    .tooltip.bs-tooltip-top .arrow, .tooltip.bs-tooltip-auto[x-placement^="top"] .arrow {\r\n      bottom: 0; }\r\n    .tooltip.bs-tooltip-top .arrow::before, .tooltip.bs-tooltip-auto[x-placement^="top"] .arrow::before {\r\n      margin-left: -3px;\r\n      content: "";\r\n      border-width: 5px 5px 0;\r\n      border-top-color: #000; }\r\n  .tooltip.bs-tooltip-right, .tooltip.bs-tooltip-auto[x-placement^="right"] {\r\n    padding: 0 5px; }\r\n    .tooltip.bs-tooltip-right .arrow, .tooltip.bs-tooltip-auto[x-placement^="right"] .arrow {\r\n      left: 0; }\r\n    .tooltip.bs-tooltip-right .arrow::before, .tooltip.bs-tooltip-auto[x-placement^="right"] .arrow::before {\r\n      margin-top: -3px;\r\n      content: "";\r\n      border-width: 5px 5px 5px 0;\r\n      border-right-color: #000; }\r\n  .tooltip.bs-tooltip-bottom, .tooltip.bs-tooltip-auto[x-placement^="bottom"] {\r\n    padding: 5px 0; }\r\n    .tooltip.bs-tooltip-bottom .arrow, .tooltip.bs-tooltip-auto[x-placement^="bottom"] .arrow {\r\n      top: 0; }\r\n    .tooltip.bs-tooltip-bottom .arrow::before, .tooltip.bs-tooltip-auto[x-placement^="bottom"] .arrow::before {\r\n      margin-left: -3px;\r\n      content: "";\r\n      border-width: 0 5px 5px;\r\n      border-bottom-color: #000; }\r\n  .tooltip.bs-tooltip-left, .tooltip.bs-tooltip-auto[x-placement^="left"] {\r\n    padding: 0 5px; }\r\n    .tooltip.bs-tooltip-left .arrow, .tooltip.bs-tooltip-auto[x-placement^="left"] .arrow {\r\n      right: 0; }\r\n    .tooltip.bs-tooltip-left .arrow::before, .tooltip.bs-tooltip-auto[x-placement^="left"] .arrow::before {\r\n      right: 0;\r\n      margin-top: -3px;\r\n      content: "";\r\n      border-width: 5px 0 5px 5px;\r\n      border-left-color: #000; }\r\n  .tooltip .arrow::before {\r\n    position: absolute;\r\n    border-color: transparent;\r\n    border-style: solid; }\r\n\r\n.tooltip-inner {\r\n  max-width: 200px;\r\n  padding: 3px 8px;\r\n  color: #fff;\r\n  text-align: center;\r\n  background-color: #000;\r\n  border-radius: 0.25rem; }\r\n\r\n.popover {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 1060;\r\n  display: block;\r\n  max-width: 276px;\r\n  padding: 1px;\r\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  line-height: 1.5;\r\n  text-align: left;\r\n  text-align: start;\r\n  text-decoration: none;\r\n  text-shadow: none;\r\n  text-transform: none;\r\n  letter-spacing: normal;\r\n  word-break: normal;\r\n  word-spacing: normal;\r\n  white-space: normal;\r\n  line-break: auto;\r\n  font-size: 0.875rem;\r\n  word-wrap: break-word;\r\n  background-color: #fff;\r\n  background-clip: padding-box;\r\n  border: 1px solid rgba(0, 0, 0, 0.2);\r\n  border-radius: 0.3rem; }\r\n  .popover .arrow {\r\n    position: absolute;\r\n    display: block;\r\n    width: 10px;\r\n    height: 5px; }\r\n  .popover .arrow::before,\r\n  .popover .arrow::after {\r\n    position: absolute;\r\n    display: block;\r\n    border-color: transparent;\r\n    border-style: solid; }\r\n  .popover .arrow::before {\r\n    content: "";\r\n    border-width: 11px; }\r\n  .popover .arrow::after {\r\n    content: "";\r\n    border-width: 11px; }\r\n  .popover.bs-popover-top, .popover.bs-popover-auto[x-placement^="top"] {\r\n    margin-bottom: 10px; }\r\n    .popover.bs-popover-top .arrow, .popover.bs-popover-auto[x-placement^="top"] .arrow {\r\n      bottom: 0; }\r\n    .popover.bs-popover-top .arrow::before, .popover.bs-popover-auto[x-placement^="top"] .arrow::before,\r\n    .popover.bs-popover-top .arrow::after,\r\n    .popover.bs-popover-auto[x-placement^="top"] .arrow::after {\r\n      border-bottom-width: 0; }\r\n    .popover.bs-popover-top .arrow::before, .popover.bs-popover-auto[x-placement^="top"] .arrow::before {\r\n      bottom: -11px;\r\n      margin-left: -6px;\r\n      border-top-color: rgba(0, 0, 0, 0.25); }\r\n    .popover.bs-popover-top .arrow::after, .popover.bs-popover-auto[x-placement^="top"] .arrow::after {\r\n      bottom: -10px;\r\n      margin-left: -6px;\r\n      border-top-color: #fff; }\r\n  .popover.bs-popover-right, .popover.bs-popover-auto[x-placement^="right"] {\r\n    margin-left: 10px; }\r\n    .popover.bs-popover-right .arrow, .popover.bs-popover-auto[x-placement^="right"] .arrow {\r\n      left: 0; }\r\n    .popover.bs-popover-right .arrow::before, .popover.bs-popover-auto[x-placement^="right"] .arrow::before,\r\n    .popover.bs-popover-right .arrow::after,\r\n    .popover.bs-popover-auto[x-placement^="right"] .arrow::after {\r\n      margin-top: -8px;\r\n      border-left-width: 0; }\r\n    .popover.bs-popover-right .arrow::before, .popover.bs-popover-auto[x-placement^="right"] .arrow::before {\r\n      left: -11px;\r\n      border-right-color: rgba(0, 0, 0, 0.25); }\r\n    .popover.bs-popover-right .arrow::after, .popover.bs-popover-auto[x-placement^="right"] .arrow::after {\r\n      left: -10px;\r\n      border-right-color: #fff; }\r\n  .popover.bs-popover-bottom, .popover.bs-popover-auto[x-placement^="bottom"] {\r\n    margin-top: 10px; }\r\n    .popover.bs-popover-bottom .arrow, .popover.bs-popover-auto[x-placement^="bottom"] .arrow {\r\n      top: 0; }\r\n    .popover.bs-popover-bottom .arrow::before, .popover.bs-popover-auto[x-placement^="bottom"] .arrow::before,\r\n    .popover.bs-popover-bottom .arrow::after,\r\n    .popover.bs-popover-auto[x-placement^="bottom"] .arrow::after {\r\n      margin-left: -7px;\r\n      border-top-width: 0; }\r\n    .popover.bs-popover-bottom .arrow::before, .popover.bs-popover-auto[x-placement^="bottom"] .arrow::before {\r\n      top: -11px;\r\n      border-bottom-color: rgba(0, 0, 0, 0.25); }\r\n    .popover.bs-popover-bottom .arrow::after, .popover.bs-popover-auto[x-placement^="bottom"] .arrow::after {\r\n      top: -10px;\r\n      border-bottom-color: #fff; }\r\n    .popover.bs-popover-bottom .popover-header::before, .popover.bs-popover-auto[x-placement^="bottom"] .popover-header::before {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 50%;\r\n      display: block;\r\n      width: 20px;\r\n      margin-left: -10px;\r\n      content: "";\r\n      border-bottom: 1px solid #f7f7f7; }\r\n  .popover.bs-popover-left, .popover.bs-popover-auto[x-placement^="left"] {\r\n    margin-right: 10px; }\r\n    .popover.bs-popover-left .arrow, .popover.bs-popover-auto[x-placement^="left"] .arrow {\r\n      right: 0; }\r\n    .popover.bs-popover-left .arrow::before, .popover.bs-popover-auto[x-placement^="left"] .arrow::before,\r\n    .popover.bs-popover-left .arrow::after,\r\n    .popover.bs-popover-auto[x-placement^="left"] .arrow::after {\r\n      margin-top: -8px;\r\n      border-right-width: 0; }\r\n    .popover.bs-popover-left .arrow::before, .popover.bs-popover-auto[x-placement^="left"] .arrow::before {\r\n      right: -11px;\r\n      border-left-color: rgba(0, 0, 0, 0.25); }\r\n    .popover.bs-popover-left .arrow::after, .popover.bs-popover-auto[x-placement^="left"] .arrow::after {\r\n      right: -10px;\r\n      border-left-color: #fff; }\r\n\r\n.popover-header {\r\n  padding: 8px 14px;\r\n  margin-bottom: 0;\r\n  font-size: 1rem;\r\n  color: inherit;\r\n  background-color: #f7f7f7;\r\n  border-bottom: 1px solid #ebebeb;\r\n  border-top-left-radius: calc(0.3rem - 1px);\r\n  border-top-right-radius: calc(0.3rem - 1px); }\r\n  .popover-header:empty {\r\n    display: none; }\r\n\r\n.popover-body {\r\n  padding: 9px 14px;\r\n  color: #212529; }\r\n\r\n.align-baseline {\r\n  vertical-align: baseline !important; }\r\n\r\n.align-top {\r\n  vertical-align: top !important; }\r\n\r\n.align-middle {\r\n  vertical-align: middle !important; }\r\n\r\n.align-bottom {\r\n  vertical-align: bottom !important; }\r\n\r\n.align-text-bottom {\r\n  vertical-align: text-bottom !important; }\r\n\r\n.align-text-top {\r\n  vertical-align: text-top !important; }\r\n\r\n.bg-primary {\r\n  background-color: #007bff !important; }\r\n\r\na.bg-primary:focus, a.bg-primary:hover {\r\n  background-color: #0062cc !important; }\r\n\r\n.bg-secondary {\r\n  background-color: #868e96 !important; }\r\n\r\na.bg-secondary:focus, a.bg-secondary:hover {\r\n  background-color: #6c757d !important; }\r\n\r\n.bg-success {\r\n  background-color: #28a745 !important; }\r\n\r\na.bg-success:focus, a.bg-success:hover {\r\n  background-color: #1e7e34 !important; }\r\n\r\n.bg-info {\r\n  background-color: #17a2b8 !important; }\r\n\r\na.bg-info:focus, a.bg-info:hover {\r\n  background-color: #117a8b !important; }\r\n\r\n.bg-warning {\r\n  background-color: #ffc107 !important; }\r\n\r\na.bg-warning:focus, a.bg-warning:hover {\r\n  background-color: #d39e00 !important; }\r\n\r\n.bg-danger {\r\n  background-color: #dc3545 !important; }\r\n\r\na.bg-danger:focus, a.bg-danger:hover {\r\n  background-color: #bd2130 !important; }\r\n\r\n.bg-light {\r\n  background-color: #f8f9fa !important; }\r\n\r\na.bg-light:focus, a.bg-light:hover {\r\n  background-color: #dae0e5 !important; }\r\n\r\n.bg-dark {\r\n  background-color: #343a40 !important; }\r\n\r\na.bg-dark:focus, a.bg-dark:hover {\r\n  background-color: #1d2124 !important; }\r\n\r\n.bg-white {\r\n  background-color: #fff !important; }\r\n\r\n.bg-transparent {\r\n  background-color: transparent !important; }\r\n\r\n.border {\r\n  border: 1px solid #e9ecef !important; }\r\n\r\n.border-0 {\r\n  border: 0 !important; }\r\n\r\n.border-top-0 {\r\n  border-top: 0 !important; }\r\n\r\n.border-right-0 {\r\n  border-right: 0 !important; }\r\n\r\n.border-bottom-0 {\r\n  border-bottom: 0 !important; }\r\n\r\n.border-left-0 {\r\n  border-left: 0 !important; }\r\n\r\n.border-primary {\r\n  border-color: #007bff !important; }\r\n\r\n.border-secondary {\r\n  border-color: #868e96 !important; }\r\n\r\n.border-success {\r\n  border-color: #28a745 !important; }\r\n\r\n.border-info {\r\n  border-color: #17a2b8 !important; }\r\n\r\n.border-warning {\r\n  border-color: #ffc107 !important; }\r\n\r\n.border-danger {\r\n  border-color: #dc3545 !important; }\r\n\r\n.border-light {\r\n  border-color: #f8f9fa !important; }\r\n\r\n.border-dark {\r\n  border-color: #343a40 !important; }\r\n\r\n.border-white {\r\n  border-color: #fff !important; }\r\n\r\n.rounded {\r\n  border-radius: 0.25rem !important; }\r\n\r\n.rounded-top {\r\n  border-top-left-radius: 0.25rem !important;\r\n  border-top-right-radius: 0.25rem !important; }\r\n\r\n.rounded-right {\r\n  border-top-right-radius: 0.25rem !important;\r\n  border-bottom-right-radius: 0.25rem !important; }\r\n\r\n.rounded-bottom {\r\n  border-bottom-right-radius: 0.25rem !important;\r\n  border-bottom-left-radius: 0.25rem !important; }\r\n\r\n.rounded-left {\r\n  border-top-left-radius: 0.25rem !important;\r\n  border-bottom-left-radius: 0.25rem !important; }\r\n\r\n.rounded-circle {\r\n  border-radius: 50%; }\r\n\r\n.rounded-0 {\r\n  border-radius: 0; }\r\n\r\n.clearfix::after {\r\n  display: block;\r\n  clear: both;\r\n  content: ""; }\r\n\r\n.d-none {\r\n  display: none !important; }\r\n\r\n.d-inline {\r\n  display: inline !important; }\r\n\r\n.d-inline-block {\r\n  display: inline-block !important; }\r\n\r\n.d-block {\r\n  display: block !important; }\r\n\r\n.d-table {\r\n  display: table !important; }\r\n\r\n.d-table-cell {\r\n  display: table-cell !important; }\r\n\r\n.d-flex {\r\n  display: flex !important; }\r\n\r\n.d-inline-flex {\r\n  display: inline-flex !important; }\r\n\r\n@media (min-width: 576px) {\r\n  .d-sm-none {\r\n    display: none !important; }\r\n\r\n  .d-sm-inline {\r\n    display: inline !important; }\r\n\r\n  .d-sm-inline-block {\r\n    display: inline-block !important; }\r\n\r\n  .d-sm-block {\r\n    display: block !important; }\r\n\r\n  .d-sm-table {\r\n    display: table !important; }\r\n\r\n  .d-sm-table-cell {\r\n    display: table-cell !important; }\r\n\r\n  .d-sm-flex {\r\n    display: flex !important; }\r\n\r\n  .d-sm-inline-flex {\r\n    display: inline-flex !important; } }\r\n@media (min-width: 768px) {\r\n  .d-md-none {\r\n    display: none !important; }\r\n\r\n  .d-md-inline {\r\n    display: inline !important; }\r\n\r\n  .d-md-inline-block {\r\n    display: inline-block !important; }\r\n\r\n  .d-md-block {\r\n    display: block !important; }\r\n\r\n  .d-md-table {\r\n    display: table !important; }\r\n\r\n  .d-md-table-cell {\r\n    display: table-cell !important; }\r\n\r\n  .d-md-flex {\r\n    display: flex !important; }\r\n\r\n  .d-md-inline-flex {\r\n    display: inline-flex !important; } }\r\n@media (min-width: 992px) {\r\n  .d-lg-none {\r\n    display: none !important; }\r\n\r\n  .d-lg-inline {\r\n    display: inline !important; }\r\n\r\n  .d-lg-inline-block {\r\n    display: inline-block !important; }\r\n\r\n  .d-lg-block {\r\n    display: block !important; }\r\n\r\n  .d-lg-table {\r\n    display: table !important; }\r\n\r\n  .d-lg-table-cell {\r\n    display: table-cell !important; }\r\n\r\n  .d-lg-flex {\r\n    display: flex !important; }\r\n\r\n  .d-lg-inline-flex {\r\n    display: inline-flex !important; } }\r\n@media (min-width: 1200px) {\r\n  .d-xl-none {\r\n    display: none !important; }\r\n\r\n  .d-xl-inline {\r\n    display: inline !important; }\r\n\r\n  .d-xl-inline-block {\r\n    display: inline-block !important; }\r\n\r\n  .d-xl-block {\r\n    display: block !important; }\r\n\r\n  .d-xl-table {\r\n    display: table !important; }\r\n\r\n  .d-xl-table-cell {\r\n    display: table-cell !important; }\r\n\r\n  .d-xl-flex {\r\n    display: flex !important; }\r\n\r\n  .d-xl-inline-flex {\r\n    display: inline-flex !important; } }\r\n.d-print-block {\r\n  display: none !important; }\r\n  @media print {\r\n    .d-print-block {\r\n      display: block !important; } }\r\n\r\n.d-print-inline {\r\n  display: none !important; }\r\n  @media print {\r\n    .d-print-inline {\r\n      display: inline !important; } }\r\n\r\n.d-print-inline-block {\r\n  display: none !important; }\r\n  @media print {\r\n    .d-print-inline-block {\r\n      display: inline-block !important; } }\r\n\r\n@media print {\r\n  .d-print-none {\r\n    display: none !important; } }\r\n\r\n.embed-responsive {\r\n  position: relative;\r\n  display: block;\r\n  width: 100%;\r\n  padding: 0;\r\n  overflow: hidden; }\r\n  .embed-responsive::before {\r\n    display: block;\r\n    content: ""; }\r\n  .embed-responsive .embed-responsive-item,\r\n  .embed-responsive iframe,\r\n  .embed-responsive embed,\r\n  .embed-responsive object,\r\n  .embed-responsive video {\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    border: 0; }\r\n\r\n.embed-responsive-21by9::before {\r\n  padding-top: 42.8571428571%; }\r\n\r\n.embed-responsive-16by9::before {\r\n  padding-top: 56.25%; }\r\n\r\n.embed-responsive-4by3::before {\r\n  padding-top: 75%; }\r\n\r\n.embed-responsive-1by1::before {\r\n  padding-top: 100%; }\r\n\r\n.flex-row {\r\n  flex-direction: row !important; }\r\n\r\n.flex-column {\r\n  flex-direction: column !important; }\r\n\r\n.flex-row-reverse {\r\n  flex-direction: row-reverse !important; }\r\n\r\n.flex-column-reverse {\r\n  flex-direction: column-reverse !important; }\r\n\r\n.flex-wrap {\r\n  flex-wrap: wrap !important; }\r\n\r\n.flex-nowrap {\r\n  flex-wrap: nowrap !important; }\r\n\r\n.flex-wrap-reverse {\r\n  flex-wrap: wrap-reverse !important; }\r\n\r\n.justify-content-start {\r\n  justify-content: flex-start !important; }\r\n\r\n.justify-content-end {\r\n  justify-content: flex-end !important; }\r\n\r\n.justify-content-center {\r\n  justify-content: center !important; }\r\n\r\n.justify-content-between {\r\n  justify-content: space-between !important; }\r\n\r\n.justify-content-around {\r\n  justify-content: space-around !important; }\r\n\r\n.align-items-start {\r\n  align-items: flex-start !important; }\r\n\r\n.align-items-end {\r\n  align-items: flex-end !important; }\r\n\r\n.align-items-center {\r\n  align-items: center !important; }\r\n\r\n.align-items-baseline {\r\n  align-items: baseline !important; }\r\n\r\n.align-items-stretch {\r\n  align-items: stretch !important; }\r\n\r\n.align-content-start {\r\n  align-content: flex-start !important; }\r\n\r\n.align-content-end {\r\n  align-content: flex-end !important; }\r\n\r\n.align-content-center {\r\n  align-content: center !important; }\r\n\r\n.align-content-between {\r\n  align-content: space-between !important; }\r\n\r\n.align-content-around {\r\n  align-content: space-around !important; }\r\n\r\n.align-content-stretch {\r\n  align-content: stretch !important; }\r\n\r\n.align-self-auto {\r\n  align-self: auto !important; }\r\n\r\n.align-self-start {\r\n  align-self: flex-start !important; }\r\n\r\n.align-self-end {\r\n  align-self: flex-end !important; }\r\n\r\n.align-self-center {\r\n  align-self: center !important; }\r\n\r\n.align-self-baseline {\r\n  align-self: baseline !important; }\r\n\r\n.align-self-stretch {\r\n  align-self: stretch !important; }\r\n\r\n@media (min-width: 576px) {\r\n  .flex-sm-row {\r\n    flex-direction: row !important; }\r\n\r\n  .flex-sm-column {\r\n    flex-direction: column !important; }\r\n\r\n  .flex-sm-row-reverse {\r\n    flex-direction: row-reverse !important; }\r\n\r\n  .flex-sm-column-reverse {\r\n    flex-direction: column-reverse !important; }\r\n\r\n  .flex-sm-wrap {\r\n    flex-wrap: wrap !important; }\r\n\r\n  .flex-sm-nowrap {\r\n    flex-wrap: nowrap !important; }\r\n\r\n  .flex-sm-wrap-reverse {\r\n    flex-wrap: wrap-reverse !important; }\r\n\r\n  .justify-content-sm-start {\r\n    justify-content: flex-start !important; }\r\n\r\n  .justify-content-sm-end {\r\n    justify-content: flex-end !important; }\r\n\r\n  .justify-content-sm-center {\r\n    justify-content: center !important; }\r\n\r\n  .justify-content-sm-between {\r\n    justify-content: space-between !important; }\r\n\r\n  .justify-content-sm-around {\r\n    justify-content: space-around !important; }\r\n\r\n  .align-items-sm-start {\r\n    align-items: flex-start !important; }\r\n\r\n  .align-items-sm-end {\r\n    align-items: flex-end !important; }\r\n\r\n  .align-items-sm-center {\r\n    align-items: center !important; }\r\n\r\n  .align-items-sm-baseline {\r\n    align-items: baseline !important; }\r\n\r\n  .align-items-sm-stretch {\r\n    align-items: stretch !important; }\r\n\r\n  .align-content-sm-start {\r\n    align-content: flex-start !important; }\r\n\r\n  .align-content-sm-end {\r\n    align-content: flex-end !important; }\r\n\r\n  .align-content-sm-center {\r\n    align-content: center !important; }\r\n\r\n  .align-content-sm-between {\r\n    align-content: space-between !important; }\r\n\r\n  .align-content-sm-around {\r\n    align-content: space-around !important; }\r\n\r\n  .align-content-sm-stretch {\r\n    align-content: stretch !important; }\r\n\r\n  .align-self-sm-auto {\r\n    align-self: auto !important; }\r\n\r\n  .align-self-sm-start {\r\n    align-self: flex-start !important; }\r\n\r\n  .align-self-sm-end {\r\n    align-self: flex-end !important; }\r\n\r\n  .align-self-sm-center {\r\n    align-self: center !important; }\r\n\r\n  .align-self-sm-baseline {\r\n    align-self: baseline !important; }\r\n\r\n  .align-self-sm-stretch {\r\n    align-self: stretch !important; } }\r\n@media (min-width: 768px) {\r\n  .flex-md-row {\r\n    flex-direction: row !important; }\r\n\r\n  .flex-md-column {\r\n    flex-direction: column !important; }\r\n\r\n  .flex-md-row-reverse {\r\n    flex-direction: row-reverse !important; }\r\n\r\n  .flex-md-column-reverse {\r\n    flex-direction: column-reverse !important; }\r\n\r\n  .flex-md-wrap {\r\n    flex-wrap: wrap !important; }\r\n\r\n  .flex-md-nowrap {\r\n    flex-wrap: nowrap !important; }\r\n\r\n  .flex-md-wrap-reverse {\r\n    flex-wrap: wrap-reverse !important; }\r\n\r\n  .justify-content-md-start {\r\n    justify-content: flex-start !important; }\r\n\r\n  .justify-content-md-end {\r\n    justify-content: flex-end !important; }\r\n\r\n  .justify-content-md-center {\r\n    justify-content: center !important; }\r\n\r\n  .justify-content-md-between {\r\n    justify-content: space-between !important; }\r\n\r\n  .justify-content-md-around {\r\n    justify-content: space-around !important; }\r\n\r\n  .align-items-md-start {\r\n    align-items: flex-start !important; }\r\n\r\n  .align-items-md-end {\r\n    align-items: flex-end !important; }\r\n\r\n  .align-items-md-center {\r\n    align-items: center !important; }\r\n\r\n  .align-items-md-baseline {\r\n    align-items: baseline !important; }\r\n\r\n  .align-items-md-stretch {\r\n    align-items: stretch !important; }\r\n\r\n  .align-content-md-start {\r\n    align-content: flex-start !important; }\r\n\r\n  .align-content-md-end {\r\n    align-content: flex-end !important; }\r\n\r\n  .align-content-md-center {\r\n    align-content: center !important; }\r\n\r\n  .align-content-md-between {\r\n    align-content: space-between !important; }\r\n\r\n  .align-content-md-around {\r\n    align-content: space-around !important; }\r\n\r\n  .align-content-md-stretch {\r\n    align-content: stretch !important; }\r\n\r\n  .align-self-md-auto {\r\n    align-self: auto !important; }\r\n\r\n  .align-self-md-start {\r\n    align-self: flex-start !important; }\r\n\r\n  .align-self-md-end {\r\n    align-self: flex-end !important; }\r\n\r\n  .align-self-md-center {\r\n    align-self: center !important; }\r\n\r\n  .align-self-md-baseline {\r\n    align-self: baseline !important; }\r\n\r\n  .align-self-md-stretch {\r\n    align-self: stretch !important; } }\r\n@media (min-width: 992px) {\r\n  .flex-lg-row {\r\n    flex-direction: row !important; }\r\n\r\n  .flex-lg-column {\r\n    flex-direction: column !important; }\r\n\r\n  .flex-lg-row-reverse {\r\n    flex-direction: row-reverse !important; }\r\n\r\n  .flex-lg-column-reverse {\r\n    flex-direction: column-reverse !important; }\r\n\r\n  .flex-lg-wrap {\r\n    flex-wrap: wrap !important; }\r\n\r\n  .flex-lg-nowrap {\r\n    flex-wrap: nowrap !important; }\r\n\r\n  .flex-lg-wrap-reverse {\r\n    flex-wrap: wrap-reverse !important; }\r\n\r\n  .justify-content-lg-start {\r\n    justify-content: flex-start !important; }\r\n\r\n  .justify-content-lg-end {\r\n    justify-content: flex-end !important; }\r\n\r\n  .justify-content-lg-center {\r\n    justify-content: center !important; }\r\n\r\n  .justify-content-lg-between {\r\n    justify-content: space-between !important; }\r\n\r\n  .justify-content-lg-around {\r\n    justify-content: space-around !important; }\r\n\r\n  .align-items-lg-start {\r\n    align-items: flex-start !important; }\r\n\r\n  .align-items-lg-end {\r\n    align-items: flex-end !important; }\r\n\r\n  .align-items-lg-center {\r\n    align-items: center !important; }\r\n\r\n  .align-items-lg-baseline {\r\n    align-items: baseline !important; }\r\n\r\n  .align-items-lg-stretch {\r\n    align-items: stretch !important; }\r\n\r\n  .align-content-lg-start {\r\n    align-content: flex-start !important; }\r\n\r\n  .align-content-lg-end {\r\n    align-content: flex-end !important; }\r\n\r\n  .align-content-lg-center {\r\n    align-content: center !important; }\r\n\r\n  .align-content-lg-between {\r\n    align-content: space-between !important; }\r\n\r\n  .align-content-lg-around {\r\n    align-content: space-around !important; }\r\n\r\n  .align-content-lg-stretch {\r\n    align-content: stretch !important; }\r\n\r\n  .align-self-lg-auto {\r\n    align-self: auto !important; }\r\n\r\n  .align-self-lg-start {\r\n    align-self: flex-start !important; }\r\n\r\n  .align-self-lg-end {\r\n    align-self: flex-end !important; }\r\n\r\n  .align-self-lg-center {\r\n    align-self: center !important; }\r\n\r\n  .align-self-lg-baseline {\r\n    align-self: baseline !important; }\r\n\r\n  .align-self-lg-stretch {\r\n    align-self: stretch !important; } }\r\n@media (min-width: 1200px) {\r\n  .flex-xl-row {\r\n    flex-direction: row !important; }\r\n\r\n  .flex-xl-column {\r\n    flex-direction: column !important; }\r\n\r\n  .flex-xl-row-reverse {\r\n    flex-direction: row-reverse !important; }\r\n\r\n  .flex-xl-column-reverse {\r\n    flex-direction: column-reverse !important; }\r\n\r\n  .flex-xl-wrap {\r\n    flex-wrap: wrap !important; }\r\n\r\n  .flex-xl-nowrap {\r\n    flex-wrap: nowrap !important; }\r\n\r\n  .flex-xl-wrap-reverse {\r\n    flex-wrap: wrap-reverse !important; }\r\n\r\n  .justify-content-xl-start {\r\n    justify-content: flex-start !important; }\r\n\r\n  .justify-content-xl-end {\r\n    justify-content: flex-end !important; }\r\n\r\n  .justify-content-xl-center {\r\n    justify-content: center !important; }\r\n\r\n  .justify-content-xl-between {\r\n    justify-content: space-between !important; }\r\n\r\n  .justify-content-xl-around {\r\n    justify-content: space-around !important; }\r\n\r\n  .align-items-xl-start {\r\n    align-items: flex-start !important; }\r\n\r\n  .align-items-xl-end {\r\n    align-items: flex-end !important; }\r\n\r\n  .align-items-xl-center {\r\n    align-items: center !important; }\r\n\r\n  .align-items-xl-baseline {\r\n    align-items: baseline !important; }\r\n\r\n  .align-items-xl-stretch {\r\n    align-items: stretch !important; }\r\n\r\n  .align-content-xl-start {\r\n    align-content: flex-start !important; }\r\n\r\n  .align-content-xl-end {\r\n    align-content: flex-end !important; }\r\n\r\n  .align-content-xl-center {\r\n    align-content: center !important; }\r\n\r\n  .align-content-xl-between {\r\n    align-content: space-between !important; }\r\n\r\n  .align-content-xl-around {\r\n    align-content: space-around !important; }\r\n\r\n  .align-content-xl-stretch {\r\n    align-content: stretch !important; }\r\n\r\n  .align-self-xl-auto {\r\n    align-self: auto !important; }\r\n\r\n  .align-self-xl-start {\r\n    align-self: flex-start !important; }\r\n\r\n  .align-self-xl-end {\r\n    align-self: flex-end !important; }\r\n\r\n  .align-self-xl-center {\r\n    align-self: center !important; }\r\n\r\n  .align-self-xl-baseline {\r\n    align-self: baseline !important; }\r\n\r\n  .align-self-xl-stretch {\r\n    align-self: stretch !important; } }\r\n.float-left {\r\n  float: left !important; }\r\n\r\n.float-right {\r\n  float: right !important; }\r\n\r\n.float-none {\r\n  float: none !important; }\r\n\r\n@media (min-width: 576px) {\r\n  .float-sm-left {\r\n    float: left !important; }\r\n\r\n  .float-sm-right {\r\n    float: right !important; }\r\n\r\n  .float-sm-none {\r\n    float: none !important; } }\r\n@media (min-width: 768px) {\r\n  .float-md-left {\r\n    float: left !important; }\r\n\r\n  .float-md-right {\r\n    float: right !important; }\r\n\r\n  .float-md-none {\r\n    float: none !important; } }\r\n@media (min-width: 992px) {\r\n  .float-lg-left {\r\n    float: left !important; }\r\n\r\n  .float-lg-right {\r\n    float: right !important; }\r\n\r\n  .float-lg-none {\r\n    float: none !important; } }\r\n@media (min-width: 1200px) {\r\n  .float-xl-left {\r\n    float: left !important; }\r\n\r\n  .float-xl-right {\r\n    float: right !important; }\r\n\r\n  .float-xl-none {\r\n    float: none !important; } }\r\n.position-static {\r\n  position: static !important; }\r\n\r\n.position-relative {\r\n  position: relative !important; }\r\n\r\n.position-absolute {\r\n  position: absolute !important; }\r\n\r\n.position-fixed {\r\n  position: fixed !important; }\r\n\r\n.position-sticky {\r\n  position: sticky !important; }\r\n\r\n.fixed-top {\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n  z-index: 1030; }\r\n\r\n.fixed-bottom {\r\n  position: fixed;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 1030; }\r\n\r\n@supports (position: sticky) {\r\n  .sticky-top {\r\n    position: sticky;\r\n    top: 0;\r\n    z-index: 1020; } }\r\n\r\n.sr-only {\r\n  position: absolute;\r\n  width: 1px;\r\n  height: 1px;\r\n  padding: 0;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0);\r\n  white-space: nowrap;\r\n  clip-path: inset(50%);\r\n  border: 0; }\r\n\r\n.sr-only-focusable:active, .sr-only-focusable:focus {\r\n  position: static;\r\n  width: auto;\r\n  height: auto;\r\n  overflow: visible;\r\n  clip: auto;\r\n  white-space: normal;\r\n  clip-path: none; }\r\n\r\n.w-25 {\r\n  width: 25% !important; }\r\n\r\n.w-50 {\r\n  width: 50% !important; }\r\n\r\n.w-75 {\r\n  width: 75% !important; }\r\n\r\n.w-100 {\r\n  width: 100% !important; }\r\n\r\n.h-25 {\r\n  height: 25% !important; }\r\n\r\n.h-50 {\r\n  height: 50% !important; }\r\n\r\n.h-75 {\r\n  height: 75% !important; }\r\n\r\n.h-100 {\r\n  height: 100% !important; }\r\n\r\n.mw-100 {\r\n  max-width: 100% !important; }\r\n\r\n.mh-100 {\r\n  max-height: 100% !important; }\r\n\r\n.m-0 {\r\n  margin: 0 !important; }\r\n\r\n.mt-0,\r\n.my-0 {\r\n  margin-top: 0 !important; }\r\n\r\n.mr-0,\r\n.mx-0 {\r\n  margin-right: 0 !important; }\r\n\r\n.mb-0,\r\n.my-0 {\r\n  margin-bottom: 0 !important; }\r\n\r\n.ml-0,\r\n.mx-0 {\r\n  margin-left: 0 !important; }\r\n\r\n.m-1 {\r\n  margin: 0.25rem !important; }\r\n\r\n.mt-1,\r\n.my-1 {\r\n  margin-top: 0.25rem !important; }\r\n\r\n.mr-1,\r\n.mx-1 {\r\n  margin-right: 0.25rem !important; }\r\n\r\n.mb-1,\r\n.my-1 {\r\n  margin-bottom: 0.25rem !important; }\r\n\r\n.ml-1,\r\n.mx-1 {\r\n  margin-left: 0.25rem !important; }\r\n\r\n.m-2 {\r\n  margin: 0.5rem !important; }\r\n\r\n.mt-2,\r\n.my-2 {\r\n  margin-top: 0.5rem !important; }\r\n\r\n.mr-2,\r\n.mx-2 {\r\n  margin-right: 0.5rem !important; }\r\n\r\n.mb-2,\r\n.my-2 {\r\n  margin-bottom: 0.5rem !important; }\r\n\r\n.ml-2,\r\n.mx-2 {\r\n  margin-left: 0.5rem !important; }\r\n\r\n.m-3 {\r\n  margin: 1rem !important; }\r\n\r\n.mt-3,\r\n.my-3 {\r\n  margin-top: 1rem !important; }\r\n\r\n.mr-3,\r\n.mx-3 {\r\n  margin-right: 1rem !important; }\r\n\r\n.mb-3,\r\n.my-3 {\r\n  margin-bottom: 1rem !important; }\r\n\r\n.ml-3,\r\n.mx-3 {\r\n  margin-left: 1rem !important; }\r\n\r\n.m-4 {\r\n  margin: 1.5rem !important; }\r\n\r\n.mt-4,\r\n.my-4 {\r\n  margin-top: 1.5rem !important; }\r\n\r\n.mr-4,\r\n.mx-4 {\r\n  margin-right: 1.5rem !important; }\r\n\r\n.mb-4,\r\n.my-4 {\r\n  margin-bottom: 1.5rem !important; }\r\n\r\n.ml-4,\r\n.mx-4 {\r\n  margin-left: 1.5rem !important; }\r\n\r\n.m-5 {\r\n  margin: 3rem !important; }\r\n\r\n.mt-5,\r\n.my-5 {\r\n  margin-top: 3rem !important; }\r\n\r\n.mr-5,\r\n.mx-5 {\r\n  margin-right: 3rem !important; }\r\n\r\n.mb-5,\r\n.my-5 {\r\n  margin-bottom: 3rem !important; }\r\n\r\n.ml-5,\r\n.mx-5 {\r\n  margin-left: 3rem !important; }\r\n\r\n.p-0 {\r\n  padding: 0 !important; }\r\n\r\n.pt-0,\r\n.py-0 {\r\n  padding-top: 0 !important; }\r\n\r\n.pr-0,\r\n.px-0 {\r\n  padding-right: 0 !important; }\r\n\r\n.pb-0,\r\n.py-0 {\r\n  padding-bottom: 0 !important; }\r\n\r\n.pl-0,\r\n.px-0 {\r\n  padding-left: 0 !important; }\r\n\r\n.p-1 {\r\n  padding: 0.25rem !important; }\r\n\r\n.pt-1,\r\n.py-1 {\r\n  padding-top: 0.25rem !important; }\r\n\r\n.pr-1,\r\n.px-1 {\r\n  padding-right: 0.25rem !important; }\r\n\r\n.pb-1,\r\n.py-1 {\r\n  padding-bottom: 0.25rem !important; }\r\n\r\n.pl-1,\r\n.px-1 {\r\n  padding-left: 0.25rem !important; }\r\n\r\n.p-2 {\r\n  padding: 0.5rem !important; }\r\n\r\n.pt-2,\r\n.py-2 {\r\n  padding-top: 0.5rem !important; }\r\n\r\n.pr-2,\r\n.px-2 {\r\n  padding-right: 0.5rem !important; }\r\n\r\n.pb-2,\r\n.py-2 {\r\n  padding-bottom: 0.5rem !important; }\r\n\r\n.pl-2,\r\n.px-2 {\r\n  padding-left: 0.5rem !important; }\r\n\r\n.p-3 {\r\n  padding: 1rem !important; }\r\n\r\n.pt-3,\r\n.py-3 {\r\n  padding-top: 1rem !important; }\r\n\r\n.pr-3,\r\n.px-3 {\r\n  padding-right: 1rem !important; }\r\n\r\n.pb-3,\r\n.py-3 {\r\n  padding-bottom: 1rem !important; }\r\n\r\n.pl-3,\r\n.px-3 {\r\n  padding-left: 1rem !important; }\r\n\r\n.p-4 {\r\n  padding: 1.5rem !important; }\r\n\r\n.pt-4,\r\n.py-4 {\r\n  padding-top: 1.5rem !important; }\r\n\r\n.pr-4,\r\n.px-4 {\r\n  padding-right: 1.5rem !important; }\r\n\r\n.pb-4,\r\n.py-4 {\r\n  padding-bottom: 1.5rem !important; }\r\n\r\n.pl-4,\r\n.px-4 {\r\n  padding-left: 1.5rem !important; }\r\n\r\n.p-5 {\r\n  padding: 3rem !important; }\r\n\r\n.pt-5,\r\n.py-5 {\r\n  padding-top: 3rem !important; }\r\n\r\n.pr-5,\r\n.px-5 {\r\n  padding-right: 3rem !important; }\r\n\r\n.pb-5,\r\n.py-5 {\r\n  padding-bottom: 3rem !important; }\r\n\r\n.pl-5,\r\n.px-5 {\r\n  padding-left: 3rem !important; }\r\n\r\n.m-auto {\r\n  margin: auto !important; }\r\n\r\n.mt-auto,\r\n.my-auto {\r\n  margin-top: auto !important; }\r\n\r\n.mr-auto,\r\n.mx-auto {\r\n  margin-right: auto !important; }\r\n\r\n.mb-auto,\r\n.my-auto {\r\n  margin-bottom: auto !important; }\r\n\r\n.ml-auto,\r\n.mx-auto {\r\n  margin-left: auto !important; }\r\n\r\n@media (min-width: 576px) {\r\n  .m-sm-0 {\r\n    margin: 0 !important; }\r\n\r\n  .mt-sm-0,\r\n  .my-sm-0 {\r\n    margin-top: 0 !important; }\r\n\r\n  .mr-sm-0,\r\n  .mx-sm-0 {\r\n    margin-right: 0 !important; }\r\n\r\n  .mb-sm-0,\r\n  .my-sm-0 {\r\n    margin-bottom: 0 !important; }\r\n\r\n  .ml-sm-0,\r\n  .mx-sm-0 {\r\n    margin-left: 0 !important; }\r\n\r\n  .m-sm-1 {\r\n    margin: 0.25rem !important; }\r\n\r\n  .mt-sm-1,\r\n  .my-sm-1 {\r\n    margin-top: 0.25rem !important; }\r\n\r\n  .mr-sm-1,\r\n  .mx-sm-1 {\r\n    margin-right: 0.25rem !important; }\r\n\r\n  .mb-sm-1,\r\n  .my-sm-1 {\r\n    margin-bottom: 0.25rem !important; }\r\n\r\n  .ml-sm-1,\r\n  .mx-sm-1 {\r\n    margin-left: 0.25rem !important; }\r\n\r\n  .m-sm-2 {\r\n    margin: 0.5rem !important; }\r\n\r\n  .mt-sm-2,\r\n  .my-sm-2 {\r\n    margin-top: 0.5rem !important; }\r\n\r\n  .mr-sm-2,\r\n  .mx-sm-2 {\r\n    margin-right: 0.5rem !important; }\r\n\r\n  .mb-sm-2,\r\n  .my-sm-2 {\r\n    margin-bottom: 0.5rem !important; }\r\n\r\n  .ml-sm-2,\r\n  .mx-sm-2 {\r\n    margin-left: 0.5rem !important; }\r\n\r\n  .m-sm-3 {\r\n    margin: 1rem !important; }\r\n\r\n  .mt-sm-3,\r\n  .my-sm-3 {\r\n    margin-top: 1rem !important; }\r\n\r\n  .mr-sm-3,\r\n  .mx-sm-3 {\r\n    margin-right: 1rem !important; }\r\n\r\n  .mb-sm-3,\r\n  .my-sm-3 {\r\n    margin-bottom: 1rem !important; }\r\n\r\n  .ml-sm-3,\r\n  .mx-sm-3 {\r\n    margin-left: 1rem !important; }\r\n\r\n  .m-sm-4 {\r\n    margin: 1.5rem !important; }\r\n\r\n  .mt-sm-4,\r\n  .my-sm-4 {\r\n    margin-top: 1.5rem !important; }\r\n\r\n  .mr-sm-4,\r\n  .mx-sm-4 {\r\n    margin-right: 1.5rem !important; }\r\n\r\n  .mb-sm-4,\r\n  .my-sm-4 {\r\n    margin-bottom: 1.5rem !important; }\r\n\r\n  .ml-sm-4,\r\n  .mx-sm-4 {\r\n    margin-left: 1.5rem !important; }\r\n\r\n  .m-sm-5 {\r\n    margin: 3rem !important; }\r\n\r\n  .mt-sm-5,\r\n  .my-sm-5 {\r\n    margin-top: 3rem !important; }\r\n\r\n  .mr-sm-5,\r\n  .mx-sm-5 {\r\n    margin-right: 3rem !important; }\r\n\r\n  .mb-sm-5,\r\n  .my-sm-5 {\r\n    margin-bottom: 3rem !important; }\r\n\r\n  .ml-sm-5,\r\n  .mx-sm-5 {\r\n    margin-left: 3rem !important; }\r\n\r\n  .p-sm-0 {\r\n    padding: 0 !important; }\r\n\r\n  .pt-sm-0,\r\n  .py-sm-0 {\r\n    padding-top: 0 !important; }\r\n\r\n  .pr-sm-0,\r\n  .px-sm-0 {\r\n    padding-right: 0 !important; }\r\n\r\n  .pb-sm-0,\r\n  .py-sm-0 {\r\n    padding-bottom: 0 !important; }\r\n\r\n  .pl-sm-0,\r\n  .px-sm-0 {\r\n    padding-left: 0 !important; }\r\n\r\n  .p-sm-1 {\r\n    padding: 0.25rem !important; }\r\n\r\n  .pt-sm-1,\r\n  .py-sm-1 {\r\n    padding-top: 0.25rem !important; }\r\n\r\n  .pr-sm-1,\r\n  .px-sm-1 {\r\n    padding-right: 0.25rem !important; }\r\n\r\n  .pb-sm-1,\r\n  .py-sm-1 {\r\n    padding-bottom: 0.25rem !important; }\r\n\r\n  .pl-sm-1,\r\n  .px-sm-1 {\r\n    padding-left: 0.25rem !important; }\r\n\r\n  .p-sm-2 {\r\n    padding: 0.5rem !important; }\r\n\r\n  .pt-sm-2,\r\n  .py-sm-2 {\r\n    padding-top: 0.5rem !important; }\r\n\r\n  .pr-sm-2,\r\n  .px-sm-2 {\r\n    padding-right: 0.5rem !important; }\r\n\r\n  .pb-sm-2,\r\n  .py-sm-2 {\r\n    padding-bottom: 0.5rem !important; }\r\n\r\n  .pl-sm-2,\r\n  .px-sm-2 {\r\n    padding-left: 0.5rem !important; }\r\n\r\n  .p-sm-3 {\r\n    padding: 1rem !important; }\r\n\r\n  .pt-sm-3,\r\n  .py-sm-3 {\r\n    padding-top: 1rem !important; }\r\n\r\n  .pr-sm-3,\r\n  .px-sm-3 {\r\n    padding-right: 1rem !important; }\r\n\r\n  .pb-sm-3,\r\n  .py-sm-3 {\r\n    padding-bottom: 1rem !important; }\r\n\r\n  .pl-sm-3,\r\n  .px-sm-3 {\r\n    padding-left: 1rem !important; }\r\n\r\n  .p-sm-4 {\r\n    padding: 1.5rem !important; }\r\n\r\n  .pt-sm-4,\r\n  .py-sm-4 {\r\n    padding-top: 1.5rem !important; }\r\n\r\n  .pr-sm-4,\r\n  .px-sm-4 {\r\n    padding-right: 1.5rem !important; }\r\n\r\n  .pb-sm-4,\r\n  .py-sm-4 {\r\n    padding-bottom: 1.5rem !important; }\r\n\r\n  .pl-sm-4,\r\n  .px-sm-4 {\r\n    padding-left: 1.5rem !important; }\r\n\r\n  .p-sm-5 {\r\n    padding: 3rem !important; }\r\n\r\n  .pt-sm-5,\r\n  .py-sm-5 {\r\n    padding-top: 3rem !important; }\r\n\r\n  .pr-sm-5,\r\n  .px-sm-5 {\r\n    padding-right: 3rem !important; }\r\n\r\n  .pb-sm-5,\r\n  .py-sm-5 {\r\n    padding-bottom: 3rem !important; }\r\n\r\n  .pl-sm-5,\r\n  .px-sm-5 {\r\n    padding-left: 3rem !important; }\r\n\r\n  .m-sm-auto {\r\n    margin: auto !important; }\r\n\r\n  .mt-sm-auto,\r\n  .my-sm-auto {\r\n    margin-top: auto !important; }\r\n\r\n  .mr-sm-auto,\r\n  .mx-sm-auto {\r\n    margin-right: auto !important; }\r\n\r\n  .mb-sm-auto,\r\n  .my-sm-auto {\r\n    margin-bottom: auto !important; }\r\n\r\n  .ml-sm-auto,\r\n  .mx-sm-auto {\r\n    margin-left: auto !important; } }\r\n@media (min-width: 768px) {\r\n  .m-md-0 {\r\n    margin: 0 !important; }\r\n\r\n  .mt-md-0,\r\n  .my-md-0 {\r\n    margin-top: 0 !important; }\r\n\r\n  .mr-md-0,\r\n  .mx-md-0 {\r\n    margin-right: 0 !important; }\r\n\r\n  .mb-md-0,\r\n  .my-md-0 {\r\n    margin-bottom: 0 !important; }\r\n\r\n  .ml-md-0,\r\n  .mx-md-0 {\r\n    margin-left: 0 !important; }\r\n\r\n  .m-md-1 {\r\n    margin: 0.25rem !important; }\r\n\r\n  .mt-md-1,\r\n  .my-md-1 {\r\n    margin-top: 0.25rem !important; }\r\n\r\n  .mr-md-1,\r\n  .mx-md-1 {\r\n    margin-right: 0.25rem !important; }\r\n\r\n  .mb-md-1,\r\n  .my-md-1 {\r\n    margin-bottom: 0.25rem !important; }\r\n\r\n  .ml-md-1,\r\n  .mx-md-1 {\r\n    margin-left: 0.25rem !important; }\r\n\r\n  .m-md-2 {\r\n    margin: 0.5rem !important; }\r\n\r\n  .mt-md-2,\r\n  .my-md-2 {\r\n    margin-top: 0.5rem !important; }\r\n\r\n  .mr-md-2,\r\n  .mx-md-2 {\r\n    margin-right: 0.5rem !important; }\r\n\r\n  .mb-md-2,\r\n  .my-md-2 {\r\n    margin-bottom: 0.5rem !important; }\r\n\r\n  .ml-md-2,\r\n  .mx-md-2 {\r\n    margin-left: 0.5rem !important; }\r\n\r\n  .m-md-3 {\r\n    margin: 1rem !important; }\r\n\r\n  .mt-md-3,\r\n  .my-md-3 {\r\n    margin-top: 1rem !important; }\r\n\r\n  .mr-md-3,\r\n  .mx-md-3 {\r\n    margin-right: 1rem !important; }\r\n\r\n  .mb-md-3,\r\n  .my-md-3 {\r\n    margin-bottom: 1rem !important; }\r\n\r\n  .ml-md-3,\r\n  .mx-md-3 {\r\n    margin-left: 1rem !important; }\r\n\r\n  .m-md-4 {\r\n    margin: 1.5rem !important; }\r\n\r\n  .mt-md-4,\r\n  .my-md-4 {\r\n    margin-top: 1.5rem !important; }\r\n\r\n  .mr-md-4,\r\n  .mx-md-4 {\r\n    margin-right: 1.5rem !important; }\r\n\r\n  .mb-md-4,\r\n  .my-md-4 {\r\n    margin-bottom: 1.5rem !important; }\r\n\r\n  .ml-md-4,\r\n  .mx-md-4 {\r\n    margin-left: 1.5rem !important; }\r\n\r\n  .m-md-5 {\r\n    margin: 3rem !important; }\r\n\r\n  .mt-md-5,\r\n  .my-md-5 {\r\n    margin-top: 3rem !important; }\r\n\r\n  .mr-md-5,\r\n  .mx-md-5 {\r\n    margin-right: 3rem !important; }\r\n\r\n  .mb-md-5,\r\n  .my-md-5 {\r\n    margin-bottom: 3rem !important; }\r\n\r\n  .ml-md-5,\r\n  .mx-md-5 {\r\n    margin-left: 3rem !important; }\r\n\r\n  .p-md-0 {\r\n    padding: 0 !important; }\r\n\r\n  .pt-md-0,\r\n  .py-md-0 {\r\n    padding-top: 0 !important; }\r\n\r\n  .pr-md-0,\r\n  .px-md-0 {\r\n    padding-right: 0 !important; }\r\n\r\n  .pb-md-0,\r\n  .py-md-0 {\r\n    padding-bottom: 0 !important; }\r\n\r\n  .pl-md-0,\r\n  .px-md-0 {\r\n    padding-left: 0 !important; }\r\n\r\n  .p-md-1 {\r\n    padding: 0.25rem !important; }\r\n\r\n  .pt-md-1,\r\n  .py-md-1 {\r\n    padding-top: 0.25rem !important; }\r\n\r\n  .pr-md-1,\r\n  .px-md-1 {\r\n    padding-right: 0.25rem !important; }\r\n\r\n  .pb-md-1,\r\n  .py-md-1 {\r\n    padding-bottom: 0.25rem !important; }\r\n\r\n  .pl-md-1,\r\n  .px-md-1 {\r\n    padding-left: 0.25rem !important; }\r\n\r\n  .p-md-2 {\r\n    padding: 0.5rem !important; }\r\n\r\n  .pt-md-2,\r\n  .py-md-2 {\r\n    padding-top: 0.5rem !important; }\r\n\r\n  .pr-md-2,\r\n  .px-md-2 {\r\n    padding-right: 0.5rem !important; }\r\n\r\n  .pb-md-2,\r\n  .py-md-2 {\r\n    padding-bottom: 0.5rem !important; }\r\n\r\n  .pl-md-2,\r\n  .px-md-2 {\r\n    padding-left: 0.5rem !important; }\r\n\r\n  .p-md-3 {\r\n    padding: 1rem !important; }\r\n\r\n  .pt-md-3,\r\n  .py-md-3 {\r\n    padding-top: 1rem !important; }\r\n\r\n  .pr-md-3,\r\n  .px-md-3 {\r\n    padding-right: 1rem !important; }\r\n\r\n  .pb-md-3,\r\n  .py-md-3 {\r\n    padding-bottom: 1rem !important; }\r\n\r\n  .pl-md-3,\r\n  .px-md-3 {\r\n    padding-left: 1rem !important; }\r\n\r\n  .p-md-4 {\r\n    padding: 1.5rem !important; }\r\n\r\n  .pt-md-4,\r\n  .py-md-4 {\r\n    padding-top: 1.5rem !important; }\r\n\r\n  .pr-md-4,\r\n  .px-md-4 {\r\n    padding-right: 1.5rem !important; }\r\n\r\n  .pb-md-4,\r\n  .py-md-4 {\r\n    padding-bottom: 1.5rem !important; }\r\n\r\n  .pl-md-4,\r\n  .px-md-4 {\r\n    padding-left: 1.5rem !important; }\r\n\r\n  .p-md-5 {\r\n    padding: 3rem !important; }\r\n\r\n  .pt-md-5,\r\n  .py-md-5 {\r\n    padding-top: 3rem !important; }\r\n\r\n  .pr-md-5,\r\n  .px-md-5 {\r\n    padding-right: 3rem !important; }\r\n\r\n  .pb-md-5,\r\n  .py-md-5 {\r\n    padding-bottom: 3rem !important; }\r\n\r\n  .pl-md-5,\r\n  .px-md-5 {\r\n    padding-left: 3rem !important; }\r\n\r\n  .m-md-auto {\r\n    margin: auto !important; }\r\n\r\n  .mt-md-auto,\r\n  .my-md-auto {\r\n    margin-top: auto !important; }\r\n\r\n  .mr-md-auto,\r\n  .mx-md-auto {\r\n    margin-right: auto !important; }\r\n\r\n  .mb-md-auto,\r\n  .my-md-auto {\r\n    margin-bottom: auto !important; }\r\n\r\n  .ml-md-auto,\r\n  .mx-md-auto {\r\n    margin-left: auto !important; } }\r\n@media (min-width: 992px) {\r\n  .m-lg-0 {\r\n    margin: 0 !important; }\r\n\r\n  .mt-lg-0,\r\n  .my-lg-0 {\r\n    margin-top: 0 !important; }\r\n\r\n  .mr-lg-0,\r\n  .mx-lg-0 {\r\n    margin-right: 0 !important; }\r\n\r\n  .mb-lg-0,\r\n  .my-lg-0 {\r\n    margin-bottom: 0 !important; }\r\n\r\n  .ml-lg-0,\r\n  .mx-lg-0 {\r\n    margin-left: 0 !important; }\r\n\r\n  .m-lg-1 {\r\n    margin: 0.25rem !important; }\r\n\r\n  .mt-lg-1,\r\n  .my-lg-1 {\r\n    margin-top: 0.25rem !important; }\r\n\r\n  .mr-lg-1,\r\n  .mx-lg-1 {\r\n    margin-right: 0.25rem !important; }\r\n\r\n  .mb-lg-1,\r\n  .my-lg-1 {\r\n    margin-bottom: 0.25rem !important; }\r\n\r\n  .ml-lg-1,\r\n  .mx-lg-1 {\r\n    margin-left: 0.25rem !important; }\r\n\r\n  .m-lg-2 {\r\n    margin: 0.5rem !important; }\r\n\r\n  .mt-lg-2,\r\n  .my-lg-2 {\r\n    margin-top: 0.5rem !important; }\r\n\r\n  .mr-lg-2,\r\n  .mx-lg-2 {\r\n    margin-right: 0.5rem !important; }\r\n\r\n  .mb-lg-2,\r\n  .my-lg-2 {\r\n    margin-bottom: 0.5rem !important; }\r\n\r\n  .ml-lg-2,\r\n  .mx-lg-2 {\r\n    margin-left: 0.5rem !important; }\r\n\r\n  .m-lg-3 {\r\n    margin: 1rem !important; }\r\n\r\n  .mt-lg-3,\r\n  .my-lg-3 {\r\n    margin-top: 1rem !important; }\r\n\r\n  .mr-lg-3,\r\n  .mx-lg-3 {\r\n    margin-right: 1rem !important; }\r\n\r\n  .mb-lg-3,\r\n  .my-lg-3 {\r\n    margin-bottom: 1rem !important; }\r\n\r\n  .ml-lg-3,\r\n  .mx-lg-3 {\r\n    margin-left: 1rem !important; }\r\n\r\n  .m-lg-4 {\r\n    margin: 1.5rem !important; }\r\n\r\n  .mt-lg-4,\r\n  .my-lg-4 {\r\n    margin-top: 1.5rem !important; }\r\n\r\n  .mr-lg-4,\r\n  .mx-lg-4 {\r\n    margin-right: 1.5rem !important; }\r\n\r\n  .mb-lg-4,\r\n  .my-lg-4 {\r\n    margin-bottom: 1.5rem !important; }\r\n\r\n  .ml-lg-4,\r\n  .mx-lg-4 {\r\n    margin-left: 1.5rem !important; }\r\n\r\n  .m-lg-5 {\r\n    margin: 3rem !important; }\r\n\r\n  .mt-lg-5,\r\n  .my-lg-5 {\r\n    margin-top: 3rem !important; }\r\n\r\n  .mr-lg-5,\r\n  .mx-lg-5 {\r\n    margin-right: 3rem !important; }\r\n\r\n  .mb-lg-5,\r\n  .my-lg-5 {\r\n    margin-bottom: 3rem !important; }\r\n\r\n  .ml-lg-5,\r\n  .mx-lg-5 {\r\n    margin-left: 3rem !important; }\r\n\r\n  .p-lg-0 {\r\n    padding: 0 !important; }\r\n\r\n  .pt-lg-0,\r\n  .py-lg-0 {\r\n    padding-top: 0 !important; }\r\n\r\n  .pr-lg-0,\r\n  .px-lg-0 {\r\n    padding-right: 0 !important; }\r\n\r\n  .pb-lg-0,\r\n  .py-lg-0 {\r\n    padding-bottom: 0 !important; }\r\n\r\n  .pl-lg-0,\r\n  .px-lg-0 {\r\n    padding-left: 0 !important; }\r\n\r\n  .p-lg-1 {\r\n    padding: 0.25rem !important; }\r\n\r\n  .pt-lg-1,\r\n  .py-lg-1 {\r\n    padding-top: 0.25rem !important; }\r\n\r\n  .pr-lg-1,\r\n  .px-lg-1 {\r\n    padding-right: 0.25rem !important; }\r\n\r\n  .pb-lg-1,\r\n  .py-lg-1 {\r\n    padding-bottom: 0.25rem !important; }\r\n\r\n  .pl-lg-1,\r\n  .px-lg-1 {\r\n    padding-left: 0.25rem !important; }\r\n\r\n  .p-lg-2 {\r\n    padding: 0.5rem !important; }\r\n\r\n  .pt-lg-2,\r\n  .py-lg-2 {\r\n    padding-top: 0.5rem !important; }\r\n\r\n  .pr-lg-2,\r\n  .px-lg-2 {\r\n    padding-right: 0.5rem !important; }\r\n\r\n  .pb-lg-2,\r\n  .py-lg-2 {\r\n    padding-bottom: 0.5rem !important; }\r\n\r\n  .pl-lg-2,\r\n  .px-lg-2 {\r\n    padding-left: 0.5rem !important; }\r\n\r\n  .p-lg-3 {\r\n    padding: 1rem !important; }\r\n\r\n  .pt-lg-3,\r\n  .py-lg-3 {\r\n    padding-top: 1rem !important; }\r\n\r\n  .pr-lg-3,\r\n  .px-lg-3 {\r\n    padding-right: 1rem !important; }\r\n\r\n  .pb-lg-3,\r\n  .py-lg-3 {\r\n    padding-bottom: 1rem !important; }\r\n\r\n  .pl-lg-3,\r\n  .px-lg-3 {\r\n    padding-left: 1rem !important; }\r\n\r\n  .p-lg-4 {\r\n    padding: 1.5rem !important; }\r\n\r\n  .pt-lg-4,\r\n  .py-lg-4 {\r\n    padding-top: 1.5rem !important; }\r\n\r\n  .pr-lg-4,\r\n  .px-lg-4 {\r\n    padding-right: 1.5rem !important; }\r\n\r\n  .pb-lg-4,\r\n  .py-lg-4 {\r\n    padding-bottom: 1.5rem !important; }\r\n\r\n  .pl-lg-4,\r\n  .px-lg-4 {\r\n    padding-left: 1.5rem !important; }\r\n\r\n  .p-lg-5 {\r\n    padding: 3rem !important; }\r\n\r\n  .pt-lg-5,\r\n  .py-lg-5 {\r\n    padding-top: 3rem !important; }\r\n\r\n  .pr-lg-5,\r\n  .px-lg-5 {\r\n    padding-right: 3rem !important; }\r\n\r\n  .pb-lg-5,\r\n  .py-lg-5 {\r\n    padding-bottom: 3rem !important; }\r\n\r\n  .pl-lg-5,\r\n  .px-lg-5 {\r\n    padding-left: 3rem !important; }\r\n\r\n  .m-lg-auto {\r\n    margin: auto !important; }\r\n\r\n  .mt-lg-auto,\r\n  .my-lg-auto {\r\n    margin-top: auto !important; }\r\n\r\n  .mr-lg-auto,\r\n  .mx-lg-auto {\r\n    margin-right: auto !important; }\r\n\r\n  .mb-lg-auto,\r\n  .my-lg-auto {\r\n    margin-bottom: auto !important; }\r\n\r\n  .ml-lg-auto,\r\n  .mx-lg-auto {\r\n    margin-left: auto !important; } }\r\n@media (min-width: 1200px) {\r\n  .m-xl-0 {\r\n    margin: 0 !important; }\r\n\r\n  .mt-xl-0,\r\n  .my-xl-0 {\r\n    margin-top: 0 !important; }\r\n\r\n  .mr-xl-0,\r\n  .mx-xl-0 {\r\n    margin-right: 0 !important; }\r\n\r\n  .mb-xl-0,\r\n  .my-xl-0 {\r\n    margin-bottom: 0 !important; }\r\n\r\n  .ml-xl-0,\r\n  .mx-xl-0 {\r\n    margin-left: 0 !important; }\r\n\r\n  .m-xl-1 {\r\n    margin: 0.25rem !important; }\r\n\r\n  .mt-xl-1,\r\n  .my-xl-1 {\r\n    margin-top: 0.25rem !important; }\r\n\r\n  .mr-xl-1,\r\n  .mx-xl-1 {\r\n    margin-right: 0.25rem !important; }\r\n\r\n  .mb-xl-1,\r\n  .my-xl-1 {\r\n    margin-bottom: 0.25rem !important; }\r\n\r\n  .ml-xl-1,\r\n  .mx-xl-1 {\r\n    margin-left: 0.25rem !important; }\r\n\r\n  .m-xl-2 {\r\n    margin: 0.5rem !important; }\r\n\r\n  .mt-xl-2,\r\n  .my-xl-2 {\r\n    margin-top: 0.5rem !important; }\r\n\r\n  .mr-xl-2,\r\n  .mx-xl-2 {\r\n    margin-right: 0.5rem !important; }\r\n\r\n  .mb-xl-2,\r\n  .my-xl-2 {\r\n    margin-bottom: 0.5rem !important; }\r\n\r\n  .ml-xl-2,\r\n  .mx-xl-2 {\r\n    margin-left: 0.5rem !important; }\r\n\r\n  .m-xl-3 {\r\n    margin: 1rem !important; }\r\n\r\n  .mt-xl-3,\r\n  .my-xl-3 {\r\n    margin-top: 1rem !important; }\r\n\r\n  .mr-xl-3,\r\n  .mx-xl-3 {\r\n    margin-right: 1rem !important; }\r\n\r\n  .mb-xl-3,\r\n  .my-xl-3 {\r\n    margin-bottom: 1rem !important; }\r\n\r\n  .ml-xl-3,\r\n  .mx-xl-3 {\r\n    margin-left: 1rem !important; }\r\n\r\n  .m-xl-4 {\r\n    margin: 1.5rem !important; }\r\n\r\n  .mt-xl-4,\r\n  .my-xl-4 {\r\n    margin-top: 1.5rem !important; }\r\n\r\n  .mr-xl-4,\r\n  .mx-xl-4 {\r\n    margin-right: 1.5rem !important; }\r\n\r\n  .mb-xl-4,\r\n  .my-xl-4 {\r\n    margin-bottom: 1.5rem !important; }\r\n\r\n  .ml-xl-4,\r\n  .mx-xl-4 {\r\n    margin-left: 1.5rem !important; }\r\n\r\n  .m-xl-5 {\r\n    margin: 3rem !important; }\r\n\r\n  .mt-xl-5,\r\n  .my-xl-5 {\r\n    margin-top: 3rem !important; }\r\n\r\n  .mr-xl-5,\r\n  .mx-xl-5 {\r\n    margin-right: 3rem !important; }\r\n\r\n  .mb-xl-5,\r\n  .my-xl-5 {\r\n    margin-bottom: 3rem !important; }\r\n\r\n  .ml-xl-5,\r\n  .mx-xl-5 {\r\n    margin-left: 3rem !important; }\r\n\r\n  .p-xl-0 {\r\n    padding: 0 !important; }\r\n\r\n  .pt-xl-0,\r\n  .py-xl-0 {\r\n    padding-top: 0 !important; }\r\n\r\n  .pr-xl-0,\r\n  .px-xl-0 {\r\n    padding-right: 0 !important; }\r\n\r\n  .pb-xl-0,\r\n  .py-xl-0 {\r\n    padding-bottom: 0 !important; }\r\n\r\n  .pl-xl-0,\r\n  .px-xl-0 {\r\n    padding-left: 0 !important; }\r\n\r\n  .p-xl-1 {\r\n    padding: 0.25rem !important; }\r\n\r\n  .pt-xl-1,\r\n  .py-xl-1 {\r\n    padding-top: 0.25rem !important; }\r\n\r\n  .pr-xl-1,\r\n  .px-xl-1 {\r\n    padding-right: 0.25rem !important; }\r\n\r\n  .pb-xl-1,\r\n  .py-xl-1 {\r\n    padding-bottom: 0.25rem !important; }\r\n\r\n  .pl-xl-1,\r\n  .px-xl-1 {\r\n    padding-left: 0.25rem !important; }\r\n\r\n  .p-xl-2 {\r\n    padding: 0.5rem !important; }\r\n\r\n  .pt-xl-2,\r\n  .py-xl-2 {\r\n    padding-top: 0.5rem !important; }\r\n\r\n  .pr-xl-2,\r\n  .px-xl-2 {\r\n    padding-right: 0.5rem !important; }\r\n\r\n  .pb-xl-2,\r\n  .py-xl-2 {\r\n    padding-bottom: 0.5rem !important; }\r\n\r\n  .pl-xl-2,\r\n  .px-xl-2 {\r\n    padding-left: 0.5rem !important; }\r\n\r\n  .p-xl-3 {\r\n    padding: 1rem !important; }\r\n\r\n  .pt-xl-3,\r\n  .py-xl-3 {\r\n    padding-top: 1rem !important; }\r\n\r\n  .pr-xl-3,\r\n  .px-xl-3 {\r\n    padding-right: 1rem !important; }\r\n\r\n  .pb-xl-3,\r\n  .py-xl-3 {\r\n    padding-bottom: 1rem !important; }\r\n\r\n  .pl-xl-3,\r\n  .px-xl-3 {\r\n    padding-left: 1rem !important; }\r\n\r\n  .p-xl-4 {\r\n    padding: 1.5rem !important; }\r\n\r\n  .pt-xl-4,\r\n  .py-xl-4 {\r\n    padding-top: 1.5rem !important; }\r\n\r\n  .pr-xl-4,\r\n  .px-xl-4 {\r\n    padding-right: 1.5rem !important; }\r\n\r\n  .pb-xl-4,\r\n  .py-xl-4 {\r\n    padding-bottom: 1.5rem !important; }\r\n\r\n  .pl-xl-4,\r\n  .px-xl-4 {\r\n    padding-left: 1.5rem !important; }\r\n\r\n  .p-xl-5 {\r\n    padding: 3rem !important; }\r\n\r\n  .pt-xl-5,\r\n  .py-xl-5 {\r\n    padding-top: 3rem !important; }\r\n\r\n  .pr-xl-5,\r\n  .px-xl-5 {\r\n    padding-right: 3rem !important; }\r\n\r\n  .pb-xl-5,\r\n  .py-xl-5 {\r\n    padding-bottom: 3rem !important; }\r\n\r\n  .pl-xl-5,\r\n  .px-xl-5 {\r\n    padding-left: 3rem !important; }\r\n\r\n  .m-xl-auto {\r\n    margin: auto !important; }\r\n\r\n  .mt-xl-auto,\r\n  .my-xl-auto {\r\n    margin-top: auto !important; }\r\n\r\n  .mr-xl-auto,\r\n  .mx-xl-auto {\r\n    margin-right: auto !important; }\r\n\r\n  .mb-xl-auto,\r\n  .my-xl-auto {\r\n    margin-bottom: auto !important; }\r\n\r\n  .ml-xl-auto,\r\n  .mx-xl-auto {\r\n    margin-left: auto !important; } }\r\n.text-justify {\r\n  text-align: justify !important; }\r\n\r\n.text-nowrap {\r\n  white-space: nowrap !important; }\r\n\r\n.text-truncate {\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap; }\r\n\r\n.text-left {\r\n  text-align: left !important; }\r\n\r\n.text-right {\r\n  text-align: right !important; }\r\n\r\n.text-center {\r\n  text-align: center !important; }\r\n\r\n@media (min-width: 576px) {\r\n  .text-sm-left {\r\n    text-align: left !important; }\r\n\r\n  .text-sm-right {\r\n    text-align: right !important; }\r\n\r\n  .text-sm-center {\r\n    text-align: center !important; } }\r\n@media (min-width: 768px) {\r\n  .text-md-left {\r\n    text-align: left !important; }\r\n\r\n  .text-md-right {\r\n    text-align: right !important; }\r\n\r\n  .text-md-center {\r\n    text-align: center !important; } }\r\n@media (min-width: 992px) {\r\n  .text-lg-left {\r\n    text-align: left !important; }\r\n\r\n  .text-lg-right {\r\n    text-align: right !important; }\r\n\r\n  .text-lg-center {\r\n    text-align: center !important; } }\r\n@media (min-width: 1200px) {\r\n  .text-xl-left {\r\n    text-align: left !important; }\r\n\r\n  .text-xl-right {\r\n    text-align: right !important; }\r\n\r\n  .text-xl-center {\r\n    text-align: center !important; } }\r\n.text-lowercase {\r\n  text-transform: lowercase !important; }\r\n\r\n.text-uppercase {\r\n  text-transform: uppercase !important; }\r\n\r\n.text-capitalize {\r\n  text-transform: capitalize !important; }\r\n\r\n.font-weight-light {\r\n  font-weight: 300 !important; }\r\n\r\n.font-weight-normal {\r\n  font-weight: normal !important; }\r\n\r\n.font-weight-bold {\r\n  font-weight: bold !important; }\r\n\r\n.font-italic {\r\n  font-style: italic !important; }\r\n\r\n.text-white {\r\n  color: #fff !important; }\r\n\r\n.text-primary {\r\n  color: #007bff !important; }\r\n\r\na.text-primary:focus, a.text-primary:hover {\r\n  color: #0062cc !important; }\r\n\r\n.text-secondary {\r\n  color: #868e96 !important; }\r\n\r\na.text-secondary:focus, a.text-secondary:hover {\r\n  color: #6c757d !important; }\r\n\r\n.text-success {\r\n  color: #28a745 !important; }\r\n\r\na.text-success:focus, a.text-success:hover {\r\n  color: #1e7e34 !important; }\r\n\r\n.text-info {\r\n  color: #17a2b8 !important; }\r\n\r\na.text-info:focus, a.text-info:hover {\r\n  color: #117a8b !important; }\r\n\r\n.text-warning {\r\n  color: #ffc107 !important; }\r\n\r\na.text-warning:focus, a.text-warning:hover {\r\n  color: #d39e00 !important; }\r\n\r\n.text-danger {\r\n  color: #dc3545 !important; }\r\n\r\na.text-danger:focus, a.text-danger:hover {\r\n  color: #bd2130 !important; }\r\n\r\n.text-light {\r\n  color: #f8f9fa !important; }\r\n\r\na.text-light:focus, a.text-light:hover {\r\n  color: #dae0e5 !important; }\r\n\r\n.text-dark {\r\n  color: #343a40 !important; }\r\n\r\na.text-dark:focus, a.text-dark:hover {\r\n  color: #1d2124 !important; }\r\n\r\n.text-muted {\r\n  color: #868e96 !important; }\r\n\r\n.text-hide {\r\n  font: 0/0 a;\r\n  color: transparent;\r\n  text-shadow: none;\r\n  background-color: transparent;\r\n  border: 0; }\r\n\r\n.visible {\r\n  visibility: visible !important; }\r\n\r\n.invisible {\r\n  visibility: hidden !important; }\r\n\r\n/***\r\n#F2C100\r\n#FB493A\r\n#1C0203\r\n#E08955\r\n**/\r\nbody {\r\n  font-size: 1rem;\r\n  color: #000; }\r\n\r\na, button, input {\r\n  -webkit-transition: all 0.3s ease;\r\n  transition: all 0.3s ease; }\r\n\r\nsection {\r\n  margin-bottom: 2.5rem; }\r\n\r\n.no-mb {\r\n  margin-bottom: 0; }\r\n\r\na {\r\n  color: #FB493A; }\r\n  a:hover, a:focus {\r\n    color: #fa1b08; }\r\n\r\nh1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {\r\n  margin-bottom: 1.5rem; }\r\n\r\n.avg-m-top {\r\n  margin-top: 40px; }\r\n\r\n.form-control {\r\n  border-color: #f4bb3a; }\r\n  .form-control:focus {\r\n    border-color: #eea90d; }\r\n\r\n.btn-primary {\r\n  background-color: #f4bb3a;\r\n  border-color: #f4bb3a; }\r\n  .btn-primary:hover, .btn-primary:focus, .btn-primary:active, .btn-primary.active {\r\n    background-color: #FB493A;\r\n    border-color: #FB493A; }\r\n\r\n.container {\r\n  padding-left: 25px;\r\n  padding-right: 25px; }\r\n\r\n.bg-cover {\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: center; }\r\n\r\n.dark-bg {\r\n  background-color: #2f3135;\r\n  color: #fff; }\r\n\r\n.no-style {\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none; }\r\n\r\n.page-link {\r\n  color: #FB493A; }\r\n  .page-link:focus, .page-link:hover {\r\n    color: #FB493A; }\r\n\r\n.page-item.active .page-link {\r\n  background-color: #FB493A;\r\n  border-color: #FB493A; }\r\n\r\n.padding-tb {\r\n  padding: 30px 0; }\r\n\r\n@media (min-width: 768px) {\r\n  .container {\r\n    padding-right: 15px;\r\n    padding-left: 15px; }\r\n\r\n  .w-medium {\r\n    max-width: 740px; }\r\n\r\n  .avg-m-top {\r\n    margin-top: 60px; } }\r\nheader > .container {\r\n  padding-top: 15px;\r\n  padding-bottom: 15px;\r\n  text-align: center; }\r\n\r\n.navbar {\r\n  background-color: #2f3135;\r\n  padding-left: 25px;\r\n  padding-right: 25px; }\r\n\r\n.navbar-dark .navbar-nav .nav-link {\r\n  color: #fff; }\r\n  .navbar-dark .navbar-nav .nav-link:hover, .navbar-dark .navbar-nav .nav-link:focus {\r\n    color: #f4bb3a; }\r\n  .navbar-dark .navbar-nav .nav-link.active {\r\n    border-top: 2px solid #f4bb3a; }\r\n\r\nfooter {\r\n  background-color: #2f3135;\r\n  padding: 40px 0;\r\n  color: #999999; }\r\n  footer span {\r\n    display: block;\r\n    text-align: center; }\r\n  footer a {\r\n    margin: 0 1rem;\r\n    color: #777777; }\r\n    footer a:hover, footer a:focus {\r\n      color: #b3b3b3;\r\n      text-decoration: none; }\r\n\r\n.social-links {\r\n  margin: 1rem 0;\r\n  font-size: 1.4rem; }\r\n\r\n.share-social {\r\n  cursor: pointer; }\r\n  .share-social .dropdown-toggle {\r\n    margin: 0 auto;\r\n    border: 1px solid;\r\n    width: 2rem;\r\n    height: 2rem;\r\n    line-height: 2rem; }\r\n    .share-social .dropdown-toggle::after {\r\n      display: none; }\r\n  .share-social .dropdown-menu {\r\n    font-size: 20px; }\r\n\r\n/***** home page****/\r\n.page-home h3 {\r\n  font-size: 1.5rem; }\r\n\r\n.banner {\r\n  padding: 80px 0;\r\n  background-color: #f5f5f5;\r\n  background-image: url(/images/banner.jpg); }\r\n  .banner p {\r\n    font-size: 1.5rem; }\r\n\r\n.search-form {\r\n  position: relative; }\r\n  .search-form .form-control {\r\n    padding-right: 70px; }\r\n    .search-form .form-control:focus {\r\n      box-shadow: 0 10px 40px 0 rgba(0, 0, 0, 0.1); }\r\n  .search-form .btn {\r\n    position: absolute;\r\n    right: 2px;\r\n    top: 2px;\r\n    height: 44px;\r\n    line-height: 0px; }\r\n  .search-form.inner .form-control:focus {\r\n    box-shadow: none; }\r\n  .search-form.inner .btn {\r\n    height: 34px; }\r\n\r\n.study-locations .wrap {\r\n  margin-top: 1rem;\r\n  background-color: #f5f5f5; }\r\n.study-locations .thumbnail {\r\n  min-height: 250px;\r\n  margin-bottom: 1rem; }\r\n.study-locations .copy {\r\n  padding: 1rem; }\r\n\r\n.articles,\r\n.levels {\r\n  padding: 2.5rem 0 .5rem; }\r\n\r\n.articles article {\r\n  color: initial;\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-bottom: 5px solid #999999;\r\n  margin-bottom: 2rem; }\r\n\r\n.levels {\r\n  background-color: #f5f5f5; }\r\n  .levels .col-md-6 {\r\n    margin-bottom: 2rem; }\r\n\r\n.test-block {\r\n  border: 1px solid #f5f5f5;\r\n  padding: 1rem;\r\n  margin-bottom: 1.5rem; }\r\n\r\n/******* Universities (search) **********/\r\n.search-banner {\r\n  position: relative;\r\n  background-color: #f4bb3a; }\r\n\r\n.search-filter {\r\n  background-color: #f5f5f5; }\r\n\r\n#universities h3 {\r\n  font-size: 1.25rem; }\r\n#universities .wrapper {\r\n  margin: 0 0 40px;\r\n  border: 1px solid #f5f5f5;\r\n  padding: 1.5rem;\r\n  box-shadow: 0 0px 20px 0 rgba(116, 116, 116, 0.1); }\r\n#universities .logo {\r\n  width: 100px;\r\n  height: 100px;\r\n  border: 1px solid #f5f5f5;\r\n  margin-bottom: 1rem;\r\n  overflow: hidden; }\r\n#universities address {\r\n  color: #999999;\r\n  margin-top: 5px; }\r\n#universities .feature {\r\n  color: #777777; }\r\n#universities .rankings strong {\r\n  display: inline-block;\r\n  margin-bottom: 5px;\r\n  color: #f4bb3a; }\r\n#universities .fa {\r\n  margin-right: 15px; }\r\n\r\n@media (min-width: 768px) {\r\n  section {\r\n    margin-bottom: 4rem; }\r\n\r\n  header > .container {\r\n    text-align: left; }\r\n\r\n  .navbar {\r\n    padding: 0 1rem; }\r\n\r\n  .nav-link {\r\n    padding: 1rem 2rem; }\r\n\r\n  footer {\r\n    padding: 60px 0; }\r\n    footer p {\r\n      float: left; }\r\n\r\n  .ft-links,\r\n  .social-links {\r\n    display: inline-block; }\r\n\r\n  .social-links {\r\n    margin: 0; }\r\n\r\n  .share-social {\r\n    margin-top: 2rem; }\r\n    .share-social .dropdown-toggle {\r\n      margin: 0; }\r\n\r\n  /*** Home page *********/\r\n  .banner {\r\n    min-height: 550px; }\r\n    .banner h1 {\r\n      margin-top: 60px; }\r\n\r\n  .study-locations .wrap {\r\n    margin-top: 2rem; }\r\n    .study-locations .wrap .col-md-5 {\r\n      padding-right: 0; }\r\n  .study-locations .thumbnail {\r\n    margin-bottom: 0; }\r\n\r\n  .articles,\r\n  .levels {\r\n    padding: 4rem 0 2.5rem; }\r\n\r\n  /*************** Universities (search) **************/\r\n  .cover-50 {\r\n    background-image: url(/images/search-banner.jpg);\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    position: absolute;\r\n    right: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    width: 50%; }\r\n\r\n  #universities .wrapper {\r\n    margin: 0 10px 60px; } }\r\n@media (min-width: 992px) {\r\n  .navbar-expand-lg .navbar-nav .nav-link {\r\n    padding: 1rem 2rem; } }\r\n',""])},function(n,r){function t(n,r){var t=n[1]||"",e=n[3];if(!e)return t;if(r&&"function"==typeof btoa){var o=function(n){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"}(e),i=e.sources.map(function(n){return"/*# sourceURL="+e.sourceRoot+n+" */"});return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}n.exports=function(n){var r=[];return r.toString=function(){return this.map(function(r){var e=t(r,n);return r[2]?"@media "+r[2]+"{"+e+"}":e}).join("")},r.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var e={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(e[i]=!0)}for(o=0;o<n.length;o++){var a=n[o];"number"==typeof a[0]&&e[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),r.push(a))}},r}},function(n,r,t){function e(n,r){for(var t=0;t<n.length;t++){var e=n[t],o=p[e.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](e.parts[i]);for(;i<e.parts.length;i++)o.parts.push(d(e.parts[i],r))}else{var a=[];for(i=0;i<e.parts.length;i++)a.push(d(e.parts[i],r));p[e.id]={id:e.id,refs:1,parts:a}}}}function o(n,r){for(var t=[],e={},o=0;o<n.length;o++){var i=n[o],a=r.base?i[0]+r.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};e[a]?e[a].parts.push(l):t.push(e[a]={id:a,parts:[l]})}return t}function i(n,r){var t=f(n.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var e=h[h.length-1];if("top"===n.insertAt)e?e.nextSibling?t.insertBefore(r,e.nextSibling):t.appendChild(r):t.insertBefore(r,t.firstChild),h.push(r);else if("bottom"===n.insertAt)t.appendChild(r);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=f(n.insertInto+" "+n.insertAt.before);t.insertBefore(r,o)}}function a(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var r=h.indexOf(n);r>=0&&h.splice(r,1)}function l(n){var r=document.createElement("style");return n.attrs.type="text/css",s(r,n.attrs),i(n,r),r}function s(n,r){Object.keys(r).forEach(function(t){n.setAttribute(t,r[t])})}function d(n,r){var t,e,o,d;if(r.transform&&n.css){if(!(d=r.transform(n.css)))return function(){};n.css=d}if(r.singleton){var p=g++;t=u||(u=l(r)),e=c.bind(null,t,p,!1),o=c.bind(null,t,p,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(n){var r=document.createElement("link");return n.attrs.type="text/css",n.attrs.rel="stylesheet",s(r,n.attrs),i(n,r),r}(r),e=function(n,r,t){var e=t.css,o=t.sourceMap,i=void 0===r.convertToAbsoluteUrls&&o;(r.convertToAbsoluteUrls||i)&&(e=b(e));o&&(e+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([e],{type:"text/css"}),l=n.href;n.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}.bind(null,t,r),o=function(){a(t),t.href&&URL.revokeObjectURL(t.href)}):(t=l(r),e=function(n,r){var t=r.css,e=r.media;e&&n.setAttribute("media",e);if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}.bind(null,t),o=function(){a(t)});return e(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap)return;e(n=r)}else o()}}function c(n,r,t,e){var o=t?"":e.css;if(n.styleSheet)n.styleSheet.cssText=v(r,o);else{var i=document.createTextNode(o),a=n.childNodes;a[r]&&n.removeChild(a[r]),a.length?n.insertBefore(i,a[r]):n.appendChild(i)}}var p={},m=function(n){var r;return function(){return void 0===r&&(r=n.apply(this,arguments)),r}}(function(){return window&&document&&document.all&&!window.atob}),f=function(n){var r={};return function(n){if(void 0===r[n]){var t=function(n){return document.querySelector(n)}.call(this,n);if(t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}r[n]=t}return r[n]}}(),u=null,g=0,h=[],b=t(6);n.exports=function(n,r){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(r=r||{}).attrs="object"==typeof r.attrs?r.attrs:{},r.singleton||"boolean"==typeof r.singleton||(r.singleton=m()),r.insertInto||(r.insertInto="head"),r.insertAt||(r.insertAt="bottom");var t=o(n,r);return e(t,r),function(n){for(var i=[],a=0;a<t.length;a++){var l=t[a];(s=p[l.id]).refs--,i.push(s)}if(n){e(o(n,r),r)}for(a=0;a<i.length;a++){var s;if(0===(s=i[a]).refs){for(var d=0;d<s.parts.length;d++)s.parts[d]();delete p[s.id]}}}};var v=function(){var n=[];return function(r,t){return n[r]=t,n.filter(Boolean).join("\n")}}()},function(n,r){n.exports=function(n){var r="undefined"!=typeof window&&window.location;if(!r)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var t=r.protocol+"//"+r.host,e=t+r.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,r){var o=r.trim().replace(/^"(.*)"$/,function(n,r){return r}).replace(/^'(.*)'$/,function(n,r){return r});if(/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(o))return n;var i;return i=0===o.indexOf("//")?o:0===o.indexOf("/")?t+o:e+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")"})}},,,function(n,r,t){(function(n,r){if(void 0===n)throw new Error("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");!function(r){var t=n.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1==t[0]&&9==t[1]&&t[2]<1||t[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(),function(){function t(n,r){if(!(n instanceof r))throw new TypeError("Cannot call a class as a function")}var e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},o=function(){function n(n,r){for(var t=0;t<r.length;t++){var e=r[t];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(r,t,e){return t&&n(r.prototype,t),e&&n(r,e),r}}(),i=function(n){function r(n){return{}.toString.call(n).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function t(n){return(n[0]||n).nodeType}function e(r){var t=this,e=!1;return n(this).one(a.TRANSITION_END,function(){e=!0}),setTimeout(function(){e||a.triggerTransitionEnd(t)},r),this}var o=!1,i={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"},a={TRANSITION_END:"bsTransitionEnd",getUID:function(n){do{n+=~~(1e6*Math.random())}while(document.getElementById(n));return n},getSelectorFromElement:function(r){var t=r.getAttribute("data-target");t&&"#"!==t||(t=r.getAttribute("href")||"");try{return n(t).length>0?t:null}catch(n){return null}},reflow:function(n){return n.offsetHeight},triggerTransitionEnd:function(r){n(r).trigger(o.end)},supportsTransitionEnd:function(){return Boolean(o)},typeCheckConfig:function(n,e,o){for(var i in o)if(o.hasOwnProperty(i)){var a=o[i],l=e[i],s=l&&t(l)?"element":r(l);if(!new RegExp(a).test(s))throw new Error(n.toUpperCase()+': Option "'+i+'" provided type "'+s+'" but expected type "'+a+'".')}}};return o=function(){if(window.QUnit)return!1;var n=document.createElement("bootstrap");for(var r in i)if(void 0!==n.style[r])return{end:i[r]};return!1}(),n.fn.emulateTransitionEnd=e,a.supportsTransitionEnd()&&(n.event.special[a.TRANSITION_END]={bindType:o.end,delegateType:o.end,handle:function(r){if(n(r.target).is(this))return r.handleObj.handler.apply(this,arguments)}}),a}(n),a=(function(n){var r=n.fn.alert,e={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},a="alert",l="fade",s="show",d=function(){function r(n){t(this,r),this._element=n}return r.prototype.close=function(n){n=n||this._element;var r=this._getRootElement(n);this._triggerCloseEvent(r).isDefaultPrevented()||this._removeElement(r)},r.prototype.dispose=function(){n.removeData(this._element,"bs.alert"),this._element=null},r.prototype._getRootElement=function(r){var t=i.getSelectorFromElement(r),e=!1;return t&&(e=n(t)[0]),e||(e=n(r).closest("."+a)[0]),e},r.prototype._triggerCloseEvent=function(r){var t=n.Event(e.CLOSE);return n(r).trigger(t),t},r.prototype._removeElement=function(r){var t=this;n(r).removeClass(s),i.supportsTransitionEnd()&&n(r).hasClass(l)?n(r).one(i.TRANSITION_END,function(n){return t._destroyElement(r,n)}).emulateTransitionEnd(150):this._destroyElement(r)},r.prototype._destroyElement=function(r){n(r).detach().trigger(e.CLOSED).remove()},r._jQueryInterface=function(t){return this.each(function(){var e=n(this),o=e.data("bs.alert");o||(o=new r(this),e.data("bs.alert",o)),"close"===t&&o[t](this)})},r._handleDismiss=function(n){return function(r){r&&r.preventDefault(),n.close(this)}},o(r,null,[{key:"VERSION",get:function(){return"4.0.0-beta"}}]),r}();n(document).on(e.CLICK_DATA_API,'[data-dismiss="alert"]',d._handleDismiss(new d)),n.fn.alert=d._jQueryInterface,n.fn.alert.Constructor=d,n.fn.alert.noConflict=function(){return n.fn.alert=r,d._jQueryInterface}}(n),function(n){var r=n.fn.button,e="active",i="btn",a="focus",l='[data-toggle^="button"]',s='[data-toggle="buttons"]',d="input",c=".active",p=".btn",m={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},f=function(){function r(n){t(this,r),this._element=n}return r.prototype.toggle=function(){var r=!0,t=!0,o=n(this._element).closest(s)[0];if(o){var i=n(this._element).find(d)[0];if(i){if("radio"===i.type)if(i.checked&&n(this._element).hasClass(e))r=!1;else{var a=n(o).find(c)[0];a&&n(a).removeClass(e)}if(r){if(i.hasAttribute("disabled")||o.hasAttribute("disabled")||i.classList.contains("disabled")||o.classList.contains("disabled"))return;i.checked=!n(this._element).hasClass(e),n(i).trigger("change")}i.focus(),t=!1}}t&&this._element.setAttribute("aria-pressed",!n(this._element).hasClass(e)),r&&n(this._element).toggleClass(e)},r.prototype.dispose=function(){n.removeData(this._element,"bs.button"),this._element=null},r._jQueryInterface=function(t){return this.each(function(){var e=n(this).data("bs.button");e||(e=new r(this),n(this).data("bs.button",e)),"toggle"===t&&e[t]()})},o(r,null,[{key:"VERSION",get:function(){return"4.0.0-beta"}}]),r}();n(document).on(m.CLICK_DATA_API,l,function(r){r.preventDefault();var t=r.target;n(t).hasClass(i)||(t=n(t).closest(p)),f._jQueryInterface.call(n(t),"toggle")}).on(m.FOCUS_BLUR_DATA_API,l,function(r){var t=n(r.target).closest(p)[0];n(t).toggleClass(a,/^focus(in)?$/.test(r.type))}),n.fn.button=f._jQueryInterface,n.fn.button.Constructor=f,n.fn.button.noConflict=function(){return n.fn.button=r,f._jQueryInterface}}(n),function(n){var r="bs.carousel",a="."+r,l=n.fn.carousel,s={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},d={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},c="next",p="prev",m="left",f="right",u={SLIDE:"slide"+a,SLID:"slid"+a,KEYDOWN:"keydown"+a,MOUSEENTER:"mouseenter"+a,MOUSELEAVE:"mouseleave"+a,TOUCHEND:"touchend"+a,LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},g="carousel",h="active",b="slide",v="carousel-item-right",x="carousel-item-left",y="carousel-item-next",w="carousel-item-prev",k={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},_=function(){function l(r,e){t(this,l),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(e),this._element=n(r)[0],this._indicatorsElement=n(this._element).find(k.INDICATORS)[0],this._addEventListeners()}return l.prototype.next=function(){this._isSliding||this._slide(c)},l.prototype.nextWhenVisible=function(){document.hidden||this.next()},l.prototype.prev=function(){this._isSliding||this._slide(p)},l.prototype.pause=function(r){r||(this._isPaused=!0),n(this._element).find(k.NEXT_PREV)[0]&&i.supportsTransitionEnd()&&(i.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},l.prototype.cycle=function(n){n||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},l.prototype.to=function(r){var t=this;this._activeElement=n(this._element).find(k.ACTIVE_ITEM)[0];var e=this._getItemIndex(this._activeElement);if(!(r>this._items.length-1||r<0))if(this._isSliding)n(this._element).one(u.SLID,function(){return t.to(r)});else{if(e===r)return this.pause(),void this.cycle();var o=r>e?c:p;this._slide(o,this._items[r])}},l.prototype.dispose=function(){n(this._element).off(a),n.removeData(this._element,r),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},l.prototype._getConfig=function(r){return r=n.extend({},s,r),i.typeCheckConfig("carousel",r,d),r},l.prototype._addEventListeners=function(){var r=this;this._config.keyboard&&n(this._element).on(u.KEYDOWN,function(n){return r._keydown(n)}),"hover"===this._config.pause&&(n(this._element).on(u.MOUSEENTER,function(n){return r.pause(n)}).on(u.MOUSELEAVE,function(n){return r.cycle(n)}),"ontouchstart"in document.documentElement&&n(this._element).on(u.TOUCHEND,function(){r.pause(),r.touchTimeout&&clearTimeout(r.touchTimeout),r.touchTimeout=setTimeout(function(n){return r.cycle(n)},500+r._config.interval)}))},l.prototype._keydown=function(n){if(!/input|textarea/i.test(n.target.tagName))switch(n.which){case 37:n.preventDefault(),this.prev();break;case 39:n.preventDefault(),this.next();break;default:return}},l.prototype._getItemIndex=function(r){return this._items=n.makeArray(n(r).parent().find(k.ITEM)),this._items.indexOf(r)},l.prototype._getItemByDirection=function(n,r){var t=n===c,e=n===p,o=this._getItemIndex(r),i=this._items.length-1;if((e&&0===o||t&&o===i)&&!this._config.wrap)return r;var a=(o+(n===p?-1:1))%this._items.length;return-1===a?this._items[this._items.length-1]:this._items[a]},l.prototype._triggerSlideEvent=function(r,t){var e=this._getItemIndex(r),o=this._getItemIndex(n(this._element).find(k.ACTIVE_ITEM)[0]),i=n.Event(u.SLIDE,{relatedTarget:r,direction:t,from:o,to:e});return n(this._element).trigger(i),i},l.prototype._setActiveIndicatorElement=function(r){if(this._indicatorsElement){n(this._indicatorsElement).find(k.ACTIVE).removeClass(h);var t=this._indicatorsElement.children[this._getItemIndex(r)];t&&n(t).addClass(h)}},l.prototype._slide=function(r,t){var e=this,o=n(this._element).find(k.ACTIVE_ITEM)[0],a=this._getItemIndex(o),l=t||o&&this._getItemByDirection(r,o),s=this._getItemIndex(l),d=Boolean(this._interval),p=void 0,g=void 0,_=void 0;if(r===c?(p=x,g=y,_=m):(p=v,g=w,_=f),l&&n(l).hasClass(h))this._isSliding=!1;else{if(!this._triggerSlideEvent(l,_).isDefaultPrevented()&&o&&l){this._isSliding=!0,d&&this.pause(),this._setActiveIndicatorElement(l);var E=n.Event(u.SLID,{relatedTarget:l,direction:_,from:a,to:s});i.supportsTransitionEnd()&&n(this._element).hasClass(b)?(n(l).addClass(g),i.reflow(l),n(o).addClass(p),n(l).addClass(p),n(o).one(i.TRANSITION_END,function(){n(l).removeClass(p+" "+g).addClass(h),n(o).removeClass(h+" "+g+" "+p),e._isSliding=!1,setTimeout(function(){return n(e._element).trigger(E)},0)}).emulateTransitionEnd(600)):(n(o).removeClass(h),n(l).addClass(h),this._isSliding=!1,n(this._element).trigger(E)),d&&this.cycle()}}},l._jQueryInterface=function(t){return this.each(function(){var o=n(this).data(r),i=n.extend({},s,n(this).data());"object"===(void 0===t?"undefined":e(t))&&n.extend(i,t);var a="string"==typeof t?t:i.slide;if(o||(o=new l(this,i),n(this).data(r,o)),"number"==typeof t)o.to(t);else if("string"==typeof a){if(void 0===o[a])throw new Error('No method named "'+a+'"');o[a]()}else i.interval&&(o.pause(),o.cycle())})},l._dataApiClickHandler=function(t){var e=i.getSelectorFromElement(this);if(e){var o=n(e)[0];if(o&&n(o).hasClass(g)){var a=n.extend({},n(o).data(),n(this).data()),s=this.getAttribute("data-slide-to");s&&(a.interval=!1),l._jQueryInterface.call(n(o),a),s&&n(o).data(r).to(s),t.preventDefault()}}},o(l,null,[{key:"VERSION",get:function(){return"4.0.0-beta"}},{key:"Default",get:function(){return s}}]),l}();n(document).on(u.CLICK_DATA_API,k.DATA_SLIDE,_._dataApiClickHandler),n(window).on(u.LOAD_DATA_API,function(){n(k.DATA_RIDE).each(function(){var r=n(this);_._jQueryInterface.call(r,r.data())})}),n.fn.carousel=_._jQueryInterface,n.fn.carousel.Constructor=_,n.fn.carousel.noConflict=function(){return n.fn.carousel=l,_._jQueryInterface}}(n),function(n){var r="bs.collapse",a="."+r,l=n.fn.collapse,s={toggle:!0,parent:""},d={toggle:"boolean",parent:"string"},c={SHOW:"show"+a,SHOWN:"shown"+a,HIDE:"hide"+a,HIDDEN:"hidden"+a,CLICK_DATA_API:"click.bs.collapse.data-api"},p="show",m="collapse",f="collapsing",u="collapsed",g="width",h="height",b={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},v=function(){function a(r,e){t(this,a),this._isTransitioning=!1,this._element=r,this._config=this._getConfig(e),this._triggerArray=n.makeArray(n('[data-toggle="collapse"][href="#'+r.id+'"],[data-toggle="collapse"][data-target="#'+r.id+'"]'));for(var o=n(b.DATA_TOGGLE),l=0;l<o.length;l++){var s=o[l],d=i.getSelectorFromElement(s);null!==d&&n(d).filter(r).length>0&&this._triggerArray.push(s)}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}return a.prototype.toggle=function(){n(this._element).hasClass(p)?this.hide():this.show()},a.prototype.show=function(){var t=this;if(!this._isTransitioning&&!n(this._element).hasClass(p)){var e=void 0,o=void 0;if(this._parent&&((e=n.makeArray(n(this._parent).children().children(b.ACTIVES))).length||(e=null)),!(e&&(o=n(e).data(r))&&o._isTransitioning)){var l=n.Event(c.SHOW);if(n(this._element).trigger(l),!l.isDefaultPrevented()){e&&(a._jQueryInterface.call(n(e),"hide"),o||n(e).data(r,null));var s=this._getDimension();n(this._element).removeClass(m).addClass(f),this._element.style[s]=0,this._triggerArray.length&&n(this._triggerArray).removeClass(u).attr("aria-expanded",!0),this.setTransitioning(!0);var d=function(){n(t._element).removeClass(f).addClass(m).addClass(p),t._element.style[s]="",t.setTransitioning(!1),n(t._element).trigger(c.SHOWN)};if(i.supportsTransitionEnd()){var g="scroll"+(s[0].toUpperCase()+s.slice(1));n(this._element).one(i.TRANSITION_END,d).emulateTransitionEnd(600),this._element.style[s]=this._element[g]+"px"}else d()}}}},a.prototype.hide=function(){var r=this;if(!this._isTransitioning&&n(this._element).hasClass(p)){var t=n.Event(c.HIDE);if(n(this._element).trigger(t),!t.isDefaultPrevented()){var e=this._getDimension();if(this._element.style[e]=this._element.getBoundingClientRect()[e]+"px",i.reflow(this._element),n(this._element).addClass(f).removeClass(m).removeClass(p),this._triggerArray.length)for(var o=0;o<this._triggerArray.length;o++){var a=this._triggerArray[o],l=i.getSelectorFromElement(a);if(null!==l){n(l).hasClass(p)||n(a).addClass(u).attr("aria-expanded",!1)}}this.setTransitioning(!0);var s=function(){r.setTransitioning(!1),n(r._element).removeClass(f).addClass(m).trigger(c.HIDDEN)};this._element.style[e]="",i.supportsTransitionEnd()?n(this._element).one(i.TRANSITION_END,s).emulateTransitionEnd(600):s()}}},a.prototype.setTransitioning=function(n){this._isTransitioning=n},a.prototype.dispose=function(){n.removeData(this._element,r),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},a.prototype._getConfig=function(r){return r=n.extend({},s,r),r.toggle=Boolean(r.toggle),i.typeCheckConfig("collapse",r,d),r},a.prototype._getDimension=function(){return n(this._element).hasClass(g)?g:h},a.prototype._getParent=function(){var r=this,t=n(this._config.parent)[0],e='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return n(t).find(e).each(function(n,t){r._addAriaAndCollapsedClass(a._getTargetFromElement(t),[t])}),t},a.prototype._addAriaAndCollapsedClass=function(r,t){if(r){var e=n(r).hasClass(p);t.length&&n(t).toggleClass(u,!e).attr("aria-expanded",e)}},a._getTargetFromElement=function(r){var t=i.getSelectorFromElement(r);return t?n(t)[0]:null},a._jQueryInterface=function(t){return this.each(function(){var o=n(this),i=o.data(r),l=n.extend({},s,o.data(),"object"===(void 0===t?"undefined":e(t))&&t);if(!i&&l.toggle&&/show|hide/.test(t)&&(l.toggle=!1),i||(i=new a(this,l),o.data(r,i)),"string"==typeof t){if(void 0===i[t])throw new Error('No method named "'+t+'"');i[t]()}})},o(a,null,[{key:"VERSION",get:function(){return"4.0.0-beta"}},{key:"Default",get:function(){return s}}]),a}();n(document).on(c.CLICK_DATA_API,b.DATA_TOGGLE,function(t){/input|textarea/i.test(t.target.tagName)||t.preventDefault();var e=n(this),o=i.getSelectorFromElement(this);n(o).each(function(){var t=n(this),o=t.data(r)?"toggle":e.data();v._jQueryInterface.call(t,o)})}),n.fn.collapse=v._jQueryInterface,n.fn.collapse.Constructor=v,n.fn.collapse.noConflict=function(){return n.fn.collapse=l,v._jQueryInterface}}(n),function(n){if(void 0===r)throw new Error("Bootstrap dropdown require Popper.js (https://popper.js.org)");var a="bs.dropdown",l="."+a,s=n.fn.dropdown,d=new RegExp("38|40|27"),c={HIDE:"hide"+l,HIDDEN:"hidden"+l,SHOW:"show"+l,SHOWN:"shown"+l,CLICK:"click"+l,CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},p="disabled",m="show",f="dropup",u="dropdown-menu-right",g="dropdown-menu-left",h='[data-toggle="dropdown"]',b=".dropdown form",v=".dropdown-menu",x=".navbar-nav",y=".dropdown-menu .dropdown-item:not(.disabled)",w={TOP:"top-start",TOPEND:"top-end",BOTTOM:"bottom-start",BOTTOMEND:"bottom-end"},k={placement:w.BOTTOM,offset:0,flip:!0},_={placement:"string",offset:"(number|string)",flip:"boolean"},E=function(){function s(n,r){t(this,s),this._element=n,this._popper=null,this._config=this._getConfig(r),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}return s.prototype.toggle=function(){if(!this._element.disabled&&!n(this._element).hasClass(p)){var t=s._getParentFromElement(this._element),e=n(this._menu).hasClass(m);if(s._clearMenus(),!e){var o={relatedTarget:this._element},i=n.Event(c.SHOW,o);if(n(t).trigger(i),!i.isDefaultPrevented()){var a=this._element;n(t).hasClass(f)&&(n(this._menu).hasClass(g)||n(this._menu).hasClass(u))&&(a=t),this._popper=new r(a,this._menu,this._getPopperConfig()),"ontouchstart"in document.documentElement&&!n(t).closest(x).length&&n("body").children().on("mouseover",null,n.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),n(this._menu).toggleClass(m),n(t).toggleClass(m).trigger(n.Event(c.SHOWN,o))}}}},s.prototype.dispose=function(){n.removeData(this._element,a),n(this._element).off(l),this._element=null,this._menu=null,null!==this._popper&&this._popper.destroy(),this._popper=null},s.prototype.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},s.prototype._addEventListeners=function(){var r=this;n(this._element).on(c.CLICK,function(n){n.preventDefault(),n.stopPropagation(),r.toggle()})},s.prototype._getConfig=function(r){var t=n(this._element).data();return void 0!==t.placement&&(t.placement=w[t.placement.toUpperCase()]),r=n.extend({},this.constructor.Default,n(this._element).data(),r),i.typeCheckConfig("dropdown",r,this.constructor.DefaultType),r},s.prototype._getMenuElement=function(){if(!this._menu){var r=s._getParentFromElement(this._element);this._menu=n(r).find(v)[0]}return this._menu},s.prototype._getPlacement=function(){var r=n(this._element).parent(),t=this._config.placement;return r.hasClass(f)||this._config.placement===w.TOP?(t=w.TOP,n(this._menu).hasClass(u)&&(t=w.TOPEND)):n(this._menu).hasClass(u)&&(t=w.BOTTOMEND),t},s.prototype._detectNavbar=function(){return n(this._element).closest(".navbar").length>0},s.prototype._getPopperConfig=function(){var n={placement:this._getPlacement(),modifiers:{offset:{offset:this._config.offset},flip:{enabled:this._config.flip}}};return this._inNavbar&&(n.modifiers.applyStyle={enabled:!this._inNavbar}),n},s._jQueryInterface=function(r){return this.each(function(){var t=n(this).data(a),o="object"===(void 0===r?"undefined":e(r))?r:null;if(t||(t=new s(this,o),n(this).data(a,t)),"string"==typeof r){if(void 0===t[r])throw new Error('No method named "'+r+'"');t[r]()}})},s._clearMenus=function(r){if(!r||3!==r.which&&("keyup"!==r.type||9===r.which))for(var t=n.makeArray(n(h)),e=0;e<t.length;e++){var o=s._getParentFromElement(t[e]),i=n(t[e]).data(a),l={relatedTarget:t[e]};if(i){var d=i._menu;if(n(o).hasClass(m)&&!(r&&("click"===r.type&&/input|textarea/i.test(r.target.tagName)||"keyup"===r.type&&9===r.which)&&n.contains(o,r.target))){var p=n.Event(c.HIDE,l);n(o).trigger(p),p.isDefaultPrevented()||("ontouchstart"in document.documentElement&&n("body").children().off("mouseover",null,n.noop),t[e].setAttribute("aria-expanded","false"),n(d).removeClass(m),n(o).removeClass(m).trigger(n.Event(c.HIDDEN,l)))}}}},s._getParentFromElement=function(r){var t=void 0,e=i.getSelectorFromElement(r);return e&&(t=n(e)[0]),t||r.parentNode},s._dataApiKeydownHandler=function(r){if(!(!d.test(r.which)||/button/i.test(r.target.tagName)&&32===r.which||/input|textarea/i.test(r.target.tagName)||(r.preventDefault(),r.stopPropagation(),this.disabled||n(this).hasClass(p)))){var t=s._getParentFromElement(this),e=n(t).hasClass(m);if((e||27===r.which&&32===r.which)&&(!e||27!==r.which&&32!==r.which)){var o=n(t).find(y).get();if(o.length){var i=o.indexOf(r.target);38===r.which&&i>0&&i--,40===r.which&&i<o.length-1&&i++,i<0&&(i=0),o[i].focus()}}else{if(27===r.which){var a=n(t).find(h)[0];n(a).trigger("focus")}n(this).trigger("click")}}},o(s,null,[{key:"VERSION",get:function(){return"4.0.0-beta"}},{key:"Default",get:function(){return k}},{key:"DefaultType",get:function(){return _}}]),s}();n(document).on(c.KEYDOWN_DATA_API,h,E._dataApiKeydownHandler).on(c.KEYDOWN_DATA_API,v,E._dataApiKeydownHandler).on(c.CLICK_DATA_API+" "+c.KEYUP_DATA_API,E._clearMenus).on(c.CLICK_DATA_API,h,function(r){r.preventDefault(),r.stopPropagation(),E._jQueryInterface.call(n(this),"toggle")}).on(c.CLICK_DATA_API,b,function(n){n.stopPropagation()}),n.fn.dropdown=E._jQueryInterface,n.fn.dropdown.Constructor=E,n.fn.dropdown.noConflict=function(){return n.fn.dropdown=s,E._jQueryInterface}}(n),function(n){var r=".bs.modal",a=n.fn.modal,l={backdrop:!0,keyboard:!0,focus:!0,show:!0},s={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},d={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},c="modal-scrollbar-measure",p="modal-backdrop",m="modal-open",f="fade",u="show",g={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",NAVBAR_TOGGLER:".navbar-toggler"},h=function(){function a(r,e){t(this,a),this._config=this._getConfig(e),this._element=r,this._dialog=n(r).find(g.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}return a.prototype.toggle=function(n){return this._isShown?this.hide():this.show(n)},a.prototype.show=function(r){var t=this;if(!this._isTransitioning){i.supportsTransitionEnd()&&n(this._element).hasClass(f)&&(this._isTransitioning=!0);var e=n.Event(d.SHOW,{relatedTarget:r});n(this._element).trigger(e),this._isShown||e.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),n(document.body).addClass(m),this._setEscapeEvent(),this._setResizeEvent(),n(this._element).on(d.CLICK_DISMISS,g.DATA_DISMISS,function(n){return t.hide(n)}),n(this._dialog).on(d.MOUSEDOWN_DISMISS,function(){n(t._element).one(d.MOUSEUP_DISMISS,function(r){n(r.target).is(t._element)&&(t._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return t._showElement(r)}))}},a.prototype.hide=function(r){var t=this;if(r&&r.preventDefault(),!this._isTransitioning&&this._isShown){var e=i.supportsTransitionEnd()&&n(this._element).hasClass(f);e&&(this._isTransitioning=!0);var o=n.Event(d.HIDE);n(this._element).trigger(o),this._isShown&&!o.isDefaultPrevented()&&(this._isShown=!1,this._setEscapeEvent(),this._setResizeEvent(),n(document).off(d.FOCUSIN),n(this._element).removeClass(u),n(this._element).off(d.CLICK_DISMISS),n(this._dialog).off(d.MOUSEDOWN_DISMISS),e?n(this._element).one(i.TRANSITION_END,function(n){return t._hideModal(n)}).emulateTransitionEnd(300):this._hideModal())}},a.prototype.dispose=function(){n.removeData(this._element,"bs.modal"),n(window,document,this._element,this._backdrop).off(r),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},a.prototype.handleUpdate=function(){this._adjustDialog()},a.prototype._getConfig=function(r){return r=n.extend({},l,r),i.typeCheckConfig("modal",r,s),r},a.prototype._showElement=function(r){var t=this,e=i.supportsTransitionEnd()&&n(this._element).hasClass(f);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,e&&i.reflow(this._element),n(this._element).addClass(u),this._config.focus&&this._enforceFocus();var o=n.Event(d.SHOWN,{relatedTarget:r}),a=function(){t._config.focus&&t._element.focus(),t._isTransitioning=!1,n(t._element).trigger(o)};e?n(this._dialog).one(i.TRANSITION_END,a).emulateTransitionEnd(300):a()},a.prototype._enforceFocus=function(){var r=this;n(document).off(d.FOCUSIN).on(d.FOCUSIN,function(t){document===t.target||r._element===t.target||n(r._element).has(t.target).length||r._element.focus()})},a.prototype._setEscapeEvent=function(){var r=this;this._isShown&&this._config.keyboard?n(this._element).on(d.KEYDOWN_DISMISS,function(n){27===n.which&&(n.preventDefault(),r.hide())}):this._isShown||n(this._element).off(d.KEYDOWN_DISMISS)},a.prototype._setResizeEvent=function(){var r=this;this._isShown?n(window).on(d.RESIZE,function(n){return r.handleUpdate(n)}):n(window).off(d.RESIZE)},a.prototype._hideModal=function(){var r=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){n(document.body).removeClass(m),r._resetAdjustments(),r._resetScrollbar(),n(r._element).trigger(d.HIDDEN)})},a.prototype._removeBackdrop=function(){this._backdrop&&(n(this._backdrop).remove(),this._backdrop=null)},a.prototype._showBackdrop=function(r){var t=this,e=n(this._element).hasClass(f)?f:"";if(this._isShown&&this._config.backdrop){var o=i.supportsTransitionEnd()&&e;if(this._backdrop=document.createElement("div"),this._backdrop.className=p,e&&n(this._backdrop).addClass(e),n(this._backdrop).appendTo(document.body),n(this._element).on(d.CLICK_DISMISS,function(n){t._ignoreBackdropClick?t._ignoreBackdropClick=!1:n.target===n.currentTarget&&("static"===t._config.backdrop?t._element.focus():t.hide())}),o&&i.reflow(this._backdrop),n(this._backdrop).addClass(u),!r)return;if(!o)return void r();n(this._backdrop).one(i.TRANSITION_END,r).emulateTransitionEnd(150)}else if(!this._isShown&&this._backdrop){n(this._backdrop).removeClass(u);var a=function(){t._removeBackdrop(),r&&r()};i.supportsTransitionEnd()&&n(this._element).hasClass(f)?n(this._backdrop).one(i.TRANSITION_END,a).emulateTransitionEnd(150):a()}else r&&r()},a.prototype._adjustDialog=function(){var n=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&n&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!n&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},a.prototype._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},a.prototype._checkScrollbar=function(){this._isBodyOverflowing=document.body.clientWidth<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},a.prototype._setScrollbar=function(){var r=this;if(this._isBodyOverflowing){n(g.FIXED_CONTENT).each(function(t,e){var o=n(e)[0].style.paddingRight,i=n(e).css("padding-right");n(e).data("padding-right",o).css("padding-right",parseFloat(i)+r._scrollbarWidth+"px")}),n(g.NAVBAR_TOGGLER).each(function(t,e){var o=n(e)[0].style.marginRight,i=n(e).css("margin-right");n(e).data("margin-right",o).css("margin-right",parseFloat(i)+r._scrollbarWidth+"px")});var t=document.body.style.paddingRight,e=n("body").css("padding-right");n("body").data("padding-right",t).css("padding-right",parseFloat(e)+this._scrollbarWidth+"px")}},a.prototype._resetScrollbar=function(){n(g.FIXED_CONTENT).each(function(r,t){var e=n(t).data("padding-right");void 0!==e&&n(t).css("padding-right",e).removeData("padding-right")}),n(g.NAVBAR_TOGGLER).each(function(r,t){var e=n(t).data("margin-right");void 0!==e&&n(t).css("margin-right",e).removeData("margin-right")});var r=n("body").data("padding-right");void 0!==r&&n("body").css("padding-right",r).removeData("padding-right")},a.prototype._getScrollbarWidth=function(){var n=document.createElement("div");n.className=c,document.body.appendChild(n);var r=n.getBoundingClientRect().width-n.clientWidth;return document.body.removeChild(n),r},a._jQueryInterface=function(r,t){return this.each(function(){var o=n(this).data("bs.modal"),i=n.extend({},a.Default,n(this).data(),"object"===(void 0===r?"undefined":e(r))&&r);if(o||(o=new a(this,i),n(this).data("bs.modal",o)),"string"==typeof r){if(void 0===o[r])throw new Error('No method named "'+r+'"');o[r](t)}else i.show&&o.show(t)})},o(a,null,[{key:"VERSION",get:function(){return"4.0.0-beta"}},{key:"Default",get:function(){return l}}]),a}();n(document).on(d.CLICK_DATA_API,g.DATA_TOGGLE,function(r){var t=this,e=void 0,o=i.getSelectorFromElement(this);o&&(e=n(o)[0]);var a=n(e).data("bs.modal")?"toggle":n.extend({},n(e).data(),n(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||r.preventDefault();var l=n(e).one(d.SHOW,function(r){r.isDefaultPrevented()||l.one(d.HIDDEN,function(){n(t).is(":visible")&&t.focus()})});h._jQueryInterface.call(n(e),a,this)}),n.fn.modal=h._jQueryInterface,n.fn.modal.Constructor=h,n.fn.modal.noConflict=function(){return n.fn.modal=a,h._jQueryInterface}}(n),function(n){var r=".bs.scrollspy",a=n.fn.scrollspy,l={offset:10,method:"auto",target:""},s={offset:"number",method:"string",target:"(string|element)"},d={ACTIVATE:"activate"+r,SCROLL:"scroll"+r,LOAD_DATA_API:"load"+r+".data-api"},c="dropdown-item",p="active",m={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},f="offset",u="position",g=function(){function a(r,e){var o=this;t(this,a),this._element=r,this._scrollElement="BODY"===r.tagName?window:r,this._config=this._getConfig(e),this._selector=this._config.target+" "+m.NAV_LINKS+","+this._config.target+" "+m.LIST_ITEMS+","+this._config.target+" "+m.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,n(this._scrollElement).on(d.SCROLL,function(n){return o._process(n)}),this.refresh(),this._process()}return a.prototype.refresh=function(){var r=this,t=this._scrollElement!==this._scrollElement.window?u:f,e="auto"===this._config.method?t:this._config.method,o=e===u?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();n.makeArray(n(this._selector)).map(function(r){var t=void 0,a=i.getSelectorFromElement(r);if(a&&(t=n(a)[0]),t){var l=t.getBoundingClientRect();if(l.width||l.height)return[n(t)[e]().top+o,a]}return null}).filter(function(n){return n}).sort(function(n,r){return n[0]-r[0]}).forEach(function(n){r._offsets.push(n[0]),r._targets.push(n[1])})},a.prototype.dispose=function(){n.removeData(this._element,"bs.scrollspy"),n(this._scrollElement).off(r),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},a.prototype._getConfig=function(r){if("string"!=typeof(r=n.extend({},l,r)).target){var t=n(r.target).attr("id");t||(t=i.getUID("scrollspy"),n(r.target).attr("id",t)),r.target="#"+t}return i.typeCheckConfig("scrollspy",r,s),r},a.prototype._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},a.prototype._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},a.prototype._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},a.prototype._process=function(){var n=this._getScrollTop()+this._config.offset,r=this._getScrollHeight(),t=this._config.offset+r-this._getOffsetHeight();if(this._scrollHeight!==r&&this.refresh(),n>=t){var e=this._targets[this._targets.length-1];this._activeTarget!==e&&this._activate(e)}else{if(this._activeTarget&&n<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var o=this._offsets.length;o--;){this._activeTarget!==this._targets[o]&&n>=this._offsets[o]&&(void 0===this._offsets[o+1]||n<this._offsets[o+1])&&this._activate(this._targets[o])}}},a.prototype._activate=function(r){this._activeTarget=r,this._clear();var t=this._selector.split(",");t=t.map(function(n){return n+'[data-target="'+r+'"],'+n+'[href="'+r+'"]'});var e=n(t.join(","));e.hasClass(c)?(e.closest(m.DROPDOWN).find(m.DROPDOWN_TOGGLE).addClass(p),e.addClass(p)):(e.addClass(p),e.parents(m.NAV_LIST_GROUP).prev(m.NAV_LINKS+", "+m.LIST_ITEMS).addClass(p)),n(this._scrollElement).trigger(d.ACTIVATE,{relatedTarget:r})},a.prototype._clear=function(){n(this._selector).filter(m.ACTIVE).removeClass(p)},a._jQueryInterface=function(r){return this.each(function(){var t=n(this).data("bs.scrollspy"),o="object"===(void 0===r?"undefined":e(r))&&r;if(t||(t=new a(this,o),n(this).data("bs.scrollspy",t)),"string"==typeof r){if(void 0===t[r])throw new Error('No method named "'+r+'"');t[r]()}})},o(a,null,[{key:"VERSION",get:function(){return"4.0.0-beta"}},{key:"Default",get:function(){return l}}]),a}();n(window).on(d.LOAD_DATA_API,function(){for(var r=n.makeArray(n(m.DATA_SPY)),t=r.length;t--;){var e=n(r[t]);g._jQueryInterface.call(e,e.data())}}),n.fn.scrollspy=g._jQueryInterface,n.fn.scrollspy.Constructor=g,n.fn.scrollspy.noConflict=function(){return n.fn.scrollspy=a,g._jQueryInterface}}(n),function(n){var r=n.fn.tab,e={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},a="dropdown-menu",l="active",s="disabled",d="fade",c="show",p=".dropdown",m=".nav, .list-group",f=".active",u='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',g=".dropdown-toggle",h="> .dropdown-menu .active",b=function(){function r(n){t(this,r),this._element=n}return r.prototype.show=function(){var r=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&n(this._element).hasClass(l)||n(this._element).hasClass(s))){var t=void 0,o=void 0,a=n(this._element).closest(m)[0],d=i.getSelectorFromElement(this._element);a&&(o=(o=n.makeArray(n(a).find(f)))[o.length-1]);var c=n.Event(e.HIDE,{relatedTarget:this._element}),p=n.Event(e.SHOW,{relatedTarget:o});if(o&&n(o).trigger(c),n(this._element).trigger(p),!p.isDefaultPrevented()&&!c.isDefaultPrevented()){d&&(t=n(d)[0]),this._activate(this._element,a);var u=function(){var t=n.Event(e.HIDDEN,{relatedTarget:r._element}),i=n.Event(e.SHOWN,{relatedTarget:o});n(o).trigger(t),n(r._element).trigger(i)};t?this._activate(t,t.parentNode,u):u()}}},r.prototype.dispose=function(){n.removeData(this._element,"bs.tab"),this._element=null},r.prototype._activate=function(r,t,e){var o=this,a=n(t).find(f)[0],l=e&&i.supportsTransitionEnd()&&a&&n(a).hasClass(d),s=function(){return o._transitionComplete(r,a,l,e)};a&&l?n(a).one(i.TRANSITION_END,s).emulateTransitionEnd(150):s(),a&&n(a).removeClass(c)},r.prototype._transitionComplete=function(r,t,e,o){if(t){n(t).removeClass(l);var s=n(t.parentNode).find(h)[0];s&&n(s).removeClass(l),t.setAttribute("aria-expanded",!1)}if(n(r).addClass(l),r.setAttribute("aria-expanded",!0),e?(i.reflow(r),n(r).addClass(c)):n(r).removeClass(d),r.parentNode&&n(r.parentNode).hasClass(a)){var m=n(r).closest(p)[0];m&&n(m).find(g).addClass(l),r.setAttribute("aria-expanded",!0)}o&&o()},r._jQueryInterface=function(t){return this.each(function(){var e=n(this),o=e.data("bs.tab");if(o||(o=new r(this),e.data("bs.tab",o)),"string"==typeof t){if(void 0===o[t])throw new Error('No method named "'+t+'"');o[t]()}})},o(r,null,[{key:"VERSION",get:function(){return"4.0.0-beta"}}]),r}();n(document).on(e.CLICK_DATA_API,u,function(r){r.preventDefault(),b._jQueryInterface.call(n(this),"show")}),n.fn.tab=b._jQueryInterface,n.fn.tab.Constructor=b,n.fn.tab.noConflict=function(){return n.fn.tab=r,b._jQueryInterface}}(n),function(n){if(void 0===r)throw new Error("Bootstrap tooltips require Popper.js (https://popper.js.org)");var a=".bs.tooltip",l=n.fn.tooltip,s=new RegExp("(^|\\s)bs-tooltip\\S+","g"),d={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)"},c={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},p={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip"},m="show",f="out",u={HIDE:"hide"+a,HIDDEN:"hidden"+a,SHOW:"show"+a,SHOWN:"shown"+a,INSERTED:"inserted"+a,CLICK:"click"+a,FOCUSIN:"focusin"+a,FOCUSOUT:"focusout"+a,MOUSEENTER:"mouseenter"+a,MOUSELEAVE:"mouseleave"+a},g="fade",h="show",b=".tooltip-inner",v=".arrow",x="hover",y="focus",w="click",k="manual",_=function(){function l(n,r){t(this,l),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=n,this.config=this._getConfig(r),this.tip=null,this._setListeners()}return l.prototype.enable=function(){this._isEnabled=!0},l.prototype.disable=function(){this._isEnabled=!1},l.prototype.toggleEnabled=function(){this._isEnabled=!this._isEnabled},l.prototype.toggle=function(r){if(r){var t=this.constructor.DATA_KEY,e=n(r.currentTarget).data(t);e||(e=new this.constructor(r.currentTarget,this._getDelegateConfig()),n(r.currentTarget).data(t,e)),e._activeTrigger.click=!e._activeTrigger.click,e._isWithActiveTrigger()?e._enter(null,e):e._leave(null,e)}else{if(n(this.getTipElement()).hasClass(h))return void this._leave(null,this);this._enter(null,this)}},l.prototype.dispose=function(){clearTimeout(this._timeout),n.removeData(this.element,this.constructor.DATA_KEY),n(this.element).off(this.constructor.EVENT_KEY),n(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&n(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},l.prototype.show=function(){var t=this;if("none"===n(this.element).css("display"))throw new Error("Please use show on visible elements");var e=n.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){n(this.element).trigger(e);var o=n.contains(this.element.ownerDocument.documentElement,this.element);if(e.isDefaultPrevented()||!o)return;var a=this.getTipElement(),s=i.getUID(this.constructor.NAME);a.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&n(a).addClass(g);var d="function"==typeof this.config.placement?this.config.placement.call(this,a,this.element):this.config.placement,c=this._getAttachment(d);this.addAttachmentClass(c);var p=!1===this.config.container?document.body:n(this.config.container);n(a).data(this.constructor.DATA_KEY,this),n.contains(this.element.ownerDocument.documentElement,this.tip)||n(a).appendTo(p),n(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new r(this.element,a,{placement:c,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:v}},onCreate:function(n){n.originalPlacement!==n.placement&&t._handlePopperPlacementChange(n)},onUpdate:function(n){t._handlePopperPlacementChange(n)}}),n(a).addClass(h),"ontouchstart"in document.documentElement&&n("body").children().on("mouseover",null,n.noop);var m=function(){t.config.animation&&t._fixTransition();var r=t._hoverState;t._hoverState=null,n(t.element).trigger(t.constructor.Event.SHOWN),r===f&&t._leave(null,t)};i.supportsTransitionEnd()&&n(this.tip).hasClass(g)?n(this.tip).one(i.TRANSITION_END,m).emulateTransitionEnd(l._TRANSITION_DURATION):m()}},l.prototype.hide=function(r){var t=this,e=this.getTipElement(),o=n.Event(this.constructor.Event.HIDE),a=function(){t._hoverState!==m&&e.parentNode&&e.parentNode.removeChild(e),t._cleanTipClass(),t.element.removeAttribute("aria-describedby"),n(t.element).trigger(t.constructor.Event.HIDDEN),null!==t._popper&&t._popper.destroy(),r&&r()};n(this.element).trigger(o),o.isDefaultPrevented()||(n(e).removeClass(h),"ontouchstart"in document.documentElement&&n("body").children().off("mouseover",null,n.noop),this._activeTrigger[w]=!1,this._activeTrigger[y]=!1,this._activeTrigger[x]=!1,i.supportsTransitionEnd()&&n(this.tip).hasClass(g)?n(e).one(i.TRANSITION_END,a).emulateTransitionEnd(150):a(),this._hoverState="")},l.prototype.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},l.prototype.isWithContent=function(){return Boolean(this.getTitle())},l.prototype.addAttachmentClass=function(r){n(this.getTipElement()).addClass("bs-tooltip-"+r)},l.prototype.getTipElement=function(){return this.tip=this.tip||n(this.config.template)[0]},l.prototype.setContent=function(){var r=n(this.getTipElement());this.setElementContent(r.find(b),this.getTitle()),r.removeClass(g+" "+h)},l.prototype.setElementContent=function(r,t){var o=this.config.html;"object"===(void 0===t?"undefined":e(t))&&(t.nodeType||t.jquery)?o?n(t).parent().is(r)||r.empty().append(t):r.text(n(t).text()):r[o?"html":"text"](t)},l.prototype.getTitle=function(){var n=this.element.getAttribute("data-original-title");return n||(n="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),n},l.prototype._getAttachment=function(n){return c[n.toUpperCase()]},l.prototype._setListeners=function(){var r=this;this.config.trigger.split(" ").forEach(function(t){if("click"===t)n(r.element).on(r.constructor.Event.CLICK,r.config.selector,function(n){return r.toggle(n)});else if(t!==k){var e=t===x?r.constructor.Event.MOUSEENTER:r.constructor.Event.FOCUSIN,o=t===x?r.constructor.Event.MOUSELEAVE:r.constructor.Event.FOCUSOUT;n(r.element).on(e,r.config.selector,function(n){return r._enter(n)}).on(o,r.config.selector,function(n){return r._leave(n)})}n(r.element).closest(".modal").on("hide.bs.modal",function(){return r.hide()})}),this.config.selector?this.config=n.extend({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},l.prototype._fixTitle=function(){var n=e(this.element.getAttribute("data-original-title"));(this.element.getAttribute("title")||"string"!==n)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},l.prototype._enter=function(r,t){var e=this.constructor.DATA_KEY;(t=t||n(r.currentTarget).data(e))||(t=new this.constructor(r.currentTarget,this._getDelegateConfig()),n(r.currentTarget).data(e,t)),r&&(t._activeTrigger["focusin"===r.type?y:x]=!0),n(t.getTipElement()).hasClass(h)||t._hoverState===m?t._hoverState=m:(clearTimeout(t._timeout),t._hoverState=m,t.config.delay&&t.config.delay.show?t._timeout=setTimeout(function(){t._hoverState===m&&t.show()},t.config.delay.show):t.show())},l.prototype._leave=function(r,t){var e=this.constructor.DATA_KEY;(t=t||n(r.currentTarget).data(e))||(t=new this.constructor(r.currentTarget,this._getDelegateConfig()),n(r.currentTarget).data(e,t)),r&&(t._activeTrigger["focusout"===r.type?y:x]=!1),t._isWithActiveTrigger()||(clearTimeout(t._timeout),t._hoverState=f,t.config.delay&&t.config.delay.hide?t._timeout=setTimeout(function(){t._hoverState===f&&t.hide()},t.config.delay.hide):t.hide())},l.prototype._isWithActiveTrigger=function(){for(var n in this._activeTrigger)if(this._activeTrigger[n])return!0;return!1},l.prototype._getConfig=function(r){return(r=n.extend({},this.constructor.Default,n(this.element).data(),r)).delay&&"number"==typeof r.delay&&(r.delay={show:r.delay,hide:r.delay}),r.title&&"number"==typeof r.title&&(r.title=r.title.toString()),r.content&&"number"==typeof r.content&&(r.content=r.content.toString()),i.typeCheckConfig("tooltip",r,this.constructor.DefaultType),r},l.prototype._getDelegateConfig=function(){var n={};if(this.config)for(var r in this.config)this.constructor.Default[r]!==this.config[r]&&(n[r]=this.config[r]);return n},l.prototype._cleanTipClass=function(){var r=n(this.getTipElement()),t=r.attr("class").match(s);null!==t&&t.length>0&&r.removeClass(t.join(""))},l.prototype._handlePopperPlacementChange=function(n){this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(n.placement))},l.prototype._fixTransition=function(){var r=this.getTipElement(),t=this.config.animation;null===r.getAttribute("x-placement")&&(n(r).removeClass(g),this.config.animation=!1,this.hide(),this.show(),this.config.animation=t)},l._jQueryInterface=function(r){return this.each(function(){var t=n(this).data("bs.tooltip"),o="object"===(void 0===r?"undefined":e(r))&&r;if((t||!/dispose|hide/.test(r))&&(t||(t=new l(this,o),n(this).data("bs.tooltip",t)),"string"==typeof r)){if(void 0===t[r])throw new Error('No method named "'+r+'"');t[r]()}})},o(l,null,[{key:"VERSION",get:function(){return"4.0.0-beta"}},{key:"Default",get:function(){return p}},{key:"NAME",get:function(){return"tooltip"}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return u}},{key:"EVENT_KEY",get:function(){return a}},{key:"DefaultType",get:function(){return d}}]),l}();return n.fn.tooltip=_._jQueryInterface,n.fn.tooltip.Constructor=_,n.fn.tooltip.noConflict=function(){return n.fn.tooltip=l,_._jQueryInterface},_}(n));!function(n){var r=".bs.popover",i=n.fn.popover,l=new RegExp("(^|\\s)bs-popover\\S+","g"),s=n.extend({},a.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),d=n.extend({},a.DefaultType,{content:"(string|element|function)"}),c="fade",p="show",m=".popover-header",f=".popover-body",u={HIDE:"hide"+r,HIDDEN:"hidden"+r,SHOW:"show"+r,SHOWN:"shown"+r,INSERTED:"inserted"+r,CLICK:"click"+r,FOCUSIN:"focusin"+r,FOCUSOUT:"focusout"+r,MOUSEENTER:"mouseenter"+r,MOUSELEAVE:"mouseleave"+r},g=function(i){function a(){return t(this,a),function(n,r){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!r||"object"!=typeof r&&"function"!=typeof r?n:r}(this,i.apply(this,arguments))}return function(n,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function, not "+typeof r);n.prototype=Object.create(r&&r.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),r&&(Object.setPrototypeOf?Object.setPrototypeOf(n,r):n.__proto__=r)}(a,i),a.prototype.isWithContent=function(){return this.getTitle()||this._getContent()},a.prototype.addAttachmentClass=function(r){n(this.getTipElement()).addClass("bs-popover-"+r)},a.prototype.getTipElement=function(){return this.tip=this.tip||n(this.config.template)[0]},a.prototype.setContent=function(){var r=n(this.getTipElement());this.setElementContent(r.find(m),this.getTitle()),this.setElementContent(r.find(f),this._getContent()),r.removeClass(c+" "+p)},a.prototype._getContent=function(){return this.element.getAttribute("data-content")||("function"==typeof this.config.content?this.config.content.call(this.element):this.config.content)},a.prototype._cleanTipClass=function(){var r=n(this.getTipElement()),t=r.attr("class").match(l);null!==t&&t.length>0&&r.removeClass(t.join(""))},a._jQueryInterface=function(r){return this.each(function(){var t=n(this).data("bs.popover"),o="object"===(void 0===r?"undefined":e(r))?r:null;if((t||!/destroy|hide/.test(r))&&(t||(t=new a(this,o),n(this).data("bs.popover",t)),"string"==typeof r)){if(void 0===t[r])throw new Error('No method named "'+r+'"');t[r]()}})},o(a,null,[{key:"VERSION",get:function(){return"4.0.0-beta"}},{key:"Default",get:function(){return s}},{key:"NAME",get:function(){return"popover"}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return u}},{key:"EVENT_KEY",get:function(){return r}},{key:"DefaultType",get:function(){return d}}]),a}(a);n.fn.popover=g._jQueryInterface,n.fn.popover.Constructor=g,n.fn.popover.noConflict=function(){return n.fn.popover=i,g._jQueryInterface}}(n)}()}).call(r,t(1),t(10).default)},function(n,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),function(n){function t(n){return n&&"[object Function]"==={}.toString.call(n)}function e(n,r){if(1!==n.nodeType)return[];var t=getComputedStyle(n,null);return r?t[r]:t}function o(n){return"HTML"===n.nodeName?n:n.parentNode||n.host}function i(n){if(!n)return document.body;switch(n.nodeName){case"HTML":case"BODY":return n.ownerDocument.body;case"#document":return n.body}var r=e(n),t=r.overflow,a=r.overflowX,l=r.overflowY;return/(auto|scroll)/.test(t+l+a)?n:i(o(n))}function a(n){var r=n&&n.offsetParent,t=r&&r.nodeName;return t&&"BODY"!==t&&"HTML"!==t?-1!==["TD","TABLE"].indexOf(r.nodeName)&&"static"===e(r,"position")?a(r):r:n?n.ownerDocument.documentElement:document.documentElement}function l(n){return null!==n.parentNode?l(n.parentNode):n}function s(n,r){if(!(n&&n.nodeType&&r&&r.nodeType))return document.documentElement;var t=n.compareDocumentPosition(r)&Node.DOCUMENT_POSITION_FOLLOWING,e=t?n:r,o=t?r:n,i=document.createRange();i.setStart(e,0),i.setEnd(o,0);var d=i.commonAncestorContainer;if(n!==d&&r!==d||e.contains(o))return function(n){var r=n.nodeName;return"BODY"!==r&&("HTML"===r||a(n.firstElementChild)===n)}(d)?d:a(d);var c=l(n);return c.host?s(c.host,r):s(n,l(r).host)}function d(n){var r="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",t=n.nodeName;if("BODY"===t||"HTML"===t){var e=n.ownerDocument.documentElement;return(n.ownerDocument.scrollingElement||e)[r]}return n[r]}function c(n,r){var t="x"===r?"Left":"Top",e="Left"===t?"Right":"Bottom";return parseFloat(n["border"+t+"Width"],10)+parseFloat(n["border"+e+"Width"],10)}function p(n,r,t,e){return Math.max(r["offset"+n],r["scroll"+n],t["client"+n],t["offset"+n],t["scroll"+n],q()?t["offset"+n]+e["margin"+("Height"===n?"Top":"Left")]+e["margin"+("Height"===n?"Bottom":"Right")]:0)}function m(){var n=document.body,r=document.documentElement,t=q()&&getComputedStyle(r);return{height:p("Height",n,r,t),width:p("Width",n,r,t)}}function f(n){return K({},n,{right:n.left+n.width,bottom:n.top+n.height})}function u(n){var r={};if(q())try{r=n.getBoundingClientRect();var t=d(n,"top"),o=d(n,"left");r.top+=t,r.left+=o,r.bottom+=t,r.right+=o}catch(n){}else r=n.getBoundingClientRect();var i={left:r.left,top:r.top,width:r.right-r.left,height:r.bottom-r.top},a="HTML"===n.nodeName?m():{},l=a.width||n.clientWidth||i.right-i.left,s=a.height||n.clientHeight||i.bottom-i.top,p=n.offsetWidth-l,u=n.offsetHeight-s;if(p||u){var g=e(n);p-=c(g,"x"),u-=c(g,"y"),i.width-=p,i.height-=u}return f(i)}function g(n,r){var t=q(),o="HTML"===r.nodeName,a=u(n),l=u(r),s=i(n),c=e(r),p=parseFloat(c.borderTopWidth,10),m=parseFloat(c.borderLeftWidth,10),g=f({top:a.top-l.top-p,left:a.left-l.left-m,width:a.width,height:a.height});if(g.marginTop=0,g.marginLeft=0,!t&&o){var h=parseFloat(c.marginTop,10),b=parseFloat(c.marginLeft,10);g.top-=p-h,g.bottom-=p-h,g.left-=m-b,g.right-=m-b,g.marginTop=h,g.marginLeft=b}return(t?r.contains(s):r===s&&"BODY"!==s.nodeName)&&(g=function(n,r){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],e=d(r,"top"),o=d(r,"left"),i=t?-1:1;return n.top+=e*i,n.bottom+=e*i,n.left+=o*i,n.right+=o*i,n}(g,r)),g}function h(n){var r=n.nodeName;return"BODY"!==r&&"HTML"!==r&&("fixed"===e(n,"position")||h(o(n)))}function b(n,r,t,e){var a={top:0,left:0},l=s(n,r);if("viewport"===e)a=function(n){var r=n.ownerDocument.documentElement,t=g(n,r),e=Math.max(r.clientWidth,window.innerWidth||0),o=Math.max(r.clientHeight,window.innerHeight||0),i=d(r),a=d(r,"left");return f({top:i-t.top+t.marginTop,left:a-t.left+t.marginLeft,width:e,height:o})}(l);else{var c=void 0;"scrollParent"===e?"BODY"===(c=i(o(r))).nodeName&&(c=n.ownerDocument.documentElement):c="window"===e?n.ownerDocument.documentElement:e;var p=g(c,l);if("HTML"!==c.nodeName||h(l))a=p;else{var u=m(),b=u.height,v=u.width;a.top+=p.top-p.marginTop,a.bottom=b+p.top,a.left+=p.left-p.marginLeft,a.right=v+p.left}}return a.left+=t,a.top+=t,a.right-=t,a.bottom-=t,a}function v(n,r,t,e,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===n.indexOf("auto"))return n;var a=b(t,e,i,o),l={top:{width:a.width,height:r.top-a.top},right:{width:a.right-r.right,height:a.height},bottom:{width:a.width,height:a.bottom-r.bottom},left:{width:r.left-a.left,height:a.height}},s=Object.keys(l).map(function(n){return K({key:n},l[n],{area:function(n){return n.width*n.height}(l[n])})}).sort(function(n,r){return r.area-n.area}),d=s.filter(function(n){var r=n.width,e=n.height;return r>=t.clientWidth&&e>=t.clientHeight}),c=d.length>0?d[0].key:s[0].key,p=n.split("-")[1];return c+(p?"-"+p:"")}function x(n,r,t){return g(t,s(r,t))}function y(n){var r=getComputedStyle(n),t=parseFloat(r.marginTop)+parseFloat(r.marginBottom),e=parseFloat(r.marginLeft)+parseFloat(r.marginRight);return{width:n.offsetWidth+e,height:n.offsetHeight+t}}function w(n){var r={left:"right",right:"left",bottom:"top",top:"bottom"};return n.replace(/left|right|bottom|top/g,function(n){return r[n]})}function k(n,r,t){t=t.split("-")[0];var e=y(n),o={width:e.width,height:e.height},i=-1!==["right","left"].indexOf(t),a=i?"top":"left",l=i?"left":"top",s=i?"height":"width",d=i?"width":"height";return o[a]=r[a]+r[s]/2-e[s]/2,o[l]=t===l?r[l]-e[d]:r[w(l)],o}function _(n,r){return Array.prototype.find?n.find(r):n.filter(r)[0]}function E(n,r,e){return(void 0===e?n:n.slice(0,function(n,r,t){if(Array.prototype.findIndex)return n.findIndex(function(n){return n[r]===t});var e=_(n,function(n){return n[r]===t});return n.indexOf(e)}(n,"name",e))).forEach(function(n){n.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var e=n.function||n.fn;n.enabled&&t(e)&&(r.offsets.popper=f(r.offsets.popper),r.offsets.reference=f(r.offsets.reference),r=e(r,n))}),r}function T(n,r){return n.some(function(n){var t=n.name;return n.enabled&&t===r})}function C(n){for(var r=[!1,"ms","Webkit","Moz","O"],t=n.charAt(0).toUpperCase()+n.slice(1),e=0;e<r.length-1;e++){var o=r[e],i=o?""+o+t:n;if(void 0!==document.body.style[i])return i}return null}function A(n){var r=n.ownerDocument;return r?r.defaultView:window}function S(n,r,t,e){var o="BODY"===n.nodeName,a=o?n.ownerDocument.defaultView:n;a.addEventListener(r,t,{passive:!0}),o||S(i(a.parentNode),r,t,e),e.push(a)}function D(){this.state.eventsEnabled||(this.state=function(n,r,t,e){t.updateBound=e,A(n).addEventListener("resize",t.updateBound,{passive:!0});var o=i(n);return S(o,"scroll",t.updateBound,t.scrollParents),t.scrollElement=o,t.eventsEnabled=!0,t}(this.reference,this.options,this.state,this.scheduleUpdate))}function N(){this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=function(n,r){return A(n).removeEventListener("resize",r.updateBound),r.scrollParents.forEach(function(n){n.removeEventListener("scroll",r.updateBound)}),r.updateBound=null,r.scrollParents=[],r.scrollElement=null,r.eventsEnabled=!1,r}(this.reference,this.state))}function I(n){return""!==n&&!isNaN(parseFloat(n))&&isFinite(n)}function O(n,r){Object.keys(r).forEach(function(t){var e="";-1!==["width","height","top","right","bottom","left"].indexOf(t)&&I(r[t])&&(e="px"),n.style[t]=r[t]+e})}function j(n,r,t){var e=_(n,function(n){return n.name===r}),o=!!e&&n.some(function(n){return n.name===t&&n.enabled&&n.order<e.order});if(!o){var i="`"+r+"`",a="`"+t+"`";console.warn(a+" modifier is required by "+i+" modifier in order to work, be sure to include it before "+i+"!")}return o}function L(n){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=Q.indexOf(n),e=Q.slice(t+1).concat(Q.slice(0,t));return r?e.reverse():e}function P(n,r,t,e){var o=[0,0],i=-1!==["right","left"].indexOf(e),a=n.split(/(\+|\-)/).map(function(n){return n.trim()}),l=a.indexOf(_(a,function(n){return-1!==n.search(/,|\s/)}));a[l]&&-1===a[l].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var s=/\s*,\s*|\s+/,d=-1!==l?[a.slice(0,l).concat([a[l].split(s)[0]]),[a[l].split(s)[1]].concat(a.slice(l+1))]:[a];return(d=d.map(function(n,e){var o=(1===e?!i:i)?"height":"width",a=!1;return n.reduce(function(n,r){return""===n[n.length-1]&&-1!==["+","-"].indexOf(r)?(n[n.length-1]=r,a=!0,n):a?(n[n.length-1]+=r,a=!1,n):n.concat(r)},[]).map(function(n){return function(n,r,t,e){var o=n.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),i=+o[1],a=o[2];if(!i)return n;if(0===a.indexOf("%")){var l=void 0;switch(a){case"%p":l=t;break;case"%":case"%r":default:l=e}return f(l)[r]/100*i}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*i;return i}(n,o,r,t)})})).forEach(function(n,r){n.forEach(function(t,e){I(t)&&(o[r]+=t*("-"===n[e-1]?-1:1))})}),o}for(var H="undefined"!=typeof window&&"undefined"!=typeof document,R=["Edge","Trident","Firefox"],M=0,F=0;F<R.length;F+=1)if(H&&navigator.userAgent.indexOf(R[F])>=0){M=1;break}var W=H&&window.Promise?function(n){var r=!1;return function(){r||(r=!0,window.Promise.resolve().then(function(){r=!1,n()}))}}:function(n){var r=!1;return function(){r||(r=!0,setTimeout(function(){r=!1,n()},M))}},B=void 0,q=function(){return void 0===B&&(B=-1!==navigator.appVersion.indexOf("MSIE 10")),B},z=function(n,r){if(!(n instanceof r))throw new TypeError("Cannot call a class as a function")},U=function(){function n(n,r){for(var t=0;t<r.length;t++){var e=r[t];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(r,t,e){return t&&n(r.prototype,t),e&&n(r,e),r}}(),V=function(n,r,t){return r in n?Object.defineProperty(n,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[r]=t,n},K=Object.assign||function(n){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e])}return n},$=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],Q=$.slice(3),Y={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"},G={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(n){var r=n.placement,t=r.split("-")[0],e=r.split("-")[1];if(e){var o=n.offsets,i=o.reference,a=o.popper,l=-1!==["bottom","top"].indexOf(t),s=l?"left":"top",d=l?"width":"height",c={start:V({},s,i[s]),end:V({},s,i[s]+i[d]-a[d])};n.offsets.popper=K({},a,c[e])}return n}},offset:{order:200,enabled:!0,fn:function(n,r){var t=r.offset,e=n.placement,o=n.offsets,i=o.popper,a=o.reference,l=e.split("-")[0],s=void 0;return s=I(+t)?[+t,0]:P(t,i,a,l),"left"===l?(i.top+=s[0],i.left-=s[1]):"right"===l?(i.top+=s[0],i.left+=s[1]):"top"===l?(i.left+=s[0],i.top-=s[1]):"bottom"===l&&(i.left+=s[0],i.top+=s[1]),n.popper=i,n},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(n,r){var t=r.boundariesElement||a(n.instance.popper);n.instance.reference===t&&(t=a(t));var e=b(n.instance.popper,n.instance.reference,r.padding,t);r.boundaries=e;var o=r.priority,i=n.offsets.popper,l={primary:function(n){var t=i[n];return i[n]<e[n]&&!r.escapeWithReference&&(t=Math.max(i[n],e[n])),V({},n,t)},secondary:function(n){var t="right"===n?"left":"top",o=i[t];return i[n]>e[n]&&!r.escapeWithReference&&(o=Math.min(i[t],e[n]-("right"===n?i.width:i.height))),V({},t,o)}};return o.forEach(function(n){var r=-1!==["left","top"].indexOf(n)?"primary":"secondary";i=K({},i,l[r](n))}),n.offsets.popper=i,n},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(n){var r=n.offsets,t=r.popper,e=r.reference,o=n.placement.split("-")[0],i=Math.floor,a=-1!==["top","bottom"].indexOf(o),l=a?"right":"bottom",s=a?"left":"top",d=a?"width":"height";return t[l]<i(e[s])&&(n.offsets.popper[s]=i(e[s])-t[d]),t[s]>i(e[l])&&(n.offsets.popper[s]=i(e[l])),n}},arrow:{order:500,enabled:!0,fn:function(n,r){var t;if(!j(n.instance.modifiers,"arrow","keepTogether"))return n;var o=r.element;if("string"==typeof o){if(!(o=n.instance.popper.querySelector(o)))return n}else if(!n.instance.popper.contains(o))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),n;var i=n.placement.split("-")[0],a=n.offsets,l=a.popper,s=a.reference,d=-1!==["left","right"].indexOf(i),c=d?"height":"width",p=d?"Top":"Left",m=p.toLowerCase(),u=d?"left":"top",g=d?"bottom":"right",h=y(o)[c];s[g]-h<l[m]&&(n.offsets.popper[m]-=l[m]-(s[g]-h)),s[m]+h>l[g]&&(n.offsets.popper[m]+=s[m]+h-l[g]),n.offsets.popper=f(n.offsets.popper);var b=s[m]+s[c]/2-h/2,v=e(n.instance.popper),x=parseFloat(v["margin"+p],10),w=parseFloat(v["border"+p+"Width"],10),k=b-n.offsets.popper[m]-x-w;return k=Math.max(Math.min(l[c]-h,k),0),n.arrowElement=o,n.offsets.arrow=(t={},V(t,m,Math.round(k)),V(t,u,""),t),n},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(n,r){if(T(n.instance.modifiers,"inner"))return n;if(n.flipped&&n.placement===n.originalPlacement)return n;var t=b(n.instance.popper,n.instance.reference,r.padding,r.boundariesElement),e=n.placement.split("-")[0],o=w(e),i=n.placement.split("-")[1]||"",a=[];switch(r.behavior){case Y.FLIP:a=[e,o];break;case Y.CLOCKWISE:a=L(e);break;case Y.COUNTERCLOCKWISE:a=L(e,!0);break;default:a=r.behavior}return a.forEach(function(l,s){if(e!==l||a.length===s+1)return n;e=n.placement.split("-")[0],o=w(e);var d=n.offsets.popper,c=n.offsets.reference,p=Math.floor,m="left"===e&&p(d.right)>p(c.left)||"right"===e&&p(d.left)<p(c.right)||"top"===e&&p(d.bottom)>p(c.top)||"bottom"===e&&p(d.top)<p(c.bottom),f=p(d.left)<p(t.left),u=p(d.right)>p(t.right),g=p(d.top)<p(t.top),h=p(d.bottom)>p(t.bottom),b="left"===e&&f||"right"===e&&u||"top"===e&&g||"bottom"===e&&h,v=-1!==["top","bottom"].indexOf(e),x=!!r.flipVariations&&(v&&"start"===i&&f||v&&"end"===i&&u||!v&&"start"===i&&g||!v&&"end"===i&&h);(m||b||x)&&(n.flipped=!0,(m||b)&&(e=a[s+1]),x&&(i=function(n){return"end"===n?"start":"start"===n?"end":n}(i)),n.placement=e+(i?"-"+i:""),n.offsets.popper=K({},n.offsets.popper,k(n.instance.popper,n.offsets.reference,n.placement)),n=E(n.instance.modifiers,n,"flip"))}),n},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(n){var r=n.placement,t=r.split("-")[0],e=n.offsets,o=e.popper,i=e.reference,a=-1!==["left","right"].indexOf(t),l=-1===["top","left"].indexOf(t);return o[a?"left":"top"]=i[t]-(l?o[a?"width":"height"]:0),n.placement=w(r),n.offsets.popper=f(o),n}},hide:{order:800,enabled:!0,fn:function(n){if(!j(n.instance.modifiers,"hide","preventOverflow"))return n;var r=n.offsets.reference,t=_(n.instance.modifiers,function(n){return"preventOverflow"===n.name}).boundaries;if(r.bottom<t.top||r.left>t.right||r.top>t.bottom||r.right<t.left){if(!0===n.hide)return n;n.hide=!0,n.attributes["x-out-of-boundaries"]=""}else{if(!1===n.hide)return n;n.hide=!1,n.attributes["x-out-of-boundaries"]=!1}return n}},computeStyle:{order:850,enabled:!0,fn:function(n,r){var t=r.x,e=r.y,o=n.offsets.popper,i=_(n.instance.modifiers,function(n){return"applyStyle"===n.name}).gpuAcceleration;void 0!==i&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var l=void 0!==i?i:r.gpuAcceleration,s=u(a(n.instance.popper)),d={position:o.position},c={left:Math.floor(o.left),top:Math.floor(o.top),bottom:Math.floor(o.bottom),right:Math.floor(o.right)},p="bottom"===t?"top":"bottom",m="right"===e?"left":"right",f=C("transform"),g=void 0,h=void 0;if(h="bottom"===p?-s.height+c.bottom:c.top,g="right"===m?-s.width+c.right:c.left,l&&f)d[f]="translate3d("+g+"px, "+h+"px, 0)",d[p]=0,d[m]=0,d.willChange="transform";else{var b="bottom"===p?-1:1,v="right"===m?-1:1;d[p]=h*b,d[m]=g*v,d.willChange=p+", "+m}var x={"x-placement":n.placement};return n.attributes=K({},x,n.attributes),n.styles=K({},d,n.styles),n.arrowStyles=K({},n.offsets.arrow,n.arrowStyles),n},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(n){return O(n.instance.popper,n.styles),function(n,r){Object.keys(r).forEach(function(t){!1!==r[t]?n.setAttribute(t,r[t]):n.removeAttribute(t)})}(n.instance.popper,n.attributes),n.arrowElement&&Object.keys(n.arrowStyles).length&&O(n.arrowElement,n.arrowStyles),n},onLoad:function(n,r,t,e,o){var i=x(0,r,n),a=v(t.placement,i,r,n,t.modifiers.flip.boundariesElement,t.modifiers.flip.padding);return r.setAttribute("x-placement",a),O(r,{position:"absolute"}),t},gpuAcceleration:void 0}}},X=function(){function n(r,e){var o=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};z(this,n),this.scheduleUpdate=function(){return requestAnimationFrame(o.update)},this.update=W(this.update.bind(this)),this.options=K({},n.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=r&&r.jquery?r[0]:r,this.popper=e&&e.jquery?e[0]:e,this.options.modifiers={},Object.keys(K({},n.Defaults.modifiers,i.modifiers)).forEach(function(r){o.options.modifiers[r]=K({},n.Defaults.modifiers[r]||{},i.modifiers?i.modifiers[r]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(n){return K({name:n},o.options.modifiers[n])}).sort(function(n,r){return n.order-r.order}),this.modifiers.forEach(function(n){n.enabled&&t(n.onLoad)&&n.onLoad(o.reference,o.popper,o.options,n,o.state)}),this.update();var a=this.options.eventsEnabled;a&&this.enableEventListeners(),this.state.eventsEnabled=a}return U(n,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var n={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};n.offsets.reference=x(this.state,this.popper,this.reference),n.placement=v(this.options.placement,n.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),n.originalPlacement=n.placement,n.offsets.popper=k(this.popper,n.offsets.reference,n.placement),n.offsets.popper.position="absolute",n=E(this.modifiers,n),this.state.isCreated?this.options.onUpdate(n):(this.state.isCreated=!0,this.options.onCreate(n))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,T(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[C("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return D.call(this)}},{key:"disableEventListeners",value:function(){return N.call(this)}}]),n}();X.Utils=("undefined"!=typeof window?window:n).PopperUtils,X.placements=$,X.Defaults=G,r.default=X}.call(r,t(11))},function(n,r){var t;t=function(){return this}();try{t=t||Function("return this")()||(0,eval)("this")}catch(n){"object"==typeof window&&(t=window)}n.exports=t}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMmMxYzZiNDYyODVmNjAwZTM5OGEiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2pzL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9zdHlsZXMvc2l0ZS5jc3M/ZDZmZSIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvc3R5bGVzL3NpdGUuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL2Rpc3QvanMvYm9vdHN0cmFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wb3BwZXIuanMvZGlzdC9lc20vcG9wcGVyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiXSwibmFtZXMiOlsiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fc3R5bGVzX3NpdGVfY3NzX18iLCJuYXZpZ2F0b3IiLCJzZXJ2aWNlV29ya2VyIiwicmVnaXN0ZXIiLCJ0aGVuIiwicmVnIiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZXJyIiwid2FybiIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJnbG9iYWwiLCJmYWN0b3J5IiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ0aGlzIiwibm9HbG9iYWwiLCJET01FdmFsIiwiY29kZSIsImRvYyIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaXNBcnJheUxpa2UiLCJvYmoiLCJsZW5ndGgiLCJ0eXBlIiwialF1ZXJ5IiwiaXNXaW5kb3ciLCJub2RlTmFtZSIsImVsZW0iLCJ0b0xvd2VyQ2FzZSIsIndpbm5vdyIsImVsZW1lbnRzIiwicXVhbGlmaWVyIiwibm90IiwiaXNGdW5jdGlvbiIsImdyZXAiLCJub2RlVHlwZSIsImluZGV4T2YiLCJyaXNTaW1wbGUiLCJ0ZXN0IiwiZmlsdGVyIiwic2libGluZyIsImN1ciIsImRpciIsIklkZW50aXR5IiwidiIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJ2YWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJub1ZhbHVlIiwibWV0aG9kIiwicHJvbWlzZSIsImRvbmUiLCJmYWlsIiwiYXBwbHkiLCJ1bmRlZmluZWQiLCJzbGljZSIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeSIsIkRhdGEiLCJleHBhbmRvIiwidWlkIiwiZGF0YUF0dHIiLCJrZXkiLCJkYXRhIiwicmVwbGFjZSIsInJtdWx0aURhc2giLCJnZXRBdHRyaWJ1dGUiLCJyYnJhY2UiLCJKU09OIiwicGFyc2UiLCJnZXREYXRhIiwiZGF0YVVzZXIiLCJzZXQiLCJhZGp1c3RDU1MiLCJwcm9wIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJjc3MiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJyY3NzTnVtIiwiZXhlYyIsInN0eWxlIiwic3RhcnQiLCJlbmQiLCJnZXREZWZhdWx0RGlzcGxheSIsInRlbXAiLCJvd25lckRvY3VtZW50IiwiZGlzcGxheSIsImRlZmF1bHREaXNwbGF5TWFwIiwiYm9keSIsInNob3dIaWRlIiwic2hvdyIsInZhbHVlcyIsImluZGV4IiwiZGF0YVByaXYiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJnZXRBbGwiLCJjb250ZXh0IiwidGFnIiwicmV0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJxdWVyeVNlbGVjdG9yQWxsIiwibWVyZ2UiLCJzZXRHbG9iYWxFdmFsIiwiZWxlbXMiLCJyZWZFbGVtZW50cyIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsInRtcCIsIndyYXAiLCJjb250YWlucyIsImoiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsInJodG1sIiwicnRhZ05hbWUiLCJ3cmFwTWFwIiwiX2RlZmF1bHQiLCJpbm5lckhUTUwiLCJodG1sUHJlZmlsdGVyIiwibGFzdENoaWxkIiwiY2hpbGROb2RlcyIsImZpcnN0Q2hpbGQiLCJ0ZXh0Q29udGVudCIsInB1c2giLCJjcmVhdGVUZXh0Tm9kZSIsImluQXJyYXkiLCJyc2NyaXB0VHlwZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsInNhZmVBY3RpdmVFbGVtZW50IiwiYWN0aXZlRWxlbWVudCIsIm9uIiwidHlwZXMiLCJzZWxlY3RvciIsImZuIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJvZmYiLCJhcmd1bWVudHMiLCJndWlkIiwiZWFjaCIsImFkZCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImNvbnRlbnQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsIm1hdGNoIiwicnNjcmlwdFR5cGVNYXNrZWQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjbG9uZUNvcHlFdmVudCIsInNyYyIsImRlc3QiLCJwZGF0YU9sZCIsInBkYXRhQ3VyIiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImV2ZW50cyIsImhhc0RhdGEiLCJhY2Nlc3MiLCJoYW5kbGUiLCJleHRlbmQiLCJmaXhJbnB1dCIsInJjaGVja2FibGVUeXBlIiwiY2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImFyZ3MiLCJjYWxsYmFjayIsImNvbmNhdCIsImZpcnN0IiwiaGFzU2NyaXB0cyIsIm5vZGUiLCJpTm9DbG9uZSIsInN1cHBvcnQiLCJjaGVja0Nsb25lIiwicmNoZWNrZWQiLCJzZWxmIiwiZXEiLCJodG1sIiwibWFwIiwiY2xvbmUiLCJfZXZhbFVybCIsInJjbGVhblNjcmlwdCIsInJlbW92ZSIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJ3aWR0aCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRTdHlsZXMiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxNYXJnaW5SaWdodCIsInJudW1ub25weCIsInJtYXJnaW4iLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImZpbmFsUHJvcE5hbWUiLCJjc3NQcm9wcyIsImVtcHR5U3R5bGUiLCJjYXBOYW1lIiwidG9VcHBlckNhc2UiLCJjc3NQcmVmaXhlcyIsInZlbmRvclByb3BOYW1lIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1hdGNoZXMiLCJNYXRoIiwibWF4IiwiYXVnbWVudFdpZHRoT3JIZWlnaHQiLCJleHRyYSIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwidmFsIiwiY3NzRXhwYW5kIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJib3hTaXppbmdSZWxpYWJsZSIsInBhcnNlRmxvYXQiLCJUd2VlbiIsIm9wdGlvbnMiLCJlYXNpbmciLCJpbml0Iiwic2NoZWR1bGUiLCJpblByb2dyZXNzIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2V0VGltZW91dCIsImZ4IiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJmeE5vdyIsIm5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwid2hpY2giLCJhdHRycyIsImhlaWdodCIsIm9wYWNpdHkiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwicHJvcGVydGllcyIsInJlc3VsdCIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiZGVmZXJyZWQiLCJEZWZlcnJlZCIsImFsd2F5cyIsImN1cnJlbnRUaW1lIiwicmVtYWluaW5nIiwic3RhcnRUaW1lIiwiZHVyYXRpb24iLCJwZXJjZW50IiwidHdlZW5zIiwicnVuIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicHJvcHMiLCJvcHRzIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsInN0b3AiLCJnb3RvRW5kIiwicmVqZWN0V2l0aCIsImhvb2tzIiwiY2FtZWxDYXNlIiwiQXJyYXkiLCJpc0FycmF5IiwiY3NzSG9va3MiLCJleHBhbmQiLCJwcm9wRmlsdGVyIiwiX3F1ZXVlSG9va3MiLCJxdWV1ZSIsInByb3h5IiwicHJvZ3Jlc3MiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsInN0cmlwQW5kQ29sbGFwc2UiLCJybm90aHRtbHdoaXRlIiwiam9pbiIsImdldENsYXNzIiwiYnVpbGRQYXJhbXMiLCJwcmVmaXgiLCJ0cmFkaXRpb25hbCIsInJicmFja2V0IiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZnVuYyIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwidW5zaGlmdCIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0Iiwic2VsZWN0ZWQiLCJpbnNwZWN0ZWQiLCJfIiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsInNlZWtpbmdUcmFuc3BvcnQiLCJ0cmFuc3BvcnRzIiwiYWpheEV4dGVuZCIsInRhcmdldCIsImRlZXAiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFyciIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJydHJpbSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiYWxsIiwibGV0dGVyIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwibnVtIiwicHVzaFN0YWNrIiwicHJldk9iamVjdCIsImxhc3QiLCJsZW4iLCJzb3J0Iiwic3BsaWNlIiwiY29weSIsImNvcHlJc0FycmF5IiwiaXNQbGFpbk9iamVjdCIsInJhbmRvbSIsImlzUmVhZHkiLCJlcnJvciIsIm1zZyIsIm5vb3AiLCJpc051bWVyaWMiLCJpc05hTiIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwic3RyaW5nIiwidHJpbSIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJzZWNvbmQiLCJpbnZlcnQiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsIkRhdGUiLCJTeW1ib2wiLCJpdGVyYXRvciIsInNwbGl0IiwiU2l6emxlIiwic2VlZCIsIm5pZCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsInByZWZlcnJlZERvYyIsInNldERvY3VtZW50IiwiZG9jdW1lbnRJc0hUTUwiLCJycXVpY2tFeHByIiwiZ2V0RWxlbWVudEJ5SWQiLCJpZCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJjb21waWxlckNhY2hlIiwicmJ1Z2d5UVNBIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJzZXRBdHRyaWJ1dGUiLCJ0b2tlbml6ZSIsInRvU2VsZWN0b3IiLCJyc2libGluZyIsInRlc3RDb250ZXh0IiwicXNhRXJyb3IiLCJzZWxlY3QiLCJjcmVhdGVDYWNoZSIsImNhY2hlIiwia2V5cyIsIkV4cHIiLCJjYWNoZUxlbmd0aCIsInNoaWZ0IiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZWwiLCJhZGRIYW5kbGUiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImEiLCJiIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiZGlzYWJsZWQiLCJpc0Rpc2FibGVkIiwiZGlzYWJsZWRBbmNlc3RvciIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsInNldEZpbHRlcnMiLCJ0b2tlbnMiLCJhZGRDb21iaW5hdG9yIiwibWF0Y2hlciIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsIm5leHQiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJ4bWwiLCJvbGRDYWNoZSIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5ld0NhY2hlIiwiZGlycnVucyIsInVuaXF1ZUlEIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwidW5tYXRjaGVkIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInByZUZpbHRlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwiY29udGV4dHMiLCJtdWx0aXBsZUNvbnRleHRzIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwicmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0Iiwib3V0ZXJtb3N0Q29udGV4dCIsImdldFRleHQiLCJpc1hNTCIsImNvbXBpbGUiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJkb2NFbGVtIiwicmJ1Z2d5TWF0Y2hlcyIsImNsYXNzQ2FjaGUiLCJ0b2tlbkNhY2hlIiwic29ydE9yZGVyIiwicG9wIiwicHVzaF9uYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGVkIiwiZXNjYXBlZFdoaXRlc3BhY2UiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiZWxzIiwiZG9jdW1lbnRFbGVtZW50IiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImRlZmF1bHRWaWV3IiwidG9wIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwiZXhwciIsImF0dHIiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwiPiIsIiAiLCIrIiwifiIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwid2hhdCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJub2RlSW5kZXgiLCJwYXJlbnQiLCJ1c2VDYWNoZSIsInBzZXVkbyIsImlkeCIsIm1hdGNoZWQiLCJoYXMiLCJpbm5lclRleHQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJyb290IiwiZm9jdXMiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJzZWxlY3RlZEluZGV4IiwiZW1wdHkiLCJoZWFkZXIiLCJidXR0b24iLCJldmVuIiwib2RkIiwibHQiLCJndCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJwcmV2IiwidGFyZ2V0cyIsImNsb3Nlc3QiLCJwcmV2QWxsIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwicmV2ZXJzZSIsIkNhbGxiYWNrcyIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwidHVwbGVzIiwic3RhdGUiLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsImRlcHRoIiwic3BlY2lhbCIsInRoYXQiLCJtaWdodFRocm93IiwibWF4RGVwdGgiLCJUeXBlRXJyb3IiLCJwcm9jZXNzIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJnZXRTdGFja0hvb2siLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJtYXN0ZXIiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsInJlYWR5V2FpdCIsIndhaXQiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJhY2NlcHREYXRhIiwib3duZXIiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInN3YXAiLCJvbGQiLCJoaWRlIiwidG9nZ2xlIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJkaXYiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwidCIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYWRkUHJvcCIsImhvb2siLCJFdmVudCIsIm9yaWdpbmFsRXZlbnQiLCJ3cml0YWJsZSIsImxvYWQiLCJub0J1YmJsZSIsInRyaWdnZXIiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwiaXNTaW11bGF0ZWQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJhbHRLZXkiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNoYW5nZWRUb3VjaGVzIiwiY3RybEtleSIsImRldGFpbCIsImV2ZW50UGhhc2UiLCJtZXRhS2V5IiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwidmlldyIsImNoYXIiLCJjaGFyQ29kZSIsImtleUNvZGUiLCJidXR0b25zIiwiY2xpZW50WCIsImNsaWVudFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50IiwidG91Y2hlcyIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJyeGh0bWxUYWciLCJybm9Jbm5lcmh0bWwiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJjb21wdXRlU3R5bGVUZXN0cyIsImNzc1RleHQiLCJjb250YWluZXIiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJtYXJnaW5MZWZ0IiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJtYXJnaW5SaWdodCIsInBpeGVsTWFyZ2luUmlnaHRWYWwiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJyZGlzcGxheXN3YXAiLCJyY3VzdG9tUHJvcCIsImNzc1Nob3ciLCJwb3NpdGlvbiIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmxvYXQiLCJvcmlnTmFtZSIsImlzQ3VzdG9tUHJvcCIsInNldFByb3BlcnR5IiwiaXNGaW5pdGUiLCJnZXRDbGllbnRSZWN0cyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwic3VmZml4IiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsImVhc2VkIiwicG9zIiwic3RlcCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwicmZ4dHlwZXMiLCJycnVuIiwiKiIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYXR0ck5hbWVzIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsInBhcnNlSW50IiwiZm9yIiwiY2xhc3MiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImNsYXNzTmFtZXMiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsInJmb2N1c01vcnBoIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImV2ZW50UGF0aCIsImlzVHJpZ2dlciIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwiZm9jdXNpbiIsImF0dGFjaGVzIiwibm9uY2UiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwicGFyYW0iLCJ2YWx1ZU9yRnVuY3Rpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwicmVzcG9uc2VGaWVsZHMiLCJjb252ZXJ0ZXJzIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInN0YXR1cyIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJoZWFkZXJzIiwiaXNTdWNjZXNzIiwic3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJzdGF0dXNUZXh0IiwidGltZW91dFRpbWVyIiwidHJhbnNwb3J0IiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsIm1pbWVUeXBlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJhamF4Q29udmVydCIsImlmTW9kaWZpZWQiLCJjYWNoZVVSTCIsImNhbGxiYWNrQ29udGV4dCIsInN0YXR1c0NvZGUiLCJmaXJlR2xvYmFscyIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJyZXNwb25zZUhlYWRlcnMiLCJ1cmxBbmNob3IiLCJ1bmNhY2hlZCIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJhYm9ydCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJiZWZvcmVTZW5kIiwic2VuZCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJ0ZXh0IHNjcmlwdCIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJjbGllbnRUb3AiLCJwYWdlWE9mZnNldCIsImNsaWVudExlZnQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJiaW5kIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0IiwiaG1yIiwidHJhbnNmb3JtIiwibG9jYWxzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIml0ZW0iLCJ1c2VTb3VyY2VNYXAiLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJ1bmVzY2FwZSIsInN0cmluZ2lmeSIsInRvQ29tbWVudCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiYWRkU3R5bGVzVG9Eb20iLCJkb21TdHlsZSIsInN0eWxlc0luRG9tIiwicmVmcyIsImFkZFN0eWxlIiwibGlzdFRvU3R5bGVzIiwibmV3U3R5bGVzIiwicGFydCIsIm1lZGlhIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiZ2V0RWxlbWVudCIsImluc2VydEludG8iLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsInJlbW92ZVN0eWxlRWxlbWVudCIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImFkZEF0dHJzIiwiZm9yRWFjaCIsInVwZGF0ZSIsInNpbmdsZXRvbiIsInN0eWxlSW5kZXgiLCJzaW5nbGV0b25Db3VudGVyIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJsaW5rIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsImZpeFVybHMiLCJibG9iIiwib2xkU3JjIiwic3R5bGVTaGVldCIsIm5ld09iaiIsInJlcGxhY2VUZXh0IiwiY3NzTm9kZSIsImlzT2xkSUUiLCJtZW1vIiwibWVtb2l6ZSIsImF0b2IiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VtZW50IiwiQm9vbGVhbiIsImJhc2VVcmwiLCJjdXJyZW50RGlyIiwicGF0aG5hbWUiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwidW5xdW90ZWRPcmlnVXJsIiwiJDEiLCJuZXdVcmwiLCJQb3BwZXIiLCJ2ZXJzaW9uIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl90eXBlb2YiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIlV0aWwiLCJ0b1R5cGUiLCJpc0VsZW1lbnQiLCJ0cmFuc2l0aW9uRW5kRW11bGF0b3IiLCJfdGhpcyIsImNhbGxlZCIsIlRSQU5TSVRJT05fRU5EIiwidHJpZ2dlclRyYW5zaXRpb25FbmQiLCJ0cmFuc2l0aW9uIiwiVHJhbnNpdGlvbkVuZEV2ZW50IiwiV2Via2l0VHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJPVHJhbnNpdGlvbiIsImdldFVJRCIsImdldFNlbGVjdG9yRnJvbUVsZW1lbnQiLCJlbGVtZW50IiwicmVmbG93Iiwic3VwcG9ydHNUcmFuc2l0aW9uRW5kIiwidHlwZUNoZWNrQ29uZmlnIiwiY29tcG9uZW50TmFtZSIsImNvbmZpZyIsImNvbmZpZ1R5cGVzIiwiZXhwZWN0ZWRUeXBlcyIsInZhbHVlVHlwZSIsIlFVbml0IiwidHJhbnNpdGlvbkVuZFRlc3QiLCJlbXVsYXRlVHJhbnNpdGlvbkVuZCIsIlRvb2x0aXAiLCJKUVVFUllfTk9fQ09ORkxJQ1QiLCJDTE9TRSIsIkNMT1NFRCIsIkNMSUNLX0RBVEFfQVBJIiwiQ2xhc3NOYW1lIiwiQWxlcnQiLCJfZWxlbWVudCIsImNsb3NlIiwicm9vdEVsZW1lbnQiLCJfZ2V0Um9vdEVsZW1lbnQiLCJfdHJpZ2dlckNsb3NlRXZlbnQiLCJfcmVtb3ZlRWxlbWVudCIsImRpc3Bvc2UiLCJjbG9zZUV2ZW50IiwiX3RoaXMyIiwiX2Rlc3Ryb3lFbGVtZW50IiwiX2pRdWVyeUludGVyZmFjZSIsIiRlbGVtZW50IiwiX2hhbmRsZURpc21pc3MiLCJhbGVydEluc3RhbmNlIiwiU2VsZWN0b3IiLCJGT0NVU19CTFVSX0RBVEFfQVBJIiwiQnV0dG9uIiwidHJpZ2dlckNoYW5nZUV2ZW50IiwiYWRkQXJpYVByZXNzZWQiLCJoYXNBdHRyaWJ1dGUiLCJjbGFzc0xpc3QiLCJEQVRBX0tFWSIsIkVWRU5UX0tFWSIsIkRlZmF1bHQiLCJrZXlib2FyZCIsInNsaWRlIiwicGF1c2UiLCJEZWZhdWx0VHlwZSIsIkRpcmVjdGlvbiIsIlNMSURFIiwiU0xJRCIsIktFWURPV04iLCJNT1VTRUVOVEVSIiwiTU9VU0VMRUFWRSIsIlRPVUNIRU5EIiwiTE9BRF9EQVRBX0FQSSIsIkFDVElWRSIsIkFDVElWRV9JVEVNIiwiSVRFTSIsIk5FWFRfUFJFViIsIklORElDQVRPUlMiLCJEQVRBX1NMSURFIiwiREFUQV9SSURFIiwiQ2Fyb3VzZWwiLCJfaXRlbXMiLCJfaW50ZXJ2YWwiLCJfYWN0aXZlRWxlbWVudCIsIl9pc1BhdXNlZCIsIl9pc1NsaWRpbmciLCJ0b3VjaFRpbWVvdXQiLCJfY29uZmlnIiwiX2dldENvbmZpZyIsIl9pbmRpY2F0b3JzRWxlbWVudCIsIl9hZGRFdmVudExpc3RlbmVycyIsIl9zbGlkZSIsIm5leHRXaGVuVmlzaWJsZSIsImN5Y2xlIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwidmlzaWJpbGl0eVN0YXRlIiwiX3RoaXMzIiwiYWN0aXZlSW5kZXgiLCJfZ2V0SXRlbUluZGV4IiwiZGlyZWN0aW9uIiwiX3RoaXM0IiwiX2tleWRvd24iLCJ0YWdOYW1lIiwiX2dldEl0ZW1CeURpcmVjdGlvbiIsImlzTmV4dERpcmVjdGlvbiIsImlzUHJldkRpcmVjdGlvbiIsImxhc3RJdGVtSW5kZXgiLCJpdGVtSW5kZXgiLCJfdHJpZ2dlclNsaWRlRXZlbnQiLCJldmVudERpcmVjdGlvbk5hbWUiLCJ0YXJnZXRJbmRleCIsImZyb21JbmRleCIsInNsaWRlRXZlbnQiLCJmcm9tIiwiX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQiLCJuZXh0SW5kaWNhdG9yIiwiX3RoaXM1IiwiYWN0aXZlRWxlbWVudEluZGV4IiwibmV4dEVsZW1lbnQiLCJuZXh0RWxlbWVudEluZGV4IiwiaXNDeWNsaW5nIiwiZGlyZWN0aW9uYWxDbGFzc05hbWUiLCJvcmRlckNsYXNzTmFtZSIsInNsaWRFdmVudCIsImFjdGlvbiIsIl9kYXRhQXBpQ2xpY2tIYW5kbGVyIiwic2xpZGVJbmRleCIsIiRjYXJvdXNlbCIsIlNIT1ciLCJTSE9XTiIsIkhJREUiLCJISURERU4iLCJEaW1lbnNpb24iLCJBQ1RJVkVTIiwiREFUQV9UT0dHTEUiLCJDb2xsYXBzZSIsIl9pc1RyYW5zaXRpb25pbmciLCJfdHJpZ2dlckFycmF5IiwidGFiVG9nZ2xlcyIsIl9wYXJlbnQiLCJfZ2V0UGFyZW50IiwiX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyIsIl90aGlzNiIsImFjdGl2ZXMiLCJhY3RpdmVzRGF0YSIsInN0YXJ0RXZlbnQiLCJkaW1lbnNpb24iLCJfZ2V0RGltZW5zaW9uIiwic2V0VHJhbnNpdGlvbmluZyIsInNjcm9sbFNpemUiLCJfdGhpczciLCJpc1RyYW5zaXRpb25pbmciLCJfdGhpczgiLCJfZ2V0VGFyZ2V0RnJvbUVsZW1lbnQiLCJ0cmlnZ2VyQXJyYXkiLCJpc09wZW4iLCIkdGhpcyIsIiR0cmlnZ2VyIiwiJHRhcmdldCIsIlJFR0VYUF9LRVlET1dOIiwiQVJST1dfVVBfS0VZQ09ERSIsIkNMSUNLIiwiS0VZRE9XTl9EQVRBX0FQSSIsIktFWVVQX0RBVEFfQVBJIiwiQXR0YWNobWVudE1hcCIsIlRPUCIsIlRPUEVORCIsIkJPVFRPTSIsIkJPVFRPTUVORCIsInBsYWNlbWVudCIsImZsaXAiLCJEcm9wZG93biIsIl9wb3BwZXIiLCJfbWVudSIsIl9nZXRNZW51RWxlbWVudCIsIl9pbk5hdmJhciIsIl9kZXRlY3ROYXZiYXIiLCJfZ2V0UGFyZW50RnJvbUVsZW1lbnQiLCJpc0FjdGl2ZSIsIl9jbGVhck1lbnVzIiwic2hvd0V2ZW50IiwiX2dldFBvcHBlckNvbmZpZyIsImRlc3Ryb3kiLCJzY2hlZHVsZVVwZGF0ZSIsIl90aGlzOSIsImVsZW1lbnREYXRhIiwiX2dldFBsYWNlbWVudCIsIiRwYXJlbnREcm9wZG93biIsInBvcHBlckNvbmZpZyIsIm1vZGlmaWVycyIsImFwcGx5U3R5bGUiLCJ0b2dnbGVzIiwiZHJvcGRvd25NZW51IiwiaGlkZUV2ZW50IiwiX2RhdGFBcGlLZXlkb3duSGFuZGxlciIsIml0ZW1zIiwiYmFja2Ryb3AiLCJGT0NVU0lOIiwiUkVTSVpFIiwiQ0xJQ0tfRElTTUlTUyIsIktFWURPV05fRElTTUlTUyIsIk1PVVNFVVBfRElTTUlTUyIsIk1PVVNFRE9XTl9ESVNNSVNTIiwiRElBTE9HIiwiREFUQV9ESVNNSVNTIiwiRklYRURfQ09OVEVOVCIsIk5BVkJBUl9UT0dHTEVSIiwiTW9kYWwiLCJfZGlhbG9nIiwiX2JhY2tkcm9wIiwiX2lzU2hvd24iLCJfaXNCb2R5T3ZlcmZsb3dpbmciLCJfaWdub3JlQmFja2Ryb3BDbGljayIsIl9vcmlnaW5hbEJvZHlQYWRkaW5nIiwiX3Njcm9sbGJhcldpZHRoIiwiX3RoaXMxMCIsIl9jaGVja1Njcm9sbGJhciIsIl9zZXRTY3JvbGxiYXIiLCJfc2V0RXNjYXBlRXZlbnQiLCJfc2V0UmVzaXplRXZlbnQiLCJfc2hvd0JhY2tkcm9wIiwiX3Nob3dFbGVtZW50IiwiX3RoaXMxMSIsIl9oaWRlTW9kYWwiLCJoYW5kbGVVcGRhdGUiLCJfYWRqdXN0RGlhbG9nIiwiX3RoaXMxMiIsIk5vZGUiLCJFTEVNRU5UX05PREUiLCJfZW5mb3JjZUZvY3VzIiwic2hvd25FdmVudCIsInRyYW5zaXRpb25Db21wbGV0ZSIsIl90aGlzMTMiLCJfdGhpczE0IiwiX3RoaXMxNSIsIl90aGlzMTYiLCJfcmVzZXRBZGp1c3RtZW50cyIsIl9yZXNldFNjcm9sbGJhciIsIl9yZW1vdmVCYWNrZHJvcCIsIl90aGlzMTciLCJkb0FuaW1hdGUiLCJjYWxsYmFja1JlbW92ZSIsImlzTW9kYWxPdmVyZmxvd2luZyIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiY2xpZW50V2lkdGgiLCJpbm5lcldpZHRoIiwiX2dldFNjcm9sbGJhcldpZHRoIiwiX3RoaXMxOCIsImFjdHVhbFBhZGRpbmciLCJjYWxjdWxhdGVkUGFkZGluZyIsImFjdHVhbE1hcmdpbiIsImNhbGN1bGF0ZWRNYXJnaW4iLCJzY3JvbGxEaXYiLCJzY3JvbGxiYXJXaWR0aCIsIl90aGlzMTkiLCJBQ1RJVkFURSIsIlNDUk9MTCIsIkRBVEFfU1BZIiwiTkFWX0xJU1RfR1JPVVAiLCJOQVZfTElOS1MiLCJMSVNUX0lURU1TIiwiRFJPUERPV04iLCJEUk9QRE9XTl9JVEVNUyIsIkRST1BET1dOX1RPR0dMRSIsIk9mZnNldE1ldGhvZCIsIlNjcm9sbFNweSIsIl90aGlzMjAiLCJfc2Nyb2xsRWxlbWVudCIsIl9zZWxlY3RvciIsIl9vZmZzZXRzIiwiX3RhcmdldHMiLCJfYWN0aXZlVGFyZ2V0IiwiX3Njcm9sbEhlaWdodCIsIl9wcm9jZXNzIiwicmVmcmVzaCIsIl90aGlzMjEiLCJhdXRvTWV0aG9kIiwib2Zmc2V0TWV0aG9kIiwib2Zmc2V0QmFzZSIsIl9nZXRTY3JvbGxUb3AiLCJfZ2V0U2Nyb2xsSGVpZ2h0IiwidGFyZ2V0U2VsZWN0b3IiLCJ0YXJnZXRCQ1IiLCJfZ2V0T2Zmc2V0SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJtYXhTY3JvbGwiLCJfYWN0aXZhdGUiLCJfY2xlYXIiLCJxdWVyaWVzIiwiJGxpbmsiLCJzY3JvbGxTcHlzIiwiJHNweSIsIlRhYiIsIl90aGlzMjIiLCJwcmV2aW91cyIsImxpc3RFbGVtZW50IiwiaGlkZGVuRXZlbnQiLCJfdGhpczIzIiwiX3RyYW5zaXRpb25Db21wbGV0ZSIsImRyb3Bkb3duQ2hpbGQiLCJkcm9wZG93bkVsZW1lbnQiLCJCU0NMU19QUkVGSVhfUkVHRVgiLCJ0ZW1wbGF0ZSIsInRpdGxlIiwiZmFsbGJhY2tQbGFjZW1lbnQiLCJBVVRPIiwiUklHSFQiLCJMRUZUIiwiSG92ZXJTdGF0ZSIsIklOU0VSVEVEIiwiRk9DVVNPVVQiLCJUcmlnZ2VyIiwiX2lzRW5hYmxlZCIsIl90aW1lb3V0IiwiX2hvdmVyU3RhdGUiLCJfYWN0aXZlVHJpZ2dlciIsInRpcCIsIl9zZXRMaXN0ZW5lcnMiLCJlbmFibGUiLCJ0b2dnbGVFbmFibGVkIiwiZGF0YUtleSIsIl9nZXREZWxlZ2F0ZUNvbmZpZyIsIl9pc1dpdGhBY3RpdmVUcmlnZ2VyIiwiX2VudGVyIiwiX2xlYXZlIiwiZ2V0VGlwRWxlbWVudCIsIl90aGlzMjQiLCJpc1dpdGhDb250ZW50IiwiaXNJblRoZURvbSIsInRpcElkIiwiTkFNRSIsInNldENvbnRlbnQiLCJhdHRhY2htZW50IiwiX2dldEF0dGFjaG1lbnQiLCJhZGRBdHRhY2htZW50Q2xhc3MiLCJiZWhhdmlvciIsImFycm93Iiwib25DcmVhdGUiLCJvcmlnaW5hbFBsYWNlbWVudCIsIl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UiLCJvblVwZGF0ZSIsIl9maXhUcmFuc2l0aW9uIiwicHJldkhvdmVyU3RhdGUiLCJfVFJBTlNJVElPTl9EVVJBVElPTiIsIl90aGlzMjUiLCJfY2xlYW5UaXBDbGFzcyIsImdldFRpdGxlIiwiQ0xBU1NfUFJFRklYIiwiJHRpcCIsInNldEVsZW1lbnRDb250ZW50IiwiX3RoaXMyNiIsImV2ZW50SW4iLCJldmVudE91dCIsIl9maXhUaXRsZSIsInRpdGxlVHlwZSIsInRhYkNsYXNzIiwiaW5pdENvbmZpZ0FuaW1hdGlvbiIsIlBvcG92ZXIiLCJfVG9vbHRpcCIsIlJlZmVyZW5jZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0cyIsIl9nZXRDb250ZW50IiwiZnVuY3Rpb25Ub0NoZWNrIiwiZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IiwiZ2V0UGFyZW50Tm9kZSIsImdldFNjcm9sbFBhcmVudCIsIl9nZXRTdHlsZUNvbXB1dGVkUHJvcCIsImdldE9mZnNldFBhcmVudCIsImdldFJvb3QiLCJmaW5kQ29tbW9uT2Zmc2V0UGFyZW50IiwiZWxlbWVudDEiLCJlbGVtZW50MiIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsInJhbmdlIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInNldEVuZCIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwiaXNPZmZzZXRDb250YWluZXIiLCJlbGVtZW50MXJvb3QiLCJnZXRTY3JvbGwiLCJ1cHBlclNpZGUiLCJzY3JvbGxpbmdFbGVtZW50IiwiZ2V0Qm9yZGVyc1NpemUiLCJheGlzIiwic2lkZUEiLCJzaWRlQiIsImdldFNpemUiLCJjb21wdXRlZFN0eWxlIiwiaXNJRTEwJDEiLCJnZXRXaW5kb3dTaXplcyIsImdldENsaWVudFJlY3QiLCJvZmZzZXRzIiwiX2V4dGVuZHMiLCJyaWdodCIsImJvdHRvbSIsInNpemVzIiwiaG9yaXpTY3JvbGxiYXIiLCJ2ZXJ0U2Nyb2xsYmFyIiwiZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlIiwiaXNJRTEwIiwiaXNIVE1MIiwiY2hpbGRyZW5SZWN0IiwicGFyZW50UmVjdCIsInNjcm9sbFBhcmVudCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyTGVmdFdpZHRoIiwibWFyZ2luVG9wIiwibW9kaWZpZXIiLCJpbmNsdWRlU2Nyb2xsIiwiaXNGaXhlZCIsImdldEJvdW5kYXJpZXMiLCJwb3BwZXIiLCJyZWZlcmVuY2UiLCJib3VuZGFyaWVzRWxlbWVudCIsImJvdW5kYXJpZXMiLCJyZWxhdGl2ZU9mZnNldCIsImdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZSIsImJvdW5kYXJpZXNOb2RlIiwiX2dldFdpbmRvd1NpemVzIiwiY29tcHV0ZUF1dG9QbGFjZW1lbnQiLCJyZWZSZWN0IiwicmVjdHMiLCJzb3J0ZWRBcmVhcyIsImFyZWEiLCJfcmVmIiwiZ2V0QXJlYSIsImZpbHRlcmVkQXJlYXMiLCJfcmVmMiIsImNvbXB1dGVkUGxhY2VtZW50IiwidmFyaWF0aW9uIiwiZ2V0UmVmZXJlbmNlT2Zmc2V0cyIsImdldE91dGVyU2l6ZXMiLCJ4IiwibWFyZ2luQm90dG9tIiwieSIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwiZ2V0UG9wcGVyT2Zmc2V0cyIsInJlZmVyZW5jZU9mZnNldHMiLCJwb3BwZXJSZWN0IiwicG9wcGVyT2Zmc2V0cyIsImlzSG9yaXoiLCJtYWluU2lkZSIsInNlY29uZGFyeVNpZGUiLCJtZWFzdXJlbWVudCIsInNlY29uZGFyeU1lYXN1cmVtZW50IiwicnVuTW9kaWZpZXJzIiwiZW5kcyIsImZpbmRJbmRleCIsImlzTW9kaWZpZXJFbmFibGVkIiwibW9kaWZpZXJOYW1lIiwic29tZSIsImdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSIsInByZWZpeGVzIiwidXBwZXJQcm9wIiwiY2hhckF0IiwidG9DaGVjayIsImdldFdpbmRvdyIsImF0dGFjaFRvU2Nyb2xsUGFyZW50cyIsInNjcm9sbFBhcmVudHMiLCJpc0JvZHkiLCJwYXNzaXZlIiwiZW5hYmxlRXZlbnRMaXN0ZW5lcnMiLCJldmVudHNFbmFibGVkIiwidXBkYXRlQm91bmQiLCJzY3JvbGxFbGVtZW50Iiwic2V0dXBFdmVudExpc3RlbmVycyIsImRpc2FibGVFdmVudExpc3RlbmVycyIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJzZXRTdHlsZXMiLCJpc01vZGlmaWVyUmVxdWlyZWQiLCJyZXF1ZXN0aW5nTmFtZSIsInJlcXVlc3RlZE5hbWUiLCJyZXF1ZXN0aW5nIiwiaXNSZXF1aXJlZCIsIl9yZXF1ZXN0aW5nIiwicmVxdWVzdGVkIiwiY2xvY2t3aXNlIiwiY291bnRlciIsInZhbGlkUGxhY2VtZW50cyIsInBhcnNlT2Zmc2V0IiwiYmFzZVBsYWNlbWVudCIsInVzZUhlaWdodCIsImZyYWdtZW50cyIsImZyYWciLCJkaXZpZGVyIiwic2VhcmNoIiwic3BsaXRSZWdleCIsIm9wcyIsIm9wIiwibWVyZ2VXaXRoUHJldmlvdXMiLCJyZWR1Y2UiLCJzdHIiLCJ0b1ZhbHVlIiwiaW5kZXgyIiwiaXNCcm93c2VyIiwibG9uZ2VyVGltZW91dEJyb3dzZXJzIiwidGltZW91dER1cmF0aW9uIiwidXNlckFnZW50IiwiZGVib3VuY2UiLCJQcm9taXNlIiwic2NoZWR1bGVkIiwiYXBwVmVyc2lvbiIsImNsYXNzQ2FsbENoZWNrIiwiY3JlYXRlQ2xhc3MiLCJhc3NpZ24iLCJwbGFjZW1lbnRzIiwiQkVIQVZJT1JTIiwiRkxJUCIsIkNMT0NLV0lTRSIsIkNPVU5URVJDTE9DS1dJU0UiLCJEZWZhdWx0cyIsInJlbW92ZU9uRGVzdHJveSIsInNoaWZ0dmFyaWF0aW9uIiwiX2RhdGEkb2Zmc2V0cyIsImlzVmVydGljYWwiLCJzaWRlIiwic2hpZnRPZmZzZXRzIiwicHJldmVudE92ZXJmbG93IiwicHJpb3JpdHkiLCJwcmltYXJ5IiwiZXNjYXBlV2l0aFJlZmVyZW5jZSIsInNlY29uZGFyeSIsIm1pbiIsImtlZXBUb2dldGhlciIsImZsb29yIiwib3BTaWRlIiwiX2RhdGEkb2Zmc2V0cyRhcnJvdyIsImFycm93RWxlbWVudCIsInNpZGVDYXBpdGFsaXplZCIsImFsdFNpZGUiLCJhcnJvd0VsZW1lbnRTaXplIiwiY2VudGVyIiwicG9wcGVyTWFyZ2luU2lkZSIsInBvcHBlckJvcmRlclNpZGUiLCJzaWRlVmFsdWUiLCJyb3VuZCIsImZsaXBwZWQiLCJwbGFjZW1lbnRPcHBvc2l0ZSIsImZsaXBPcmRlciIsInJlZk9mZnNldHMiLCJvdmVybGFwc1JlZiIsIm92ZXJmbG93c0xlZnQiLCJvdmVyZmxvd3NSaWdodCIsIm92ZXJmbG93c1RvcCIsIm92ZXJmbG93c0JvdHRvbSIsIm92ZXJmbG93c0JvdW5kYXJpZXMiLCJmbGlwcGVkVmFyaWF0aW9uIiwiZmxpcFZhcmlhdGlvbnMiLCJnZXRPcHBvc2l0ZVZhcmlhdGlvbiIsImlubmVyIiwic3VidHJhY3RMZW5ndGgiLCJib3VuZCIsImNvbXB1dGVTdHlsZSIsImxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiIsImdwdUFjY2VsZXJhdGlvbiIsIm9mZnNldFBhcmVudFJlY3QiLCJwcmVmaXhlZFByb3BlcnR5Iiwid2lsbENoYW5nZSIsImludmVydFRvcCIsImludmVydExlZnQiLCJ4LXBsYWNlbWVudCIsImFycm93U3R5bGVzIiwic2V0QXR0cmlidXRlcyIsIm9uTG9hZCIsIm1vZGlmaWVyT3B0aW9ucyIsImlzRGVzdHJveWVkIiwiaXNDcmVhdGVkIiwiVXRpbHMiLCJQb3BwZXJVdGlscyIsIl9fd2VicGFja19leHBvcnRzX18iLCJnIiwiRnVuY3Rpb24iLCJldmFsIl0sIm1hcHBpbmdzIjoiYUFJQSxTQUFBQSxFQUFBQyxHQUdBLEdBQUFDLEVBQUFELEdBQ0EsT0FBQUMsRUFBQUQsR0FBQUUsUUFHQSxJQUFBQyxFQUFBRixFQUFBRCxJQUNBSSxFQUFBSixFQUNBSyxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQU4sR0FBQU8sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUgsR0FHQUksRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQXZCQSxJQUFBRCxLQTRCQUYsRUFBQVMsRUFBQUYsRUFHQVAsRUFBQVUsRUFBQVIsRUFHQUYsRUFBQVcsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBYixFQUFBYyxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQWIsRUFBQW9CLEVBQUEsU0FBQWhCLEdBQ0EsSUFBQVMsRUFBQVQsS0FBQWlCLFdBQ0EsV0FBMkIsT0FBQWpCLEVBQUEsU0FDM0IsV0FBaUMsT0FBQUEsR0FFakMsT0FEQUosRUFBQVcsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBYixFQUFBYyxFQUFBLFNBQUFRLEVBQUFDLEdBQXNELE9BQUFSLE9BQUFTLFVBQUFDLGVBQUFqQixLQUFBYyxFQUFBQyxJQUd0RHZCLEVBQUEwQixFQUFBLEdBR0ExQixJ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QUF3QyxTQUdBMEQsSUFBQSx1QkFDQWxCLE1BQUEsV0FDQSxPQUFBMG9ELEVBQUExdEQsS0FBQXdDLFNBR0EwRCxJQUFBLHdCQUNBbEIsTUFBQSxXQUNBLE9BQUErb0QsRUFBQS90RCxLQUFBd0MsVUE0QkFrdEMsRUE3SEEsR0FxSkFBLEVBQUEya0IsT0FBQSxvQkFBQXR5RCxjQUFBSSxHQUFBbXlELFlBQ0E1a0IsRUFBQTZnQixhQUNBN2dCLEVBQUFraEIsV0FFQTJELEVBQUEsd0NDbjRFQSxJQUFBQyxFQUdBQSxFQUFBLFdBQ0EsT0FBQWh5RCxLQURBLEdBSUEsSUFFQWd5RCxLQUFBQyxTQUFBLGNBQUFBLEtBQUEsRUFBQUMsTUFBQSxRQUNDLE1BQUF6eUQsR0FFRCxpQkFBQUYsU0FDQXl5RCxFQUFBenlELFFBT0FuQyxFQUFBRCxRQUFBNjBEIiwiZmlsZSI6Ii4vcHVibGljL2Rpc3QvanMvY29tbW9uLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDJjMWM2YjQ2Mjg1ZjYwMGUzOThhIiwidmFyICQgPSByZXF1aXJlKCdqcXVlcnknKTtcclxuaW1wb3J0ICdib290c3RyYXAnO1xyXG5pbXBvcnQgJy4uL3N0eWxlcy9zaXRlLmNzcyc7XHJcblxyXG4vLyByZWdpc3RlciB0aGUgc2VydmljZSB3b3JrZXIgaWYgYXZhaWxhYmxlXHJcbi8qKi8gXHJcbmlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7XHJcbiAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIoJy9zdy5qcycpLnRoZW4oZnVuY3Rpb24ocmVnKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdTdWNjZXNzZnVsbHkgcmVnaXN0ZXJlZCBzZXJ2aWNlIHdvcmtlcicsIHJlZyk7XHJcbiAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybignRXJyb3Igd2hpbHN0IHJlZ2lzdGVyaW5nIHNlcnZpY2Ugd29ya2VyJywgZXJyKTtcclxuICB9KTtcclxufVxyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29ubGluZScsIGZ1bmN0aW9uKGUpIHtcclxuICBjb25zb2xlLmxvZyhcIllvdSBhcmUgb25saW5lXCIpO1xyXG59LCBmYWxzZSk7XHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsIGZ1bmN0aW9uKGUpIHtcclxuICBjb25zb2xlLmxvZyhcIllvdSBhcmUgb2ZmbGluZVwiKTtcclxufSwgZmFsc2UpO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3B1YmxpYy9qcy9jb21tb24uanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjIuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTctMDMtMjBUMTg6NTlaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG5cblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjIuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLFxuXG5cdC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xuXHRybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2csXG5cblx0Ly8gVXNlZCBieSBqUXVlcnkuY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuXHRmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkge1xuXHRcdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIEFycmF5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUoIG9iaiApID09PSBcImZ1bmN0aW9uXCI7XG5cdH0sXG5cblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fSxcblxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHRcdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0XHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHRcdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRcdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG5cdH0sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0LyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzYxMjVcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHR0eXBlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHRcdHR5cGVvZiBvYmo7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG5cdFx0RE9NRXZhbCggY29kZSApO1xuXHR9LFxuXG5cdC8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHQvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5cdGNhbWVsQ2FzZTogZnVuY3Rpb24oIHN0cmluZyApIHtcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcblx0Ly8gYXJndW1lbnRzLlxuXHRwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0XHRjb250ZXh0ID0gZm47XG5cdFx0XHRmbiA9IHRtcDtcblx0XHR9XG5cblx0XHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFNpbXVsYXRlZCBiaW5kXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRcdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0XHR9O1xuXG5cdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0XHRyZXR1cm4gcHJveHk7XG5cdH0sXG5cblx0bm93OiBEYXRlLm5vdyxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblxuXHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE2LTA4LTA4XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGRpc2FibGVkQW5jZXN0b3IgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgKFwiZm9ybVwiIGluIGVsZW0gfHwgXCJsYWJlbFwiIGluIGVsZW0pO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cblx0XHRcdFx0Ly8gcVNBIGxvb2tzIG91dHNpZGUgRWxlbWVudCBjb250ZXh0LCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50XG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHdvcmthcm91bmQgdGVjaG5pcXVlXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0ZGlzYWJsZWRBbmNlc3RvciggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhY29tcGlsZXJDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxudmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2ltcGxlIHNlbGVjdG9yIHRoYXQgY2FuIGJlIGZpbHRlcmVkIGRpcmVjdGx5LCByZW1vdmluZyBub24tRWxlbWVudHNcblx0aWYgKCByaXNTaW1wbGUudGVzdCggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xuXHR9XG5cblx0Ly8gQ29tcGxleCBzZWxlY3RvciwgY29tcGFyZSB0aGUgdHdvIHNldHMsIHJlbW92aW5nIG5vbi1FbGVtZW50c1xuXHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3QgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJpZnJhbWVcIiApICkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG4gICAgICAgIC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuICAgICAgICAvLyBkb24ndCBzdXBwb3J0IGl0LlxuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcbiAgICAgICAgICAgIGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiBqUXVlcnkudHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGpRdWVyeS5jYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLFxuXHRcdHNjYWxlID0gMSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHRkbyB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxuXHRcdFx0Ly8gVXNlIHN0cmluZyBmb3IgZG91Ymxpbmcgc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3dcblx0XHRcdHNjYWxlID0gc2NhbGUgfHwgXCIuNVwiO1xuXG5cdFx0XHQvLyBBZGp1c3QgYW5kIGFwcGx5XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKClcblx0XHQvLyBCcmVhayB0aGUgbG9vcCBpZiBzY2FsZSBpcyB1bmNoYW5nZWQgb3IgcGVyZmVjdCwgb3IgaWYgd2UndmUganVzdCBoYWQgZW5vdWdoLlxuXHRcdH0gd2hpbGUgKFxuXHRcdFx0c2NhbGUgIT09ICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgKSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnNcblx0XHQpO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGNvbnRhaW5zLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggalF1ZXJ5LnR5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogalF1ZXJ5LmlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRmb2N1czoge1xuXG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxuXHRcdH0sXG5cdFx0Ymx1cjoge1xuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmJsdXIgKSB7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIEZvciBjaGVja2JveCwgZmlyZSBuYXRpdmUgZXZlbnQgc28gY2hlY2tlZCBzdGF0ZSB3aWxsIGJlIHJpZ2h0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIG5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHJldHVybiBub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvMzIyOVxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTNcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIFwiPnRib2R5XCIsIGVsZW0gKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7XG5cblx0aWYgKCBtYXRjaCApIHtcblx0XHRlbGVtLnR5cGUgPSBtYXRjaFsgMSBdO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIGlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm1hcmdpbiA9ICggL15tYXJnaW4vICk7XG5cbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcImJveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwidG9wOjElO3dpZHRoOjUwJVwiO1xuXHRcdGRpdi5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IGRpdlN0eWxlLm1hcmdpbkxlZnQgPT09IFwiMnB4XCI7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSBkaXZTdHlsZS53aWR0aCA9PT0gXCI0cHhcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBcIjUwJVwiO1xuXHRcdHBpeGVsTWFyZ2luUmlnaHRWYWwgPSBkaXZTdHlsZS5tYXJnaW5SaWdodCA9PT0gXCI0cHhcIjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHBpeGVsTWFyZ2luUmlnaHRWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MDt3aWR0aDo4cHg7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O1wiICtcblx0XHRcInBhZGRpbmc6MDttYXJnaW4tdG9wOjFweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXHRjb250YWluZXIuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbE1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxNYXJnaW5SaWdodFZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbE1hcmdpblJpZ2h0KCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJtYXJnaW4udGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fSxcblxuXHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGU7XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHByb3BlcnR5IG1hcHBlZCBhbG9uZyB3aGF0IGpRdWVyeS5jc3NQcm9wcyBzdWdnZXN0cyBvciB0b1xuLy8gYSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHkuXG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgcmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF07XG5cdGlmICggIXJldCApIHtcblx0XHRyZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcblx0fVxuXHRyZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XG5cdHZhciBpLFxuXHRcdHZhbCA9IDA7XG5cblx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXG5cdGlmICggZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRpID0gNDtcblxuXHQvLyBPdGhlcndpc2UgaW5pdGlhbGl6ZSBmb3IgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0aWVzXG5cdH0gZWxzZSB7XG5cdFx0aSA9IG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50XG5cdFx0XHRpZiAoIGV4dHJhID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCwgc28gYWRkIHBhZGRpbmdcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKSxcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdC8vIENoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzXG5cdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcblx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXG5cdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBuYW1lIF0gKTtcblxuXHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvSGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRpZiAoIHZhbCA9PT0gXCJhdXRvXCIgKSB7XG5cdFx0dmFsID0gZWxlbVsgXCJvZmZzZXRcIiArIG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApIF07XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gVXNlIHRoZSBhY3RpdmUgYm94LXNpemluZyBtb2RlbCB0byBhZGQvc3VidHJhY3QgaXJyZWxldmFudCBzdHlsZXNcblx0cmV0dXJuICggdmFsICtcblx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdGVsZW0sXG5cdFx0XHRuYW1lLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlc1xuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHtcblx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxuXHR9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSAmJiBhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdG5hbWUsXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KTtcblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IGpRdWVyeS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WVxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0alF1ZXJ5LnByb3h5KCByZXN1bHQuc3RvcCwgcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvO1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxuXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKS5wcm9wKCB7XG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuXHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0fSApLm9uKFxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0galF1ZXJ5LmlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIGRvYywgZG9jRWxlbSwgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHR3aW4gPSBkb2MuZGVmYXVsdFZpZXc7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY0VsZW0uY2xpZW50VG9wLFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRMZWZ0XG5cdFx0fTtcblx0fSxcblxuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSxcblx0XHQvLyBiZWNhdXNlIGl0IGlzIGl0cyBvbmx5IG9mZnNldCBwYXJlbnRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgdGhlcmUgd2hlbiBjb21wdXRlZCBwb3NpdGlvbiBpcyBmaXhlZFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpO1xuXG5cdFx0XHQvLyBHZXQgY29ycmVjdCBvZmZzZXRzXG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXHRcdFx0aWYgKCAhbm9kZU5hbWUoIG9mZnNldFBhcmVudFsgMCBdLCBcImh0bWxcIiApICkge1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xuXHRcdFx0cGFyZW50T2Zmc2V0ID0ge1xuXHRcdFx0XHR0b3A6IHBhcmVudE9mZnNldC50b3AgKyBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICksXG5cdFx0XHRcdGxlZnQ6IHBhcmVudE9mZnNldC5sZWZ0ICsgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoICFub0dsb2JhbCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3NpdGUuY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBQcmVwYXJlIGNzc1RyYW5zZm9ybWF0aW9uXG52YXIgdHJhbnNmb3JtO1xuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3NpdGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3NpdGUuY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3B1YmxpYy9zdHlsZXMvc2l0ZS5jc3Ncbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSh1bmRlZmluZWQpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiQG1lZGlhIHByaW50IHtcXHJcXG4gICosXFxyXFxuICAqOjpiZWZvcmUsXFxyXFxuICAqOjphZnRlciB7XFxyXFxuICAgIHRleHQtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7XFxyXFxuICAgIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgYSxcXHJcXG4gIGE6dmlzaXRlZCB7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyB9XFxyXFxuXFxyXFxuICBhYmJyW3RpdGxlXTo6YWZ0ZXIge1xcclxcbiAgICBjb250ZW50OiBcXFwiIChcXFwiIGF0dHIodGl0bGUpIFxcXCIpXFxcIjsgfVxcclxcblxcclxcbiAgcHJlIHtcXHJcXG4gICAgd2hpdGUtc3BhY2U6IHByZS13cmFwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIHByZSxcXHJcXG4gIGJsb2NrcXVvdGUge1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjOTk5O1xcclxcbiAgICBwYWdlLWJyZWFrLWluc2lkZTogYXZvaWQ7IH1cXHJcXG5cXHJcXG4gIHRoZWFkIHtcXHJcXG4gICAgZGlzcGxheTogdGFibGUtaGVhZGVyLWdyb3VwOyB9XFxyXFxuXFxyXFxuICB0cixcXHJcXG4gIGltZyB7XFxyXFxuICAgIHBhZ2UtYnJlYWstaW5zaWRlOiBhdm9pZDsgfVxcclxcblxcclxcbiAgcCxcXHJcXG4gIGgyLFxcclxcbiAgaDMge1xcclxcbiAgICBvcnBoYW5zOiAzO1xcclxcbiAgICB3aWRvd3M6IDM7IH1cXHJcXG5cXHJcXG4gIGgyLFxcclxcbiAgaDMge1xcclxcbiAgICBwYWdlLWJyZWFrLWFmdGVyOiBhdm9pZDsgfVxcclxcblxcclxcbiAgLm5hdmJhciB7XFxyXFxuICAgIGRpc3BsYXk6IG5vbmU7IH1cXHJcXG5cXHJcXG4gIC5iYWRnZSB7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMwMDA7IH1cXHJcXG5cXHJcXG4gIC50YWJsZSB7XFxyXFxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2UgIWltcG9ydGFudDsgfVxcclxcbiAgICAudGFibGUgdGQsXFxyXFxuICAgIC50YWJsZSB0aCB7XFxyXFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZiAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAudGFibGUtYm9yZGVyZWQgdGgsXFxyXFxuICAudGFibGUtYm9yZGVyZWQgdGQge1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkICFpbXBvcnRhbnQ7IH0gfVxcclxcbiosXFxyXFxuKjo6YmVmb3JlLFxcclxcbio6OmFmdGVyIHtcXHJcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH1cXHJcXG5cXHJcXG5odG1sIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcclxcbiAgbGluZS1oZWlnaHQ6IDEuMTU7XFxyXFxuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7XFxyXFxuICAtbXMtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcXHJcXG4gIC1tcy1vdmVyZmxvdy1zdHlsZTogc2Nyb2xsYmFyO1xcclxcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApOyB9XFxyXFxuXFxyXFxuQC1tcy12aWV3cG9ydCB7XFxyXFxuICB3aWR0aDogZGV2aWNlLXdpZHRoOyB9XFxyXFxuYXJ0aWNsZSwgYXNpZGUsIGRpYWxvZywgZmlnY2FwdGlvbiwgZmlndXJlLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtYWluLCBuYXYsIHNlY3Rpb24ge1xcclxcbiAgZGlzcGxheTogYmxvY2s7IH1cXHJcXG5cXHJcXG5ib2R5IHtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG4gIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFxcXCJTZWdvZSBVSVxcXCIsIFJvYm90bywgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgQXJpYWwsIHNhbnMtc2VyaWYsIFxcXCJBcHBsZSBDb2xvciBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBTeW1ib2xcXFwiO1xcclxcbiAgZm9udC1zaXplOiAxcmVtO1xcclxcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxyXFxuICBjb2xvcjogIzIxMjUyOTtcXHJcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOyB9XFxyXFxuXFxyXFxuW3RhYmluZGV4PVxcXCItMVxcXCJdOmZvY3VzIHtcXHJcXG4gIG91dGxpbmU6IG5vbmUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbmhyIHtcXHJcXG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xcclxcbiAgaGVpZ2h0OiAwO1xcclxcbiAgb3ZlcmZsb3c6IHZpc2libGU7IH1cXHJcXG5cXHJcXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcXHJcXG4gIG1hcmdpbi10b3A6IDA7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAuNXJlbTsgfVxcclxcblxcclxcbnAge1xcclxcbiAgbWFyZ2luLXRvcDogMDtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07IH1cXHJcXG5cXHJcXG5hYmJyW3RpdGxlXSxcXHJcXG5hYmJyW2RhdGEtb3JpZ2luYWwtdGl0bGVdIHtcXHJcXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcclxcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgZG90dGVkO1xcclxcbiAgY3Vyc29yOiBoZWxwO1xcclxcbiAgYm9yZGVyLWJvdHRvbTogMDsgfVxcclxcblxcclxcbmFkZHJlc3Mge1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXHJcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0OyB9XFxyXFxuXFxyXFxub2wsXFxyXFxudWwsXFxyXFxuZGwge1xcclxcbiAgbWFyZ2luLXRvcDogMDtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07IH1cXHJcXG5cXHJcXG5vbCBvbCxcXHJcXG51bCB1bCxcXHJcXG5vbCB1bCxcXHJcXG51bCBvbCB7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAwOyB9XFxyXFxuXFxyXFxuZHQge1xcclxcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cXHJcXG5cXHJcXG5kZCB7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAuNXJlbTtcXHJcXG4gIG1hcmdpbi1sZWZ0OiAwOyB9XFxyXFxuXFxyXFxuYmxvY2txdW90ZSB7XFxyXFxuICBtYXJnaW46IDAgMCAxcmVtOyB9XFxyXFxuXFxyXFxuZGZuIHtcXHJcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYzsgfVxcclxcblxcclxcbmIsXFxyXFxuc3Ryb25nIHtcXHJcXG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7IH1cXHJcXG5cXHJcXG5zbWFsbCB7XFxyXFxuICBmb250LXNpemU6IDgwJTsgfVxcclxcblxcclxcbnN1YixcXHJcXG5zdXAge1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgZm9udC1zaXplOiA3NSU7XFxyXFxuICBsaW5lLWhlaWdodDogMDtcXHJcXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgfVxcclxcblxcclxcbnN1YiB7XFxyXFxuICBib3R0b206IC0uMjVlbTsgfVxcclxcblxcclxcbnN1cCB7XFxyXFxuICB0b3A6IC0uNWVtOyB9XFxyXFxuXFxyXFxuYSB7XFxyXFxuICBjb2xvcjogIzAwN2JmZjtcXHJcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbiAgLXdlYmtpdC10ZXh0LWRlY29yYXRpb24tc2tpcDogb2JqZWN0czsgfVxcclxcbiAgYTpob3ZlciB7XFxyXFxuICAgIGNvbG9yOiAjMDA1NmIzO1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsgfVxcclxcblxcclxcbmE6bm90KFtocmVmXSk6bm90KFt0YWJpbmRleF0pIHtcXHJcXG4gIGNvbG9yOiBpbmhlcml0O1xcclxcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XFxyXFxuICBhOm5vdChbaHJlZl0pOm5vdChbdGFiaW5kZXhdKTpmb2N1cywgYTpub3QoW2hyZWZdKTpub3QoW3RhYmluZGV4XSk6aG92ZXIge1xcclxcbiAgICBjb2xvcjogaW5oZXJpdDtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XFxyXFxuICBhOm5vdChbaHJlZl0pOm5vdChbdGFiaW5kZXhdKTpmb2N1cyB7XFxyXFxuICAgIG91dGxpbmU6IDA7IH1cXHJcXG5cXHJcXG5wcmUsXFxyXFxuY29kZSxcXHJcXG5rYmQsXFxyXFxuc2FtcCB7XFxyXFxuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XFxyXFxuICBmb250LXNpemU6IDFlbTsgfVxcclxcblxcclxcbnByZSB7XFxyXFxuICBtYXJnaW4tdG9wOiAwO1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXHJcXG4gIG92ZXJmbG93OiBhdXRvOyB9XFxyXFxuXFxyXFxuZmlndXJlIHtcXHJcXG4gIG1hcmdpbjogMCAwIDFyZW07IH1cXHJcXG5cXHJcXG5pbWcge1xcclxcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXHJcXG4gIGJvcmRlci1zdHlsZTogbm9uZTsgfVxcclxcblxcclxcbnN2Zzpub3QoOnJvb3QpIHtcXHJcXG4gIG92ZXJmbG93OiBoaWRkZW47IH1cXHJcXG5cXHJcXG5hLFxcclxcbmFyZWEsXFxyXFxuYnV0dG9uLFxcclxcbltyb2xlPVxcXCJidXR0b25cXFwiXSxcXHJcXG5pbnB1dCxcXHJcXG5sYWJlbCxcXHJcXG5zZWxlY3QsXFxyXFxuc3VtbWFyeSxcXHJcXG50ZXh0YXJlYSB7XFxyXFxuICB0b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbjsgfVxcclxcblxcclxcbnRhYmxlIHtcXHJcXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7IH1cXHJcXG5cXHJcXG5jYXB0aW9uIHtcXHJcXG4gIHBhZGRpbmctdG9wOiAwLjc1cmVtO1xcclxcbiAgcGFkZGluZy1ib3R0b206IDAuNzVyZW07XFxyXFxuICBjb2xvcjogIzg2OGU5NjtcXHJcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxyXFxuICBjYXB0aW9uLXNpZGU6IGJvdHRvbTsgfVxcclxcblxcclxcbnRoIHtcXHJcXG4gIHRleHQtYWxpZ246IGluaGVyaXQ7IH1cXHJcXG5cXHJcXG5sYWJlbCB7XFxyXFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAuNXJlbTsgfVxcclxcblxcclxcbmJ1dHRvbjpmb2N1cyB7XFxyXFxuICBvdXRsaW5lOiAxcHggZG90dGVkO1xcclxcbiAgb3V0bGluZTogNXB4IGF1dG8gLXdlYmtpdC1mb2N1cy1yaW5nLWNvbG9yOyB9XFxyXFxuXFxyXFxuaW5wdXQsXFxyXFxuYnV0dG9uLFxcclxcbnNlbGVjdCxcXHJcXG5vcHRncm91cCxcXHJcXG50ZXh0YXJlYSB7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICBmb250LWZhbWlseTogaW5oZXJpdDtcXHJcXG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0OyB9XFxyXFxuXFxyXFxuYnV0dG9uLFxcclxcbmlucHV0IHtcXHJcXG4gIG92ZXJmbG93OiB2aXNpYmxlOyB9XFxyXFxuXFxyXFxuYnV0dG9uLFxcclxcbnNlbGVjdCB7XFxyXFxuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTsgfVxcclxcblxcclxcbmJ1dHRvbixcXHJcXG5odG1sIFt0eXBlPVxcXCJidXR0b25cXFwiXSxcXHJcXG5bdHlwZT1cXFwicmVzZXRcXFwiXSxcXHJcXG5bdHlwZT1cXFwic3VibWl0XFxcIl0ge1xcclxcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247IH1cXHJcXG5cXHJcXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXFxyXFxuW3R5cGU9XFxcImJ1dHRvblxcXCJdOjotbW96LWZvY3VzLWlubmVyLFxcclxcblt0eXBlPVxcXCJyZXNldFxcXCJdOjotbW96LWZvY3VzLWlubmVyLFxcclxcblt0eXBlPVxcXCJzdWJtaXRcXFwiXTo6LW1vei1mb2N1cy1pbm5lciB7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbiAgYm9yZGVyLXN0eWxlOiBub25lOyB9XFxyXFxuXFxyXFxuaW5wdXRbdHlwZT1cXFwicmFkaW9cXFwiXSxcXHJcXG5pbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdIHtcXHJcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICBwYWRkaW5nOiAwOyB9XFxyXFxuXFxyXFxuaW5wdXRbdHlwZT1cXFwiZGF0ZVxcXCJdLFxcclxcbmlucHV0W3R5cGU9XFxcInRpbWVcXFwiXSxcXHJcXG5pbnB1dFt0eXBlPVxcXCJkYXRldGltZS1sb2NhbFxcXCJdLFxcclxcbmlucHV0W3R5cGU9XFxcIm1vbnRoXFxcIl0ge1xcclxcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBsaXN0Ym94OyB9XFxyXFxuXFxyXFxudGV4dGFyZWEge1xcclxcbiAgb3ZlcmZsb3c6IGF1dG87XFxyXFxuICByZXNpemU6IHZlcnRpY2FsOyB9XFxyXFxuXFxyXFxuZmllbGRzZXQge1xcclxcbiAgbWluLXdpZHRoOiAwO1xcclxcbiAgcGFkZGluZzogMDtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG4gIGJvcmRlcjogMDsgfVxcclxcblxcclxcbmxlZ2VuZCB7XFxyXFxuICBkaXNwbGF5OiBibG9jaztcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgbWF4LXdpZHRoOiAxMDAlO1xcclxcbiAgcGFkZGluZzogMDtcXHJcXG4gIG1hcmdpbi1ib3R0b206IC41cmVtO1xcclxcbiAgZm9udC1zaXplOiAxLjVyZW07XFxyXFxuICBsaW5lLWhlaWdodDogaW5oZXJpdDtcXHJcXG4gIGNvbG9yOiBpbmhlcml0O1xcclxcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDsgfVxcclxcblxcclxcbnByb2dyZXNzIHtcXHJcXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgfVxcclxcblxcclxcblt0eXBlPVxcXCJudW1iZXJcXFwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcXHJcXG5bdHlwZT1cXFwibnVtYmVyXFxcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xcclxcbiAgaGVpZ2h0OiBhdXRvOyB9XFxyXFxuXFxyXFxuW3R5cGU9XFxcInNlYXJjaFxcXCJdIHtcXHJcXG4gIG91dGxpbmUtb2Zmc2V0OiAtMnB4O1xcclxcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyB9XFxyXFxuXFxyXFxuW3R5cGU9XFxcInNlYXJjaFxcXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxcclxcblt0eXBlPVxcXCJzZWFyY2hcXFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XFxyXFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7IH1cXHJcXG5cXHJcXG46Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uIHtcXHJcXG4gIGZvbnQ6IGluaGVyaXQ7XFxyXFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgfVxcclxcblxcclxcbm91dHB1dCB7XFxyXFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH1cXHJcXG5cXHJcXG5zdW1tYXJ5IHtcXHJcXG4gIGRpc3BsYXk6IGxpc3QtaXRlbTsgfVxcclxcblxcclxcbnRlbXBsYXRlIHtcXHJcXG4gIGRpc3BsYXk6IG5vbmU7IH1cXHJcXG5cXHJcXG5baGlkZGVuXSB7XFxyXFxuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LFxcclxcbi5oMSwgLmgyLCAuaDMsIC5oNCwgLmg1LCAuaDYge1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMC41cmVtO1xcclxcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XFxyXFxuICBmb250LXdlaWdodDogNTAwO1xcclxcbiAgbGluZS1oZWlnaHQ6IDEuMTtcXHJcXG4gIGNvbG9yOiBpbmhlcml0OyB9XFxyXFxuXFxyXFxuaDEsIC5oMSB7XFxyXFxuICBmb250LXNpemU6IDIuNXJlbTsgfVxcclxcblxcclxcbmgyLCAuaDIge1xcclxcbiAgZm9udC1zaXplOiAycmVtOyB9XFxyXFxuXFxyXFxuaDMsIC5oMyB7XFxyXFxuICBmb250LXNpemU6IDEuNzVyZW07IH1cXHJcXG5cXHJcXG5oNCwgLmg0IHtcXHJcXG4gIGZvbnQtc2l6ZTogMS41cmVtOyB9XFxyXFxuXFxyXFxuaDUsIC5oNSB7XFxyXFxuICBmb250LXNpemU6IDEuMjVyZW07IH1cXHJcXG5cXHJcXG5oNiwgLmg2IHtcXHJcXG4gIGZvbnQtc2l6ZTogMXJlbTsgfVxcclxcblxcclxcbi5sZWFkIHtcXHJcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXHJcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7IH1cXHJcXG5cXHJcXG4uZGlzcGxheS0xIHtcXHJcXG4gIGZvbnQtc2l6ZTogNnJlbTtcXHJcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxyXFxuICBsaW5lLWhlaWdodDogMS4xOyB9XFxyXFxuXFxyXFxuLmRpc3BsYXktMiB7XFxyXFxuICBmb250LXNpemU6IDUuNXJlbTtcXHJcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxyXFxuICBsaW5lLWhlaWdodDogMS4xOyB9XFxyXFxuXFxyXFxuLmRpc3BsYXktMyB7XFxyXFxuICBmb250LXNpemU6IDQuNXJlbTtcXHJcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxyXFxuICBsaW5lLWhlaWdodDogMS4xOyB9XFxyXFxuXFxyXFxuLmRpc3BsYXktNCB7XFxyXFxuICBmb250LXNpemU6IDMuNXJlbTtcXHJcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxyXFxuICBsaW5lLWhlaWdodDogMS4xOyB9XFxyXFxuXFxyXFxuaHIge1xcclxcbiAgbWFyZ2luLXRvcDogMXJlbTtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07XFxyXFxuICBib3JkZXI6IDA7XFxyXFxuICBib3JkZXItdG9wOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjEpOyB9XFxyXFxuXFxyXFxuc21hbGwsXFxyXFxuLnNtYWxsIHtcXHJcXG4gIGZvbnQtc2l6ZTogODAlO1xcclxcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDsgfVxcclxcblxcclxcbm1hcmssXFxyXFxuLm1hcmsge1xcclxcbiAgcGFkZGluZzogMC4yZW07XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNmOGUzOyB9XFxyXFxuXFxyXFxuLmxpc3QtdW5zdHlsZWQge1xcclxcbiAgcGFkZGluZy1sZWZ0OiAwO1xcclxcbiAgbGlzdC1zdHlsZTogbm9uZTsgfVxcclxcblxcclxcbi5saXN0LWlubGluZSB7XFxyXFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxyXFxuICBsaXN0LXN0eWxlOiBub25lOyB9XFxyXFxuXFxyXFxuLmxpc3QtaW5saW5lLWl0ZW0ge1xcclxcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XFxyXFxuICAubGlzdC1pbmxpbmUtaXRlbTpub3QoOmxhc3QtY2hpbGQpIHtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiA1cHg7IH1cXHJcXG5cXHJcXG4uaW5pdGlhbGlzbSB7XFxyXFxuICBmb250LXNpemU6IDkwJTtcXHJcXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7IH1cXHJcXG5cXHJcXG4uYmxvY2txdW90ZSB7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcclxcbiAgZm9udC1zaXplOiAxLjI1cmVtOyB9XFxyXFxuXFxyXFxuLmJsb2NrcXVvdGUtZm9vdGVyIHtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgZm9udC1zaXplOiA4MCU7XFxyXFxuICBjb2xvcjogIzg2OGU5NjsgfVxcclxcbiAgLmJsb2NrcXVvdGUtZm9vdGVyOjpiZWZvcmUge1xcclxcbiAgICBjb250ZW50OiBcXFwiXFxcXDIwMTQgICBcXFxcQTBcXFwiOyB9XFxyXFxuXFxyXFxuLmltZy1mbHVpZCB7XFxyXFxuICBtYXgtd2lkdGg6IDEwMCU7XFxyXFxuICBoZWlnaHQ6IGF1dG87IH1cXHJcXG5cXHJcXG4uaW1nLXRodW1ibmFpbCB7XFxyXFxuICBwYWRkaW5nOiAwLjI1cmVtO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XFxyXFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcclxcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XFxyXFxuICBtYXgtd2lkdGg6IDEwMCU7XFxyXFxuICBoZWlnaHQ6IGF1dG87IH1cXHJcXG5cXHJcXG4uZmlndXJlIHtcXHJcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfVxcclxcblxcclxcbi5maWd1cmUtaW1nIHtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAxOyB9XFxyXFxuXFxyXFxuLmZpZ3VyZS1jYXB0aW9uIHtcXHJcXG4gIGZvbnQtc2l6ZTogOTAlO1xcclxcbiAgY29sb3I6ICM4NjhlOTY7IH1cXHJcXG5cXHJcXG4uY29udGFpbmVyIHtcXHJcXG4gIG1hcmdpbi1yaWdodDogYXV0bztcXHJcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcclxcbiAgcGFkZGluZy1yaWdodDogMTVweDtcXHJcXG4gIHBhZGRpbmctbGVmdDogMTVweDtcXHJcXG4gIHdpZHRoOiAxMDAlOyB9XFxyXFxuICBAbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXHJcXG4gICAgLmNvbnRhaW5lciB7XFxyXFxuICAgICAgbWF4LXdpZHRoOiA1NDBweDsgfSB9XFxyXFxuICBAbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXHJcXG4gICAgLmNvbnRhaW5lciB7XFxyXFxuICAgICAgbWF4LXdpZHRoOiA3MjBweDsgfSB9XFxyXFxuICBAbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcXHJcXG4gICAgLmNvbnRhaW5lciB7XFxyXFxuICAgICAgbWF4LXdpZHRoOiA5NjBweDsgfSB9XFxyXFxuICBAbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KSB7XFxyXFxuICAgIC5jb250YWluZXIge1xcclxcbiAgICAgIG1heC13aWR0aDogMTE0MHB4OyB9IH1cXHJcXG5cXHJcXG4uY29udGFpbmVyLWZsdWlkIHtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcclxcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XFxyXFxuICBwYWRkaW5nLXJpZ2h0OiAxNXB4O1xcclxcbiAgcGFkZGluZy1sZWZ0OiAxNXB4O1xcclxcbiAgd2lkdGg6IDEwMCU7IH1cXHJcXG5cXHJcXG4ucm93IHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LXdyYXA6IHdyYXA7XFxyXFxuICBtYXJnaW4tcmlnaHQ6IC0xNXB4O1xcclxcbiAgbWFyZ2luLWxlZnQ6IC0xNXB4OyB9XFxyXFxuXFxyXFxuLm5vLWd1dHRlcnMge1xcclxcbiAgbWFyZ2luLXJpZ2h0OiAwO1xcclxcbiAgbWFyZ2luLWxlZnQ6IDA7IH1cXHJcXG4gIC5uby1ndXR0ZXJzID4gLmNvbCxcXHJcXG4gIC5uby1ndXR0ZXJzID4gW2NsYXNzKj1cXFwiY29sLVxcXCJdIHtcXHJcXG4gICAgcGFkZGluZy1yaWdodDogMDtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiAwOyB9XFxyXFxuXFxyXFxuLmNvbC0xLCAuY29sLTIsIC5jb2wtMywgLmNvbC00LCAuY29sLTUsIC5jb2wtNiwgLmNvbC03LCAuY29sLTgsIC5jb2wtOSwgLmNvbC0xMCwgLmNvbC0xMSwgLmNvbC0xMiwgLmNvbCxcXHJcXG4uY29sLWF1dG8sIC5jb2wtc20tMSwgLmNvbC1zbS0yLCAuY29sLXNtLTMsIC5jb2wtc20tNCwgLmNvbC1zbS01LCAuY29sLXNtLTYsIC5jb2wtc20tNywgLmNvbC1zbS04LCAuY29sLXNtLTksIC5jb2wtc20tMTAsIC5jb2wtc20tMTEsIC5jb2wtc20tMTIsIC5jb2wtc20sXFxyXFxuLmNvbC1zbS1hdXRvLCAuY29sLW1kLTEsIC5jb2wtbWQtMiwgLmNvbC1tZC0zLCAuY29sLW1kLTQsIC5jb2wtbWQtNSwgLmNvbC1tZC02LCAuY29sLW1kLTcsIC5jb2wtbWQtOCwgLmNvbC1tZC05LCAuY29sLW1kLTEwLCAuY29sLW1kLTExLCAuY29sLW1kLTEyLCAuY29sLW1kLFxcclxcbi5jb2wtbWQtYXV0bywgLmNvbC1sZy0xLCAuY29sLWxnLTIsIC5jb2wtbGctMywgLmNvbC1sZy00LCAuY29sLWxnLTUsIC5jb2wtbGctNiwgLmNvbC1sZy03LCAuY29sLWxnLTgsIC5jb2wtbGctOSwgLmNvbC1sZy0xMCwgLmNvbC1sZy0xMSwgLmNvbC1sZy0xMiwgLmNvbC1sZyxcXHJcXG4uY29sLWxnLWF1dG8sIC5jb2wteGwtMSwgLmNvbC14bC0yLCAuY29sLXhsLTMsIC5jb2wteGwtNCwgLmNvbC14bC01LCAuY29sLXhsLTYsIC5jb2wteGwtNywgLmNvbC14bC04LCAuY29sLXhsLTksIC5jb2wteGwtMTAsIC5jb2wteGwtMTEsIC5jb2wteGwtMTIsIC5jb2wteGwsXFxyXFxuLmNvbC14bC1hdXRvIHtcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgbWluLWhlaWdodDogMXB4O1xcclxcbiAgcGFkZGluZy1yaWdodDogMTVweDtcXHJcXG4gIHBhZGRpbmctbGVmdDogMTVweDsgfVxcclxcblxcclxcbi5jb2wge1xcclxcbiAgZmxleC1iYXNpczogMDtcXHJcXG4gIGZsZXgtZ3JvdzogMTtcXHJcXG4gIG1heC13aWR0aDogMTAwJTsgfVxcclxcblxcclxcbi5jb2wtYXV0byB7XFxyXFxuICBmbGV4OiAwIDAgYXV0bztcXHJcXG4gIHdpZHRoOiBhdXRvO1xcclxcbiAgbWF4LXdpZHRoOiBub25lOyB9XFxyXFxuXFxyXFxuLmNvbC0xIHtcXHJcXG4gIGZsZXg6IDAgMCA4LjMzMzMzMzMzMzMlO1xcclxcbiAgbWF4LXdpZHRoOiA4LjMzMzMzMzMzMzMlOyB9XFxyXFxuXFxyXFxuLmNvbC0yIHtcXHJcXG4gIGZsZXg6IDAgMCAxNi42NjY2NjY2NjY3JTtcXHJcXG4gIG1heC13aWR0aDogMTYuNjY2NjY2NjY2NyU7IH1cXHJcXG5cXHJcXG4uY29sLTMge1xcclxcbiAgZmxleDogMCAwIDI1JTtcXHJcXG4gIG1heC13aWR0aDogMjUlOyB9XFxyXFxuXFxyXFxuLmNvbC00IHtcXHJcXG4gIGZsZXg6IDAgMCAzMy4zMzMzMzMzMzMzJTtcXHJcXG4gIG1heC13aWR0aDogMzMuMzMzMzMzMzMzMyU7IH1cXHJcXG5cXHJcXG4uY29sLTUge1xcclxcbiAgZmxleDogMCAwIDQxLjY2NjY2NjY2NjclO1xcclxcbiAgbWF4LXdpZHRoOiA0MS42NjY2NjY2NjY3JTsgfVxcclxcblxcclxcbi5jb2wtNiB7XFxyXFxuICBmbGV4OiAwIDAgNTAlO1xcclxcbiAgbWF4LXdpZHRoOiA1MCU7IH1cXHJcXG5cXHJcXG4uY29sLTcge1xcclxcbiAgZmxleDogMCAwIDU4LjMzMzMzMzMzMzMlO1xcclxcbiAgbWF4LXdpZHRoOiA1OC4zMzMzMzMzMzMzJTsgfVxcclxcblxcclxcbi5jb2wtOCB7XFxyXFxuICBmbGV4OiAwIDAgNjYuNjY2NjY2NjY2NyU7XFxyXFxuICBtYXgtd2lkdGg6IDY2LjY2NjY2NjY2NjclOyB9XFxyXFxuXFxyXFxuLmNvbC05IHtcXHJcXG4gIGZsZXg6IDAgMCA3NSU7XFxyXFxuICBtYXgtd2lkdGg6IDc1JTsgfVxcclxcblxcclxcbi5jb2wtMTAge1xcclxcbiAgZmxleDogMCAwIDgzLjMzMzMzMzMzMzMlO1xcclxcbiAgbWF4LXdpZHRoOiA4My4zMzMzMzMzMzMzJTsgfVxcclxcblxcclxcbi5jb2wtMTEge1xcclxcbiAgZmxleDogMCAwIDkxLjY2NjY2NjY2NjclO1xcclxcbiAgbWF4LXdpZHRoOiA5MS42NjY2NjY2NjY3JTsgfVxcclxcblxcclxcbi5jb2wtMTIge1xcclxcbiAgZmxleDogMCAwIDEwMCU7XFxyXFxuICBtYXgtd2lkdGg6IDEwMCU7IH1cXHJcXG5cXHJcXG4ub3JkZXItMSB7XFxyXFxuICBvcmRlcjogMTsgfVxcclxcblxcclxcbi5vcmRlci0yIHtcXHJcXG4gIG9yZGVyOiAyOyB9XFxyXFxuXFxyXFxuLm9yZGVyLTMge1xcclxcbiAgb3JkZXI6IDM7IH1cXHJcXG5cXHJcXG4ub3JkZXItNCB7XFxyXFxuICBvcmRlcjogNDsgfVxcclxcblxcclxcbi5vcmRlci01IHtcXHJcXG4gIG9yZGVyOiA1OyB9XFxyXFxuXFxyXFxuLm9yZGVyLTYge1xcclxcbiAgb3JkZXI6IDY7IH1cXHJcXG5cXHJcXG4ub3JkZXItNyB7XFxyXFxuICBvcmRlcjogNzsgfVxcclxcblxcclxcbi5vcmRlci04IHtcXHJcXG4gIG9yZGVyOiA4OyB9XFxyXFxuXFxyXFxuLm9yZGVyLTkge1xcclxcbiAgb3JkZXI6IDk7IH1cXHJcXG5cXHJcXG4ub3JkZXItMTAge1xcclxcbiAgb3JkZXI6IDEwOyB9XFxyXFxuXFxyXFxuLm9yZGVyLTExIHtcXHJcXG4gIG9yZGVyOiAxMTsgfVxcclxcblxcclxcbi5vcmRlci0xMiB7XFxyXFxuICBvcmRlcjogMTI7IH1cXHJcXG5cXHJcXG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXHJcXG4gIC5jb2wtc20ge1xcclxcbiAgICBmbGV4LWJhc2lzOiAwO1xcclxcbiAgICBmbGV4LWdyb3c6IDE7XFxyXFxuICAgIG1heC13aWR0aDogMTAwJTsgfVxcclxcblxcclxcbiAgLmNvbC1zbS1hdXRvIHtcXHJcXG4gICAgZmxleDogMCAwIGF1dG87XFxyXFxuICAgIHdpZHRoOiBhdXRvO1xcclxcbiAgICBtYXgtd2lkdGg6IG5vbmU7IH1cXHJcXG5cXHJcXG4gIC5jb2wtc20tMSB7XFxyXFxuICAgIGZsZXg6IDAgMCA4LjMzMzMzMzMzMzMlO1xcclxcbiAgICBtYXgtd2lkdGg6IDguMzMzMzMzMzMzMyU7IH1cXHJcXG5cXHJcXG4gIC5jb2wtc20tMiB7XFxyXFxuICAgIGZsZXg6IDAgMCAxNi42NjY2NjY2NjY3JTtcXHJcXG4gICAgbWF4LXdpZHRoOiAxNi42NjY2NjY2NjY3JTsgfVxcclxcblxcclxcbiAgLmNvbC1zbS0zIHtcXHJcXG4gICAgZmxleDogMCAwIDI1JTtcXHJcXG4gICAgbWF4LXdpZHRoOiAyNSU7IH1cXHJcXG5cXHJcXG4gIC5jb2wtc20tNCB7XFxyXFxuICAgIGZsZXg6IDAgMCAzMy4zMzMzMzMzMzMzJTtcXHJcXG4gICAgbWF4LXdpZHRoOiAzMy4zMzMzMzMzMzMzJTsgfVxcclxcblxcclxcbiAgLmNvbC1zbS01IHtcXHJcXG4gICAgZmxleDogMCAwIDQxLjY2NjY2NjY2NjclO1xcclxcbiAgICBtYXgtd2lkdGg6IDQxLjY2NjY2NjY2NjclOyB9XFxyXFxuXFxyXFxuICAuY29sLXNtLTYge1xcclxcbiAgICBmbGV4OiAwIDAgNTAlO1xcclxcbiAgICBtYXgtd2lkdGg6IDUwJTsgfVxcclxcblxcclxcbiAgLmNvbC1zbS03IHtcXHJcXG4gICAgZmxleDogMCAwIDU4LjMzMzMzMzMzMzMlO1xcclxcbiAgICBtYXgtd2lkdGg6IDU4LjMzMzMzMzMzMzMlOyB9XFxyXFxuXFxyXFxuICAuY29sLXNtLTgge1xcclxcbiAgICBmbGV4OiAwIDAgNjYuNjY2NjY2NjY2NyU7XFxyXFxuICAgIG1heC13aWR0aDogNjYuNjY2NjY2NjY2NyU7IH1cXHJcXG5cXHJcXG4gIC5jb2wtc20tOSB7XFxyXFxuICAgIGZsZXg6IDAgMCA3NSU7XFxyXFxuICAgIG1heC13aWR0aDogNzUlOyB9XFxyXFxuXFxyXFxuICAuY29sLXNtLTEwIHtcXHJcXG4gICAgZmxleDogMCAwIDgzLjMzMzMzMzMzMzMlO1xcclxcbiAgICBtYXgtd2lkdGg6IDgzLjMzMzMzMzMzMzMlOyB9XFxyXFxuXFxyXFxuICAuY29sLXNtLTExIHtcXHJcXG4gICAgZmxleDogMCAwIDkxLjY2NjY2NjY2NjclO1xcclxcbiAgICBtYXgtd2lkdGg6IDkxLjY2NjY2NjY2NjclOyB9XFxyXFxuXFxyXFxuICAuY29sLXNtLTEyIHtcXHJcXG4gICAgZmxleDogMCAwIDEwMCU7XFxyXFxuICAgIG1heC13aWR0aDogMTAwJTsgfVxcclxcblxcclxcbiAgLm9yZGVyLXNtLTEge1xcclxcbiAgICBvcmRlcjogMTsgfVxcclxcblxcclxcbiAgLm9yZGVyLXNtLTIge1xcclxcbiAgICBvcmRlcjogMjsgfVxcclxcblxcclxcbiAgLm9yZGVyLXNtLTMge1xcclxcbiAgICBvcmRlcjogMzsgfVxcclxcblxcclxcbiAgLm9yZGVyLXNtLTQge1xcclxcbiAgICBvcmRlcjogNDsgfVxcclxcblxcclxcbiAgLm9yZGVyLXNtLTUge1xcclxcbiAgICBvcmRlcjogNTsgfVxcclxcblxcclxcbiAgLm9yZGVyLXNtLTYge1xcclxcbiAgICBvcmRlcjogNjsgfVxcclxcblxcclxcbiAgLm9yZGVyLXNtLTcge1xcclxcbiAgICBvcmRlcjogNzsgfVxcclxcblxcclxcbiAgLm9yZGVyLXNtLTgge1xcclxcbiAgICBvcmRlcjogODsgfVxcclxcblxcclxcbiAgLm9yZGVyLXNtLTkge1xcclxcbiAgICBvcmRlcjogOTsgfVxcclxcblxcclxcbiAgLm9yZGVyLXNtLTEwIHtcXHJcXG4gICAgb3JkZXI6IDEwOyB9XFxyXFxuXFxyXFxuICAub3JkZXItc20tMTEge1xcclxcbiAgICBvcmRlcjogMTE7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci1zbS0xMiB7XFxyXFxuICAgIG9yZGVyOiAxMjsgfSB9XFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XFxyXFxuICAuY29sLW1kIHtcXHJcXG4gICAgZmxleC1iYXNpczogMDtcXHJcXG4gICAgZmxleC1ncm93OiAxO1xcclxcbiAgICBtYXgtd2lkdGg6IDEwMCU7IH1cXHJcXG5cXHJcXG4gIC5jb2wtbWQtYXV0byB7XFxyXFxuICAgIGZsZXg6IDAgMCBhdXRvO1xcclxcbiAgICB3aWR0aDogYXV0bztcXHJcXG4gICAgbWF4LXdpZHRoOiBub25lOyB9XFxyXFxuXFxyXFxuICAuY29sLW1kLTEge1xcclxcbiAgICBmbGV4OiAwIDAgOC4zMzMzMzMzMzMzJTtcXHJcXG4gICAgbWF4LXdpZHRoOiA4LjMzMzMzMzMzMzMlOyB9XFxyXFxuXFxyXFxuICAuY29sLW1kLTIge1xcclxcbiAgICBmbGV4OiAwIDAgMTYuNjY2NjY2NjY2NyU7XFxyXFxuICAgIG1heC13aWR0aDogMTYuNjY2NjY2NjY2NyU7IH1cXHJcXG5cXHJcXG4gIC5jb2wtbWQtMyB7XFxyXFxuICAgIGZsZXg6IDAgMCAyNSU7XFxyXFxuICAgIG1heC13aWR0aDogMjUlOyB9XFxyXFxuXFxyXFxuICAuY29sLW1kLTQge1xcclxcbiAgICBmbGV4OiAwIDAgMzMuMzMzMzMzMzMzMyU7XFxyXFxuICAgIG1heC13aWR0aDogMzMuMzMzMzMzMzMzMyU7IH1cXHJcXG5cXHJcXG4gIC5jb2wtbWQtNSB7XFxyXFxuICAgIGZsZXg6IDAgMCA0MS42NjY2NjY2NjY3JTtcXHJcXG4gICAgbWF4LXdpZHRoOiA0MS42NjY2NjY2NjY3JTsgfVxcclxcblxcclxcbiAgLmNvbC1tZC02IHtcXHJcXG4gICAgZmxleDogMCAwIDUwJTtcXHJcXG4gICAgbWF4LXdpZHRoOiA1MCU7IH1cXHJcXG5cXHJcXG4gIC5jb2wtbWQtNyB7XFxyXFxuICAgIGZsZXg6IDAgMCA1OC4zMzMzMzMzMzMzJTtcXHJcXG4gICAgbWF4LXdpZHRoOiA1OC4zMzMzMzMzMzMzJTsgfVxcclxcblxcclxcbiAgLmNvbC1tZC04IHtcXHJcXG4gICAgZmxleDogMCAwIDY2LjY2NjY2NjY2NjclO1xcclxcbiAgICBtYXgtd2lkdGg6IDY2LjY2NjY2NjY2NjclOyB9XFxyXFxuXFxyXFxuICAuY29sLW1kLTkge1xcclxcbiAgICBmbGV4OiAwIDAgNzUlO1xcclxcbiAgICBtYXgtd2lkdGg6IDc1JTsgfVxcclxcblxcclxcbiAgLmNvbC1tZC0xMCB7XFxyXFxuICAgIGZsZXg6IDAgMCA4My4zMzMzMzMzMzMzJTtcXHJcXG4gICAgbWF4LXdpZHRoOiA4My4zMzMzMzMzMzMzJTsgfVxcclxcblxcclxcbiAgLmNvbC1tZC0xMSB7XFxyXFxuICAgIGZsZXg6IDAgMCA5MS42NjY2NjY2NjY3JTtcXHJcXG4gICAgbWF4LXdpZHRoOiA5MS42NjY2NjY2NjY3JTsgfVxcclxcblxcclxcbiAgLmNvbC1tZC0xMiB7XFxyXFxuICAgIGZsZXg6IDAgMCAxMDAlO1xcclxcbiAgICBtYXgtd2lkdGg6IDEwMCU7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci1tZC0xIHtcXHJcXG4gICAgb3JkZXI6IDE7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci1tZC0yIHtcXHJcXG4gICAgb3JkZXI6IDI7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci1tZC0zIHtcXHJcXG4gICAgb3JkZXI6IDM7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci1tZC00IHtcXHJcXG4gICAgb3JkZXI6IDQ7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci1tZC01IHtcXHJcXG4gICAgb3JkZXI6IDU7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci1tZC02IHtcXHJcXG4gICAgb3JkZXI6IDY7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci1tZC03IHtcXHJcXG4gICAgb3JkZXI6IDc7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci1tZC04IHtcXHJcXG4gICAgb3JkZXI6IDg7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci1tZC05IHtcXHJcXG4gICAgb3JkZXI6IDk7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci1tZC0xMCB7XFxyXFxuICAgIG9yZGVyOiAxMDsgfVxcclxcblxcclxcbiAgLm9yZGVyLW1kLTExIHtcXHJcXG4gICAgb3JkZXI6IDExOyB9XFxyXFxuXFxyXFxuICAub3JkZXItbWQtMTIge1xcclxcbiAgICBvcmRlcjogMTI7IH0gfVxcclxcbkBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xcclxcbiAgLmNvbC1sZyB7XFxyXFxuICAgIGZsZXgtYmFzaXM6IDA7XFxyXFxuICAgIGZsZXgtZ3JvdzogMTtcXHJcXG4gICAgbWF4LXdpZHRoOiAxMDAlOyB9XFxyXFxuXFxyXFxuICAuY29sLWxnLWF1dG8ge1xcclxcbiAgICBmbGV4OiAwIDAgYXV0bztcXHJcXG4gICAgd2lkdGg6IGF1dG87XFxyXFxuICAgIG1heC13aWR0aDogbm9uZTsgfVxcclxcblxcclxcbiAgLmNvbC1sZy0xIHtcXHJcXG4gICAgZmxleDogMCAwIDguMzMzMzMzMzMzMyU7XFxyXFxuICAgIG1heC13aWR0aDogOC4zMzMzMzMzMzMzJTsgfVxcclxcblxcclxcbiAgLmNvbC1sZy0yIHtcXHJcXG4gICAgZmxleDogMCAwIDE2LjY2NjY2NjY2NjclO1xcclxcbiAgICBtYXgtd2lkdGg6IDE2LjY2NjY2NjY2NjclOyB9XFxyXFxuXFxyXFxuICAuY29sLWxnLTMge1xcclxcbiAgICBmbGV4OiAwIDAgMjUlO1xcclxcbiAgICBtYXgtd2lkdGg6IDI1JTsgfVxcclxcblxcclxcbiAgLmNvbC1sZy00IHtcXHJcXG4gICAgZmxleDogMCAwIDMzLjMzMzMzMzMzMzMlO1xcclxcbiAgICBtYXgtd2lkdGg6IDMzLjMzMzMzMzMzMzMlOyB9XFxyXFxuXFxyXFxuICAuY29sLWxnLTUge1xcclxcbiAgICBmbGV4OiAwIDAgNDEuNjY2NjY2NjY2NyU7XFxyXFxuICAgIG1heC13aWR0aDogNDEuNjY2NjY2NjY2NyU7IH1cXHJcXG5cXHJcXG4gIC5jb2wtbGctNiB7XFxyXFxuICAgIGZsZXg6IDAgMCA1MCU7XFxyXFxuICAgIG1heC13aWR0aDogNTAlOyB9XFxyXFxuXFxyXFxuICAuY29sLWxnLTcge1xcclxcbiAgICBmbGV4OiAwIDAgNTguMzMzMzMzMzMzMyU7XFxyXFxuICAgIG1heC13aWR0aDogNTguMzMzMzMzMzMzMyU7IH1cXHJcXG5cXHJcXG4gIC5jb2wtbGctOCB7XFxyXFxuICAgIGZsZXg6IDAgMCA2Ni42NjY2NjY2NjY3JTtcXHJcXG4gICAgbWF4LXdpZHRoOiA2Ni42NjY2NjY2NjY3JTsgfVxcclxcblxcclxcbiAgLmNvbC1sZy05IHtcXHJcXG4gICAgZmxleDogMCAwIDc1JTtcXHJcXG4gICAgbWF4LXdpZHRoOiA3NSU7IH1cXHJcXG5cXHJcXG4gIC5jb2wtbGctMTAge1xcclxcbiAgICBmbGV4OiAwIDAgODMuMzMzMzMzMzMzMyU7XFxyXFxuICAgIG1heC13aWR0aDogODMuMzMzMzMzMzMzMyU7IH1cXHJcXG5cXHJcXG4gIC5jb2wtbGctMTEge1xcclxcbiAgICBmbGV4OiAwIDAgOTEuNjY2NjY2NjY2NyU7XFxyXFxuICAgIG1heC13aWR0aDogOTEuNjY2NjY2NjY2NyU7IH1cXHJcXG5cXHJcXG4gIC5jb2wtbGctMTIge1xcclxcbiAgICBmbGV4OiAwIDAgMTAwJTtcXHJcXG4gICAgbWF4LXdpZHRoOiAxMDAlOyB9XFxyXFxuXFxyXFxuICAub3JkZXItbGctMSB7XFxyXFxuICAgIG9yZGVyOiAxOyB9XFxyXFxuXFxyXFxuICAub3JkZXItbGctMiB7XFxyXFxuICAgIG9yZGVyOiAyOyB9XFxyXFxuXFxyXFxuICAub3JkZXItbGctMyB7XFxyXFxuICAgIG9yZGVyOiAzOyB9XFxyXFxuXFxyXFxuICAub3JkZXItbGctNCB7XFxyXFxuICAgIG9yZGVyOiA0OyB9XFxyXFxuXFxyXFxuICAub3JkZXItbGctNSB7XFxyXFxuICAgIG9yZGVyOiA1OyB9XFxyXFxuXFxyXFxuICAub3JkZXItbGctNiB7XFxyXFxuICAgIG9yZGVyOiA2OyB9XFxyXFxuXFxyXFxuICAub3JkZXItbGctNyB7XFxyXFxuICAgIG9yZGVyOiA3OyB9XFxyXFxuXFxyXFxuICAub3JkZXItbGctOCB7XFxyXFxuICAgIG9yZGVyOiA4OyB9XFxyXFxuXFxyXFxuICAub3JkZXItbGctOSB7XFxyXFxuICAgIG9yZGVyOiA5OyB9XFxyXFxuXFxyXFxuICAub3JkZXItbGctMTAge1xcclxcbiAgICBvcmRlcjogMTA7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci1sZy0xMSB7XFxyXFxuICAgIG9yZGVyOiAxMTsgfVxcclxcblxcclxcbiAgLm9yZGVyLWxnLTEyIHtcXHJcXG4gICAgb3JkZXI6IDEyOyB9IH1cXHJcXG5AbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KSB7XFxyXFxuICAuY29sLXhsIHtcXHJcXG4gICAgZmxleC1iYXNpczogMDtcXHJcXG4gICAgZmxleC1ncm93OiAxO1xcclxcbiAgICBtYXgtd2lkdGg6IDEwMCU7IH1cXHJcXG5cXHJcXG4gIC5jb2wteGwtYXV0byB7XFxyXFxuICAgIGZsZXg6IDAgMCBhdXRvO1xcclxcbiAgICB3aWR0aDogYXV0bztcXHJcXG4gICAgbWF4LXdpZHRoOiBub25lOyB9XFxyXFxuXFxyXFxuICAuY29sLXhsLTEge1xcclxcbiAgICBmbGV4OiAwIDAgOC4zMzMzMzMzMzMzJTtcXHJcXG4gICAgbWF4LXdpZHRoOiA4LjMzMzMzMzMzMzMlOyB9XFxyXFxuXFxyXFxuICAuY29sLXhsLTIge1xcclxcbiAgICBmbGV4OiAwIDAgMTYuNjY2NjY2NjY2NyU7XFxyXFxuICAgIG1heC13aWR0aDogMTYuNjY2NjY2NjY2NyU7IH1cXHJcXG5cXHJcXG4gIC5jb2wteGwtMyB7XFxyXFxuICAgIGZsZXg6IDAgMCAyNSU7XFxyXFxuICAgIG1heC13aWR0aDogMjUlOyB9XFxyXFxuXFxyXFxuICAuY29sLXhsLTQge1xcclxcbiAgICBmbGV4OiAwIDAgMzMuMzMzMzMzMzMzMyU7XFxyXFxuICAgIG1heC13aWR0aDogMzMuMzMzMzMzMzMzMyU7IH1cXHJcXG5cXHJcXG4gIC5jb2wteGwtNSB7XFxyXFxuICAgIGZsZXg6IDAgMCA0MS42NjY2NjY2NjY3JTtcXHJcXG4gICAgbWF4LXdpZHRoOiA0MS42NjY2NjY2NjY3JTsgfVxcclxcblxcclxcbiAgLmNvbC14bC02IHtcXHJcXG4gICAgZmxleDogMCAwIDUwJTtcXHJcXG4gICAgbWF4LXdpZHRoOiA1MCU7IH1cXHJcXG5cXHJcXG4gIC5jb2wteGwtNyB7XFxyXFxuICAgIGZsZXg6IDAgMCA1OC4zMzMzMzMzMzMzJTtcXHJcXG4gICAgbWF4LXdpZHRoOiA1OC4zMzMzMzMzMzMzJTsgfVxcclxcblxcclxcbiAgLmNvbC14bC04IHtcXHJcXG4gICAgZmxleDogMCAwIDY2LjY2NjY2NjY2NjclO1xcclxcbiAgICBtYXgtd2lkdGg6IDY2LjY2NjY2NjY2NjclOyB9XFxyXFxuXFxyXFxuICAuY29sLXhsLTkge1xcclxcbiAgICBmbGV4OiAwIDAgNzUlO1xcclxcbiAgICBtYXgtd2lkdGg6IDc1JTsgfVxcclxcblxcclxcbiAgLmNvbC14bC0xMCB7XFxyXFxuICAgIGZsZXg6IDAgMCA4My4zMzMzMzMzMzMzJTtcXHJcXG4gICAgbWF4LXdpZHRoOiA4My4zMzMzMzMzMzMzJTsgfVxcclxcblxcclxcbiAgLmNvbC14bC0xMSB7XFxyXFxuICAgIGZsZXg6IDAgMCA5MS42NjY2NjY2NjY3JTtcXHJcXG4gICAgbWF4LXdpZHRoOiA5MS42NjY2NjY2NjY3JTsgfVxcclxcblxcclxcbiAgLmNvbC14bC0xMiB7XFxyXFxuICAgIGZsZXg6IDAgMCAxMDAlO1xcclxcbiAgICBtYXgtd2lkdGg6IDEwMCU7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci14bC0xIHtcXHJcXG4gICAgb3JkZXI6IDE7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci14bC0yIHtcXHJcXG4gICAgb3JkZXI6IDI7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci14bC0zIHtcXHJcXG4gICAgb3JkZXI6IDM7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci14bC00IHtcXHJcXG4gICAgb3JkZXI6IDQ7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci14bC01IHtcXHJcXG4gICAgb3JkZXI6IDU7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci14bC02IHtcXHJcXG4gICAgb3JkZXI6IDY7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci14bC03IHtcXHJcXG4gICAgb3JkZXI6IDc7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci14bC04IHtcXHJcXG4gICAgb3JkZXI6IDg7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci14bC05IHtcXHJcXG4gICAgb3JkZXI6IDk7IH1cXHJcXG5cXHJcXG4gIC5vcmRlci14bC0xMCB7XFxyXFxuICAgIG9yZGVyOiAxMDsgfVxcclxcblxcclxcbiAgLm9yZGVyLXhsLTExIHtcXHJcXG4gICAgb3JkZXI6IDExOyB9XFxyXFxuXFxyXFxuICAub3JkZXIteGwtMTIge1xcclxcbiAgICBvcmRlcjogMTI7IH0gfVxcclxcbi5mb3JtLWNvbnRyb2wge1xcclxcbiAgZGlzcGxheTogYmxvY2s7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIHBhZGRpbmc6IDAuNXJlbSAwLjc1cmVtO1xcclxcbiAgZm9udC1zaXplOiAxcmVtO1xcclxcbiAgbGluZS1oZWlnaHQ6IDEuMjU7XFxyXFxuICBjb2xvcjogIzQ5NTA1NztcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxyXFxuICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xcclxcbiAgYmFja2dyb3VuZC1jbGlwOiBwYWRkaW5nLWJveDtcXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xNSk7XFxyXFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcclxcbiAgdHJhbnNpdGlvbjogYm9yZGVyLWNvbG9yIGVhc2UtaW4tb3V0IDAuMTVzLCBib3gtc2hhZG93IGVhc2UtaW4tb3V0IDAuMTVzOyB9XFxyXFxuICAuZm9ybS1jb250cm9sOjotbXMtZXhwYW5kIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxuICAgIGJvcmRlcjogMDsgfVxcclxcbiAgLmZvcm0tY29udHJvbDpmb2N1cyB7XFxyXFxuICAgIGNvbG9yOiAjNDk1MDU3O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcclxcbiAgICBib3JkZXItY29sb3I6ICM4MGJkZmY7XFxyXFxuICAgIG91dGxpbmU6IG5vbmU7IH1cXHJcXG4gIC5mb3JtLWNvbnRyb2w6OnBsYWNlaG9sZGVyIHtcXHJcXG4gICAgY29sb3I6ICM4NjhlOTY7XFxyXFxuICAgIG9wYWNpdHk6IDE7IH1cXHJcXG4gIC5mb3JtLWNvbnRyb2w6ZGlzYWJsZWQsIC5mb3JtLWNvbnRyb2xbcmVhZG9ubHldIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2U5ZWNlZjtcXHJcXG4gICAgb3BhY2l0eTogMTsgfVxcclxcblxcclxcbnNlbGVjdC5mb3JtLWNvbnRyb2w6bm90KFtzaXplXSk6bm90KFttdWx0aXBsZV0pIHtcXHJcXG4gIGhlaWdodDogY2FsYygyLjI1cmVtICsgMnB4KTsgfVxcclxcbnNlbGVjdC5mb3JtLWNvbnRyb2w6Zm9jdXM6Oi1tcy12YWx1ZSB7XFxyXFxuICBjb2xvcjogIzQ5NTA1NztcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7IH1cXHJcXG5cXHJcXG4uZm9ybS1jb250cm9sLWZpbGUsXFxyXFxuLmZvcm0tY29udHJvbC1yYW5nZSB7XFxyXFxuICBkaXNwbGF5OiBibG9jazsgfVxcclxcblxcclxcbi5jb2wtZm9ybS1sYWJlbCB7XFxyXFxuICBwYWRkaW5nLXRvcDogY2FsYygwLjVyZW0gLSAxcHggKiAyKTtcXHJcXG4gIHBhZGRpbmctYm90dG9tOiBjYWxjKDAuNXJlbSAtIDFweCAqIDIpO1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMDsgfVxcclxcblxcclxcbi5jb2wtZm9ybS1sYWJlbC1sZyB7XFxyXFxuICBwYWRkaW5nLXRvcDogY2FsYygwLjVyZW0gLSAxcHggKiAyKTtcXHJcXG4gIHBhZGRpbmctYm90dG9tOiBjYWxjKDAuNXJlbSAtIDFweCAqIDIpO1xcclxcbiAgZm9udC1zaXplOiAxLjI1cmVtOyB9XFxyXFxuXFxyXFxuLmNvbC1mb3JtLWxhYmVsLXNtIHtcXHJcXG4gIHBhZGRpbmctdG9wOiBjYWxjKDAuMjVyZW0gLSAxcHggKiAyKTtcXHJcXG4gIHBhZGRpbmctYm90dG9tOiBjYWxjKDAuMjVyZW0gLSAxcHggKiAyKTtcXHJcXG4gIGZvbnQtc2l6ZTogMC44NzVyZW07IH1cXHJcXG5cXHJcXG4uY29sLWZvcm0tbGVnZW5kIHtcXHJcXG4gIHBhZGRpbmctdG9wOiAwLjVyZW07XFxyXFxuICBwYWRkaW5nLWJvdHRvbTogMC41cmVtO1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMDtcXHJcXG4gIGZvbnQtc2l6ZTogMXJlbTsgfVxcclxcblxcclxcbi5mb3JtLWNvbnRyb2wtcGxhaW50ZXh0IHtcXHJcXG4gIHBhZGRpbmctdG9wOiAwLjVyZW07XFxyXFxuICBwYWRkaW5nLWJvdHRvbTogMC41cmVtO1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAxLjI1O1xcclxcbiAgYm9yZGVyOiBzb2xpZCB0cmFuc3BhcmVudDtcXHJcXG4gIGJvcmRlci13aWR0aDogMXB4IDA7IH1cXHJcXG4gIC5mb3JtLWNvbnRyb2wtcGxhaW50ZXh0LmZvcm0tY29udHJvbC1zbSwgLmZvcm0tY29udHJvbC1wbGFpbnRleHQuZm9ybS1jb250cm9sLWxnIHtcXHJcXG4gICAgcGFkZGluZy1yaWdodDogMDtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiAwOyB9XFxyXFxuXFxyXFxuLmZvcm0tY29udHJvbC1zbSB7XFxyXFxuICBwYWRkaW5nOiAwLjI1cmVtIDAuNXJlbTtcXHJcXG4gIGZvbnQtc2l6ZTogMC44NzVyZW07XFxyXFxuICBsaW5lLWhlaWdodDogMS41O1xcclxcbiAgYm9yZGVyLXJhZGl1czogMC4ycmVtOyB9XFxyXFxuXFxyXFxuc2VsZWN0LmZvcm0tY29udHJvbC1zbTpub3QoW3NpemVdKTpub3QoW211bHRpcGxlXSkge1xcclxcbiAgaGVpZ2h0OiBjYWxjKDEuODEyNXJlbSArIDJweCk7IH1cXHJcXG5cXHJcXG4uZm9ybS1jb250cm9sLWxnIHtcXHJcXG4gIHBhZGRpbmc6IDAuNXJlbSAxcmVtO1xcclxcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcclxcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDAuM3JlbTsgfVxcclxcblxcclxcbnNlbGVjdC5mb3JtLWNvbnRyb2wtbGc6bm90KFtzaXplXSk6bm90KFttdWx0aXBsZV0pIHtcXHJcXG4gIGhlaWdodDogY2FsYygyLjg3NXJlbSArIDJweCk7IH1cXHJcXG5cXHJcXG4uZm9ybS1ncm91cCB7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAxcmVtOyB9XFxyXFxuXFxyXFxuLmZvcm0tdGV4dCB7XFxyXFxuICBkaXNwbGF5OiBibG9jaztcXHJcXG4gIG1hcmdpbi10b3A6IDAuMjVyZW07IH1cXHJcXG5cXHJcXG4uZm9ybS1yb3cge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtd3JhcDogd3JhcDtcXHJcXG4gIG1hcmdpbi1yaWdodDogLTVweDtcXHJcXG4gIG1hcmdpbi1sZWZ0OiAtNXB4OyB9XFxyXFxuICAuZm9ybS1yb3cgPiAuY29sLFxcclxcbiAgLmZvcm0tcm93ID4gW2NsYXNzKj1cXFwiY29sLVxcXCJdIHtcXHJcXG4gICAgcGFkZGluZy1yaWdodDogNXB4O1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDVweDsgfVxcclxcblxcclxcbi5mb3JtLWNoZWNrIHtcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMC41cmVtOyB9XFxyXFxuICAuZm9ybS1jaGVjay5kaXNhYmxlZCAuZm9ybS1jaGVjay1sYWJlbCB7XFxyXFxuICAgIGNvbG9yOiAjODY4ZTk2OyB9XFxyXFxuXFxyXFxuLmZvcm0tY2hlY2stbGFiZWwge1xcclxcbiAgcGFkZGluZy1sZWZ0OiAxLjI1cmVtO1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMDsgfVxcclxcblxcclxcbi5mb3JtLWNoZWNrLWlucHV0IHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIG1hcmdpbi10b3A6IDAuMjVyZW07XFxyXFxuICBtYXJnaW4tbGVmdDogLTEuMjVyZW07IH1cXHJcXG5cXHJcXG4uZm9ybS1jaGVjay1pbmxpbmUge1xcclxcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XFxyXFxuICAuZm9ybS1jaGVjay1pbmxpbmUgLmZvcm0tY2hlY2stbGFiZWwge1xcclxcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyB9XFxyXFxuICAuZm9ybS1jaGVjay1pbmxpbmUgKyAuZm9ybS1jaGVjay1pbmxpbmUge1xcclxcbiAgICBtYXJnaW4tbGVmdDogMC43NXJlbTsgfVxcclxcblxcclxcbi5pbnZhbGlkLWZlZWRiYWNrIHtcXHJcXG4gIGRpc3BsYXk6IG5vbmU7XFxyXFxuICBtYXJnaW4tdG9wOiAuMjVyZW07XFxyXFxuICBmb250LXNpemU6IC44NzVyZW07XFxyXFxuICBjb2xvcjogI2RjMzU0NTsgfVxcclxcblxcclxcbi5pbnZhbGlkLXRvb2x0aXAge1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgdG9wOiAxMDAlO1xcclxcbiAgei1pbmRleDogNTtcXHJcXG4gIGRpc3BsYXk6IG5vbmU7XFxyXFxuICB3aWR0aDogMjUwcHg7XFxyXFxuICBwYWRkaW5nOiAuNXJlbTtcXHJcXG4gIG1hcmdpbi10b3A6IC4xcmVtO1xcclxcbiAgZm9udC1zaXplOiAuODc1cmVtO1xcclxcbiAgbGluZS1oZWlnaHQ6IDE7XFxyXFxuICBjb2xvcjogI2ZmZjtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjIwLCA1MywgNjksIDAuOCk7XFxyXFxuICBib3JkZXItcmFkaXVzOiAuMnJlbTsgfVxcclxcblxcclxcbi53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2w6dmFsaWQsIC5mb3JtLWNvbnRyb2wuaXMtdmFsaWQsXFxyXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1zZWxlY3Q6dmFsaWQsXFxyXFxuLmN1c3RvbS1zZWxlY3QuaXMtdmFsaWQge1xcclxcbiAgYm9yZGVyLWNvbG9yOiAjMjhhNzQ1OyB9XFxyXFxuICAud2FzLXZhbGlkYXRlZCAuZm9ybS1jb250cm9sOnZhbGlkOmZvY3VzLCAuZm9ybS1jb250cm9sLmlzLXZhbGlkOmZvY3VzLFxcclxcbiAgLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1zZWxlY3Q6dmFsaWQ6Zm9jdXMsXFxyXFxuICAuY3VzdG9tLXNlbGVjdC5pcy12YWxpZDpmb2N1cyB7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDQwLCAxNjcsIDY5LCAwLjI1KTsgfVxcclxcbiAgLndhcy12YWxpZGF0ZWQgLmZvcm0tY29udHJvbDp2YWxpZCB+IC5pbnZhbGlkLWZlZWRiYWNrLFxcclxcbiAgLndhcy12YWxpZGF0ZWQgLmZvcm0tY29udHJvbDp2YWxpZCB+IC5pbnZhbGlkLXRvb2x0aXAsIC5mb3JtLWNvbnRyb2wuaXMtdmFsaWQgfiAuaW52YWxpZC1mZWVkYmFjayxcXHJcXG4gIC5mb3JtLWNvbnRyb2wuaXMtdmFsaWQgfiAuaW52YWxpZC10b29sdGlwLFxcclxcbiAgLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1zZWxlY3Q6dmFsaWQgfiAuaW52YWxpZC1mZWVkYmFjayxcXHJcXG4gIC53YXMtdmFsaWRhdGVkIC5jdXN0b20tc2VsZWN0OnZhbGlkIH4gLmludmFsaWQtdG9vbHRpcCxcXHJcXG4gIC5jdXN0b20tc2VsZWN0LmlzLXZhbGlkIH4gLmludmFsaWQtZmVlZGJhY2ssXFxyXFxuICAuY3VzdG9tLXNlbGVjdC5pcy12YWxpZCB+IC5pbnZhbGlkLXRvb2x0aXAge1xcclxcbiAgICBkaXNwbGF5OiBibG9jazsgfVxcclxcblxcclxcbi53YXMtdmFsaWRhdGVkIC5mb3JtLWNoZWNrLWlucHV0OnZhbGlkICsgLmZvcm0tY2hlY2stbGFiZWwsIC5mb3JtLWNoZWNrLWlucHV0LmlzLXZhbGlkICsgLmZvcm0tY2hlY2stbGFiZWwge1xcclxcbiAgY29sb3I6ICMyOGE3NDU7IH1cXHJcXG5cXHJcXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6dmFsaWQgfiAuY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtdmFsaWQgfiAuY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNDAsIDE2NywgNjksIDAuMjUpOyB9XFxyXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1jb250cm9sLWlucHV0OnZhbGlkIH4gLmN1c3RvbS1jb250cm9sLWRlc2NyaXB0aW9uLCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtdmFsaWQgfiAuY3VzdG9tLWNvbnRyb2wtZGVzY3JpcHRpb24ge1xcclxcbiAgY29sb3I6ICMyOGE3NDU7IH1cXHJcXG5cXHJcXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWZpbGUtaW5wdXQ6dmFsaWQgfiAuY3VzdG9tLWZpbGUtY29udHJvbCwgLmN1c3RvbS1maWxlLWlucHV0LmlzLXZhbGlkIH4gLmN1c3RvbS1maWxlLWNvbnRyb2wge1xcclxcbiAgYm9yZGVyLWNvbG9yOiAjMjhhNzQ1OyB9XFxyXFxuICAud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWZpbGUtaW5wdXQ6dmFsaWQgfiAuY3VzdG9tLWZpbGUtY29udHJvbDo6YmVmb3JlLCAuY3VzdG9tLWZpbGUtaW5wdXQuaXMtdmFsaWQgfiAuY3VzdG9tLWZpbGUtY29udHJvbDo6YmVmb3JlIHtcXHJcXG4gICAgYm9yZGVyLWNvbG9yOiBpbmhlcml0OyB9XFxyXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1maWxlLWlucHV0OnZhbGlkOmZvY3VzLCAuY3VzdG9tLWZpbGUtaW5wdXQuaXMtdmFsaWQ6Zm9jdXMge1xcclxcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoNDAsIDE2NywgNjksIDAuMjUpOyB9XFxyXFxuXFxyXFxuLndhcy12YWxpZGF0ZWQgLmZvcm0tY29udHJvbDppbnZhbGlkLCAuZm9ybS1jb250cm9sLmlzLWludmFsaWQsXFxyXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1zZWxlY3Q6aW52YWxpZCxcXHJcXG4uY3VzdG9tLXNlbGVjdC5pcy1pbnZhbGlkIHtcXHJcXG4gIGJvcmRlci1jb2xvcjogI2RjMzU0NTsgfVxcclxcbiAgLndhcy12YWxpZGF0ZWQgLmZvcm0tY29udHJvbDppbnZhbGlkOmZvY3VzLCAuZm9ybS1jb250cm9sLmlzLWludmFsaWQ6Zm9jdXMsXFxyXFxuICAud2FzLXZhbGlkYXRlZCAuY3VzdG9tLXNlbGVjdDppbnZhbGlkOmZvY3VzLFxcclxcbiAgLmN1c3RvbS1zZWxlY3QuaXMtaW52YWxpZDpmb2N1cyB7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDIyMCwgNTMsIDY5LCAwLjI1KTsgfVxcclxcbiAgLndhcy12YWxpZGF0ZWQgLmZvcm0tY29udHJvbDppbnZhbGlkIH4gLmludmFsaWQtZmVlZGJhY2ssXFxyXFxuICAud2FzLXZhbGlkYXRlZCAuZm9ybS1jb250cm9sOmludmFsaWQgfiAuaW52YWxpZC10b29sdGlwLCAuZm9ybS1jb250cm9sLmlzLWludmFsaWQgfiAuaW52YWxpZC1mZWVkYmFjayxcXHJcXG4gIC5mb3JtLWNvbnRyb2wuaXMtaW52YWxpZCB+IC5pbnZhbGlkLXRvb2x0aXAsXFxyXFxuICAud2FzLXZhbGlkYXRlZCAuY3VzdG9tLXNlbGVjdDppbnZhbGlkIH4gLmludmFsaWQtZmVlZGJhY2ssXFxyXFxuICAud2FzLXZhbGlkYXRlZCAuY3VzdG9tLXNlbGVjdDppbnZhbGlkIH4gLmludmFsaWQtdG9vbHRpcCxcXHJcXG4gIC5jdXN0b20tc2VsZWN0LmlzLWludmFsaWQgfiAuaW52YWxpZC1mZWVkYmFjayxcXHJcXG4gIC5jdXN0b20tc2VsZWN0LmlzLWludmFsaWQgfiAuaW52YWxpZC10b29sdGlwIHtcXHJcXG4gICAgZGlzcGxheTogYmxvY2s7IH1cXHJcXG5cXHJcXG4ud2FzLXZhbGlkYXRlZCAuZm9ybS1jaGVjay1pbnB1dDppbnZhbGlkICsgLmZvcm0tY2hlY2stbGFiZWwsIC5mb3JtLWNoZWNrLWlucHV0LmlzLWludmFsaWQgKyAuZm9ybS1jaGVjay1sYWJlbCB7XFxyXFxuICBjb2xvcjogI2RjMzU0NTsgfVxcclxcblxcclxcbi53YXMtdmFsaWRhdGVkIC5jdXN0b20tY29udHJvbC1pbnB1dDppbnZhbGlkIH4gLmN1c3RvbS1jb250cm9sLWluZGljYXRvciwgLmN1c3RvbS1jb250cm9sLWlucHV0LmlzLWludmFsaWQgfiAuY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjIwLCA1MywgNjksIDAuMjUpOyB9XFxyXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1jb250cm9sLWlucHV0OmludmFsaWQgfiAuY3VzdG9tLWNvbnRyb2wtZGVzY3JpcHRpb24sIC5jdXN0b20tY29udHJvbC1pbnB1dC5pcy1pbnZhbGlkIH4gLmN1c3RvbS1jb250cm9sLWRlc2NyaXB0aW9uIHtcXHJcXG4gIGNvbG9yOiAjZGMzNTQ1OyB9XFxyXFxuXFxyXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1maWxlLWlucHV0OmludmFsaWQgfiAuY3VzdG9tLWZpbGUtY29udHJvbCwgLmN1c3RvbS1maWxlLWlucHV0LmlzLWludmFsaWQgfiAuY3VzdG9tLWZpbGUtY29udHJvbCB7XFxyXFxuICBib3JkZXItY29sb3I6ICNkYzM1NDU7IH1cXHJcXG4gIC53YXMtdmFsaWRhdGVkIC5jdXN0b20tZmlsZS1pbnB1dDppbnZhbGlkIH4gLmN1c3RvbS1maWxlLWNvbnRyb2w6OmJlZm9yZSwgLmN1c3RvbS1maWxlLWlucHV0LmlzLWludmFsaWQgfiAuY3VzdG9tLWZpbGUtY29udHJvbDo6YmVmb3JlIHtcXHJcXG4gICAgYm9yZGVyLWNvbG9yOiBpbmhlcml0OyB9XFxyXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1maWxlLWlucHV0OmludmFsaWQ6Zm9jdXMsIC5jdXN0b20tZmlsZS1pbnB1dC5pcy1pbnZhbGlkOmZvY3VzIHtcXHJcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDIyMCwgNTMsIDY5LCAwLjI1KTsgfVxcclxcblxcclxcbi5mb3JtLWlubGluZSB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1mbG93OiByb3cgd3JhcDtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IH1cXHJcXG4gIC5mb3JtLWlubGluZSAuZm9ybS1jaGVjayB7XFxyXFxuICAgIHdpZHRoOiAxMDAlOyB9XFxyXFxuICBAbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXHJcXG4gICAgLmZvcm0taW5saW5lIGxhYmVsIHtcXHJcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgICAgbWFyZ2luLWJvdHRvbTogMDsgfVxcclxcbiAgICAuZm9ybS1pbmxpbmUgLmZvcm0tZ3JvdXAge1xcclxcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgZmxleDogMCAwIGF1dG87XFxyXFxuICAgICAgZmxleC1mbG93OiByb3cgd3JhcDtcXHJcXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICAgIG1hcmdpbi1ib3R0b206IDA7IH1cXHJcXG4gICAgLmZvcm0taW5saW5lIC5mb3JtLWNvbnRyb2wge1xcclxcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gICAgICB3aWR0aDogYXV0bztcXHJcXG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyB9XFxyXFxuICAgIC5mb3JtLWlubGluZSAuZm9ybS1jb250cm9sLXBsYWludGV4dCB7XFxyXFxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XFxyXFxuICAgIC5mb3JtLWlubGluZSAuaW5wdXQtZ3JvdXAge1xcclxcbiAgICAgIHdpZHRoOiBhdXRvOyB9XFxyXFxuICAgIC5mb3JtLWlubGluZSAuZm9ybS1jb250cm9sLWxhYmVsIHtcXHJcXG4gICAgICBtYXJnaW4tYm90dG9tOiAwO1xcclxcbiAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IH1cXHJcXG4gICAgLmZvcm0taW5saW5lIC5mb3JtLWNoZWNrIHtcXHJcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgICAgd2lkdGg6IGF1dG87XFxyXFxuICAgICAgbWFyZ2luLXRvcDogMDtcXHJcXG4gICAgICBtYXJnaW4tYm90dG9tOiAwOyB9XFxyXFxuICAgIC5mb3JtLWlubGluZSAuZm9ybS1jaGVjay1sYWJlbCB7XFxyXFxuICAgICAgcGFkZGluZy1sZWZ0OiAwOyB9XFxyXFxuICAgIC5mb3JtLWlubGluZSAuZm9ybS1jaGVjay1pbnB1dCB7XFxyXFxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICAgIG1hcmdpbi10b3A6IDA7XFxyXFxuICAgICAgbWFyZ2luLXJpZ2h0OiAwLjI1cmVtO1xcclxcbiAgICAgIG1hcmdpbi1sZWZ0OiAwOyB9XFxyXFxuICAgIC5mb3JtLWlubGluZSAuY3VzdG9tLWNvbnRyb2wge1xcclxcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgICBwYWRkaW5nLWxlZnQ6IDA7IH1cXHJcXG4gICAgLmZvcm0taW5saW5lIC5jdXN0b20tY29udHJvbC1pbmRpY2F0b3Ige1xcclxcbiAgICAgIHBvc2l0aW9uOiBzdGF0aWM7XFxyXFxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICAgIG1hcmdpbi1yaWdodDogMC4yNXJlbTtcXHJcXG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogdGV4dC1ib3R0b207IH1cXHJcXG4gICAgLmZvcm0taW5saW5lIC5oYXMtZmVlZGJhY2sgLmZvcm0tY29udHJvbC1mZWVkYmFjayB7XFxyXFxuICAgICAgdG9wOiAwOyB9IH1cXHJcXG5cXHJcXG4uYnRuIHtcXHJcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcclxcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXHJcXG4gIHVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XFxyXFxuICBwYWRkaW5nOiAwLjVyZW0gMC43NXJlbTtcXHJcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAxLjI1O1xcclxcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcXHJcXG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsIGJvcmRlci1jb2xvciAwLjE1cyBlYXNlLWluLW91dCwgYm94LXNoYWRvdyAwLjE1cyBlYXNlLWluLW91dDsgfVxcclxcbiAgLmJ0bjpmb2N1cywgLmJ0bjpob3ZlciB7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxcclxcbiAgLmJ0bjpmb2N1cywgLmJ0bi5mb2N1cyB7XFxyXFxuICAgIG91dGxpbmU6IDA7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDNweCByZ2JhKDAsIDEyMywgMjU1LCAwLjI1KTsgfVxcclxcbiAgLmJ0bi5kaXNhYmxlZCwgLmJ0bjpkaXNhYmxlZCB7XFxyXFxuICAgIG9wYWNpdHk6IC42NTsgfVxcclxcbiAgLmJ0bjphY3RpdmUsIC5idG4uYWN0aXZlIHtcXHJcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTsgfVxcclxcblxcclxcbmEuYnRuLmRpc2FibGVkLFxcclxcbmZpZWxkc2V0W2Rpc2FibGVkXSBhLmJ0biB7XFxyXFxuICBwb2ludGVyLWV2ZW50czogbm9uZTsgfVxcclxcblxcclxcbi5idG4tcHJpbWFyeSB7XFxyXFxuICBjb2xvcjogI2ZmZjtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XFxyXFxuICBib3JkZXItY29sb3I6ICMwMDdiZmY7IH1cXHJcXG4gIC5idG4tcHJpbWFyeTpob3ZlciB7XFxyXFxuICAgIGNvbG9yOiAjZmZmO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA2OWQ5O1xcclxcbiAgICBib3JkZXItY29sb3I6ICMwMDYyY2M7IH1cXHJcXG4gIC5idG4tcHJpbWFyeTpmb2N1cywgLmJ0bi1wcmltYXJ5LmZvY3VzIHtcXHJcXG4gICAgYm94LXNoYWRvdzogMCAwIDAgM3B4IHJnYmEoMCwgMTIzLCAyNTUsIDAuNSk7IH1cXHJcXG4gIC5idG4tcHJpbWFyeS5kaXNhYmxlZCwgLmJ0bi1wcmltYXJ5OmRpc2FibGVkIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcXHJcXG4gICAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmOyB9XFxyXFxuICAuYnRuLXByaW1hcnk6YWN0aXZlLCAuYnRuLXByaW1hcnkuYWN0aXZlLCAuc2hvdyA+IC5idG4tcHJpbWFyeS5kcm9wZG93bi10b2dnbGUge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA2OWQ5O1xcclxcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xcclxcbiAgICBib3JkZXItY29sb3I6ICMwMDYyY2M7IH1cXHJcXG5cXHJcXG4uYnRuLXNlY29uZGFyeSB7XFxyXFxuICBjb2xvcjogI2ZmZjtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICM4NjhlOTY7XFxyXFxuICBib3JkZXItY29sb3I6ICM4NjhlOTY7IH1cXHJcXG4gIC5idG4tc2Vjb25kYXJ5OmhvdmVyIHtcXHJcXG4gICAgY29sb3I6ICNmZmY7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM3MjdiODQ7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogIzZjNzU3ZDsgfVxcclxcbiAgLmJ0bi1zZWNvbmRhcnk6Zm9jdXMsIC5idG4tc2Vjb25kYXJ5LmZvY3VzIHtcXHJcXG4gICAgYm94LXNoYWRvdzogMCAwIDAgM3B4IHJnYmEoMTM0LCAxNDIsIDE1MCwgMC41KTsgfVxcclxcbiAgLmJ0bi1zZWNvbmRhcnkuZGlzYWJsZWQsIC5idG4tc2Vjb25kYXJ5OmRpc2FibGVkIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzg2OGU5NjtcXHJcXG4gICAgYm9yZGVyLWNvbG9yOiAjODY4ZTk2OyB9XFxyXFxuICAuYnRuLXNlY29uZGFyeTphY3RpdmUsIC5idG4tc2Vjb25kYXJ5LmFjdGl2ZSwgLnNob3cgPiAuYnRuLXNlY29uZGFyeS5kcm9wZG93bi10b2dnbGUge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzI3Yjg0O1xcclxcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xcclxcbiAgICBib3JkZXItY29sb3I6ICM2Yzc1N2Q7IH1cXHJcXG5cXHJcXG4uYnRuLXN1Y2Nlc3Mge1xcclxcbiAgY29sb3I6ICNmZmY7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjhhNzQ1O1xcclxcbiAgYm9yZGVyLWNvbG9yOiAjMjhhNzQ1OyB9XFxyXFxuICAuYnRuLXN1Y2Nlc3M6aG92ZXIge1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzIxODgzODtcXHJcXG4gICAgYm9yZGVyLWNvbG9yOiAjMWU3ZTM0OyB9XFxyXFxuICAuYnRuLXN1Y2Nlc3M6Zm9jdXMsIC5idG4tc3VjY2Vzcy5mb2N1cyB7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDNweCByZ2JhKDQwLCAxNjcsIDY5LCAwLjUpOyB9XFxyXFxuICAuYnRuLXN1Y2Nlc3MuZGlzYWJsZWQsIC5idG4tc3VjY2VzczpkaXNhYmxlZCB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyOGE3NDU7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogIzI4YTc0NTsgfVxcclxcbiAgLmJ0bi1zdWNjZXNzOmFjdGl2ZSwgLmJ0bi1zdWNjZXNzLmFjdGl2ZSwgLnNob3cgPiAuYnRuLXN1Y2Nlc3MuZHJvcGRvd24tdG9nZ2xlIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzIxODgzODtcXHJcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcXHJcXG4gICAgYm9yZGVyLWNvbG9yOiAjMWU3ZTM0OyB9XFxyXFxuXFxyXFxuLmJ0bi1pbmZvIHtcXHJcXG4gIGNvbG9yOiAjZmZmO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogIzE3YTJiODtcXHJcXG4gIGJvcmRlci1jb2xvcjogIzE3YTJiODsgfVxcclxcbiAgLmJ0bi1pbmZvOmhvdmVyIHtcXHJcXG4gICAgY29sb3I6ICNmZmY7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxMzg0OTY7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogIzExN2E4YjsgfVxcclxcbiAgLmJ0bi1pbmZvOmZvY3VzLCAuYnRuLWluZm8uZm9jdXMge1xcclxcbiAgICBib3gtc2hhZG93OiAwIDAgMCAzcHggcmdiYSgyMywgMTYyLCAxODQsIDAuNSk7IH1cXHJcXG4gIC5idG4taW5mby5kaXNhYmxlZCwgLmJ0bi1pbmZvOmRpc2FibGVkIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE3YTJiODtcXHJcXG4gICAgYm9yZGVyLWNvbG9yOiAjMTdhMmI4OyB9XFxyXFxuICAuYnRuLWluZm86YWN0aXZlLCAuYnRuLWluZm8uYWN0aXZlLCAuc2hvdyA+IC5idG4taW5mby5kcm9wZG93bi10b2dnbGUge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTM4NDk2O1xcclxcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xcclxcbiAgICBib3JkZXItY29sb3I6ICMxMTdhOGI7IH1cXHJcXG5cXHJcXG4uYnRuLXdhcm5pbmcge1xcclxcbiAgY29sb3I6ICMxMTE7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjMTA3O1xcclxcbiAgYm9yZGVyLWNvbG9yOiAjZmZjMTA3OyB9XFxyXFxuICAuYnRuLXdhcm5pbmc6aG92ZXIge1xcclxcbiAgICBjb2xvcjogIzExMTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2UwYTgwMDtcXHJcXG4gICAgYm9yZGVyLWNvbG9yOiAjZDM5ZTAwOyB9XFxyXFxuICAuYnRuLXdhcm5pbmc6Zm9jdXMsIC5idG4td2FybmluZy5mb2N1cyB7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDNweCByZ2JhKDI1NSwgMTkzLCA3LCAwLjUpOyB9XFxyXFxuICAuYnRuLXdhcm5pbmcuZGlzYWJsZWQsIC5idG4td2FybmluZzpkaXNhYmxlZCB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmMxMDc7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogI2ZmYzEwNzsgfVxcclxcbiAgLmJ0bi13YXJuaW5nOmFjdGl2ZSwgLmJ0bi13YXJuaW5nLmFjdGl2ZSwgLnNob3cgPiAuYnRuLXdhcm5pbmcuZHJvcGRvd24tdG9nZ2xlIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2UwYTgwMDtcXHJcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcXHJcXG4gICAgYm9yZGVyLWNvbG9yOiAjZDM5ZTAwOyB9XFxyXFxuXFxyXFxuLmJ0bi1kYW5nZXIge1xcclxcbiAgY29sb3I6ICNmZmY7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGMzNTQ1O1xcclxcbiAgYm9yZGVyLWNvbG9yOiAjZGMzNTQ1OyB9XFxyXFxuICAuYnRuLWRhbmdlcjpob3ZlciB7XFxyXFxuICAgIGNvbG9yOiAjZmZmO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzgyMzMzO1xcclxcbiAgICBib3JkZXItY29sb3I6ICNiZDIxMzA7IH1cXHJcXG4gIC5idG4tZGFuZ2VyOmZvY3VzLCAuYnRuLWRhbmdlci5mb2N1cyB7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDNweCByZ2JhKDIyMCwgNTMsIDY5LCAwLjUpOyB9XFxyXFxuICAuYnRuLWRhbmdlci5kaXNhYmxlZCwgLmJ0bi1kYW5nZXI6ZGlzYWJsZWQge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGMzNTQ1O1xcclxcbiAgICBib3JkZXItY29sb3I6ICNkYzM1NDU7IH1cXHJcXG4gIC5idG4tZGFuZ2VyOmFjdGl2ZSwgLmJ0bi1kYW5nZXIuYWN0aXZlLCAuc2hvdyA+IC5idG4tZGFuZ2VyLmRyb3Bkb3duLXRvZ2dsZSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNjODIzMzM7XFxyXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogI2JkMjEzMDsgfVxcclxcblxcclxcbi5idG4tbGlnaHQge1xcclxcbiAgY29sb3I6ICMxMTE7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xcclxcbiAgYm9yZGVyLWNvbG9yOiAjZjhmOWZhOyB9XFxyXFxuICAuYnRuLWxpZ2h0OmhvdmVyIHtcXHJcXG4gICAgY29sb3I6ICMxMTE7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlMmU2ZWE7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogI2RhZTBlNTsgfVxcclxcbiAgLmJ0bi1saWdodDpmb2N1cywgLmJ0bi1saWdodC5mb2N1cyB7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDNweCByZ2JhKDI0OCwgMjQ5LCAyNTAsIDAuNSk7IH1cXHJcXG4gIC5idG4tbGlnaHQuZGlzYWJsZWQsIC5idG4tbGlnaHQ6ZGlzYWJsZWQge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xcclxcbiAgICBib3JkZXItY29sb3I6ICNmOGY5ZmE7IH1cXHJcXG4gIC5idG4tbGlnaHQ6YWN0aXZlLCAuYnRuLWxpZ2h0LmFjdGl2ZSwgLnNob3cgPiAuYnRuLWxpZ2h0LmRyb3Bkb3duLXRvZ2dsZSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlMmU2ZWE7XFxyXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogI2RhZTBlNTsgfVxcclxcblxcclxcbi5idG4tZGFyayB7XFxyXFxuICBjb2xvcjogI2ZmZjtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzNDNhNDA7XFxyXFxuICBib3JkZXItY29sb3I6ICMzNDNhNDA7IH1cXHJcXG4gIC5idG4tZGFyazpob3ZlciB7XFxyXFxuICAgIGNvbG9yOiAjZmZmO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjMyNzJiO1xcclxcbiAgICBib3JkZXItY29sb3I6ICMxZDIxMjQ7IH1cXHJcXG4gIC5idG4tZGFyazpmb2N1cywgLmJ0bi1kYXJrLmZvY3VzIHtcXHJcXG4gICAgYm94LXNoYWRvdzogMCAwIDAgM3B4IHJnYmEoNTIsIDU4LCA2NCwgMC41KTsgfVxcclxcbiAgLmJ0bi1kYXJrLmRpc2FibGVkLCAuYnRuLWRhcms6ZGlzYWJsZWQge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzQzYTQwO1xcclxcbiAgICBib3JkZXItY29sb3I6ICMzNDNhNDA7IH1cXHJcXG4gIC5idG4tZGFyazphY3RpdmUsIC5idG4tZGFyay5hY3RpdmUsIC5zaG93ID4gLmJ0bi1kYXJrLmRyb3Bkb3duLXRvZ2dsZSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyMzI3MmI7XFxyXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogIzFkMjEyNDsgfVxcclxcblxcclxcbi5idG4tb3V0bGluZS1wcmltYXJ5IHtcXHJcXG4gIGNvbG9yOiAjMDA3YmZmO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxuICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xcclxcbiAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmOyB9XFxyXFxuICAuYnRuLW91dGxpbmUtcHJpbWFyeTpob3ZlciB7XFxyXFxuICAgIGNvbG9yOiAjZmZmO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcclxcbiAgICBib3JkZXItY29sb3I6ICMwMDdiZmY7IH1cXHJcXG4gIC5idG4tb3V0bGluZS1wcmltYXJ5OmZvY3VzLCAuYnRuLW91dGxpbmUtcHJpbWFyeS5mb2N1cyB7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDNweCByZ2JhKDAsIDEyMywgMjU1LCAwLjUpOyB9XFxyXFxuICAuYnRuLW91dGxpbmUtcHJpbWFyeS5kaXNhYmxlZCwgLmJ0bi1vdXRsaW5lLXByaW1hcnk6ZGlzYWJsZWQge1xcclxcbiAgICBjb2xvcjogIzAwN2JmZjtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cXHJcXG4gIC5idG4tb3V0bGluZS1wcmltYXJ5OmFjdGl2ZSwgLmJ0bi1vdXRsaW5lLXByaW1hcnkuYWN0aXZlLCAuc2hvdyA+IC5idG4tb3V0bGluZS1wcmltYXJ5LmRyb3Bkb3duLXRvZ2dsZSB7XFxyXFxuICAgIGNvbG9yOiAjZmZmO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcclxcbiAgICBib3JkZXItY29sb3I6ICMwMDdiZmY7IH1cXHJcXG5cXHJcXG4uYnRuLW91dGxpbmUtc2Vjb25kYXJ5IHtcXHJcXG4gIGNvbG9yOiAjODY4ZTk2O1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxuICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xcclxcbiAgYm9yZGVyLWNvbG9yOiAjODY4ZTk2OyB9XFxyXFxuICAuYnRuLW91dGxpbmUtc2Vjb25kYXJ5OmhvdmVyIHtcXHJcXG4gICAgY29sb3I6ICNmZmY7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM4NjhlOTY7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogIzg2OGU5NjsgfVxcclxcbiAgLmJ0bi1vdXRsaW5lLXNlY29uZGFyeTpmb2N1cywgLmJ0bi1vdXRsaW5lLXNlY29uZGFyeS5mb2N1cyB7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDNweCByZ2JhKDEzNCwgMTQyLCAxNTAsIDAuNSk7IH1cXHJcXG4gIC5idG4tb3V0bGluZS1zZWNvbmRhcnkuZGlzYWJsZWQsIC5idG4tb3V0bGluZS1zZWNvbmRhcnk6ZGlzYWJsZWQge1xcclxcbiAgICBjb2xvcjogIzg2OGU5NjtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cXHJcXG4gIC5idG4tb3V0bGluZS1zZWNvbmRhcnk6YWN0aXZlLCAuYnRuLW91dGxpbmUtc2Vjb25kYXJ5LmFjdGl2ZSwgLnNob3cgPiAuYnRuLW91dGxpbmUtc2Vjb25kYXJ5LmRyb3Bkb3duLXRvZ2dsZSB7XFxyXFxuICAgIGNvbG9yOiAjZmZmO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjODY4ZTk2O1xcclxcbiAgICBib3JkZXItY29sb3I6ICM4NjhlOTY7IH1cXHJcXG5cXHJcXG4uYnRuLW91dGxpbmUtc3VjY2VzcyB7XFxyXFxuICBjb2xvcjogIzI4YTc0NTtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcXHJcXG4gIGJvcmRlci1jb2xvcjogIzI4YTc0NTsgfVxcclxcbiAgLmJ0bi1vdXRsaW5lLXN1Y2Nlc3M6aG92ZXIge1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzI4YTc0NTtcXHJcXG4gICAgYm9yZGVyLWNvbG9yOiAjMjhhNzQ1OyB9XFxyXFxuICAuYnRuLW91dGxpbmUtc3VjY2Vzczpmb2N1cywgLmJ0bi1vdXRsaW5lLXN1Y2Nlc3MuZm9jdXMge1xcclxcbiAgICBib3gtc2hhZG93OiAwIDAgMCAzcHggcmdiYSg0MCwgMTY3LCA2OSwgMC41KTsgfVxcclxcbiAgLmJ0bi1vdXRsaW5lLXN1Y2Nlc3MuZGlzYWJsZWQsIC5idG4tb3V0bGluZS1zdWNjZXNzOmRpc2FibGVkIHtcXHJcXG4gICAgY29sb3I6ICMyOGE3NDU7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9XFxyXFxuICAuYnRuLW91dGxpbmUtc3VjY2VzczphY3RpdmUsIC5idG4tb3V0bGluZS1zdWNjZXNzLmFjdGl2ZSwgLnNob3cgPiAuYnRuLW91dGxpbmUtc3VjY2Vzcy5kcm9wZG93bi10b2dnbGUge1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzI4YTc0NTtcXHJcXG4gICAgYm9yZGVyLWNvbG9yOiAjMjhhNzQ1OyB9XFxyXFxuXFxyXFxuLmJ0bi1vdXRsaW5lLWluZm8ge1xcclxcbiAgY29sb3I6ICMxN2EyYjg7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXHJcXG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxyXFxuICBib3JkZXItY29sb3I6ICMxN2EyYjg7IH1cXHJcXG4gIC5idG4tb3V0bGluZS1pbmZvOmhvdmVyIHtcXHJcXG4gICAgY29sb3I6ICNmZmY7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxN2EyYjg7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogIzE3YTJiODsgfVxcclxcbiAgLmJ0bi1vdXRsaW5lLWluZm86Zm9jdXMsIC5idG4tb3V0bGluZS1pbmZvLmZvY3VzIHtcXHJcXG4gICAgYm94LXNoYWRvdzogMCAwIDAgM3B4IHJnYmEoMjMsIDE2MiwgMTg0LCAwLjUpOyB9XFxyXFxuICAuYnRuLW91dGxpbmUtaW5mby5kaXNhYmxlZCwgLmJ0bi1vdXRsaW5lLWluZm86ZGlzYWJsZWQge1xcclxcbiAgICBjb2xvcjogIzE3YTJiODtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cXHJcXG4gIC5idG4tb3V0bGluZS1pbmZvOmFjdGl2ZSwgLmJ0bi1vdXRsaW5lLWluZm8uYWN0aXZlLCAuc2hvdyA+IC5idG4tb3V0bGluZS1pbmZvLmRyb3Bkb3duLXRvZ2dsZSB7XFxyXFxuICAgIGNvbG9yOiAjZmZmO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTdhMmI4O1xcclxcbiAgICBib3JkZXItY29sb3I6ICMxN2EyYjg7IH1cXHJcXG5cXHJcXG4uYnRuLW91dGxpbmUtd2FybmluZyB7XFxyXFxuICBjb2xvcjogI2ZmYzEwNztcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcXHJcXG4gIGJvcmRlci1jb2xvcjogI2ZmYzEwNzsgfVxcclxcbiAgLmJ0bi1vdXRsaW5lLXdhcm5pbmc6aG92ZXIge1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYzEwNztcXHJcXG4gICAgYm9yZGVyLWNvbG9yOiAjZmZjMTA3OyB9XFxyXFxuICAuYnRuLW91dGxpbmUtd2FybmluZzpmb2N1cywgLmJ0bi1vdXRsaW5lLXdhcm5pbmcuZm9jdXMge1xcclxcbiAgICBib3gtc2hhZG93OiAwIDAgMCAzcHggcmdiYSgyNTUsIDE5MywgNywgMC41KTsgfVxcclxcbiAgLmJ0bi1vdXRsaW5lLXdhcm5pbmcuZGlzYWJsZWQsIC5idG4tb3V0bGluZS13YXJuaW5nOmRpc2FibGVkIHtcXHJcXG4gICAgY29sb3I6ICNmZmMxMDc7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9XFxyXFxuICAuYnRuLW91dGxpbmUtd2FybmluZzphY3RpdmUsIC5idG4tb3V0bGluZS13YXJuaW5nLmFjdGl2ZSwgLnNob3cgPiAuYnRuLW91dGxpbmUtd2FybmluZy5kcm9wZG93bi10b2dnbGUge1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYzEwNztcXHJcXG4gICAgYm9yZGVyLWNvbG9yOiAjZmZjMTA3OyB9XFxyXFxuXFxyXFxuLmJ0bi1vdXRsaW5lLWRhbmdlciB7XFxyXFxuICBjb2xvcjogI2RjMzU0NTtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcXHJcXG4gIGJvcmRlci1jb2xvcjogI2RjMzU0NTsgfVxcclxcbiAgLmJ0bi1vdXRsaW5lLWRhbmdlcjpob3ZlciB7XFxyXFxuICAgIGNvbG9yOiAjZmZmO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGMzNTQ1O1xcclxcbiAgICBib3JkZXItY29sb3I6ICNkYzM1NDU7IH1cXHJcXG4gIC5idG4tb3V0bGluZS1kYW5nZXI6Zm9jdXMsIC5idG4tb3V0bGluZS1kYW5nZXIuZm9jdXMge1xcclxcbiAgICBib3gtc2hhZG93OiAwIDAgMCAzcHggcmdiYSgyMjAsIDUzLCA2OSwgMC41KTsgfVxcclxcbiAgLmJ0bi1vdXRsaW5lLWRhbmdlci5kaXNhYmxlZCwgLmJ0bi1vdXRsaW5lLWRhbmdlcjpkaXNhYmxlZCB7XFxyXFxuICAgIGNvbG9yOiAjZGMzNTQ1O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxcclxcbiAgLmJ0bi1vdXRsaW5lLWRhbmdlcjphY3RpdmUsIC5idG4tb3V0bGluZS1kYW5nZXIuYWN0aXZlLCAuc2hvdyA+IC5idG4tb3V0bGluZS1kYW5nZXIuZHJvcGRvd24tdG9nZ2xlIHtcXHJcXG4gICAgY29sb3I6ICNmZmY7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNkYzM1NDU7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogI2RjMzU0NTsgfVxcclxcblxcclxcbi5idG4tb3V0bGluZS1saWdodCB7XFxyXFxuICBjb2xvcjogI2Y4ZjlmYTtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcXHJcXG4gIGJvcmRlci1jb2xvcjogI2Y4ZjlmYTsgfVxcclxcbiAgLmJ0bi1vdXRsaW5lLWxpZ2h0OmhvdmVyIHtcXHJcXG4gICAgY29sb3I6ICNmZmY7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogI2Y4ZjlmYTsgfVxcclxcbiAgLmJ0bi1vdXRsaW5lLWxpZ2h0OmZvY3VzLCAuYnRuLW91dGxpbmUtbGlnaHQuZm9jdXMge1xcclxcbiAgICBib3gtc2hhZG93OiAwIDAgMCAzcHggcmdiYSgyNDgsIDI0OSwgMjUwLCAwLjUpOyB9XFxyXFxuICAuYnRuLW91dGxpbmUtbGlnaHQuZGlzYWJsZWQsIC5idG4tb3V0bGluZS1saWdodDpkaXNhYmxlZCB7XFxyXFxuICAgIGNvbG9yOiAjZjhmOWZhO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxcclxcbiAgLmJ0bi1vdXRsaW5lLWxpZ2h0OmFjdGl2ZSwgLmJ0bi1vdXRsaW5lLWxpZ2h0LmFjdGl2ZSwgLnNob3cgPiAuYnRuLW91dGxpbmUtbGlnaHQuZHJvcGRvd24tdG9nZ2xlIHtcXHJcXG4gICAgY29sb3I6ICNmZmY7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogI2Y4ZjlmYTsgfVxcclxcblxcclxcbi5idG4tb3V0bGluZS1kYXJrIHtcXHJcXG4gIGNvbG9yOiAjMzQzYTQwO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxuICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xcclxcbiAgYm9yZGVyLWNvbG9yOiAjMzQzYTQwOyB9XFxyXFxuICAuYnRuLW91dGxpbmUtZGFyazpob3ZlciB7XFxyXFxuICAgIGNvbG9yOiAjZmZmO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzQzYTQwO1xcclxcbiAgICBib3JkZXItY29sb3I6ICMzNDNhNDA7IH1cXHJcXG4gIC5idG4tb3V0bGluZS1kYXJrOmZvY3VzLCAuYnRuLW91dGxpbmUtZGFyay5mb2N1cyB7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDNweCByZ2JhKDUyLCA1OCwgNjQsIDAuNSk7IH1cXHJcXG4gIC5idG4tb3V0bGluZS1kYXJrLmRpc2FibGVkLCAuYnRuLW91dGxpbmUtZGFyazpkaXNhYmxlZCB7XFxyXFxuICAgIGNvbG9yOiAjMzQzYTQwO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxcclxcbiAgLmJ0bi1vdXRsaW5lLWRhcms6YWN0aXZlLCAuYnRuLW91dGxpbmUtZGFyay5hY3RpdmUsIC5zaG93ID4gLmJ0bi1vdXRsaW5lLWRhcmsuZHJvcGRvd24tdG9nZ2xlIHtcXHJcXG4gICAgY29sb3I6ICNmZmY7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzNDNhNDA7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogIzM0M2E0MDsgfVxcclxcblxcclxcbi5idG4tbGluayB7XFxyXFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcclxcbiAgY29sb3I6ICMwMDdiZmY7XFxyXFxuICBib3JkZXItcmFkaXVzOiAwOyB9XFxyXFxuICAuYnRuLWxpbmssIC5idG4tbGluazphY3RpdmUsIC5idG4tbGluay5hY3RpdmUsIC5idG4tbGluazpkaXNhYmxlZCB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9XFxyXFxuICAuYnRuLWxpbmssIC5idG4tbGluazpmb2N1cywgLmJ0bi1saW5rOmFjdGl2ZSB7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxuICAgIGJveC1zaGFkb3c6IG5vbmU7IH1cXHJcXG4gIC5idG4tbGluazpob3ZlciB7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cXHJcXG4gIC5idG4tbGluazpmb2N1cywgLmJ0bi1saW5rOmhvdmVyIHtcXHJcXG4gICAgY29sb3I6ICMwMDU2YjM7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxcclxcbiAgLmJ0bi1saW5rOmRpc2FibGVkIHtcXHJcXG4gICAgY29sb3I6ICM4NjhlOTY7IH1cXHJcXG4gICAgLmJ0bi1saW5rOmRpc2FibGVkOmZvY3VzLCAuYnRuLWxpbms6ZGlzYWJsZWQ6aG92ZXIge1xcclxcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxcclxcblxcclxcbi5idG4tbGcge1xcclxcbiAgcGFkZGluZzogMC41cmVtIDFyZW07XFxyXFxuICBmb250LXNpemU6IDEuMjVyZW07XFxyXFxuICBsaW5lLWhlaWdodDogMS41O1xcclxcbiAgYm9yZGVyLXJhZGl1czogMC4zcmVtOyB9XFxyXFxuXFxyXFxuLmJ0bi1zbSB7XFxyXFxuICBwYWRkaW5nOiAwLjI1cmVtIDAuNXJlbTtcXHJcXG4gIGZvbnQtc2l6ZTogMC44NzVyZW07XFxyXFxuICBsaW5lLWhlaWdodDogMS41O1xcclxcbiAgYm9yZGVyLXJhZGl1czogMC4ycmVtOyB9XFxyXFxuXFxyXFxuLmJ0bi1ibG9jayB7XFxyXFxuICBkaXNwbGF5OiBibG9jaztcXHJcXG4gIHdpZHRoOiAxMDAlOyB9XFxyXFxuXFxyXFxuLmJ0bi1ibG9jayArIC5idG4tYmxvY2sge1xcclxcbiAgbWFyZ2luLXRvcDogMC41cmVtOyB9XFxyXFxuXFxyXFxuaW5wdXRbdHlwZT1cXFwic3VibWl0XFxcIl0uYnRuLWJsb2NrLFxcclxcbmlucHV0W3R5cGU9XFxcInJlc2V0XFxcIl0uYnRuLWJsb2NrLFxcclxcbmlucHV0W3R5cGU9XFxcImJ1dHRvblxcXCJdLmJ0bi1ibG9jayB7XFxyXFxuICB3aWR0aDogMTAwJTsgfVxcclxcblxcclxcbi5mYWRlIHtcXHJcXG4gIG9wYWNpdHk6IDA7XFxyXFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMTVzIGxpbmVhcjsgfVxcclxcbiAgLmZhZGUuc2hvdyB7XFxyXFxuICAgIG9wYWNpdHk6IDE7IH1cXHJcXG5cXHJcXG4uY29sbGFwc2Uge1xcclxcbiAgZGlzcGxheTogbm9uZTsgfVxcclxcbiAgLmNvbGxhcHNlLnNob3cge1xcclxcbiAgICBkaXNwbGF5OiBibG9jazsgfVxcclxcblxcclxcbnRyLmNvbGxhcHNlLnNob3cge1xcclxcbiAgZGlzcGxheTogdGFibGUtcm93OyB9XFxyXFxuXFxyXFxudGJvZHkuY29sbGFwc2Uuc2hvdyB7XFxyXFxuICBkaXNwbGF5OiB0YWJsZS1yb3ctZ3JvdXA7IH1cXHJcXG5cXHJcXG4uY29sbGFwc2luZyB7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICBoZWlnaHQ6IDA7XFxyXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgdHJhbnNpdGlvbjogaGVpZ2h0IDAuMzVzIGVhc2U7IH1cXHJcXG5cXHJcXG4uZHJvcHVwLFxcclxcbi5kcm9wZG93biB7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cXHJcXG5cXHJcXG4uZHJvcGRvd24tdG9nZ2xlOjphZnRlciB7XFxyXFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICB3aWR0aDogMDtcXHJcXG4gIGhlaWdodDogMDtcXHJcXG4gIG1hcmdpbi1sZWZ0OiAwLjI1NWVtO1xcclxcbiAgdmVydGljYWwtYWxpZ246IDAuMjU1ZW07XFxyXFxuICBjb250ZW50OiBcXFwiXFxcIjtcXHJcXG4gIGJvcmRlci10b3A6IDAuM2VtIHNvbGlkO1xcclxcbiAgYm9yZGVyLXJpZ2h0OiAwLjNlbSBzb2xpZCB0cmFuc3BhcmVudDtcXHJcXG4gIGJvcmRlci1sZWZ0OiAwLjNlbSBzb2xpZCB0cmFuc3BhcmVudDsgfVxcclxcbi5kcm9wZG93bi10b2dnbGU6ZW1wdHk6OmFmdGVyIHtcXHJcXG4gIG1hcmdpbi1sZWZ0OiAwOyB9XFxyXFxuXFxyXFxuLmRyb3B1cCAuZHJvcGRvd24tbWVudSB7XFxyXFxuICBtYXJnaW4tdG9wOiAwO1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMC4xMjVyZW07IH1cXHJcXG4uZHJvcHVwIC5kcm9wZG93bi10b2dnbGU6OmFmdGVyIHtcXHJcXG4gIGJvcmRlci10b3A6IDA7XFxyXFxuICBib3JkZXItYm90dG9tOiAwLjNlbSBzb2xpZDsgfVxcclxcblxcclxcbi5kcm9wZG93bi1tZW51IHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIHRvcDogMTAwJTtcXHJcXG4gIGxlZnQ6IDA7XFxyXFxuICB6LWluZGV4OiAxMDAwO1xcclxcbiAgZGlzcGxheTogbm9uZTtcXHJcXG4gIGZsb2F0OiBsZWZ0O1xcclxcbiAgbWluLXdpZHRoOiAxMHJlbTtcXHJcXG4gIHBhZGRpbmc6IDAuNXJlbSAwO1xcclxcbiAgbWFyZ2luOiAwLjEyNXJlbSAwIDA7XFxyXFxuICBmb250LXNpemU6IDFyZW07XFxyXFxuICBjb2xvcjogIzIxMjUyOTtcXHJcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxyXFxuICBsaXN0LXN0eWxlOiBub25lO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXHJcXG4gIGJhY2tncm91bmQtY2xpcDogcGFkZGluZy1ib3g7XFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTUpO1xcclxcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTsgfVxcclxcblxcclxcbi5kcm9wZG93bi1kaXZpZGVyIHtcXHJcXG4gIGhlaWdodDogMDtcXHJcXG4gIG1hcmdpbjogMC41cmVtIDA7XFxyXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNlOWVjZWY7IH1cXHJcXG5cXHJcXG4uZHJvcGRvd24taXRlbSB7XFxyXFxuICBkaXNwbGF5OiBibG9jaztcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgcGFkZGluZzogMC4yNXJlbSAxLjVyZW07XFxyXFxuICBjbGVhcjogYm90aDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxyXFxuICBjb2xvcjogIzIxMjUyOTtcXHJcXG4gIHRleHQtYWxpZ246IGluaGVyaXQ7XFxyXFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcclxcbiAgYmFja2dyb3VuZDogbm9uZTtcXHJcXG4gIGJvcmRlcjogMDsgfVxcclxcbiAgLmRyb3Bkb3duLWl0ZW06Zm9jdXMsIC5kcm9wZG93bi1pdGVtOmhvdmVyIHtcXHJcXG4gICAgY29sb3I6ICMxNjE4MWI7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTsgfVxcclxcbiAgLmRyb3Bkb3duLWl0ZW0uYWN0aXZlLCAuZHJvcGRvd24taXRlbTphY3RpdmUge1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmOyB9XFxyXFxuICAuZHJvcGRvd24taXRlbS5kaXNhYmxlZCwgLmRyb3Bkb3duLWl0ZW06ZGlzYWJsZWQge1xcclxcbiAgICBjb2xvcjogIzg2OGU5NjtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cXHJcXG5cXHJcXG4uc2hvdyA+IGEge1xcclxcbiAgb3V0bGluZTogMDsgfVxcclxcblxcclxcbi5kcm9wZG93bi1tZW51LnNob3cge1xcclxcbiAgZGlzcGxheTogYmxvY2s7IH1cXHJcXG5cXHJcXG4uZHJvcGRvd24taGVhZGVyIHtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgcGFkZGluZzogMC41cmVtIDEuNXJlbTtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxyXFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcclxcbiAgY29sb3I6ICM4NjhlOTY7XFxyXFxuICB3aGl0ZS1zcGFjZTogbm93cmFwOyB9XFxyXFxuXFxyXFxuLmN1c3RvbS1jb250cm9sIHtcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcclxcbiAgbWluLWhlaWdodDogMS41cmVtO1xcclxcbiAgcGFkZGluZy1sZWZ0OiAxLjVyZW07XFxyXFxuICBtYXJnaW4tcmlnaHQ6IDFyZW07IH1cXHJcXG5cXHJcXG4uY3VzdG9tLWNvbnRyb2wtaW5wdXQge1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgei1pbmRleDogLTE7XFxyXFxuICBvcGFjaXR5OiAwOyB9XFxyXFxuICAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6Y2hlY2tlZCB+IC5jdXN0b20tY29udHJvbC1pbmRpY2F0b3Ige1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjsgfVxcclxcbiAgLmN1c3RvbS1jb250cm9sLWlucHV0OmZvY3VzIH4gLmN1c3RvbS1jb250cm9sLWluZGljYXRvciB7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDFweCAjZmZmLCAwIDAgMCAzcHggIzAwN2JmZjsgfVxcclxcbiAgLmN1c3RvbS1jb250cm9sLWlucHV0OmFjdGl2ZSB+IC5jdXN0b20tY29udHJvbC1pbmRpY2F0b3Ige1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2IzZDdmZjsgfVxcclxcbiAgLmN1c3RvbS1jb250cm9sLWlucHV0OmRpc2FibGVkIH4gLmN1c3RvbS1jb250cm9sLWluZGljYXRvciB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlOWVjZWY7IH1cXHJcXG4gIC5jdXN0b20tY29udHJvbC1pbnB1dDpkaXNhYmxlZCB+IC5jdXN0b20tY29udHJvbC1kZXNjcmlwdGlvbiB7XFxyXFxuICAgIGNvbG9yOiAjODY4ZTk2OyB9XFxyXFxuXFxyXFxuLmN1c3RvbS1jb250cm9sLWluZGljYXRvciB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICB0b3A6IDAuMjVyZW07XFxyXFxuICBsZWZ0OiAwO1xcclxcbiAgZGlzcGxheTogYmxvY2s7XFxyXFxuICB3aWR0aDogMXJlbTtcXHJcXG4gIGhlaWdodDogMXJlbTtcXHJcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcclxcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGRkO1xcclxcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciBjZW50ZXI7XFxyXFxuICBiYWNrZ3JvdW5kLXNpemU6IDUwJSA1MCU7IH1cXHJcXG5cXHJcXG4uY3VzdG9tLWNoZWNrYm94IC5jdXN0b20tY29udHJvbC1pbmRpY2F0b3Ige1xcclxcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTsgfVxcclxcbi5jdXN0b20tY2hlY2tib3ggLmN1c3RvbS1jb250cm9sLWlucHV0OmNoZWNrZWQgfiAuY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yIHtcXHJcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcXFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmOCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PScwIDAgOCA4JyUzRSUzQ3BhdGggZmlsbD0nJTIzZmZmJyBkPSdNNi41NjQuNzVsLTMuNTkgMy42MTItMS41MzgtMS41NUwwIDQuMjYgMi45NzQgNy4yNSA4IDIuMTkzeicvJTNFJTNDL3N2ZyUzRVxcXCIpOyB9XFxyXFxuLmN1c3RvbS1jaGVja2JveCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6aW5kZXRlcm1pbmF0ZSB+IC5jdXN0b20tY29udHJvbC1pbmRpY2F0b3Ige1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcXHJcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcXFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmOCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PScwIDAgNCA0JyUzRSUzQ3BhdGggc3Ryb2tlPSclMjNmZmYnIGQ9J00wIDJoNCcvJTNFJTNDL3N2ZyUzRVxcXCIpOyB9XFxyXFxuXFxyXFxuLmN1c3RvbS1yYWRpbyAuY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yIHtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTsgfVxcclxcbi5jdXN0b20tcmFkaW8gLmN1c3RvbS1jb250cm9sLWlucHV0OmNoZWNrZWQgfiAuY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yIHtcXHJcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcXFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmOCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PSctNCAtNCA4IDgnJTNFJTNDY2lyY2xlIHI9JzMnIGZpbGw9JyUyM2ZmZicvJTNFJTNDL3N2ZyUzRVxcXCIpOyB9XFxyXFxuXFxyXFxuLmN1c3RvbS1jb250cm9scy1zdGFja2VkIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyB9XFxyXFxuICAuY3VzdG9tLWNvbnRyb2xzLXN0YWNrZWQgLmN1c3RvbS1jb250cm9sIHtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMC4yNXJlbTsgfVxcclxcbiAgICAuY3VzdG9tLWNvbnRyb2xzLXN0YWNrZWQgLmN1c3RvbS1jb250cm9sICsgLmN1c3RvbS1jb250cm9sIHtcXHJcXG4gICAgICBtYXJnaW4tbGVmdDogMDsgfVxcclxcblxcclxcbi5jdXN0b20tc2VsZWN0IHtcXHJcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gIG1heC13aWR0aDogMTAwJTtcXHJcXG4gIGhlaWdodDogY2FsYygyLjI1cmVtICsgMnB4KTtcXHJcXG4gIHBhZGRpbmc6IDAuMzc1cmVtIDEuNzVyZW0gMC4zNzVyZW0gMC43NXJlbTtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAxLjI1O1xcclxcbiAgY29sb3I6ICM0OTUwNTc7XFxyXFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcclxcbiAgYmFja2dyb3VuZDogI2ZmZiB1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0ZjgsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDQgNSclM0UlM0NwYXRoIGZpbGw9JyUyMzMzMycgZD0nTTIgMEwwIDJoNHptMCA1TDAgM2g0eicvJTNFJTNDL3N2ZyUzRVxcXCIpIG5vLXJlcGVhdCByaWdodCAwLjc1cmVtIGNlbnRlcjtcXHJcXG4gIGJhY2tncm91bmQtY2xpcDogcGFkZGluZy1ib3g7XFxyXFxuICBiYWNrZ3JvdW5kLXNpemU6IDhweCAxMHB4O1xcclxcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjE1KTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxyXFxuICBhcHBlYXJhbmNlOiBub25lOyB9XFxyXFxuICAuY3VzdG9tLXNlbGVjdDpmb2N1cyB7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogIzgwYmRmZjtcXHJcXG4gICAgb3V0bGluZTogbm9uZTsgfVxcclxcbiAgICAuY3VzdG9tLXNlbGVjdDpmb2N1czo6LW1zLXZhbHVlIHtcXHJcXG4gICAgICBjb2xvcjogIzQ5NTA1NztcXHJcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOyB9XFxyXFxuICAuY3VzdG9tLXNlbGVjdDpkaXNhYmxlZCB7XFxyXFxuICAgIGNvbG9yOiAjODY4ZTk2O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmOyB9XFxyXFxuICAuY3VzdG9tLXNlbGVjdDo6LW1zLWV4cGFuZCB7XFxyXFxuICAgIG9wYWNpdHk6IDA7IH1cXHJcXG5cXHJcXG4uY3VzdG9tLXNlbGVjdC1zbSB7XFxyXFxuICBoZWlnaHQ6IGNhbGMoMS44MTI1cmVtICsgMnB4KTtcXHJcXG4gIHBhZGRpbmctdG9wOiAwLjM3NXJlbTtcXHJcXG4gIHBhZGRpbmctYm90dG9tOiAwLjM3NXJlbTtcXHJcXG4gIGZvbnQtc2l6ZTogNzUlOyB9XFxyXFxuXFxyXFxuLmN1c3RvbS1maWxlIHtcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gIG1heC13aWR0aDogMTAwJTtcXHJcXG4gIGhlaWdodDogY2FsYygyLjI1cmVtICsgMnB4KTtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDA7IH1cXHJcXG5cXHJcXG4uY3VzdG9tLWZpbGUtaW5wdXQge1xcclxcbiAgbWluLXdpZHRoOiAxNHJlbTtcXHJcXG4gIG1heC13aWR0aDogMTAwJTtcXHJcXG4gIGhlaWdodDogY2FsYygyLjI1cmVtICsgMnB4KTtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG4gIG9wYWNpdHk6IDA7IH1cXHJcXG4gIC5jdXN0b20tZmlsZS1pbnB1dDpmb2N1cyB+IC5jdXN0b20tZmlsZS1jb250cm9sIHtcXHJcXG4gICAgYm94LXNoYWRvdzogMCAwIDAgMC4wNzVyZW0gI2ZmZiwgMCAwIDAgMC4ycmVtICMwMDdiZmY7IH1cXHJcXG5cXHJcXG4uY3VzdG9tLWZpbGUtY29udHJvbCB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICB0b3A6IDA7XFxyXFxuICByaWdodDogMDtcXHJcXG4gIGxlZnQ6IDA7XFxyXFxuICB6LWluZGV4OiA1O1xcclxcbiAgaGVpZ2h0OiBjYWxjKDIuMjVyZW0gKyAycHgpO1xcclxcbiAgcGFkZGluZzogMC41cmVtIDAuNzVyZW07XFxyXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgbGluZS1oZWlnaHQ6IDEuMjU7XFxyXFxuICBjb2xvcjogIzQ5NTA1NztcXHJcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcclxcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcclxcbiAgYmFja2dyb3VuZC1jbGlwOiBwYWRkaW5nLWJveDtcXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xNSk7XFxyXFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtOyB9XFxyXFxuICAuY3VzdG9tLWZpbGUtY29udHJvbDpsYW5nKGVuKTplbXB0eTo6YWZ0ZXIge1xcclxcbiAgICBjb250ZW50OiBcXFwiQ2hvb3NlIGZpbGUuLi5cXFwiOyB9XFxyXFxuICAuY3VzdG9tLWZpbGUtY29udHJvbDo6YmVmb3JlIHtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICB0b3A6IDA7XFxyXFxuICAgIHJpZ2h0OiAwO1xcclxcbiAgICB6LWluZGV4OiA2O1xcclxcbiAgICBkaXNwbGF5OiBibG9jaztcXHJcXG4gICAgaGVpZ2h0OiBjYWxjKDIuMjVyZW0gKyAycHgpO1xcclxcbiAgICBwYWRkaW5nOiAwLjVyZW0gMC43NXJlbTtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDEuMjU7XFxyXFxuICAgIGNvbG9yOiAjNDk1MDU3O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmO1xcclxcbiAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xNSk7IH1cXHJcXG4gIC5jdXN0b20tZmlsZS1jb250cm9sOmxhbmcoZW4pOjpiZWZvcmUge1xcclxcbiAgICBjb250ZW50OiBcXFwiQnJvd3NlXFxcIjsgfVxcclxcblxcclxcbi5uYXYge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtd3JhcDogd3JhcDtcXHJcXG4gIHBhZGRpbmctbGVmdDogMDtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxyXFxuICBsaXN0LXN0eWxlOiBub25lOyB9XFxyXFxuXFxyXFxuLm5hdi1saW5rIHtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgcGFkZGluZzogMC41cmVtIDFyZW07IH1cXHJcXG4gIC5uYXYtbGluazpmb2N1cywgLm5hdi1saW5rOmhvdmVyIHtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XFxyXFxuICAubmF2LWxpbmsuZGlzYWJsZWQge1xcclxcbiAgICBjb2xvcjogIzg2OGU5NjsgfVxcclxcblxcclxcbi5uYXYtdGFicyB7XFxyXFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2RkZDsgfVxcclxcbiAgLm5hdi10YWJzIC5uYXYtaXRlbSB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IC0xcHg7IH1cXHJcXG4gIC5uYXYtdGFicyAubmF2LWxpbmsge1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXHJcXG4gICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMC4yNXJlbTtcXHJcXG4gICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuMjVyZW07IH1cXHJcXG4gICAgLm5hdi10YWJzIC5uYXYtbGluazpmb2N1cywgLm5hdi10YWJzIC5uYXYtbGluazpob3ZlciB7XFxyXFxuICAgICAgYm9yZGVyLWNvbG9yOiAjZTllY2VmICNlOWVjZWYgI2RkZDsgfVxcclxcbiAgICAubmF2LXRhYnMgLm5hdi1saW5rLmRpc2FibGVkIHtcXHJcXG4gICAgICBjb2xvcjogIzg2OGU5NjtcXHJcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXHJcXG4gICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50OyB9XFxyXFxuICAubmF2LXRhYnMgLm5hdi1saW5rLmFjdGl2ZSxcXHJcXG4gIC5uYXYtdGFicyAubmF2LWl0ZW0uc2hvdyAubmF2LWxpbmsge1xcclxcbiAgICBjb2xvcjogIzQ5NTA1NztcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXHJcXG4gICAgYm9yZGVyLWNvbG9yOiAjZGRkICNkZGQgI2ZmZjsgfVxcclxcbiAgLm5hdi10YWJzIC5kcm9wZG93bi1tZW51IHtcXHJcXG4gICAgbWFyZ2luLXRvcDogLTFweDtcXHJcXG4gICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDtcXHJcXG4gICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDA7IH1cXHJcXG5cXHJcXG4ubmF2LXBpbGxzIC5uYXYtbGluayB7XFxyXFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtOyB9XFxyXFxuICAubmF2LXBpbGxzIC5uYXYtbGluay5hY3RpdmUsIC5zaG93ID4gLm5hdi1waWxscyAubmF2LWxpbmsge1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjsgfVxcclxcblxcclxcbi5uYXYtZmlsbCAubmF2LWl0ZW0ge1xcclxcbiAgZmxleDogMSAxIGF1dG87XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cXHJcXG5cXHJcXG4ubmF2LWp1c3RpZmllZCAubmF2LWl0ZW0ge1xcclxcbiAgZmxleC1iYXNpczogMDtcXHJcXG4gIGZsZXgtZ3JvdzogMTtcXHJcXG4gIHRleHQtYWxpZ246IGNlbnRlcjsgfVxcclxcblxcclxcbi50YWItY29udGVudCA+IC50YWItcGFuZSB7XFxyXFxuICBkaXNwbGF5OiBub25lOyB9XFxyXFxuLnRhYi1jb250ZW50ID4gLmFjdGl2ZSB7XFxyXFxuICBkaXNwbGF5OiBibG9jazsgfVxcclxcblxcclxcbi5uYXZiYXIge1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtd3JhcDogd3JhcDtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICBwYWRkaW5nOiAwLjVyZW0gMXJlbTsgfVxcclxcbiAgLm5hdmJhciA+IC5jb250YWluZXIsXFxyXFxuICAubmF2YmFyID4gLmNvbnRhaW5lci1mbHVpZCB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtd3JhcDogd3JhcDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOyB9XFxyXFxuXFxyXFxuLm5hdmJhci1icmFuZCB7XFxyXFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICBwYWRkaW5nLXRvcDogMC4zMTI1cmVtO1xcclxcbiAgcGFkZGluZy1ib3R0b206IDAuMzEyNXJlbTtcXHJcXG4gIG1hcmdpbi1yaWdodDogMXJlbTtcXHJcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXHJcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xcclxcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsgfVxcclxcbiAgLm5hdmJhci1icmFuZDpmb2N1cywgLm5hdmJhci1icmFuZDpob3ZlciB7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxcclxcblxcclxcbi5uYXZiYXItbmF2IHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgcGFkZGluZy1sZWZ0OiAwO1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMDtcXHJcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7IH1cXHJcXG4gIC5uYXZiYXItbmF2IC5uYXYtbGluayB7XFxyXFxuICAgIHBhZGRpbmctcmlnaHQ6IDA7XFxyXFxuICAgIHBhZGRpbmctbGVmdDogMDsgfVxcclxcbiAgLm5hdmJhci1uYXYgLmRyb3Bkb3duLW1lbnUge1xcclxcbiAgICBwb3NpdGlvbjogc3RhdGljO1xcclxcbiAgICBmbG9hdDogbm9uZTsgfVxcclxcblxcclxcbi5uYXZiYXItdGV4dCB7XFxyXFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICBwYWRkaW5nLXRvcDogMC41cmVtO1xcclxcbiAgcGFkZGluZy1ib3R0b206IDAuNXJlbTsgfVxcclxcblxcclxcbi5uYXZiYXItY29sbGFwc2Uge1xcclxcbiAgZmxleC1iYXNpczogMTAwJTtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IH1cXHJcXG5cXHJcXG4ubmF2YmFyLXRvZ2dsZXIge1xcclxcbiAgcGFkZGluZzogMC4yNXJlbSAwLjc1cmVtO1xcclxcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcclxcbiAgbGluZS1oZWlnaHQ6IDE7XFxyXFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xcclxcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTsgfVxcclxcbiAgLm5hdmJhci10b2dnbGVyOmZvY3VzLCAubmF2YmFyLXRvZ2dsZXI6aG92ZXIge1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cXHJcXG5cXHJcXG4ubmF2YmFyLXRvZ2dsZXItaWNvbiB7XFxyXFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICB3aWR0aDogMS41ZW07XFxyXFxuICBoZWlnaHQ6IDEuNWVtO1xcclxcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXHJcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcclxcbiAgYmFja2dyb3VuZDogbm8tcmVwZWF0IGNlbnRlciBjZW50ZXI7XFxyXFxuICBiYWNrZ3JvdW5kLXNpemU6IDEwMCUgMTAwJTsgfVxcclxcblxcclxcbkBtZWRpYSAobWF4LXdpZHRoOiA1NzVweCkge1xcclxcbiAgLm5hdmJhci1leHBhbmQtc20gPiAuY29udGFpbmVyLFxcclxcbiAgLm5hdmJhci1leHBhbmQtc20gPiAuY29udGFpbmVyLWZsdWlkIHtcXHJcXG4gICAgcGFkZGluZy1yaWdodDogMDtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiAwOyB9IH1cXHJcXG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXHJcXG4gIC5uYXZiYXItZXhwYW5kLXNtIHtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG4gICAgZmxleC13cmFwOiBub3dyYXA7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgfVxcclxcbiAgICAubmF2YmFyLWV4cGFuZC1zbSAubmF2YmFyLW5hdiB7XFxyXFxuICAgICAgZmxleC1kaXJlY3Rpb246IHJvdzsgfVxcclxcbiAgICAgIC5uYXZiYXItZXhwYW5kLXNtIC5uYXZiYXItbmF2IC5kcm9wZG93bi1tZW51IHtcXHJcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgfVxcclxcbiAgICAgIC5uYXZiYXItZXhwYW5kLXNtIC5uYXZiYXItbmF2IC5kcm9wZG93bi1tZW51LXJpZ2h0IHtcXHJcXG4gICAgICAgIHJpZ2h0OiAwO1xcclxcbiAgICAgICAgbGVmdDogYXV0bzsgfVxcclxcbiAgICAgIC5uYXZiYXItZXhwYW5kLXNtIC5uYXZiYXItbmF2IC5uYXYtbGluayB7XFxyXFxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAuNXJlbTtcXHJcXG4gICAgICAgIHBhZGRpbmctbGVmdDogLjVyZW07IH1cXHJcXG4gICAgLm5hdmJhci1leHBhbmQtc20gPiAuY29udGFpbmVyLFxcclxcbiAgICAubmF2YmFyLWV4cGFuZC1zbSA+IC5jb250YWluZXItZmx1aWQge1xcclxcbiAgICAgIGZsZXgtd3JhcDogbm93cmFwOyB9XFxyXFxuICAgIC5uYXZiYXItZXhwYW5kLXNtIC5uYXZiYXItY29sbGFwc2Uge1xcclxcbiAgICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDsgfVxcclxcbiAgICAubmF2YmFyLWV4cGFuZC1zbSAubmF2YmFyLXRvZ2dsZXIge1xcclxcbiAgICAgIGRpc3BsYXk6IG5vbmU7IH0gfVxcclxcbkBtZWRpYSAobWF4LXdpZHRoOiA3NjdweCkge1xcclxcbiAgLm5hdmJhci1leHBhbmQtbWQgPiAuY29udGFpbmVyLFxcclxcbiAgLm5hdmJhci1leHBhbmQtbWQgPiAuY29udGFpbmVyLWZsdWlkIHtcXHJcXG4gICAgcGFkZGluZy1yaWdodDogMDtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiAwOyB9IH1cXHJcXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXHJcXG4gIC5uYXZiYXItZXhwYW5kLW1kIHtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG4gICAgZmxleC13cmFwOiBub3dyYXA7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgfVxcclxcbiAgICAubmF2YmFyLWV4cGFuZC1tZCAubmF2YmFyLW5hdiB7XFxyXFxuICAgICAgZmxleC1kaXJlY3Rpb246IHJvdzsgfVxcclxcbiAgICAgIC5uYXZiYXItZXhwYW5kLW1kIC5uYXZiYXItbmF2IC5kcm9wZG93bi1tZW51IHtcXHJcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgfVxcclxcbiAgICAgIC5uYXZiYXItZXhwYW5kLW1kIC5uYXZiYXItbmF2IC5kcm9wZG93bi1tZW51LXJpZ2h0IHtcXHJcXG4gICAgICAgIHJpZ2h0OiAwO1xcclxcbiAgICAgICAgbGVmdDogYXV0bzsgfVxcclxcbiAgICAgIC5uYXZiYXItZXhwYW5kLW1kIC5uYXZiYXItbmF2IC5uYXYtbGluayB7XFxyXFxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAuNXJlbTtcXHJcXG4gICAgICAgIHBhZGRpbmctbGVmdDogLjVyZW07IH1cXHJcXG4gICAgLm5hdmJhci1leHBhbmQtbWQgPiAuY29udGFpbmVyLFxcclxcbiAgICAubmF2YmFyLWV4cGFuZC1tZCA+IC5jb250YWluZXItZmx1aWQge1xcclxcbiAgICAgIGZsZXgtd3JhcDogbm93cmFwOyB9XFxyXFxuICAgIC5uYXZiYXItZXhwYW5kLW1kIC5uYXZiYXItY29sbGFwc2Uge1xcclxcbiAgICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDsgfVxcclxcbiAgICAubmF2YmFyLWV4cGFuZC1tZCAubmF2YmFyLXRvZ2dsZXIge1xcclxcbiAgICAgIGRpc3BsYXk6IG5vbmU7IH0gfVxcclxcbkBtZWRpYSAobWF4LXdpZHRoOiA5OTFweCkge1xcclxcbiAgLm5hdmJhci1leHBhbmQtbGcgPiAuY29udGFpbmVyLFxcclxcbiAgLm5hdmJhci1leHBhbmQtbGcgPiAuY29udGFpbmVyLWZsdWlkIHtcXHJcXG4gICAgcGFkZGluZy1yaWdodDogMDtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiAwOyB9IH1cXHJcXG5AbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcXHJcXG4gIC5uYXZiYXItZXhwYW5kLWxnIHtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG4gICAgZmxleC13cmFwOiBub3dyYXA7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgfVxcclxcbiAgICAubmF2YmFyLWV4cGFuZC1sZyAubmF2YmFyLW5hdiB7XFxyXFxuICAgICAgZmxleC1kaXJlY3Rpb246IHJvdzsgfVxcclxcbiAgICAgIC5uYXZiYXItZXhwYW5kLWxnIC5uYXZiYXItbmF2IC5kcm9wZG93bi1tZW51IHtcXHJcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgfVxcclxcbiAgICAgIC5uYXZiYXItZXhwYW5kLWxnIC5uYXZiYXItbmF2IC5kcm9wZG93bi1tZW51LXJpZ2h0IHtcXHJcXG4gICAgICAgIHJpZ2h0OiAwO1xcclxcbiAgICAgICAgbGVmdDogYXV0bzsgfVxcclxcbiAgICAgIC5uYXZiYXItZXhwYW5kLWxnIC5uYXZiYXItbmF2IC5uYXYtbGluayB7XFxyXFxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAuNXJlbTtcXHJcXG4gICAgICAgIHBhZGRpbmctbGVmdDogLjVyZW07IH1cXHJcXG4gICAgLm5hdmJhci1leHBhbmQtbGcgPiAuY29udGFpbmVyLFxcclxcbiAgICAubmF2YmFyLWV4cGFuZC1sZyA+IC5jb250YWluZXItZmx1aWQge1xcclxcbiAgICAgIGZsZXgtd3JhcDogbm93cmFwOyB9XFxyXFxuICAgIC5uYXZiYXItZXhwYW5kLWxnIC5uYXZiYXItY29sbGFwc2Uge1xcclxcbiAgICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDsgfVxcclxcbiAgICAubmF2YmFyLWV4cGFuZC1sZyAubmF2YmFyLXRvZ2dsZXIge1xcclxcbiAgICAgIGRpc3BsYXk6IG5vbmU7IH0gfVxcclxcbkBtZWRpYSAobWF4LXdpZHRoOiAxMTk5cHgpIHtcXHJcXG4gIC5uYXZiYXItZXhwYW5kLXhsID4gLmNvbnRhaW5lcixcXHJcXG4gIC5uYXZiYXItZXhwYW5kLXhsID4gLmNvbnRhaW5lci1mbHVpZCB7XFxyXFxuICAgIHBhZGRpbmctcmlnaHQ6IDA7XFxyXFxuICAgIHBhZGRpbmctbGVmdDogMDsgfSB9XFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDEyMDBweCkge1xcclxcbiAgLm5hdmJhci1leHBhbmQteGwge1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcclxcbiAgICBmbGV4LXdyYXA6IG5vd3JhcDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OyB9XFxyXFxuICAgIC5uYXZiYXItZXhwYW5kLXhsIC5uYXZiYXItbmF2IHtcXHJcXG4gICAgICBmbGV4LWRpcmVjdGlvbjogcm93OyB9XFxyXFxuICAgICAgLm5hdmJhci1leHBhbmQteGwgLm5hdmJhci1uYXYgLmRyb3Bkb3duLW1lbnUge1xcclxcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlOyB9XFxyXFxuICAgICAgLm5hdmJhci1leHBhbmQteGwgLm5hdmJhci1uYXYgLmRyb3Bkb3duLW1lbnUtcmlnaHQge1xcclxcbiAgICAgICAgcmlnaHQ6IDA7XFxyXFxuICAgICAgICBsZWZ0OiBhdXRvOyB9XFxyXFxuICAgICAgLm5hdmJhci1leHBhbmQteGwgLm5hdmJhci1uYXYgLm5hdi1saW5rIHtcXHJcXG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IC41cmVtO1xcclxcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAuNXJlbTsgfVxcclxcbiAgICAubmF2YmFyLWV4cGFuZC14bCA+IC5jb250YWluZXIsXFxyXFxuICAgIC5uYXZiYXItZXhwYW5kLXhsID4gLmNvbnRhaW5lci1mbHVpZCB7XFxyXFxuICAgICAgZmxleC13cmFwOiBub3dyYXA7IH1cXHJcXG4gICAgLm5hdmJhci1leHBhbmQteGwgLm5hdmJhci1jb2xsYXBzZSB7XFxyXFxuICAgICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50OyB9XFxyXFxuICAgIC5uYXZiYXItZXhwYW5kLXhsIC5uYXZiYXItdG9nZ2xlciB7XFxyXFxuICAgICAgZGlzcGxheTogbm9uZTsgfSB9XFxyXFxuLm5hdmJhci1leHBhbmQge1xcclxcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG4gIGZsZXgtd3JhcDogbm93cmFwO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OyB9XFxyXFxuICAubmF2YmFyLWV4cGFuZCA+IC5jb250YWluZXIsXFxyXFxuICAubmF2YmFyLWV4cGFuZCA+IC5jb250YWluZXItZmx1aWQge1xcclxcbiAgICBwYWRkaW5nLXJpZ2h0OiAwO1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDA7IH1cXHJcXG4gIC5uYXZiYXItZXhwYW5kIC5uYXZiYXItbmF2IHtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdzsgfVxcclxcbiAgICAubmF2YmFyLWV4cGFuZCAubmF2YmFyLW5hdiAuZHJvcGRvd24tbWVudSB7XFxyXFxuICAgICAgcG9zaXRpb246IGFic29sdXRlOyB9XFxyXFxuICAgIC5uYXZiYXItZXhwYW5kIC5uYXZiYXItbmF2IC5kcm9wZG93bi1tZW51LXJpZ2h0IHtcXHJcXG4gICAgICByaWdodDogMDtcXHJcXG4gICAgICBsZWZ0OiBhdXRvOyB9XFxyXFxuICAgIC5uYXZiYXItZXhwYW5kIC5uYXZiYXItbmF2IC5uYXYtbGluayB7XFxyXFxuICAgICAgcGFkZGluZy1yaWdodDogLjVyZW07XFxyXFxuICAgICAgcGFkZGluZy1sZWZ0OiAuNXJlbTsgfVxcclxcbiAgLm5hdmJhci1leHBhbmQgPiAuY29udGFpbmVyLFxcclxcbiAgLm5hdmJhci1leHBhbmQgPiAuY29udGFpbmVyLWZsdWlkIHtcXHJcXG4gICAgZmxleC13cmFwOiBub3dyYXA7IH1cXHJcXG4gIC5uYXZiYXItZXhwYW5kIC5uYXZiYXItY29sbGFwc2Uge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7IH1cXHJcXG4gIC5uYXZiYXItZXhwYW5kIC5uYXZiYXItdG9nZ2xlciB7XFxyXFxuICAgIGRpc3BsYXk6IG5vbmU7IH1cXHJcXG5cXHJcXG4ubmF2YmFyLWxpZ2h0IC5uYXZiYXItYnJhbmQge1xcclxcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC45KTsgfVxcclxcbiAgLm5hdmJhci1saWdodCAubmF2YmFyLWJyYW5kOmZvY3VzLCAubmF2YmFyLWxpZ2h0IC5uYXZiYXItYnJhbmQ6aG92ZXIge1xcclxcbiAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjkpOyB9XFxyXFxuLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAubmF2LWxpbmsge1xcclxcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTsgfVxcclxcbiAgLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAubmF2LWxpbms6Zm9jdXMsIC5uYXZiYXItbGlnaHQgLm5hdmJhci1uYXYgLm5hdi1saW5rOmhvdmVyIHtcXHJcXG4gICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTsgfVxcclxcbiAgLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAubmF2LWxpbmsuZGlzYWJsZWQge1xcclxcbiAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjMpOyB9XFxyXFxuLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAuc2hvdyA+IC5uYXYtbGluayxcXHJcXG4ubmF2YmFyLWxpZ2h0IC5uYXZiYXItbmF2IC5hY3RpdmUgPiAubmF2LWxpbmssXFxyXFxuLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAubmF2LWxpbmsuc2hvdyxcXHJcXG4ubmF2YmFyLWxpZ2h0IC5uYXZiYXItbmF2IC5uYXYtbGluay5hY3RpdmUge1xcclxcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC45KTsgfVxcclxcbi5uYXZiYXItbGlnaHQgLm5hdmJhci10b2dnbGVyIHtcXHJcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7XFxyXFxuICBib3JkZXItY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xKTsgfVxcclxcbi5uYXZiYXItbGlnaHQgLm5hdmJhci10b2dnbGVyLWljb24ge1xcclxcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGY4LCUzQ3N2ZyB2aWV3Qm94PScwIDAgMzAgMzAnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyclM0UlM0NwYXRoIHN0cm9rZT0ncmdiYSgwLCAwLCAwLCAwLjUpJyBzdHJva2Utd2lkdGg9JzInIHN0cm9rZS1saW5lY2FwPSdyb3VuZCcgc3Ryb2tlLW1pdGVybGltaXQ9JzEwJyBkPSdNNCA3aDIyTTQgMTVoMjJNNCAyM2gyMicvJTNFJTNDL3N2ZyUzRVxcXCIpOyB9XFxyXFxuLm5hdmJhci1saWdodCAubmF2YmFyLXRleHQge1xcclxcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTsgfVxcclxcblxcclxcbi5uYXZiYXItZGFyayAubmF2YmFyLWJyYW5kIHtcXHJcXG4gIGNvbG9yOiB3aGl0ZTsgfVxcclxcbiAgLm5hdmJhci1kYXJrIC5uYXZiYXItYnJhbmQ6Zm9jdXMsIC5uYXZiYXItZGFyayAubmF2YmFyLWJyYW5kOmhvdmVyIHtcXHJcXG4gICAgY29sb3I6IHdoaXRlOyB9XFxyXFxuLm5hdmJhci1kYXJrIC5uYXZiYXItbmF2IC5uYXYtbGluayB7XFxyXFxuICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpOyB9XFxyXFxuICAubmF2YmFyLWRhcmsgLm5hdmJhci1uYXYgLm5hdi1saW5rOmZvY3VzLCAubmF2YmFyLWRhcmsgLm5hdmJhci1uYXYgLm5hdi1saW5rOmhvdmVyIHtcXHJcXG4gICAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43NSk7IH1cXHJcXG4gIC5uYXZiYXItZGFyayAubmF2YmFyLW5hdiAubmF2LWxpbmsuZGlzYWJsZWQge1xcclxcbiAgICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KTsgfVxcclxcbi5uYXZiYXItZGFyayAubmF2YmFyLW5hdiAuc2hvdyA+IC5uYXYtbGluayxcXHJcXG4ubmF2YmFyLWRhcmsgLm5hdmJhci1uYXYgLmFjdGl2ZSA+IC5uYXYtbGluayxcXHJcXG4ubmF2YmFyLWRhcmsgLm5hdmJhci1uYXYgLm5hdi1saW5rLnNob3csXFxyXFxuLm5hdmJhci1kYXJrIC5uYXZiYXItbmF2IC5uYXYtbGluay5hY3RpdmUge1xcclxcbiAgY29sb3I6IHdoaXRlOyB9XFxyXFxuLm5hdmJhci1kYXJrIC5uYXZiYXItdG9nZ2xlciB7XFxyXFxuICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpO1xcclxcbiAgYm9yZGVyLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSk7IH1cXHJcXG4ubmF2YmFyLWRhcmsgLm5hdmJhci10b2dnbGVyLWljb24ge1xcclxcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGY4LCUzQ3N2ZyB2aWV3Qm94PScwIDAgMzAgMzAnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyclM0UlM0NwYXRoIHN0cm9rZT0ncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyBzdHJva2Utd2lkdGg9JzInIHN0cm9rZS1saW5lY2FwPSdyb3VuZCcgc3Ryb2tlLW1pdGVybGltaXQ9JzEwJyBkPSdNNCA3aDIyTTQgMTVoMjJNNCAyM2gyMicvJTNFJTNDL3N2ZyUzRVxcXCIpOyB9XFxyXFxuLm5hdmJhci1kYXJrIC5uYXZiYXItdGV4dCB7XFxyXFxuICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpOyB9XFxyXFxuXFxyXFxuLmNhcmQge1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICBtaW4td2lkdGg6IDA7XFxyXFxuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcclxcbiAgYmFja2dyb3VuZC1jbGlwOiBib3JkZXItYm94O1xcclxcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyNSk7XFxyXFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtOyB9XFxyXFxuXFxyXFxuLmNhcmQtYm9keSB7XFxyXFxuICBmbGV4OiAxIDEgYXV0bztcXHJcXG4gIHBhZGRpbmc6IDEuMjVyZW07IH1cXHJcXG5cXHJcXG4uY2FyZC10aXRsZSB7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAwLjc1cmVtOyB9XFxyXFxuXFxyXFxuLmNhcmQtc3VidGl0bGUge1xcclxcbiAgbWFyZ2luLXRvcDogLTAuMzc1cmVtO1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMDsgfVxcclxcblxcclxcbi5jYXJkLXRleHQ6bGFzdC1jaGlsZCB7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAwOyB9XFxyXFxuXFxyXFxuLmNhcmQtbGluazpob3ZlciB7XFxyXFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cXHJcXG4uY2FyZC1saW5rICsgLmNhcmQtbGluayB7XFxyXFxuICBtYXJnaW4tbGVmdDogMS4yNXJlbTsgfVxcclxcblxcclxcbi5jYXJkID4gLmxpc3QtZ3JvdXA6Zmlyc3QtY2hpbGQgLmxpc3QtZ3JvdXAtaXRlbTpmaXJzdC1jaGlsZCB7XFxyXFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwLjI1cmVtO1xcclxcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuMjVyZW07IH1cXHJcXG4uY2FyZCA+IC5saXN0LWdyb3VwOmxhc3QtY2hpbGQgLmxpc3QtZ3JvdXAtaXRlbTpsYXN0LWNoaWxkIHtcXHJcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwLjI1cmVtO1xcclxcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMC4yNXJlbTsgfVxcclxcblxcclxcbi5jYXJkLWhlYWRlciB7XFxyXFxuICBwYWRkaW5nOiAwLjc1cmVtIDEuMjVyZW07XFxyXFxuICBtYXJnaW4tYm90dG9tOiAwO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjAzKTtcXHJcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTI1KTsgfVxcclxcbiAgLmNhcmQtaGVhZGVyOmZpcnN0LWNoaWxkIHtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogY2FsYygwLjI1cmVtIC0gMXB4KSBjYWxjKDAuMjVyZW0gLSAxcHgpIDAgMDsgfVxcclxcblxcclxcbi5jYXJkLWZvb3RlciB7XFxyXFxuICBwYWRkaW5nOiAwLjc1cmVtIDEuMjVyZW07XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMDMpO1xcclxcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMjUpOyB9XFxyXFxuICAuY2FyZC1mb290ZXI6bGFzdC1jaGlsZCB7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDAgMCBjYWxjKDAuMjVyZW0gLSAxcHgpIGNhbGMoMC4yNXJlbSAtIDFweCk7IH1cXHJcXG5cXHJcXG4uY2FyZC1oZWFkZXItdGFicyB7XFxyXFxuICBtYXJnaW4tcmlnaHQ6IC0wLjYyNXJlbTtcXHJcXG4gIG1hcmdpbi1ib3R0b206IC0wLjc1cmVtO1xcclxcbiAgbWFyZ2luLWxlZnQ6IC0wLjYyNXJlbTtcXHJcXG4gIGJvcmRlci1ib3R0b206IDA7IH1cXHJcXG5cXHJcXG4uY2FyZC1oZWFkZXItcGlsbHMge1xcclxcbiAgbWFyZ2luLXJpZ2h0OiAtMC42MjVyZW07XFxyXFxuICBtYXJnaW4tbGVmdDogLTAuNjI1cmVtOyB9XFxyXFxuXFxyXFxuLmNhcmQtaW1nLW92ZXJsYXkge1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgdG9wOiAwO1xcclxcbiAgcmlnaHQ6IDA7XFxyXFxuICBib3R0b206IDA7XFxyXFxuICBsZWZ0OiAwO1xcclxcbiAgcGFkZGluZzogMS4yNXJlbTsgfVxcclxcblxcclxcbi5jYXJkLWltZyB7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IGNhbGMoMC4yNXJlbSAtIDFweCk7IH1cXHJcXG5cXHJcXG4uY2FyZC1pbWctdG9wIHtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogY2FsYygwLjI1cmVtIC0gMXB4KTtcXHJcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiBjYWxjKDAuMjVyZW0gLSAxcHgpOyB9XFxyXFxuXFxyXFxuLmNhcmQtaW1nLWJvdHRvbSB7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiBjYWxjKDAuMjVyZW0gLSAxcHgpO1xcclxcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogY2FsYygwLjI1cmVtIC0gMXB4KTsgfVxcclxcblxcclxcbkBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xcclxcbiAgLmNhcmQtZGVjayB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZmxvdzogcm93IHdyYXA7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogLTE1cHg7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAtMTVweDsgfVxcclxcbiAgICAuY2FyZC1kZWNrIC5jYXJkIHtcXHJcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgIGZsZXg6IDEgMCAwJTtcXHJcXG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICAgIG1hcmdpbi1yaWdodDogMTVweDtcXHJcXG4gICAgICBtYXJnaW4tbGVmdDogMTVweDsgfSB9XFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDU3NnB4KSB7XFxyXFxuICAuY2FyZC1ncm91cCB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZmxvdzogcm93IHdyYXA7IH1cXHJcXG4gICAgLmNhcmQtZ3JvdXAgLmNhcmQge1xcclxcbiAgICAgIGZsZXg6IDEgMCAwJTsgfVxcclxcbiAgICAgIC5jYXJkLWdyb3VwIC5jYXJkICsgLmNhcmQge1xcclxcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDA7XFxyXFxuICAgICAgICBib3JkZXItbGVmdDogMDsgfVxcclxcbiAgICAgIC5jYXJkLWdyb3VwIC5jYXJkOmZpcnN0LWNoaWxkIHtcXHJcXG4gICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwO1xcclxcbiAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDA7IH1cXHJcXG4gICAgICAgIC5jYXJkLWdyb3VwIC5jYXJkOmZpcnN0LWNoaWxkIC5jYXJkLWltZy10b3Age1xcclxcbiAgICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMDsgfVxcclxcbiAgICAgICAgLmNhcmQtZ3JvdXAgLmNhcmQ6Zmlyc3QtY2hpbGQgLmNhcmQtaW1nLWJvdHRvbSB7XFxyXFxuICAgICAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwOyB9XFxyXFxuICAgICAgLmNhcmQtZ3JvdXAgLmNhcmQ6bGFzdC1jaGlsZCB7XFxyXFxuICAgICAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwO1xcclxcbiAgICAgICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMDsgfVxcclxcbiAgICAgICAgLmNhcmQtZ3JvdXAgLmNhcmQ6bGFzdC1jaGlsZCAuY2FyZC1pbWctdG9wIHtcXHJcXG4gICAgICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDsgfVxcclxcbiAgICAgICAgLmNhcmQtZ3JvdXAgLmNhcmQ6bGFzdC1jaGlsZCAuY2FyZC1pbWctYm90dG9tIHtcXHJcXG4gICAgICAgICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMDsgfVxcclxcbiAgICAgIC5jYXJkLWdyb3VwIC5jYXJkOm5vdCg6Zmlyc3QtY2hpbGQpOm5vdCg6bGFzdC1jaGlsZCkge1xcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMDsgfVxcclxcbiAgICAgICAgLmNhcmQtZ3JvdXAgLmNhcmQ6bm90KDpmaXJzdC1jaGlsZCk6bm90KDpsYXN0LWNoaWxkKSAuY2FyZC1pbWctdG9wLFxcclxcbiAgICAgICAgLmNhcmQtZ3JvdXAgLmNhcmQ6bm90KDpmaXJzdC1jaGlsZCk6bm90KDpsYXN0LWNoaWxkKSAuY2FyZC1pbWctYm90dG9tIHtcXHJcXG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogMDsgfSB9XFxyXFxuLmNhcmQtY29sdW1ucyAuY2FyZCB7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAwLjc1cmVtOyB9XFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDU3NnB4KSB7XFxyXFxuICAuY2FyZC1jb2x1bW5zIHtcXHJcXG4gICAgY29sdW1uLWNvdW50OiAzO1xcclxcbiAgICBjb2x1bW4tZ2FwOiAxLjI1cmVtOyB9XFxyXFxuICAgIC5jYXJkLWNvbHVtbnMgLmNhcmQge1xcclxcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gICAgICB3aWR0aDogMTAwJTsgfSB9XFxyXFxuXFxyXFxuLmJyZWFkY3J1bWIge1xcclxcbiAgcGFkZGluZzogMC43NXJlbSAxcmVtO1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXHJcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmO1xcclxcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTsgfVxcclxcbiAgLmJyZWFkY3J1bWI6OmFmdGVyIHtcXHJcXG4gICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgIGNsZWFyOiBib3RoO1xcclxcbiAgICBjb250ZW50OiBcXFwiXFxcIjsgfVxcclxcblxcclxcbi5icmVhZGNydW1iLWl0ZW0ge1xcclxcbiAgZmxvYXQ6IGxlZnQ7IH1cXHJcXG4gIC5icmVhZGNydW1iLWl0ZW0gKyAuYnJlYWRjcnVtYi1pdGVtOjpiZWZvcmUge1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgIHBhZGRpbmctcmlnaHQ6IDAuNXJlbTtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiAwLjVyZW07XFxyXFxuICAgIGNvbG9yOiAjODY4ZTk2O1xcclxcbiAgICBjb250ZW50OiBcXFwiL1xcXCI7IH1cXHJcXG4gIC5icmVhZGNydW1iLWl0ZW0gKyAuYnJlYWRjcnVtYi1pdGVtOmhvdmVyOjpiZWZvcmUge1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsgfVxcclxcbiAgLmJyZWFkY3J1bWItaXRlbSArIC5icmVhZGNydW1iLWl0ZW06aG92ZXI6OmJlZm9yZSB7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxcclxcbiAgLmJyZWFkY3J1bWItaXRlbS5hY3RpdmUge1xcclxcbiAgICBjb2xvcjogIzg2OGU5NjsgfVxcclxcblxcclxcbi5wYWdpbmF0aW9uIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxyXFxuICBsaXN0LXN0eWxlOiBub25lO1xcclxcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTsgfVxcclxcblxcclxcbi5wYWdlLWl0ZW06Zmlyc3QtY2hpbGQgLnBhZ2UtbGluayB7XFxyXFxuICBtYXJnaW4tbGVmdDogMDtcXHJcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuMjVyZW07XFxyXFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwLjI1cmVtOyB9XFxyXFxuLnBhZ2UtaXRlbTpsYXN0LWNoaWxkIC5wYWdlLWxpbmsge1xcclxcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuMjVyZW07XFxyXFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMC4yNXJlbTsgfVxcclxcbi5wYWdlLWl0ZW0uYWN0aXZlIC5wYWdlLWxpbmsge1xcclxcbiAgei1pbmRleDogMjtcXHJcXG4gIGNvbG9yOiAjZmZmO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcXHJcXG4gIGJvcmRlci1jb2xvcjogIzAwN2JmZjsgfVxcclxcbi5wYWdlLWl0ZW0uZGlzYWJsZWQgLnBhZ2UtbGluayB7XFxyXFxuICBjb2xvcjogIzg2OGU5NjtcXHJcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXHJcXG4gIGJvcmRlci1jb2xvcjogI2RkZDsgfVxcclxcblxcclxcbi5wYWdlLWxpbmsge1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgZGlzcGxheTogYmxvY2s7XFxyXFxuICBwYWRkaW5nOiAwLjVyZW0gMC43NXJlbTtcXHJcXG4gIG1hcmdpbi1sZWZ0OiAtMXB4O1xcclxcbiAgbGluZS1oZWlnaHQ6IDEuMjU7XFxyXFxuICBjb2xvcjogIzAwN2JmZjtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCAjZGRkOyB9XFxyXFxuICAucGFnZS1saW5rOmZvY3VzLCAucGFnZS1saW5rOmhvdmVyIHtcXHJcXG4gICAgY29sb3I6ICMwMDU2YjM7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2U5ZWNlZjtcXHJcXG4gICAgYm9yZGVyLWNvbG9yOiAjZGRkOyB9XFxyXFxuXFxyXFxuLnBhZ2luYXRpb24tbGcgLnBhZ2UtbGluayB7XFxyXFxuICBwYWRkaW5nOiAwLjc1cmVtIDEuNXJlbTtcXHJcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7IH1cXHJcXG4ucGFnaW5hdGlvbi1sZyAucGFnZS1pdGVtOmZpcnN0LWNoaWxkIC5wYWdlLWxpbmsge1xcclxcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMC4zcmVtO1xcclxcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMC4zcmVtOyB9XFxyXFxuLnBhZ2luYXRpb24tbGcgLnBhZ2UtaXRlbTpsYXN0LWNoaWxkIC5wYWdlLWxpbmsge1xcclxcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuM3JlbTtcXHJcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwLjNyZW07IH1cXHJcXG5cXHJcXG4ucGFnaW5hdGlvbi1zbSAucGFnZS1saW5rIHtcXHJcXG4gIHBhZGRpbmc6IDAuMjVyZW0gMC41cmVtO1xcclxcbiAgZm9udC1zaXplOiAwLjg3NXJlbTtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7IH1cXHJcXG4ucGFnaW5hdGlvbi1zbSAucGFnZS1pdGVtOmZpcnN0LWNoaWxkIC5wYWdlLWxpbmsge1xcclxcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMC4ycmVtO1xcclxcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMC4ycmVtOyB9XFxyXFxuLnBhZ2luYXRpb24tc20gLnBhZ2UtaXRlbTpsYXN0LWNoaWxkIC5wYWdlLWxpbmsge1xcclxcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuMnJlbTtcXHJcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwLjJyZW07IH1cXHJcXG5cXHJcXG4uYmFkZ2Uge1xcclxcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgcGFkZGluZzogMC4yNWVtIDAuNGVtO1xcclxcbiAgZm9udC1zaXplOiA3NSU7XFxyXFxuICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcclxcbiAgY29sb3I6ICNmZmY7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcclxcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xcclxcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTsgfVxcclxcbiAgLmJhZGdlOmVtcHR5IHtcXHJcXG4gICAgZGlzcGxheTogbm9uZTsgfVxcclxcblxcclxcbi5idG4gLmJhZGdlIHtcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gIHRvcDogLTFweDsgfVxcclxcblxcclxcbi5iYWRnZS1waWxsIHtcXHJcXG4gIHBhZGRpbmctcmlnaHQ6IDAuNmVtO1xcclxcbiAgcGFkZGluZy1sZWZ0OiAwLjZlbTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDEwcmVtOyB9XFxyXFxuXFxyXFxuLmJhZGdlLXByaW1hcnkge1xcclxcbiAgY29sb3I6ICNmZmY7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmOyB9XFxyXFxuICAuYmFkZ2UtcHJpbWFyeVtocmVmXTpmb2N1cywgLmJhZGdlLXByaW1hcnlbaHJlZl06aG92ZXIge1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA2MmNjOyB9XFxyXFxuXFxyXFxuLmJhZGdlLXNlY29uZGFyeSB7XFxyXFxuICBjb2xvcjogI2ZmZjtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICM4NjhlOTY7IH1cXHJcXG4gIC5iYWRnZS1zZWNvbmRhcnlbaHJlZl06Zm9jdXMsIC5iYWRnZS1zZWNvbmRhcnlbaHJlZl06aG92ZXIge1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNmM3NTdkOyB9XFxyXFxuXFxyXFxuLmJhZGdlLXN1Y2Nlc3Mge1xcclxcbiAgY29sb3I6ICNmZmY7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjhhNzQ1OyB9XFxyXFxuICAuYmFkZ2Utc3VjY2Vzc1tocmVmXTpmb2N1cywgLmJhZGdlLXN1Y2Nlc3NbaHJlZl06aG92ZXIge1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWU3ZTM0OyB9XFxyXFxuXFxyXFxuLmJhZGdlLWluZm8ge1xcclxcbiAgY29sb3I6ICNmZmY7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTdhMmI4OyB9XFxyXFxuICAuYmFkZ2UtaW5mb1tocmVmXTpmb2N1cywgLmJhZGdlLWluZm9baHJlZl06aG92ZXIge1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTE3YThiOyB9XFxyXFxuXFxyXFxuLmJhZGdlLXdhcm5pbmcge1xcclxcbiAgY29sb3I6ICMxMTE7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjMTA3OyB9XFxyXFxuICAuYmFkZ2Utd2FybmluZ1tocmVmXTpmb2N1cywgLmJhZGdlLXdhcm5pbmdbaHJlZl06aG92ZXIge1xcclxcbiAgICBjb2xvcjogIzExMTtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDM5ZTAwOyB9XFxyXFxuXFxyXFxuLmJhZGdlLWRhbmdlciB7XFxyXFxuICBjb2xvcjogI2ZmZjtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkYzM1NDU7IH1cXHJcXG4gIC5iYWRnZS1kYW5nZXJbaHJlZl06Zm9jdXMsIC5iYWRnZS1kYW5nZXJbaHJlZl06aG92ZXIge1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYmQyMTMwOyB9XFxyXFxuXFxyXFxuLmJhZGdlLWxpZ2h0IHtcXHJcXG4gIGNvbG9yOiAjMTExO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTsgfVxcclxcbiAgLmJhZGdlLWxpZ2h0W2hyZWZdOmZvY3VzLCAuYmFkZ2UtbGlnaHRbaHJlZl06aG92ZXIge1xcclxcbiAgICBjb2xvcjogIzExMTtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGFlMGU1OyB9XFxyXFxuXFxyXFxuLmJhZGdlLWRhcmsge1xcclxcbiAgY29sb3I6ICNmZmY7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzQzYTQwOyB9XFxyXFxuICAuYmFkZ2UtZGFya1tocmVmXTpmb2N1cywgLmJhZGdlLWRhcmtbaHJlZl06aG92ZXIge1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWQyMTI0OyB9XFxyXFxuXFxyXFxuLmFsZXJ0IHtcXHJcXG4gIHBhZGRpbmc6IDAuNzVyZW0gMS4yNXJlbTtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07XFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07IH1cXHJcXG5cXHJcXG4uYWxlcnQtaGVhZGluZyB7XFxyXFxuICBjb2xvcjogaW5oZXJpdDsgfVxcclxcblxcclxcbi5hbGVydC1saW5rIHtcXHJcXG4gIGZvbnQtd2VpZ2h0OiBib2xkOyB9XFxyXFxuXFxyXFxuLmFsZXJ0LWRpc21pc3NpYmxlIC5jbG9zZSB7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICB0b3A6IC0wLjc1cmVtO1xcclxcbiAgcmlnaHQ6IC0xLjI1cmVtO1xcclxcbiAgcGFkZGluZzogMC43NXJlbSAxLjI1cmVtO1xcclxcbiAgY29sb3I6IGluaGVyaXQ7IH1cXHJcXG5cXHJcXG4uYWxlcnQtcHJpbWFyeSB7XFxyXFxuICBjb2xvcjogIzAwNDA4NTtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNjY2U1ZmY7XFxyXFxuICBib3JkZXItY29sb3I6ICNiOGRhZmY7IH1cXHJcXG4gIC5hbGVydC1wcmltYXJ5IGhyIHtcXHJcXG4gICAgYm9yZGVyLXRvcC1jb2xvcjogIzlmY2RmZjsgfVxcclxcbiAgLmFsZXJ0LXByaW1hcnkgLmFsZXJ0LWxpbmsge1xcclxcbiAgICBjb2xvcjogIzAwMjc1MjsgfVxcclxcblxcclxcbi5hbGVydC1zZWNvbmRhcnkge1xcclxcbiAgY29sb3I6ICM0NjRhNGU7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTdlOGVhO1xcclxcbiAgYm9yZGVyLWNvbG9yOiAjZGRkZmUyOyB9XFxyXFxuICAuYWxlcnQtc2Vjb25kYXJ5IGhyIHtcXHJcXG4gICAgYm9yZGVyLXRvcC1jb2xvcjogI2NmZDJkNjsgfVxcclxcbiAgLmFsZXJ0LXNlY29uZGFyeSAuYWxlcnQtbGluayB7XFxyXFxuICAgIGNvbG9yOiAjMmUzMTMzOyB9XFxyXFxuXFxyXFxuLmFsZXJ0LXN1Y2Nlc3Mge1xcclxcbiAgY29sb3I6ICMxNTU3MjQ7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDRlZGRhO1xcclxcbiAgYm9yZGVyLWNvbG9yOiAjYzNlNmNiOyB9XFxyXFxuICAuYWxlcnQtc3VjY2VzcyBociB7XFxyXFxuICAgIGJvcmRlci10b3AtY29sb3I6ICNiMWRmYmI7IH1cXHJcXG4gIC5hbGVydC1zdWNjZXNzIC5hbGVydC1saW5rIHtcXHJcXG4gICAgY29sb3I6ICMwYjJlMTM7IH1cXHJcXG5cXHJcXG4uYWxlcnQtaW5mbyB7XFxyXFxuICBjb2xvcjogIzBjNTQ2MDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkMWVjZjE7XFxyXFxuICBib3JkZXItY29sb3I6ICNiZWU1ZWI7IH1cXHJcXG4gIC5hbGVydC1pbmZvIGhyIHtcXHJcXG4gICAgYm9yZGVyLXRvcC1jb2xvcjogI2FiZGRlNTsgfVxcclxcbiAgLmFsZXJ0LWluZm8gLmFsZXJ0LWxpbmsge1xcclxcbiAgICBjb2xvcjogIzA2MmMzMzsgfVxcclxcblxcclxcbi5hbGVydC13YXJuaW5nIHtcXHJcXG4gIGNvbG9yOiAjODU2NDA0O1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjNjZDtcXHJcXG4gIGJvcmRlci1jb2xvcjogI2ZmZWViYTsgfVxcclxcbiAgLmFsZXJ0LXdhcm5pbmcgaHIge1xcclxcbiAgICBib3JkZXItdG9wLWNvbG9yOiAjZmZlOGExOyB9XFxyXFxuICAuYWxlcnQtd2FybmluZyAuYWxlcnQtbGluayB7XFxyXFxuICAgIGNvbG9yOiAjNTMzZjAzOyB9XFxyXFxuXFxyXFxuLmFsZXJ0LWRhbmdlciB7XFxyXFxuICBjb2xvcjogIzcyMWMyNDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOGQ3ZGE7XFxyXFxuICBib3JkZXItY29sb3I6ICNmNWM2Y2I7IH1cXHJcXG4gIC5hbGVydC1kYW5nZXIgaHIge1xcclxcbiAgICBib3JkZXItdG9wLWNvbG9yOiAjZjFiMGI3OyB9XFxyXFxuICAuYWxlcnQtZGFuZ2VyIC5hbGVydC1saW5rIHtcXHJcXG4gICAgY29sb3I6ICM0OTEyMTc7IH1cXHJcXG5cXHJcXG4uYWxlcnQtbGlnaHQge1xcclxcbiAgY29sb3I6ICM4MTgxODI7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmVmZWZlO1xcclxcbiAgYm9yZGVyLWNvbG9yOiAjZmRmZGZlOyB9XFxyXFxuICAuYWxlcnQtbGlnaHQgaHIge1xcclxcbiAgICBib3JkZXItdG9wLWNvbG9yOiAjZWNlY2Y2OyB9XFxyXFxuICAuYWxlcnQtbGlnaHQgLmFsZXJ0LWxpbmsge1xcclxcbiAgICBjb2xvcjogIzY4Njg2ODsgfVxcclxcblxcclxcbi5hbGVydC1kYXJrIHtcXHJcXG4gIGNvbG9yOiAjMWIxZTIxO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Q2ZDhkOTtcXHJcXG4gIGJvcmRlci1jb2xvcjogI2M2YzhjYTsgfVxcclxcbiAgLmFsZXJ0LWRhcmsgaHIge1xcclxcbiAgICBib3JkZXItdG9wLWNvbG9yOiAjYjliYmJlOyB9XFxyXFxuICAuYWxlcnQtZGFyayAuYWxlcnQtbGluayB7XFxyXFxuICAgIGNvbG9yOiAjMDQwNTA1OyB9XFxyXFxuXFxyXFxuLm1lZGlhIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDsgfVxcclxcblxcclxcbi5tZWRpYS1ib2R5IHtcXHJcXG4gIGZsZXg6IDE7IH1cXHJcXG5cXHJcXG4uY2xvc2Uge1xcclxcbiAgZmxvYXQ6IHJpZ2h0O1xcclxcbiAgZm9udC1zaXplOiAxLjVyZW07XFxyXFxuICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcclxcbiAgY29sb3I6ICMwMDA7XFxyXFxuICB0ZXh0LXNoYWRvdzogMCAxcHggMCAjZmZmO1xcclxcbiAgb3BhY2l0eTogLjU7IH1cXHJcXG4gIC5jbG9zZTpmb2N1cywgLmNsb3NlOmhvdmVyIHtcXHJcXG4gICAgY29sb3I6ICMwMDA7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gICAgb3BhY2l0eTogLjc1OyB9XFxyXFxuXFxyXFxuYnV0dG9uLmNsb3NlIHtcXHJcXG4gIHBhZGRpbmc6IDA7XFxyXFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXHJcXG4gIGJvcmRlcjogMDtcXHJcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsgfVxcclxcblxcclxcbi5tb2RhbC1vcGVuIHtcXHJcXG4gIG92ZXJmbG93OiBoaWRkZW47IH1cXHJcXG5cXHJcXG4ubW9kYWwge1xcclxcbiAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgdG9wOiAwO1xcclxcbiAgcmlnaHQ6IDA7XFxyXFxuICBib3R0b206IDA7XFxyXFxuICBsZWZ0OiAwO1xcclxcbiAgei1pbmRleDogMTA1MDtcXHJcXG4gIGRpc3BsYXk6IG5vbmU7XFxyXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgb3V0bGluZTogMDsgfVxcclxcbiAgLm1vZGFsLmZhZGUgLm1vZGFsLWRpYWxvZyB7XFxyXFxuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzIGVhc2Utb3V0O1xcclxcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtMjUlKTsgfVxcclxcbiAgLm1vZGFsLnNob3cgLm1vZGFsLWRpYWxvZyB7XFxyXFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIDApOyB9XFxyXFxuXFxyXFxuLm1vZGFsLW9wZW4gLm1vZGFsIHtcXHJcXG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcXHJcXG4gIG92ZXJmbG93LXk6IGF1dG87IH1cXHJcXG5cXHJcXG4ubW9kYWwtZGlhbG9nIHtcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gIHdpZHRoOiBhdXRvO1xcclxcbiAgbWFyZ2luOiAxMHB4OyB9XFxyXFxuXFxyXFxuLm1vZGFsLWNvbnRlbnQge1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcclxcbiAgYmFja2dyb3VuZC1jbGlwOiBwYWRkaW5nLWJveDtcXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4yKTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDAuM3JlbTtcXHJcXG4gIG91dGxpbmU6IDA7IH1cXHJcXG5cXHJcXG4ubW9kYWwtYmFja2Ryb3Age1xcclxcbiAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgdG9wOiAwO1xcclxcbiAgcmlnaHQ6IDA7XFxyXFxuICBib3R0b206IDA7XFxyXFxuICBsZWZ0OiAwO1xcclxcbiAgei1pbmRleDogMTA0MDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDA7IH1cXHJcXG4gIC5tb2RhbC1iYWNrZHJvcC5mYWRlIHtcXHJcXG4gICAgb3BhY2l0eTogMDsgfVxcclxcbiAgLm1vZGFsLWJhY2tkcm9wLnNob3cge1xcclxcbiAgICBvcGFjaXR5OiAwLjU7IH1cXHJcXG5cXHJcXG4ubW9kYWwtaGVhZGVyIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgcGFkZGluZzogMTVweDtcXHJcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZTllY2VmOyB9XFxyXFxuICAubW9kYWwtaGVhZGVyIC5jbG9zZSB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvOyB9XFxyXFxuXFxyXFxuLm1vZGFsLXRpdGxlIHtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxyXFxuICBsaW5lLWhlaWdodDogMS41OyB9XFxyXFxuXFxyXFxuLm1vZGFsLWJvZHkge1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgZmxleDogMSAxIGF1dG87XFxyXFxuICBwYWRkaW5nOiAxNXB4OyB9XFxyXFxuXFxyXFxuLm1vZGFsLWZvb3RlciB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XFxyXFxuICBwYWRkaW5nOiAxNXB4O1xcclxcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNlOWVjZWY7IH1cXHJcXG4gIC5tb2RhbC1mb290ZXIgPiA6bm90KDpmaXJzdC1jaGlsZCkge1xcclxcbiAgICBtYXJnaW4tbGVmdDogLjI1cmVtOyB9XFxyXFxuICAubW9kYWwtZm9vdGVyID4gOm5vdCg6bGFzdC1jaGlsZCkge1xcclxcbiAgICBtYXJnaW4tcmlnaHQ6IC4yNXJlbTsgfVxcclxcblxcclxcbi5tb2RhbC1zY3JvbGxiYXItbWVhc3VyZSB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICB0b3A6IC05OTk5cHg7XFxyXFxuICB3aWR0aDogNTBweDtcXHJcXG4gIGhlaWdodDogNTBweDtcXHJcXG4gIG92ZXJmbG93OiBzY3JvbGw7IH1cXHJcXG5cXHJcXG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXHJcXG4gIC5tb2RhbC1kaWFsb2cge1xcclxcbiAgICBtYXgtd2lkdGg6IDUwMHB4O1xcclxcbiAgICBtYXJnaW46IDMwcHggYXV0bzsgfVxcclxcblxcclxcbiAgLm1vZGFsLXNtIHtcXHJcXG4gICAgbWF4LXdpZHRoOiAzMDBweDsgfSB9XFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDk5MnB4KSB7XFxyXFxuICAubW9kYWwtbGcge1xcclxcbiAgICBtYXgtd2lkdGg6IDgwMHB4OyB9IH1cXHJcXG4udG9vbHRpcCB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICB6LWluZGV4OiAxMDcwO1xcclxcbiAgZGlzcGxheTogYmxvY2s7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcXFwiU2Vnb2UgVUlcXFwiLCBSb2JvdG8sIFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIEFyaWFsLCBzYW5zLXNlcmlmLCBcXFwiQXBwbGUgQ29sb3IgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgU3ltYm9sXFxcIjtcXHJcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxyXFxuICBsaW5lLWhlaWdodDogMS41O1xcclxcbiAgdGV4dC1hbGlnbjogbGVmdDtcXHJcXG4gIHRleHQtYWxpZ246IHN0YXJ0O1xcclxcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgdGV4dC1zaGFkb3c6IG5vbmU7XFxyXFxuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcXHJcXG4gIGxldHRlci1zcGFjaW5nOiBub3JtYWw7XFxyXFxuICB3b3JkLWJyZWFrOiBub3JtYWw7XFxyXFxuICB3b3JkLXNwYWNpbmc6IG5vcm1hbDtcXHJcXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XFxyXFxuICBsaW5lLWJyZWFrOiBhdXRvO1xcclxcbiAgZm9udC1zaXplOiAwLjg3NXJlbTtcXHJcXG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcXHJcXG4gIG9wYWNpdHk6IDA7IH1cXHJcXG4gIC50b29sdGlwLnNob3cge1xcclxcbiAgICBvcGFjaXR5OiAwLjk7IH1cXHJcXG4gIC50b29sdGlwIC5hcnJvdyB7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgIHdpZHRoOiA1cHg7XFxyXFxuICAgIGhlaWdodDogNXB4OyB9XFxyXFxuICAudG9vbHRpcC5icy10b29sdGlwLXRvcCwgLnRvb2x0aXAuYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1cXFwidG9wXFxcIl0ge1xcclxcbiAgICBwYWRkaW5nOiA1cHggMDsgfVxcclxcbiAgICAudG9vbHRpcC5icy10b29sdGlwLXRvcCAuYXJyb3csIC50b29sdGlwLmJzLXRvb2x0aXAtYXV0b1t4LXBsYWNlbWVudF49XFxcInRvcFxcXCJdIC5hcnJvdyB7XFxyXFxuICAgICAgYm90dG9tOiAwOyB9XFxyXFxuICAgIC50b29sdGlwLmJzLXRvb2x0aXAtdG9wIC5hcnJvdzo6YmVmb3JlLCAudG9vbHRpcC5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePVxcXCJ0b3BcXFwiXSAuYXJyb3c6OmJlZm9yZSB7XFxyXFxuICAgICAgbWFyZ2luLWxlZnQ6IC0zcHg7XFxyXFxuICAgICAgY29udGVudDogXFxcIlxcXCI7XFxyXFxuICAgICAgYm9yZGVyLXdpZHRoOiA1cHggNXB4IDA7XFxyXFxuICAgICAgYm9yZGVyLXRvcC1jb2xvcjogIzAwMDsgfVxcclxcbiAgLnRvb2x0aXAuYnMtdG9vbHRpcC1yaWdodCwgLnRvb2x0aXAuYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSB7XFxyXFxuICAgIHBhZGRpbmc6IDAgNXB4OyB9XFxyXFxuICAgIC50b29sdGlwLmJzLXRvb2x0aXAtcmlnaHQgLmFycm93LCAudG9vbHRpcC5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePVxcXCJyaWdodFxcXCJdIC5hcnJvdyB7XFxyXFxuICAgICAgbGVmdDogMDsgfVxcclxcbiAgICAudG9vbHRpcC5icy10b29sdGlwLXJpZ2h0IC5hcnJvdzo6YmVmb3JlLCAudG9vbHRpcC5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePVxcXCJyaWdodFxcXCJdIC5hcnJvdzo6YmVmb3JlIHtcXHJcXG4gICAgICBtYXJnaW4tdG9wOiAtM3B4O1xcclxcbiAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcclxcbiAgICAgIGJvcmRlci13aWR0aDogNXB4IDVweCA1cHggMDtcXHJcXG4gICAgICBib3JkZXItcmlnaHQtY29sb3I6ICMwMDA7IH1cXHJcXG4gIC50b29sdGlwLmJzLXRvb2x0aXAtYm90dG9tLCAudG9vbHRpcC5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSB7XFxyXFxuICAgIHBhZGRpbmc6IDVweCAwOyB9XFxyXFxuICAgIC50b29sdGlwLmJzLXRvb2x0aXAtYm90dG9tIC5hcnJvdywgLnRvb2x0aXAuYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1cXFwiYm90dG9tXFxcIl0gLmFycm93IHtcXHJcXG4gICAgICB0b3A6IDA7IH1cXHJcXG4gICAgLnRvb2x0aXAuYnMtdG9vbHRpcC1ib3R0b20gLmFycm93OjpiZWZvcmUsIC50b29sdGlwLmJzLXRvb2x0aXAtYXV0b1t4LXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIC5hcnJvdzo6YmVmb3JlIHtcXHJcXG4gICAgICBtYXJnaW4tbGVmdDogLTNweDtcXHJcXG4gICAgICBjb250ZW50OiBcXFwiXFxcIjtcXHJcXG4gICAgICBib3JkZXItd2lkdGg6IDAgNXB4IDVweDtcXHJcXG4gICAgICBib3JkZXItYm90dG9tLWNvbG9yOiAjMDAwOyB9XFxyXFxuICAudG9vbHRpcC5icy10b29sdGlwLWxlZnQsIC50b29sdGlwLmJzLXRvb2x0aXAtYXV0b1t4LXBsYWNlbWVudF49XFxcImxlZnRcXFwiXSB7XFxyXFxuICAgIHBhZGRpbmc6IDAgNXB4OyB9XFxyXFxuICAgIC50b29sdGlwLmJzLXRvb2x0aXAtbGVmdCAuYXJyb3csIC50b29sdGlwLmJzLXRvb2x0aXAtYXV0b1t4LXBsYWNlbWVudF49XFxcImxlZnRcXFwiXSAuYXJyb3cge1xcclxcbiAgICAgIHJpZ2h0OiAwOyB9XFxyXFxuICAgIC50b29sdGlwLmJzLXRvb2x0aXAtbGVmdCAuYXJyb3c6OmJlZm9yZSwgLnRvb2x0aXAuYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1cXFwibGVmdFxcXCJdIC5hcnJvdzo6YmVmb3JlIHtcXHJcXG4gICAgICByaWdodDogMDtcXHJcXG4gICAgICBtYXJnaW4tdG9wOiAtM3B4O1xcclxcbiAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcclxcbiAgICAgIGJvcmRlci13aWR0aDogNXB4IDAgNXB4IDVweDtcXHJcXG4gICAgICBib3JkZXItbGVmdC1jb2xvcjogIzAwMDsgfVxcclxcbiAgLnRvb2x0aXAgLmFycm93OjpiZWZvcmUge1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxuICAgIGJvcmRlci1zdHlsZTogc29saWQ7IH1cXHJcXG5cXHJcXG4udG9vbHRpcC1pbm5lciB7XFxyXFxuICBtYXgtd2lkdGg6IDIwMHB4O1xcclxcbiAgcGFkZGluZzogM3B4IDhweDtcXHJcXG4gIGNvbG9yOiAjZmZmO1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07IH1cXHJcXG5cXHJcXG4ucG9wb3ZlciB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICB0b3A6IDA7XFxyXFxuICBsZWZ0OiAwO1xcclxcbiAgei1pbmRleDogMTA2MDtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgbWF4LXdpZHRoOiAyNzZweDtcXHJcXG4gIHBhZGRpbmc6IDFweDtcXHJcXG4gIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFxcXCJTZWdvZSBVSVxcXCIsIFJvYm90bywgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgQXJpYWwsIHNhbnMtc2VyaWYsIFxcXCJBcHBsZSBDb2xvciBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBTeW1ib2xcXFwiO1xcclxcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcclxcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxyXFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcclxcbiAgdGV4dC1hbGlnbjogc3RhcnQ7XFxyXFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxuICB0ZXh0LXNoYWRvdzogbm9uZTtcXHJcXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xcclxcbiAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDtcXHJcXG4gIHdvcmQtYnJlYWs6IG5vcm1hbDtcXHJcXG4gIHdvcmQtc3BhY2luZzogbm9ybWFsO1xcclxcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcXHJcXG4gIGxpbmUtYnJlYWs6IGF1dG87XFxyXFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcclxcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXHJcXG4gIGJhY2tncm91bmQtY2xpcDogcGFkZGluZy1ib3g7XFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMik7XFxyXFxuICBib3JkZXItcmFkaXVzOiAwLjNyZW07IH1cXHJcXG4gIC5wb3BvdmVyIC5hcnJvdyB7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgIHdpZHRoOiAxMHB4O1xcclxcbiAgICBoZWlnaHQ6IDVweDsgfVxcclxcbiAgLnBvcG92ZXIgLmFycm93OjpiZWZvcmUsXFxyXFxuICAucG9wb3ZlciAuYXJyb3c6OmFmdGVyIHtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICBkaXNwbGF5OiBibG9jaztcXHJcXG4gICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXHJcXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDsgfVxcclxcbiAgLnBvcG92ZXIgLmFycm93OjpiZWZvcmUge1xcclxcbiAgICBjb250ZW50OiBcXFwiXFxcIjtcXHJcXG4gICAgYm9yZGVyLXdpZHRoOiAxMXB4OyB9XFxyXFxuICAucG9wb3ZlciAuYXJyb3c6OmFmdGVyIHtcXHJcXG4gICAgY29udGVudDogXFxcIlxcXCI7XFxyXFxuICAgIGJvcmRlci13aWR0aDogMTFweDsgfVxcclxcbiAgLnBvcG92ZXIuYnMtcG9wb3Zlci10b3AsIC5wb3BvdmVyLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcInRvcFxcXCJdIHtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDsgfVxcclxcbiAgICAucG9wb3Zlci5icy1wb3BvdmVyLXRvcCAuYXJyb3csIC5wb3BvdmVyLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcInRvcFxcXCJdIC5hcnJvdyB7XFxyXFxuICAgICAgYm90dG9tOiAwOyB9XFxyXFxuICAgIC5wb3BvdmVyLmJzLXBvcG92ZXItdG9wIC5hcnJvdzo6YmVmb3JlLCAucG9wb3Zlci5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJ0b3BcXFwiXSAuYXJyb3c6OmJlZm9yZSxcXHJcXG4gICAgLnBvcG92ZXIuYnMtcG9wb3Zlci10b3AgLmFycm93OjphZnRlcixcXHJcXG4gICAgLnBvcG92ZXIuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwidG9wXFxcIl0gLmFycm93OjphZnRlciB7XFxyXFxuICAgICAgYm9yZGVyLWJvdHRvbS13aWR0aDogMDsgfVxcclxcbiAgICAucG9wb3Zlci5icy1wb3BvdmVyLXRvcCAuYXJyb3c6OmJlZm9yZSwgLnBvcG92ZXIuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwidG9wXFxcIl0gLmFycm93OjpiZWZvcmUge1xcclxcbiAgICAgIGJvdHRvbTogLTExcHg7XFxyXFxuICAgICAgbWFyZ2luLWxlZnQ6IC02cHg7XFxyXFxuICAgICAgYm9yZGVyLXRvcC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjI1KTsgfVxcclxcbiAgICAucG9wb3Zlci5icy1wb3BvdmVyLXRvcCAuYXJyb3c6OmFmdGVyLCAucG9wb3Zlci5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJ0b3BcXFwiXSAuYXJyb3c6OmFmdGVyIHtcXHJcXG4gICAgICBib3R0b206IC0xMHB4O1xcclxcbiAgICAgIG1hcmdpbi1sZWZ0OiAtNnB4O1xcclxcbiAgICAgIGJvcmRlci10b3AtY29sb3I6ICNmZmY7IH1cXHJcXG4gIC5wb3BvdmVyLmJzLXBvcG92ZXItcmlnaHQsIC5wb3BvdmVyLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcInJpZ2h0XFxcIl0ge1xcclxcbiAgICBtYXJnaW4tbGVmdDogMTBweDsgfVxcclxcbiAgICAucG9wb3Zlci5icy1wb3BvdmVyLXJpZ2h0IC5hcnJvdywgLnBvcG92ZXIuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSAuYXJyb3cge1xcclxcbiAgICAgIGxlZnQ6IDA7IH1cXHJcXG4gICAgLnBvcG92ZXIuYnMtcG9wb3Zlci1yaWdodCAuYXJyb3c6OmJlZm9yZSwgLnBvcG92ZXIuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSAuYXJyb3c6OmJlZm9yZSxcXHJcXG4gICAgLnBvcG92ZXIuYnMtcG9wb3Zlci1yaWdodCAuYXJyb3c6OmFmdGVyLFxcclxcbiAgICAucG9wb3Zlci5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJyaWdodFxcXCJdIC5hcnJvdzo6YWZ0ZXIge1xcclxcbiAgICAgIG1hcmdpbi10b3A6IC04cHg7XFxyXFxuICAgICAgYm9yZGVyLWxlZnQtd2lkdGg6IDA7IH1cXHJcXG4gICAgLnBvcG92ZXIuYnMtcG9wb3Zlci1yaWdodCAuYXJyb3c6OmJlZm9yZSwgLnBvcG92ZXIuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSAuYXJyb3c6OmJlZm9yZSB7XFxyXFxuICAgICAgbGVmdDogLTExcHg7XFxyXFxuICAgICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMjUpOyB9XFxyXFxuICAgIC5wb3BvdmVyLmJzLXBvcG92ZXItcmlnaHQgLmFycm93OjphZnRlciwgLnBvcG92ZXIuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSAuYXJyb3c6OmFmdGVyIHtcXHJcXG4gICAgICBsZWZ0OiAtMTBweDtcXHJcXG4gICAgICBib3JkZXItcmlnaHQtY29sb3I6ICNmZmY7IH1cXHJcXG4gIC5wb3BvdmVyLmJzLXBvcG92ZXItYm90dG9tLCAucG9wb3Zlci5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSB7XFxyXFxuICAgIG1hcmdpbi10b3A6IDEwcHg7IH1cXHJcXG4gICAgLnBvcG92ZXIuYnMtcG9wb3Zlci1ib3R0b20gLmFycm93LCAucG9wb3Zlci5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSAuYXJyb3cge1xcclxcbiAgICAgIHRvcDogMDsgfVxcclxcbiAgICAucG9wb3Zlci5icy1wb3BvdmVyLWJvdHRvbSAuYXJyb3c6OmJlZm9yZSwgLnBvcG92ZXIuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwiYm90dG9tXFxcIl0gLmFycm93OjpiZWZvcmUsXFxyXFxuICAgIC5wb3BvdmVyLmJzLXBvcG92ZXItYm90dG9tIC5hcnJvdzo6YWZ0ZXIsXFxyXFxuICAgIC5wb3BvdmVyLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIC5hcnJvdzo6YWZ0ZXIge1xcclxcbiAgICAgIG1hcmdpbi1sZWZ0OiAtN3B4O1xcclxcbiAgICAgIGJvcmRlci10b3Atd2lkdGg6IDA7IH1cXHJcXG4gICAgLnBvcG92ZXIuYnMtcG9wb3Zlci1ib3R0b20gLmFycm93OjpiZWZvcmUsIC5wb3BvdmVyLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIC5hcnJvdzo6YmVmb3JlIHtcXHJcXG4gICAgICB0b3A6IC0xMXB4O1xcclxcbiAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yNSk7IH1cXHJcXG4gICAgLnBvcG92ZXIuYnMtcG9wb3Zlci1ib3R0b20gLmFycm93OjphZnRlciwgLnBvcG92ZXIuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwiYm90dG9tXFxcIl0gLmFycm93OjphZnRlciB7XFxyXFxuICAgICAgdG9wOiAtMTBweDtcXHJcXG4gICAgICBib3JkZXItYm90dG9tLWNvbG9yOiAjZmZmOyB9XFxyXFxuICAgIC5wb3BvdmVyLmJzLXBvcG92ZXItYm90dG9tIC5wb3BvdmVyLWhlYWRlcjo6YmVmb3JlLCAucG9wb3Zlci5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSAucG9wb3Zlci1oZWFkZXI6OmJlZm9yZSB7XFxyXFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgIHRvcDogMDtcXHJcXG4gICAgICBsZWZ0OiA1MCU7XFxyXFxuICAgICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgICAgd2lkdGg6IDIwcHg7XFxyXFxuICAgICAgbWFyZ2luLWxlZnQ6IC0xMHB4O1xcclxcbiAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcclxcbiAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZjdmN2Y3OyB9XFxyXFxuICAucG9wb3Zlci5icy1wb3BvdmVyLWxlZnQsIC5wb3BvdmVyLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcImxlZnRcXFwiXSB7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogMTBweDsgfVxcclxcbiAgICAucG9wb3Zlci5icy1wb3BvdmVyLWxlZnQgLmFycm93LCAucG9wb3Zlci5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJsZWZ0XFxcIl0gLmFycm93IHtcXHJcXG4gICAgICByaWdodDogMDsgfVxcclxcbiAgICAucG9wb3Zlci5icy1wb3BvdmVyLWxlZnQgLmFycm93OjpiZWZvcmUsIC5wb3BvdmVyLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcImxlZnRcXFwiXSAuYXJyb3c6OmJlZm9yZSxcXHJcXG4gICAgLnBvcG92ZXIuYnMtcG9wb3Zlci1sZWZ0IC5hcnJvdzo6YWZ0ZXIsXFxyXFxuICAgIC5wb3BvdmVyLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcImxlZnRcXFwiXSAuYXJyb3c6OmFmdGVyIHtcXHJcXG4gICAgICBtYXJnaW4tdG9wOiAtOHB4O1xcclxcbiAgICAgIGJvcmRlci1yaWdodC13aWR0aDogMDsgfVxcclxcbiAgICAucG9wb3Zlci5icy1wb3BvdmVyLWxlZnQgLmFycm93OjpiZWZvcmUsIC5wb3BvdmVyLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcImxlZnRcXFwiXSAuYXJyb3c6OmJlZm9yZSB7XFxyXFxuICAgICAgcmlnaHQ6IC0xMXB4O1xcclxcbiAgICAgIGJvcmRlci1sZWZ0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMjUpOyB9XFxyXFxuICAgIC5wb3BvdmVyLmJzLXBvcG92ZXItbGVmdCAuYXJyb3c6OmFmdGVyLCAucG9wb3Zlci5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJsZWZ0XFxcIl0gLmFycm93OjphZnRlciB7XFxyXFxuICAgICAgcmlnaHQ6IC0xMHB4O1xcclxcbiAgICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAjZmZmOyB9XFxyXFxuXFxyXFxuLnBvcG92ZXItaGVhZGVyIHtcXHJcXG4gIHBhZGRpbmc6IDhweCAxNHB4O1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMDtcXHJcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXHJcXG4gIGNvbG9yOiBpbmhlcml0O1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y3ZjdmNztcXHJcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWJlYmViO1xcclxcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogY2FsYygwLjNyZW0gLSAxcHgpO1xcclxcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IGNhbGMoMC4zcmVtIC0gMXB4KTsgfVxcclxcbiAgLnBvcG92ZXItaGVhZGVyOmVtcHR5IHtcXHJcXG4gICAgZGlzcGxheTogbm9uZTsgfVxcclxcblxcclxcbi5wb3BvdmVyLWJvZHkge1xcclxcbiAgcGFkZGluZzogOXB4IDE0cHg7XFxyXFxuICBjb2xvcjogIzIxMjUyOTsgfVxcclxcblxcclxcbi5hbGlnbi1iYXNlbGluZSB7XFxyXFxuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5hbGlnbi10b3Age1xcclxcbiAgdmVydGljYWwtYWxpZ246IHRvcCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmFsaWduLW1pZGRsZSB7XFxyXFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4uYWxpZ24tYm90dG9tIHtcXHJcXG4gIHZlcnRpY2FsLWFsaWduOiBib3R0b20gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5hbGlnbi10ZXh0LWJvdHRvbSB7XFxyXFxuICB2ZXJ0aWNhbC1hbGlnbjogdGV4dC1ib3R0b20gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5hbGlnbi10ZXh0LXRvcCB7XFxyXFxuICB2ZXJ0aWNhbC1hbGlnbjogdGV4dC10b3AgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5iZy1wcmltYXJ5IHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmYgIWltcG9ydGFudDsgfVxcclxcblxcclxcbmEuYmctcHJpbWFyeTpmb2N1cywgYS5iZy1wcmltYXJ5OmhvdmVyIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDYyY2MgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5iZy1zZWNvbmRhcnkge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogIzg2OGU5NiAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuYS5iZy1zZWNvbmRhcnk6Zm9jdXMsIGEuYmctc2Vjb25kYXJ5OmhvdmVyIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICM2Yzc1N2QgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5iZy1zdWNjZXNzIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyOGE3NDUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbmEuYmctc3VjY2Vzczpmb2N1cywgYS5iZy1zdWNjZXNzOmhvdmVyIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxZTdlMzQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5iZy1pbmZvIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxN2EyYjggIWltcG9ydGFudDsgfVxcclxcblxcclxcbmEuYmctaW5mbzpmb2N1cywgYS5iZy1pbmZvOmhvdmVyIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxMTdhOGIgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5iZy13YXJuaW5nIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmMxMDcgIWltcG9ydGFudDsgfVxcclxcblxcclxcbmEuYmctd2FybmluZzpmb2N1cywgYS5iZy13YXJuaW5nOmhvdmVyIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkMzllMDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5iZy1kYW5nZXIge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RjMzU0NSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuYS5iZy1kYW5nZXI6Zm9jdXMsIGEuYmctZGFuZ2VyOmhvdmVyIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiZDIxMzAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5iZy1saWdodCB7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG5hLmJnLWxpZ2h0OmZvY3VzLCBhLmJnLWxpZ2h0OmhvdmVyIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkYWUwZTUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5iZy1kYXJrIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzNDNhNDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbmEuYmctZGFyazpmb2N1cywgYS5iZy1kYXJrOmhvdmVyIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxZDIxMjQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5iZy13aGl0ZSB7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4uYmctdHJhbnNwYXJlbnQge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5ib3JkZXIge1xcclxcbiAgYm9yZGVyOiAxcHggc29saWQgI2U5ZWNlZiAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmJvcmRlci0wIHtcXHJcXG4gIGJvcmRlcjogMCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmJvcmRlci10b3AtMCB7XFxyXFxuICBib3JkZXItdG9wOiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4uYm9yZGVyLXJpZ2h0LTAge1xcclxcbiAgYm9yZGVyLXJpZ2h0OiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4uYm9yZGVyLWJvdHRvbS0wIHtcXHJcXG4gIGJvcmRlci1ib3R0b206IDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5ib3JkZXItbGVmdC0wIHtcXHJcXG4gIGJvcmRlci1sZWZ0OiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4uYm9yZGVyLXByaW1hcnkge1xcclxcbiAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4uYm9yZGVyLXNlY29uZGFyeSB7XFxyXFxuICBib3JkZXItY29sb3I6ICM4NjhlOTYgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5ib3JkZXItc3VjY2VzcyB7XFxyXFxuICBib3JkZXItY29sb3I6ICMyOGE3NDUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5ib3JkZXItaW5mbyB7XFxyXFxuICBib3JkZXItY29sb3I6ICMxN2EyYjggIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5ib3JkZXItd2FybmluZyB7XFxyXFxuICBib3JkZXItY29sb3I6ICNmZmMxMDcgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5ib3JkZXItZGFuZ2VyIHtcXHJcXG4gIGJvcmRlci1jb2xvcjogI2RjMzU0NSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmJvcmRlci1saWdodCB7XFxyXFxuICBib3JkZXItY29sb3I6ICNmOGY5ZmEgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5ib3JkZXItZGFyayB7XFxyXFxuICBib3JkZXItY29sb3I6ICMzNDNhNDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5ib3JkZXItd2hpdGUge1xcclxcbiAgYm9yZGVyLWNvbG9yOiAjZmZmICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ucm91bmRlZCB7XFxyXFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ucm91bmRlZC10b3Age1xcclxcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMC4yNXJlbSAhaW1wb3J0YW50O1xcclxcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5yb3VuZGVkLXJpZ2h0IHtcXHJcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxyXFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLnJvdW5kZWQtYm90dG9tIHtcXHJcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxyXFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ucm91bmRlZC1sZWZ0IHtcXHJcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuMjVyZW0gIWltcG9ydGFudDtcXHJcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5yb3VuZGVkLWNpcmNsZSB7XFxyXFxuICBib3JkZXItcmFkaXVzOiA1MCU7IH1cXHJcXG5cXHJcXG4ucm91bmRlZC0wIHtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDA7IH1cXHJcXG5cXHJcXG4uY2xlYXJmaXg6OmFmdGVyIHtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgY2xlYXI6IGJvdGg7XFxyXFxuICBjb250ZW50OiBcXFwiXFxcIjsgfVxcclxcblxcclxcbi5kLW5vbmUge1xcclxcbiAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmQtaW5saW5lIHtcXHJcXG4gIGRpc3BsYXk6IGlubGluZSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmQtaW5saW5lLWJsb2NrIHtcXHJcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmQtYmxvY2sge1xcclxcbiAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5kLXRhYmxlIHtcXHJcXG4gIGRpc3BsYXk6IHRhYmxlICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4uZC10YWJsZS1jZWxsIHtcXHJcXG4gIGRpc3BsYXk6IHRhYmxlLWNlbGwgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5kLWZsZXgge1xcclxcbiAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmQtaW5saW5lLWZsZXgge1xcclxcbiAgZGlzcGxheTogaW5saW5lLWZsZXggIWltcG9ydGFudDsgfVxcclxcblxcclxcbkBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xcclxcbiAgLmQtc20tbm9uZSB7XFxyXFxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmQtc20taW5saW5lIHtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5kLXNtLWlubGluZS1ibG9jayB7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuZC1zbS1ibG9jayB7XFxyXFxuICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5kLXNtLXRhYmxlIHtcXHJcXG4gICAgZGlzcGxheTogdGFibGUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmQtc20tdGFibGUtY2VsbCB7XFxyXFxuICAgIGRpc3BsYXk6IHRhYmxlLWNlbGwgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmQtc20tZmxleCB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmQtc20taW5saW5lLWZsZXgge1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleCAhaW1wb3J0YW50OyB9IH1cXHJcXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXHJcXG4gIC5kLW1kLW5vbmUge1xcclxcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5kLW1kLWlubGluZSB7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuZC1tZC1pbmxpbmUtYmxvY2sge1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2sgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmQtbWQtYmxvY2sge1xcclxcbiAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuZC1tZC10YWJsZSB7XFxyXFxuICAgIGRpc3BsYXk6IHRhYmxlICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5kLW1kLXRhYmxlLWNlbGwge1xcclxcbiAgICBkaXNwbGF5OiB0YWJsZS1jZWxsICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5kLW1kLWZsZXgge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5kLW1kLWlubGluZS1mbGV4IHtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWZsZXggIWltcG9ydGFudDsgfSB9XFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDk5MnB4KSB7XFxyXFxuICAuZC1sZy1ub25lIHtcXHJcXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuZC1sZy1pbmxpbmUge1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmQtbGctaW5saW5lLWJsb2NrIHtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5kLWxnLWJsb2NrIHtcXHJcXG4gICAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmQtbGctdGFibGUge1xcclxcbiAgICBkaXNwbGF5OiB0YWJsZSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuZC1sZy10YWJsZS1jZWxsIHtcXHJcXG4gICAgZGlzcGxheTogdGFibGUtY2VsbCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuZC1sZy1mbGV4IHtcXHJcXG4gICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuZC1sZy1pbmxpbmUtZmxleCB7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4ICFpbXBvcnRhbnQ7IH0gfVxcclxcbkBtZWRpYSAobWluLXdpZHRoOiAxMjAwcHgpIHtcXHJcXG4gIC5kLXhsLW5vbmUge1xcclxcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5kLXhsLWlubGluZSB7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuZC14bC1pbmxpbmUtYmxvY2sge1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2sgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmQteGwtYmxvY2sge1xcclxcbiAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuZC14bC10YWJsZSB7XFxyXFxuICAgIGRpc3BsYXk6IHRhYmxlICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5kLXhsLXRhYmxlLWNlbGwge1xcclxcbiAgICBkaXNwbGF5OiB0YWJsZS1jZWxsICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5kLXhsLWZsZXgge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5kLXhsLWlubGluZS1mbGV4IHtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWZsZXggIWltcG9ydGFudDsgfSB9XFxyXFxuLmQtcHJpbnQtYmxvY2sge1xcclxcbiAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50OyB9XFxyXFxuICBAbWVkaWEgcHJpbnQge1xcclxcbiAgICAuZC1wcmludC1ibG9jayB7XFxyXFxuICAgICAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDsgfSB9XFxyXFxuXFxyXFxuLmQtcHJpbnQtaW5saW5lIHtcXHJcXG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfVxcclxcbiAgQG1lZGlhIHByaW50IHtcXHJcXG4gICAgLmQtcHJpbnQtaW5saW5lIHtcXHJcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudDsgfSB9XFxyXFxuXFxyXFxuLmQtcHJpbnQtaW5saW5lLWJsb2NrIHtcXHJcXG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfVxcclxcbiAgQG1lZGlhIHByaW50IHtcXHJcXG4gICAgLmQtcHJpbnQtaW5saW5lLWJsb2NrIHtcXHJcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2sgIWltcG9ydGFudDsgfSB9XFxyXFxuXFxyXFxuQG1lZGlhIHByaW50IHtcXHJcXG4gIC5kLXByaW50LW5vbmUge1xcclxcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IH0gfVxcclxcblxcclxcbi5lbWJlZC1yZXNwb25zaXZlIHtcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbiAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxcclxcbiAgLmVtYmVkLXJlc3BvbnNpdmU6OmJlZm9yZSB7XFxyXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICBjb250ZW50OiBcXFwiXFxcIjsgfVxcclxcbiAgLmVtYmVkLXJlc3BvbnNpdmUgLmVtYmVkLXJlc3BvbnNpdmUtaXRlbSxcXHJcXG4gIC5lbWJlZC1yZXNwb25zaXZlIGlmcmFtZSxcXHJcXG4gIC5lbWJlZC1yZXNwb25zaXZlIGVtYmVkLFxcclxcbiAgLmVtYmVkLXJlc3BvbnNpdmUgb2JqZWN0LFxcclxcbiAgLmVtYmVkLXJlc3BvbnNpdmUgdmlkZW8ge1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHRvcDogMDtcXHJcXG4gICAgYm90dG9tOiAwO1xcclxcbiAgICBsZWZ0OiAwO1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICBib3JkZXI6IDA7IH1cXHJcXG5cXHJcXG4uZW1iZWQtcmVzcG9uc2l2ZS0yMWJ5OTo6YmVmb3JlIHtcXHJcXG4gIHBhZGRpbmctdG9wOiA0Mi44NTcxNDI4NTcxJTsgfVxcclxcblxcclxcbi5lbWJlZC1yZXNwb25zaXZlLTE2Ynk5OjpiZWZvcmUge1xcclxcbiAgcGFkZGluZy10b3A6IDU2LjI1JTsgfVxcclxcblxcclxcbi5lbWJlZC1yZXNwb25zaXZlLTRieTM6OmJlZm9yZSB7XFxyXFxuICBwYWRkaW5nLXRvcDogNzUlOyB9XFxyXFxuXFxyXFxuLmVtYmVkLXJlc3BvbnNpdmUtMWJ5MTo6YmVmb3JlIHtcXHJcXG4gIHBhZGRpbmctdG9wOiAxMDAlOyB9XFxyXFxuXFxyXFxuLmZsZXgtcm93IHtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3cgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5mbGV4LWNvbHVtbiB7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4uZmxleC1yb3ctcmV2ZXJzZSB7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2UgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5mbGV4LWNvbHVtbi1yZXZlcnNlIHtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmZsZXgtd3JhcCB7XFxyXFxuICBmbGV4LXdyYXA6IHdyYXAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5mbGV4LW5vd3JhcCB7XFxyXFxuICBmbGV4LXdyYXA6IG5vd3JhcCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmZsZXgtd3JhcC1yZXZlcnNlIHtcXHJcXG4gIGZsZXgtd3JhcDogd3JhcC1yZXZlcnNlICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4uanVzdGlmeS1jb250ZW50LXN0YXJ0IHtcXHJcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmp1c3RpZnktY29udGVudC1lbmQge1xcclxcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmp1c3RpZnktY29udGVudC1jZW50ZXIge1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5qdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiB7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW4gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5qdXN0aWZ5LWNvbnRlbnQtYXJvdW5kIHtcXHJcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4uYWxpZ24taXRlbXMtc3RhcnQge1xcclxcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5hbGlnbi1pdGVtcy1lbmQge1xcclxcbiAgYWxpZ24taXRlbXM6IGZsZXgtZW5kICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4uYWxpZ24taXRlbXMtY2VudGVyIHtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXIgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5hbGlnbi1pdGVtcy1iYXNlbGluZSB7XFxyXFxuICBhbGlnbi1pdGVtczogYmFzZWxpbmUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5hbGlnbi1pdGVtcy1zdHJldGNoIHtcXHJcXG4gIGFsaWduLWl0ZW1zOiBzdHJldGNoICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4uYWxpZ24tY29udGVudC1zdGFydCB7XFxyXFxuICBhbGlnbi1jb250ZW50OiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4uYWxpZ24tY29udGVudC1lbmQge1xcclxcbiAgYWxpZ24tY29udGVudDogZmxleC1lbmQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5hbGlnbi1jb250ZW50LWNlbnRlciB7XFxyXFxuICBhbGlnbi1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5hbGlnbi1jb250ZW50LWJldHdlZW4ge1xcclxcbiAgYWxpZ24tY29udGVudDogc3BhY2UtYmV0d2VlbiAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmFsaWduLWNvbnRlbnQtYXJvdW5kIHtcXHJcXG4gIGFsaWduLWNvbnRlbnQ6IHNwYWNlLWFyb3VuZCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmFsaWduLWNvbnRlbnQtc3RyZXRjaCB7XFxyXFxuICBhbGlnbi1jb250ZW50OiBzdHJldGNoICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4uYWxpZ24tc2VsZi1hdXRvIHtcXHJcXG4gIGFsaWduLXNlbGY6IGF1dG8gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5hbGlnbi1zZWxmLXN0YXJ0IHtcXHJcXG4gIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5hbGlnbi1zZWxmLWVuZCB7XFxyXFxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmFsaWduLXNlbGYtY2VudGVyIHtcXHJcXG4gIGFsaWduLXNlbGY6IGNlbnRlciAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmFsaWduLXNlbGYtYmFzZWxpbmUge1xcclxcbiAgYWxpZ24tc2VsZjogYmFzZWxpbmUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5hbGlnbi1zZWxmLXN0cmV0Y2gge1xcclxcbiAgYWxpZ24tc2VsZjogc3RyZXRjaCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDU3NnB4KSB7XFxyXFxuICAuZmxleC1zbS1yb3cge1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93ICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5mbGV4LXNtLWNvbHVtbiB7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmZsZXgtc20tcm93LXJldmVyc2Uge1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2UgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmZsZXgtc20tY29sdW1uLXJldmVyc2Uge1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2UgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmZsZXgtc20td3JhcCB7XFxyXFxuICAgIGZsZXgtd3JhcDogd3JhcCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuZmxleC1zbS1ub3dyYXAge1xcclxcbiAgICBmbGV4LXdyYXA6IG5vd3JhcCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuZmxleC1zbS13cmFwLXJldmVyc2Uge1xcclxcbiAgICBmbGV4LXdyYXA6IHdyYXAtcmV2ZXJzZSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuanVzdGlmeS1jb250ZW50LXNtLXN0YXJ0IHtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5qdXN0aWZ5LWNvbnRlbnQtc20tZW5kIHtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuanVzdGlmeS1jb250ZW50LXNtLWNlbnRlciB7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5qdXN0aWZ5LWNvbnRlbnQtc20tYmV0d2VlbiB7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbiAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuanVzdGlmeS1jb250ZW50LXNtLWFyb3VuZCB7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1pdGVtcy1zbS1zdGFydCB7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1pdGVtcy1zbS1lbmQge1xcclxcbiAgICBhbGlnbi1pdGVtczogZmxleC1lbmQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLWl0ZW1zLXNtLWNlbnRlciB7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXIgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLWl0ZW1zLXNtLWJhc2VsaW5lIHtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGJhc2VsaW5lICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1pdGVtcy1zbS1zdHJldGNoIHtcXHJcXG4gICAgYWxpZ24taXRlbXM6IHN0cmV0Y2ggIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLWNvbnRlbnQtc20tc3RhcnQge1xcclxcbiAgICBhbGlnbi1jb250ZW50OiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1jb250ZW50LXNtLWVuZCB7XFxyXFxuICAgIGFsaWduLWNvbnRlbnQ6IGZsZXgtZW5kICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1jb250ZW50LXNtLWNlbnRlciB7XFxyXFxuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlciAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24tY29udGVudC1zbS1iZXR3ZWVuIHtcXHJcXG4gICAgYWxpZ24tY29udGVudDogc3BhY2UtYmV0d2VlbiAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24tY29udGVudC1zbS1hcm91bmQge1xcclxcbiAgICBhbGlnbi1jb250ZW50OiBzcGFjZS1hcm91bmQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLWNvbnRlbnQtc20tc3RyZXRjaCB7XFxyXFxuICAgIGFsaWduLWNvbnRlbnQ6IHN0cmV0Y2ggIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLXNlbGYtc20tYXV0byB7XFxyXFxuICAgIGFsaWduLXNlbGY6IGF1dG8gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLXNlbGYtc20tc3RhcnQge1xcclxcbiAgICBhbGlnbi1zZWxmOiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1zZWxmLXNtLWVuZCB7XFxyXFxuICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1zZWxmLXNtLWNlbnRlciB7XFxyXFxuICAgIGFsaWduLXNlbGY6IGNlbnRlciAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24tc2VsZi1zbS1iYXNlbGluZSB7XFxyXFxuICAgIGFsaWduLXNlbGY6IGJhc2VsaW5lICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1zZWxmLXNtLXN0cmV0Y2gge1xcclxcbiAgICBhbGlnbi1zZWxmOiBzdHJldGNoICFpbXBvcnRhbnQ7IH0gfVxcclxcbkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkge1xcclxcbiAgLmZsZXgtbWQtcm93IHtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdyAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuZmxleC1tZC1jb2x1bW4ge1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5mbGV4LW1kLXJvdy1yZXZlcnNlIHtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5mbGV4LW1kLWNvbHVtbi1yZXZlcnNlIHtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5mbGV4LW1kLXdyYXAge1xcclxcbiAgICBmbGV4LXdyYXA6IHdyYXAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmZsZXgtbWQtbm93cmFwIHtcXHJcXG4gICAgZmxleC13cmFwOiBub3dyYXAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmZsZXgtbWQtd3JhcC1yZXZlcnNlIHtcXHJcXG4gICAgZmxleC13cmFwOiB3cmFwLXJldmVyc2UgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmp1c3RpZnktY29udGVudC1tZC1zdGFydCB7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuanVzdGlmeS1jb250ZW50LW1kLWVuZCB7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmp1c3RpZnktY29udGVudC1tZC1jZW50ZXIge1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlciAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuanVzdGlmeS1jb250ZW50LW1kLWJldHdlZW4ge1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW4gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmp1c3RpZnktY29udGVudC1tZC1hcm91bmQge1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24taXRlbXMtbWQtc3RhcnQge1xcclxcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24taXRlbXMtbWQtZW5kIHtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1pdGVtcy1tZC1jZW50ZXIge1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1pdGVtcy1tZC1iYXNlbGluZSB7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24taXRlbXMtbWQtc3RyZXRjaCB7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBzdHJldGNoICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1jb250ZW50LW1kLXN0YXJ0IHtcXHJcXG4gICAgYWxpZ24tY29udGVudDogZmxleC1zdGFydCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24tY29udGVudC1tZC1lbmQge1xcclxcbiAgICBhbGlnbi1jb250ZW50OiBmbGV4LWVuZCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24tY29udGVudC1tZC1jZW50ZXIge1xcclxcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLWNvbnRlbnQtbWQtYmV0d2VlbiB7XFxyXFxuICAgIGFsaWduLWNvbnRlbnQ6IHNwYWNlLWJldHdlZW4gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLWNvbnRlbnQtbWQtYXJvdW5kIHtcXHJcXG4gICAgYWxpZ24tY29udGVudDogc3BhY2UtYXJvdW5kICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1jb250ZW50LW1kLXN0cmV0Y2gge1xcclxcbiAgICBhbGlnbi1jb250ZW50OiBzdHJldGNoICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1zZWxmLW1kLWF1dG8ge1xcclxcbiAgICBhbGlnbi1zZWxmOiBhdXRvICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1zZWxmLW1kLXN0YXJ0IHtcXHJcXG4gICAgYWxpZ24tc2VsZjogZmxleC1zdGFydCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24tc2VsZi1tZC1lbmQge1xcclxcbiAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24tc2VsZi1tZC1jZW50ZXIge1xcclxcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXIgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLXNlbGYtbWQtYmFzZWxpbmUge1xcclxcbiAgICBhbGlnbi1zZWxmOiBiYXNlbGluZSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24tc2VsZi1tZC1zdHJldGNoIHtcXHJcXG4gICAgYWxpZ24tc2VsZjogc3RyZXRjaCAhaW1wb3J0YW50OyB9IH1cXHJcXG5AbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcXHJcXG4gIC5mbGV4LWxnLXJvdyB7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3cgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmZsZXgtbGctY29sdW1uIHtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbiAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuZmxleC1sZy1yb3ctcmV2ZXJzZSB7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuZmxleC1sZy1jb2x1bW4tcmV2ZXJzZSB7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuZmxleC1sZy13cmFwIHtcXHJcXG4gICAgZmxleC13cmFwOiB3cmFwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5mbGV4LWxnLW5vd3JhcCB7XFxyXFxuICAgIGZsZXgtd3JhcDogbm93cmFwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5mbGV4LWxnLXdyYXAtcmV2ZXJzZSB7XFxyXFxuICAgIGZsZXgtd3JhcDogd3JhcC1yZXZlcnNlICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5qdXN0aWZ5LWNvbnRlbnQtbGctc3RhcnQge1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmp1c3RpZnktY29udGVudC1sZy1lbmQge1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5qdXN0aWZ5LWNvbnRlbnQtbGctY2VudGVyIHtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmp1c3RpZnktY29udGVudC1sZy1iZXR3ZWVuIHtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5qdXN0aWZ5LWNvbnRlbnQtbGctYXJvdW5kIHtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLWl0ZW1zLWxnLXN0YXJ0IHtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLWl0ZW1zLWxnLWVuZCB7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24taXRlbXMtbGctY2VudGVyIHtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlciAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24taXRlbXMtbGctYmFzZWxpbmUge1xcclxcbiAgICBhbGlnbi1pdGVtczogYmFzZWxpbmUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLWl0ZW1zLWxnLXN0cmV0Y2gge1xcclxcbiAgICBhbGlnbi1pdGVtczogc3RyZXRjaCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24tY29udGVudC1sZy1zdGFydCB7XFxyXFxuICAgIGFsaWduLWNvbnRlbnQ6IGZsZXgtc3RhcnQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLWNvbnRlbnQtbGctZW5kIHtcXHJcXG4gICAgYWxpZ24tY29udGVudDogZmxleC1lbmQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLWNvbnRlbnQtbGctY2VudGVyIHtcXHJcXG4gICAgYWxpZ24tY29udGVudDogY2VudGVyICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1jb250ZW50LWxnLWJldHdlZW4ge1xcclxcbiAgICBhbGlnbi1jb250ZW50OiBzcGFjZS1iZXR3ZWVuICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1jb250ZW50LWxnLWFyb3VuZCB7XFxyXFxuICAgIGFsaWduLWNvbnRlbnQ6IHNwYWNlLWFyb3VuZCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24tY29udGVudC1sZy1zdHJldGNoIHtcXHJcXG4gICAgYWxpZ24tY29udGVudDogc3RyZXRjaCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24tc2VsZi1sZy1hdXRvIHtcXHJcXG4gICAgYWxpZ24tc2VsZjogYXV0byAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24tc2VsZi1sZy1zdGFydCB7XFxyXFxuICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLXNlbGYtbGctZW5kIHtcXHJcXG4gICAgYWxpZ24tc2VsZjogZmxleC1lbmQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLXNlbGYtbGctY2VudGVyIHtcXHJcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1zZWxmLWxnLWJhc2VsaW5lIHtcXHJcXG4gICAgYWxpZ24tc2VsZjogYmFzZWxpbmUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLXNlbGYtbGctc3RyZXRjaCB7XFxyXFxuICAgIGFsaWduLXNlbGY6IHN0cmV0Y2ggIWltcG9ydGFudDsgfSB9XFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDEyMDBweCkge1xcclxcbiAgLmZsZXgteGwtcm93IHtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdyAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuZmxleC14bC1jb2x1bW4ge1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5mbGV4LXhsLXJvdy1yZXZlcnNlIHtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5mbGV4LXhsLWNvbHVtbi1yZXZlcnNlIHtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5mbGV4LXhsLXdyYXAge1xcclxcbiAgICBmbGV4LXdyYXA6IHdyYXAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmZsZXgteGwtbm93cmFwIHtcXHJcXG4gICAgZmxleC13cmFwOiBub3dyYXAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmZsZXgteGwtd3JhcC1yZXZlcnNlIHtcXHJcXG4gICAgZmxleC13cmFwOiB3cmFwLXJldmVyc2UgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmp1c3RpZnktY29udGVudC14bC1zdGFydCB7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuanVzdGlmeS1jb250ZW50LXhsLWVuZCB7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmp1c3RpZnktY29udGVudC14bC1jZW50ZXIge1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlciAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuanVzdGlmeS1jb250ZW50LXhsLWJldHdlZW4ge1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW4gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmp1c3RpZnktY29udGVudC14bC1hcm91bmQge1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24taXRlbXMteGwtc3RhcnQge1xcclxcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24taXRlbXMteGwtZW5kIHtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1pdGVtcy14bC1jZW50ZXIge1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1pdGVtcy14bC1iYXNlbGluZSB7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24taXRlbXMteGwtc3RyZXRjaCB7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBzdHJldGNoICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1jb250ZW50LXhsLXN0YXJ0IHtcXHJcXG4gICAgYWxpZ24tY29udGVudDogZmxleC1zdGFydCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24tY29udGVudC14bC1lbmQge1xcclxcbiAgICBhbGlnbi1jb250ZW50OiBmbGV4LWVuZCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24tY29udGVudC14bC1jZW50ZXIge1xcclxcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLWNvbnRlbnQteGwtYmV0d2VlbiB7XFxyXFxuICAgIGFsaWduLWNvbnRlbnQ6IHNwYWNlLWJldHdlZW4gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLWNvbnRlbnQteGwtYXJvdW5kIHtcXHJcXG4gICAgYWxpZ24tY29udGVudDogc3BhY2UtYXJvdW5kICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1jb250ZW50LXhsLXN0cmV0Y2gge1xcclxcbiAgICBhbGlnbi1jb250ZW50OiBzdHJldGNoICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1zZWxmLXhsLWF1dG8ge1xcclxcbiAgICBhbGlnbi1zZWxmOiBhdXRvICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5hbGlnbi1zZWxmLXhsLXN0YXJ0IHtcXHJcXG4gICAgYWxpZ24tc2VsZjogZmxleC1zdGFydCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24tc2VsZi14bC1lbmQge1xcclxcbiAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24tc2VsZi14bC1jZW50ZXIge1xcclxcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXIgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmFsaWduLXNlbGYteGwtYmFzZWxpbmUge1xcclxcbiAgICBhbGlnbi1zZWxmOiBiYXNlbGluZSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuYWxpZ24tc2VsZi14bC1zdHJldGNoIHtcXHJcXG4gICAgYWxpZ24tc2VsZjogc3RyZXRjaCAhaW1wb3J0YW50OyB9IH1cXHJcXG4uZmxvYXQtbGVmdCB7XFxyXFxuICBmbG9hdDogbGVmdCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmZsb2F0LXJpZ2h0IHtcXHJcXG4gIGZsb2F0OiByaWdodCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmZsb2F0LW5vbmUge1xcclxcbiAgZmxvYXQ6IG5vbmUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbkBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xcclxcbiAgLmZsb2F0LXNtLWxlZnQge1xcclxcbiAgICBmbG9hdDogbGVmdCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuZmxvYXQtc20tcmlnaHQge1xcclxcbiAgICBmbG9hdDogcmlnaHQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmZsb2F0LXNtLW5vbmUge1xcclxcbiAgICBmbG9hdDogbm9uZSAhaW1wb3J0YW50OyB9IH1cXHJcXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXHJcXG4gIC5mbG9hdC1tZC1sZWZ0IHtcXHJcXG4gICAgZmxvYXQ6IGxlZnQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmZsb2F0LW1kLXJpZ2h0IHtcXHJcXG4gICAgZmxvYXQ6IHJpZ2h0ICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5mbG9hdC1tZC1ub25lIHtcXHJcXG4gICAgZmxvYXQ6IG5vbmUgIWltcG9ydGFudDsgfSB9XFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDk5MnB4KSB7XFxyXFxuICAuZmxvYXQtbGctbGVmdCB7XFxyXFxuICAgIGZsb2F0OiBsZWZ0ICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5mbG9hdC1sZy1yaWdodCB7XFxyXFxuICAgIGZsb2F0OiByaWdodCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAuZmxvYXQtbGctbm9uZSB7XFxyXFxuICAgIGZsb2F0OiBub25lICFpbXBvcnRhbnQ7IH0gfVxcclxcbkBtZWRpYSAobWluLXdpZHRoOiAxMjAwcHgpIHtcXHJcXG4gIC5mbG9hdC14bC1sZWZ0IHtcXHJcXG4gICAgZmxvYXQ6IGxlZnQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLmZsb2F0LXhsLXJpZ2h0IHtcXHJcXG4gICAgZmxvYXQ6IHJpZ2h0ICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5mbG9hdC14bC1ub25lIHtcXHJcXG4gICAgZmxvYXQ6IG5vbmUgIWltcG9ydGFudDsgfSB9XFxyXFxuLnBvc2l0aW9uLXN0YXRpYyB7XFxyXFxuICBwb3NpdGlvbjogc3RhdGljICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ucG9zaXRpb24tcmVsYXRpdmUge1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ucG9zaXRpb24tYWJzb2x1dGUge1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ucG9zaXRpb24tZml4ZWQge1xcclxcbiAgcG9zaXRpb246IGZpeGVkICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ucG9zaXRpb24tc3RpY2t5IHtcXHJcXG4gIHBvc2l0aW9uOiBzdGlja3kgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5maXhlZC10b3Age1xcclxcbiAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgdG9wOiAwO1xcclxcbiAgcmlnaHQ6IDA7XFxyXFxuICBsZWZ0OiAwO1xcclxcbiAgei1pbmRleDogMTAzMDsgfVxcclxcblxcclxcbi5maXhlZC1ib3R0b20ge1xcclxcbiAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgcmlnaHQ6IDA7XFxyXFxuICBib3R0b206IDA7XFxyXFxuICBsZWZ0OiAwO1xcclxcbiAgei1pbmRleDogMTAzMDsgfVxcclxcblxcclxcbkBzdXBwb3J0cyAocG9zaXRpb246IHN0aWNreSkge1xcclxcbiAgLnN0aWNreS10b3Age1xcclxcbiAgICBwb3NpdGlvbjogc3RpY2t5O1xcclxcbiAgICB0b3A6IDA7XFxyXFxuICAgIHotaW5kZXg6IDEwMjA7IH0gfVxcclxcblxcclxcbi5zci1vbmx5IHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIHdpZHRoOiAxcHg7XFxyXFxuICBoZWlnaHQ6IDFweDtcXHJcXG4gIHBhZGRpbmc6IDA7XFxyXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgY2xpcDogcmVjdCgwLCAwLCAwLCAwKTtcXHJcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxyXFxuICBjbGlwLXBhdGg6IGluc2V0KDUwJSk7XFxyXFxuICBib3JkZXI6IDA7IH1cXHJcXG5cXHJcXG4uc3Itb25seS1mb2N1c2FibGU6YWN0aXZlLCAuc3Itb25seS1mb2N1c2FibGU6Zm9jdXMge1xcclxcbiAgcG9zaXRpb246IHN0YXRpYztcXHJcXG4gIHdpZHRoOiBhdXRvO1xcclxcbiAgaGVpZ2h0OiBhdXRvO1xcclxcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxyXFxuICBjbGlwOiBhdXRvO1xcclxcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcXHJcXG4gIGNsaXAtcGF0aDogbm9uZTsgfVxcclxcblxcclxcbi53LTI1IHtcXHJcXG4gIHdpZHRoOiAyNSUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi53LTUwIHtcXHJcXG4gIHdpZHRoOiA1MCUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi53LTc1IHtcXHJcXG4gIHdpZHRoOiA3NSUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi53LTEwMCB7XFxyXFxuICB3aWR0aDogMTAwJSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmgtMjUge1xcclxcbiAgaGVpZ2h0OiAyNSUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5oLTUwIHtcXHJcXG4gIGhlaWdodDogNTAlICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4uaC03NSB7XFxyXFxuICBoZWlnaHQ6IDc1JSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmgtMTAwIHtcXHJcXG4gIGhlaWdodDogMTAwJSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLm13LTEwMCB7XFxyXFxuICBtYXgtd2lkdGg6IDEwMCUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5taC0xMDAge1xcclxcbiAgbWF4LWhlaWdodDogMTAwJSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLm0tMCB7XFxyXFxuICBtYXJnaW46IDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5tdC0wLFxcclxcbi5teS0wIHtcXHJcXG4gIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5tci0wLFxcclxcbi5teC0wIHtcXHJcXG4gIG1hcmdpbi1yaWdodDogMCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLm1iLTAsXFxyXFxuLm15LTAge1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLm1sLTAsXFxyXFxuLm14LTAge1xcclxcbiAgbWFyZ2luLWxlZnQ6IDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5tLTEge1xcclxcbiAgbWFyZ2luOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ubXQtMSxcXHJcXG4ubXktMSB7XFxyXFxuICBtYXJnaW4tdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ubXItMSxcXHJcXG4ubXgtMSB7XFxyXFxuICBtYXJnaW4tcmlnaHQ6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5tYi0xLFxcclxcbi5teS0xIHtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5tbC0xLFxcclxcbi5teC0xIHtcXHJcXG4gIG1hcmdpbi1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ubS0yIHtcXHJcXG4gIG1hcmdpbjogMC41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ubXQtMixcXHJcXG4ubXktMiB7XFxyXFxuICBtYXJnaW4tdG9wOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5tci0yLFxcclxcbi5teC0yIHtcXHJcXG4gIG1hcmdpbi1yaWdodDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ubWItMixcXHJcXG4ubXktMiB7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5tbC0yLFxcclxcbi5teC0yIHtcXHJcXG4gIG1hcmdpbi1sZWZ0OiAwLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5tLTMge1xcclxcbiAgbWFyZ2luOiAxcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ubXQtMyxcXHJcXG4ubXktMyB7XFxyXFxuICBtYXJnaW4tdG9wOiAxcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ubXItMyxcXHJcXG4ubXgtMyB7XFxyXFxuICBtYXJnaW4tcmlnaHQ6IDFyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5tYi0zLFxcclxcbi5teS0zIHtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDFyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5tbC0zLFxcclxcbi5teC0zIHtcXHJcXG4gIG1hcmdpbi1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ubS00IHtcXHJcXG4gIG1hcmdpbjogMS41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ubXQtNCxcXHJcXG4ubXktNCB7XFxyXFxuICBtYXJnaW4tdG9wOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5tci00LFxcclxcbi5teC00IHtcXHJcXG4gIG1hcmdpbi1yaWdodDogMS41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ubWItNCxcXHJcXG4ubXktNCB7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5tbC00LFxcclxcbi5teC00IHtcXHJcXG4gIG1hcmdpbi1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5tLTUge1xcclxcbiAgbWFyZ2luOiAzcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ubXQtNSxcXHJcXG4ubXktNSB7XFxyXFxuICBtYXJnaW4tdG9wOiAzcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ubXItNSxcXHJcXG4ubXgtNSB7XFxyXFxuICBtYXJnaW4tcmlnaHQ6IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5tYi01LFxcclxcbi5teS01IHtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5tbC01LFxcclxcbi5teC01IHtcXHJcXG4gIG1hcmdpbi1sZWZ0OiAzcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ucC0wIHtcXHJcXG4gIHBhZGRpbmc6IDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5wdC0wLFxcclxcbi5weS0wIHtcXHJcXG4gIHBhZGRpbmctdG9wOiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ucHItMCxcXHJcXG4ucHgtMCB7XFxyXFxuICBwYWRkaW5nLXJpZ2h0OiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ucGItMCxcXHJcXG4ucHktMCB7XFxyXFxuICBwYWRkaW5nLWJvdHRvbTogMCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLnBsLTAsXFxyXFxuLnB4LTAge1xcclxcbiAgcGFkZGluZy1sZWZ0OiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ucC0xIHtcXHJcXG4gIHBhZGRpbmc6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5wdC0xLFxcclxcbi5weS0xIHtcXHJcXG4gIHBhZGRpbmctdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ucHItMSxcXHJcXG4ucHgtMSB7XFxyXFxuICBwYWRkaW5nLXJpZ2h0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ucGItMSxcXHJcXG4ucHktMSB7XFxyXFxuICBwYWRkaW5nLWJvdHRvbTogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLnBsLTEsXFxyXFxuLnB4LTEge1xcclxcbiAgcGFkZGluZy1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ucC0yIHtcXHJcXG4gIHBhZGRpbmc6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLnB0LTIsXFxyXFxuLnB5LTIge1xcclxcbiAgcGFkZGluZy10b3A6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLnByLTIsXFxyXFxuLnB4LTIge1xcclxcbiAgcGFkZGluZy1yaWdodDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ucGItMixcXHJcXG4ucHktMiB7XFxyXFxuICBwYWRkaW5nLWJvdHRvbTogMC41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ucGwtMixcXHJcXG4ucHgtMiB7XFxyXFxuICBwYWRkaW5nLWxlZnQ6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLnAtMyB7XFxyXFxuICBwYWRkaW5nOiAxcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ucHQtMyxcXHJcXG4ucHktMyB7XFxyXFxuICBwYWRkaW5nLXRvcDogMXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLnByLTMsXFxyXFxuLnB4LTMge1xcclxcbiAgcGFkZGluZy1yaWdodDogMXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLnBiLTMsXFxyXFxuLnB5LTMge1xcclxcbiAgcGFkZGluZy1ib3R0b206IDFyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5wbC0zLFxcclxcbi5weC0zIHtcXHJcXG4gIHBhZGRpbmctbGVmdDogMXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLnAtNCB7XFxyXFxuICBwYWRkaW5nOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5wdC00LFxcclxcbi5weS00IHtcXHJcXG4gIHBhZGRpbmctdG9wOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5wci00LFxcclxcbi5weC00IHtcXHJcXG4gIHBhZGRpbmctcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLnBiLTQsXFxyXFxuLnB5LTQge1xcclxcbiAgcGFkZGluZy1ib3R0b206IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLnBsLTQsXFxyXFxuLnB4LTQge1xcclxcbiAgcGFkZGluZy1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5wLTUge1xcclxcbiAgcGFkZGluZzogM3JlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLnB0LTUsXFxyXFxuLnB5LTUge1xcclxcbiAgcGFkZGluZy10b3A6IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5wci01LFxcclxcbi5weC01IHtcXHJcXG4gIHBhZGRpbmctcmlnaHQ6IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5wYi01LFxcclxcbi5weS01IHtcXHJcXG4gIHBhZGRpbmctYm90dG9tOiAzcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ucGwtNSxcXHJcXG4ucHgtNSB7XFxyXFxuICBwYWRkaW5nLWxlZnQ6IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5tLWF1dG8ge1xcclxcbiAgbWFyZ2luOiBhdXRvICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ubXQtYXV0byxcXHJcXG4ubXktYXV0byB7XFxyXFxuICBtYXJnaW4tdG9wOiBhdXRvICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4ubXItYXV0byxcXHJcXG4ubXgtYXV0byB7XFxyXFxuICBtYXJnaW4tcmlnaHQ6IGF1dG8gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5tYi1hdXRvLFxcclxcbi5teS1hdXRvIHtcXHJcXG4gIG1hcmdpbi1ib3R0b206IGF1dG8gIWltcG9ydGFudDsgfVxcclxcblxcclxcbi5tbC1hdXRvLFxcclxcbi5teC1hdXRvIHtcXHJcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXHJcXG4gIC5tLXNtLTAge1xcclxcbiAgICBtYXJnaW46IDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm10LXNtLTAsXFxyXFxuICAubXktc20tMCB7XFxyXFxuICAgIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1yLXNtLTAsXFxyXFxuICAubXgtc20tMCB7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogMCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubWItc20tMCxcXHJcXG4gIC5teS1zbS0wIHtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubWwtc20tMCxcXHJcXG4gIC5teC1zbS0wIHtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm0tc20tMSB7XFxyXFxuICAgIG1hcmdpbjogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubXQtc20tMSxcXHJcXG4gIC5teS1zbS0xIHtcXHJcXG4gICAgbWFyZ2luLXRvcDogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubXItc20tMSxcXHJcXG4gIC5teC1zbS0xIHtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tYi1zbS0xLFxcclxcbiAgLm15LXNtLTEge1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tbC1zbS0xLFxcclxcbiAgLm14LXNtLTEge1xcclxcbiAgICBtYXJnaW4tbGVmdDogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubS1zbS0yIHtcXHJcXG4gICAgbWFyZ2luOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm10LXNtLTIsXFxyXFxuICAubXktc20tMiB7XFxyXFxuICAgIG1hcmdpbi10b3A6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubXItc20tMixcXHJcXG4gIC5teC1zbS0yIHtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiAwLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1iLXNtLTIsXFxyXFxuICAubXktc20tMiB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubWwtc20tMixcXHJcXG4gIC5teC1zbS0yIHtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubS1zbS0zIHtcXHJcXG4gICAgbWFyZ2luOiAxcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tdC1zbS0zLFxcclxcbiAgLm15LXNtLTMge1xcclxcbiAgICBtYXJnaW4tdG9wOiAxcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tci1zbS0zLFxcclxcbiAgLm14LXNtLTMge1xcclxcbiAgICBtYXJnaW4tcmlnaHQ6IDFyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1iLXNtLTMsXFxyXFxuICAubXktc20tMyB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDFyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1sLXNtLTMsXFxyXFxuICAubXgtc20tMyB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tLXNtLTQge1xcclxcbiAgICBtYXJnaW46IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubXQtc20tNCxcXHJcXG4gIC5teS1zbS00IHtcXHJcXG4gICAgbWFyZ2luLXRvcDogMS41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tci1zbS00LFxcclxcbiAgLm14LXNtLTQge1xcclxcbiAgICBtYXJnaW4tcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubWItc20tNCxcXHJcXG4gIC5teS1zbS00IHtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMS41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tbC1zbS00LFxcclxcbiAgLm14LXNtLTQge1xcclxcbiAgICBtYXJnaW4tbGVmdDogMS41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tLXNtLTUge1xcclxcbiAgICBtYXJnaW46IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm10LXNtLTUsXFxyXFxuICAubXktc20tNSB7XFxyXFxuICAgIG1hcmdpbi10b3A6IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1yLXNtLTUsXFxyXFxuICAubXgtc20tNSB7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogM3JlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubWItc20tNSxcXHJcXG4gIC5teS1zbS01IHtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogM3JlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubWwtc20tNSxcXHJcXG4gIC5teC1zbS01IHtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnAtc20tMCB7XFxyXFxuICAgIHBhZGRpbmc6IDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnB0LXNtLTAsXFxyXFxuICAucHktc20tMCB7XFxyXFxuICAgIHBhZGRpbmctdG9wOiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wci1zbS0wLFxcclxcbiAgLnB4LXNtLTAge1xcclxcbiAgICBwYWRkaW5nLXJpZ2h0OiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wYi1zbS0wLFxcclxcbiAgLnB5LXNtLTAge1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogMCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucGwtc20tMCxcXHJcXG4gIC5weC1zbS0wIHtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wLXNtLTEge1xcclxcbiAgICBwYWRkaW5nOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wdC1zbS0xLFxcclxcbiAgLnB5LXNtLTEge1xcclxcbiAgICBwYWRkaW5nLXRvcDogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHItc20tMSxcXHJcXG4gIC5weC1zbS0xIHtcXHJcXG4gICAgcGFkZGluZy1yaWdodDogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucGItc20tMSxcXHJcXG4gIC5weS1zbS0xIHtcXHJcXG4gICAgcGFkZGluZy1ib3R0b206IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnBsLXNtLTEsXFxyXFxuICAucHgtc20tMSB7XFxyXFxuICAgIHBhZGRpbmctbGVmdDogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucC1zbS0yIHtcXHJcXG4gICAgcGFkZGluZzogMC41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wdC1zbS0yLFxcclxcbiAgLnB5LXNtLTIge1xcclxcbiAgICBwYWRkaW5nLXRvcDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wci1zbS0yLFxcclxcbiAgLnB4LXNtLTIge1xcclxcbiAgICBwYWRkaW5nLXJpZ2h0OiAwLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnBiLXNtLTIsXFxyXFxuICAucHktc20tMiB7XFxyXFxuICAgIHBhZGRpbmctYm90dG9tOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnBsLXNtLTIsXFxyXFxuICAucHgtc20tMiB7XFxyXFxuICAgIHBhZGRpbmctbGVmdDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wLXNtLTMge1xcclxcbiAgICBwYWRkaW5nOiAxcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wdC1zbS0zLFxcclxcbiAgLnB5LXNtLTMge1xcclxcbiAgICBwYWRkaW5nLXRvcDogMXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHItc20tMyxcXHJcXG4gIC5weC1zbS0zIHtcXHJcXG4gICAgcGFkZGluZy1yaWdodDogMXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucGItc20tMyxcXHJcXG4gIC5weS1zbS0zIHtcXHJcXG4gICAgcGFkZGluZy1ib3R0b206IDFyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnBsLXNtLTMsXFxyXFxuICAucHgtc20tMyB7XFxyXFxuICAgIHBhZGRpbmctbGVmdDogMXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucC1zbS00IHtcXHJcXG4gICAgcGFkZGluZzogMS41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wdC1zbS00LFxcclxcbiAgLnB5LXNtLTQge1xcclxcbiAgICBwYWRkaW5nLXRvcDogMS41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wci1zbS00LFxcclxcbiAgLnB4LXNtLTQge1xcclxcbiAgICBwYWRkaW5nLXJpZ2h0OiAxLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnBiLXNtLTQsXFxyXFxuICAucHktc20tNCB7XFxyXFxuICAgIHBhZGRpbmctYm90dG9tOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnBsLXNtLTQsXFxyXFxuICAucHgtc20tNCB7XFxyXFxuICAgIHBhZGRpbmctbGVmdDogMS41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wLXNtLTUge1xcclxcbiAgICBwYWRkaW5nOiAzcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wdC1zbS01LFxcclxcbiAgLnB5LXNtLTUge1xcclxcbiAgICBwYWRkaW5nLXRvcDogM3JlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHItc20tNSxcXHJcXG4gIC5weC1zbS01IHtcXHJcXG4gICAgcGFkZGluZy1yaWdodDogM3JlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucGItc20tNSxcXHJcXG4gIC5weS1zbS01IHtcXHJcXG4gICAgcGFkZGluZy1ib3R0b206IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnBsLXNtLTUsXFxyXFxuICAucHgtc20tNSB7XFxyXFxuICAgIHBhZGRpbmctbGVmdDogM3JlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubS1zbS1hdXRvIHtcXHJcXG4gICAgbWFyZ2luOiBhdXRvICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tdC1zbS1hdXRvLFxcclxcbiAgLm15LXNtLWF1dG8ge1xcclxcbiAgICBtYXJnaW4tdG9wOiBhdXRvICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tci1zbS1hdXRvLFxcclxcbiAgLm14LXNtLWF1dG8ge1xcclxcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG8gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1iLXNtLWF1dG8sXFxyXFxuICAubXktc20tYXV0byB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IGF1dG8gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1sLXNtLWF1dG8sXFxyXFxuICAubXgtc20tYXV0byB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvICFpbXBvcnRhbnQ7IH0gfVxcclxcbkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkge1xcclxcbiAgLm0tbWQtMCB7XFxyXFxuICAgIG1hcmdpbjogMCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubXQtbWQtMCxcXHJcXG4gIC5teS1tZC0wIHtcXHJcXG4gICAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubXItbWQtMCxcXHJcXG4gIC5teC1tZC0wIHtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tYi1tZC0wLFxcclxcbiAgLm15LW1kLTAge1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tbC1tZC0wLFxcclxcbiAgLm14LW1kLTAge1xcclxcbiAgICBtYXJnaW4tbGVmdDogMCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubS1tZC0xIHtcXHJcXG4gICAgbWFyZ2luOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tdC1tZC0xLFxcclxcbiAgLm15LW1kLTEge1xcclxcbiAgICBtYXJnaW4tdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tci1tZC0xLFxcclxcbiAgLm14LW1kLTEge1xcclxcbiAgICBtYXJnaW4tcmlnaHQ6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1iLW1kLTEsXFxyXFxuICAubXktbWQtMSB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1sLW1kLTEsXFxyXFxuICAubXgtbWQtMSB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tLW1kLTIge1xcclxcbiAgICBtYXJnaW46IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubXQtbWQtMixcXHJcXG4gIC5teS1tZC0yIHtcXHJcXG4gICAgbWFyZ2luLXRvcDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tci1tZC0yLFxcclxcbiAgLm14LW1kLTIge1xcclxcbiAgICBtYXJnaW4tcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubWItbWQtMixcXHJcXG4gIC5teS1tZC0yIHtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMC41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tbC1tZC0yLFxcclxcbiAgLm14LW1kLTIge1xcclxcbiAgICBtYXJnaW4tbGVmdDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tLW1kLTMge1xcclxcbiAgICBtYXJnaW46IDFyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm10LW1kLTMsXFxyXFxuICAubXktbWQtMyB7XFxyXFxuICAgIG1hcmdpbi10b3A6IDFyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1yLW1kLTMsXFxyXFxuICAubXgtbWQtMyB7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogMXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubWItbWQtMyxcXHJcXG4gIC5teS1tZC0zIHtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubWwtbWQtMyxcXHJcXG4gIC5teC1tZC0zIHtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDFyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm0tbWQtNCB7XFxyXFxuICAgIG1hcmdpbjogMS41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tdC1tZC00LFxcclxcbiAgLm15LW1kLTQge1xcclxcbiAgICBtYXJnaW4tdG9wOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1yLW1kLTQsXFxyXFxuICAubXgtbWQtNCB7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogMS41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tYi1tZC00LFxcclxcbiAgLm15LW1kLTQge1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1sLW1kLTQsXFxyXFxuICAubXgtbWQtNCB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm0tbWQtNSB7XFxyXFxuICAgIG1hcmdpbjogM3JlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubXQtbWQtNSxcXHJcXG4gIC5teS1tZC01IHtcXHJcXG4gICAgbWFyZ2luLXRvcDogM3JlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubXItbWQtNSxcXHJcXG4gIC5teC1tZC01IHtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiAzcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tYi1tZC01LFxcclxcbiAgLm15LW1kLTUge1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAzcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tbC1tZC01LFxcclxcbiAgLm14LW1kLTUge1xcclxcbiAgICBtYXJnaW4tbGVmdDogM3JlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucC1tZC0wIHtcXHJcXG4gICAgcGFkZGluZzogMCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHQtbWQtMCxcXHJcXG4gIC5weS1tZC0wIHtcXHJcXG4gICAgcGFkZGluZy10b3A6IDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnByLW1kLTAsXFxyXFxuICAucHgtbWQtMCB7XFxyXFxuICAgIHBhZGRpbmctcmlnaHQ6IDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnBiLW1kLTAsXFxyXFxuICAucHktbWQtMCB7XFxyXFxuICAgIHBhZGRpbmctYm90dG9tOiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wbC1tZC0wLFxcclxcbiAgLnB4LW1kLTAge1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnAtbWQtMSB7XFxyXFxuICAgIHBhZGRpbmc6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnB0LW1kLTEsXFxyXFxuICAucHktbWQtMSB7XFxyXFxuICAgIHBhZGRpbmctdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wci1tZC0xLFxcclxcbiAgLnB4LW1kLTEge1xcclxcbiAgICBwYWRkaW5nLXJpZ2h0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wYi1tZC0xLFxcclxcbiAgLnB5LW1kLTEge1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucGwtbWQtMSxcXHJcXG4gIC5weC1tZC0xIHtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wLW1kLTIge1xcclxcbiAgICBwYWRkaW5nOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnB0LW1kLTIsXFxyXFxuICAucHktbWQtMiB7XFxyXFxuICAgIHBhZGRpbmctdG9wOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnByLW1kLTIsXFxyXFxuICAucHgtbWQtMiB7XFxyXFxuICAgIHBhZGRpbmctcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucGItbWQtMixcXHJcXG4gIC5weS1tZC0yIHtcXHJcXG4gICAgcGFkZGluZy1ib3R0b206IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucGwtbWQtMixcXHJcXG4gIC5weC1tZC0yIHtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiAwLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnAtbWQtMyB7XFxyXFxuICAgIHBhZGRpbmc6IDFyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnB0LW1kLTMsXFxyXFxuICAucHktbWQtMyB7XFxyXFxuICAgIHBhZGRpbmctdG9wOiAxcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wci1tZC0zLFxcclxcbiAgLnB4LW1kLTMge1xcclxcbiAgICBwYWRkaW5nLXJpZ2h0OiAxcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wYi1tZC0zLFxcclxcbiAgLnB5LW1kLTMge1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogMXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucGwtbWQtMyxcXHJcXG4gIC5weC1tZC0zIHtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wLW1kLTQge1xcclxcbiAgICBwYWRkaW5nOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnB0LW1kLTQsXFxyXFxuICAucHktbWQtNCB7XFxyXFxuICAgIHBhZGRpbmctdG9wOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnByLW1kLTQsXFxyXFxuICAucHgtbWQtNCB7XFxyXFxuICAgIHBhZGRpbmctcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucGItbWQtNCxcXHJcXG4gIC5weS1tZC00IHtcXHJcXG4gICAgcGFkZGluZy1ib3R0b206IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucGwtbWQtNCxcXHJcXG4gIC5weC1tZC00IHtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnAtbWQtNSB7XFxyXFxuICAgIHBhZGRpbmc6IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnB0LW1kLTUsXFxyXFxuICAucHktbWQtNSB7XFxyXFxuICAgIHBhZGRpbmctdG9wOiAzcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wci1tZC01LFxcclxcbiAgLnB4LW1kLTUge1xcclxcbiAgICBwYWRkaW5nLXJpZ2h0OiAzcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wYi1tZC01LFxcclxcbiAgLnB5LW1kLTUge1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogM3JlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucGwtbWQtNSxcXHJcXG4gIC5weC1tZC01IHtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiAzcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tLW1kLWF1dG8ge1xcclxcbiAgICBtYXJnaW46IGF1dG8gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm10LW1kLWF1dG8sXFxyXFxuICAubXktbWQtYXV0byB7XFxyXFxuICAgIG1hcmdpbi10b3A6IGF1dG8gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1yLW1kLWF1dG8sXFxyXFxuICAubXgtbWQtYXV0byB7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogYXV0byAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubWItbWQtYXV0byxcXHJcXG4gIC5teS1tZC1hdXRvIHtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogYXV0byAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubWwtbWQtYXV0byxcXHJcXG4gIC5teC1tZC1hdXRvIHtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG8gIWltcG9ydGFudDsgfSB9XFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDk5MnB4KSB7XFxyXFxuICAubS1sZy0wIHtcXHJcXG4gICAgbWFyZ2luOiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tdC1sZy0wLFxcclxcbiAgLm15LWxnLTAge1xcclxcbiAgICBtYXJnaW4tdG9wOiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tci1sZy0wLFxcclxcbiAgLm14LWxnLTAge1xcclxcbiAgICBtYXJnaW4tcmlnaHQ6IDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1iLWxnLTAsXFxyXFxuICAubXktbGctMCB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1sLWxnLTAsXFxyXFxuICAubXgtbGctMCB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tLWxnLTEge1xcclxcbiAgICBtYXJnaW46IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm10LWxnLTEsXFxyXFxuICAubXktbGctMSB7XFxyXFxuICAgIG1hcmdpbi10b3A6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1yLWxnLTEsXFxyXFxuICAubXgtbGctMSB7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubWItbGctMSxcXHJcXG4gIC5teS1sZy0xIHtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubWwtbGctMSxcXHJcXG4gIC5teC1sZy0xIHtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm0tbGctMiB7XFxyXFxuICAgIG1hcmdpbjogMC41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tdC1sZy0yLFxcclxcbiAgLm15LWxnLTIge1xcclxcbiAgICBtYXJnaW4tdG9wOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1yLWxnLTIsXFxyXFxuICAubXgtbGctMiB7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tYi1sZy0yLFxcclxcbiAgLm15LWxnLTIge1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1sLWxnLTIsXFxyXFxuICAubXgtbGctMiB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAwLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm0tbGctMyB7XFxyXFxuICAgIG1hcmdpbjogMXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubXQtbGctMyxcXHJcXG4gIC5teS1sZy0zIHtcXHJcXG4gICAgbWFyZ2luLXRvcDogMXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubXItbGctMyxcXHJcXG4gIC5teC1sZy0zIHtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiAxcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tYi1sZy0zLFxcclxcbiAgLm15LWxnLTMge1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tbC1sZy0zLFxcclxcbiAgLm14LWxnLTMge1xcclxcbiAgICBtYXJnaW4tbGVmdDogMXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubS1sZy00IHtcXHJcXG4gICAgbWFyZ2luOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm10LWxnLTQsXFxyXFxuICAubXktbGctNCB7XFxyXFxuICAgIG1hcmdpbi10b3A6IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubXItbGctNCxcXHJcXG4gIC5teC1sZy00IHtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiAxLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1iLWxnLTQsXFxyXFxuICAubXktbGctNCB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubWwtbGctNCxcXHJcXG4gIC5teC1sZy00IHtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubS1sZy01IHtcXHJcXG4gICAgbWFyZ2luOiAzcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tdC1sZy01LFxcclxcbiAgLm15LWxnLTUge1xcclxcbiAgICBtYXJnaW4tdG9wOiAzcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tci1sZy01LFxcclxcbiAgLm14LWxnLTUge1xcclxcbiAgICBtYXJnaW4tcmlnaHQ6IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1iLWxnLTUsXFxyXFxuICAubXktbGctNSB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1sLWxnLTUsXFxyXFxuICAubXgtbGctNSB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAzcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wLWxnLTAge1xcclxcbiAgICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wdC1sZy0wLFxcclxcbiAgLnB5LWxnLTAge1xcclxcbiAgICBwYWRkaW5nLXRvcDogMCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHItbGctMCxcXHJcXG4gIC5weC1sZy0wIHtcXHJcXG4gICAgcGFkZGluZy1yaWdodDogMCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucGItbGctMCxcXHJcXG4gIC5weS1sZy0wIHtcXHJcXG4gICAgcGFkZGluZy1ib3R0b206IDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnBsLWxnLTAsXFxyXFxuICAucHgtbGctMCB7XFxyXFxuICAgIHBhZGRpbmctbGVmdDogMCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucC1sZy0xIHtcXHJcXG4gICAgcGFkZGluZzogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHQtbGctMSxcXHJcXG4gIC5weS1sZy0xIHtcXHJcXG4gICAgcGFkZGluZy10b3A6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnByLWxnLTEsXFxyXFxuICAucHgtbGctMSB7XFxyXFxuICAgIHBhZGRpbmctcmlnaHQ6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnBiLWxnLTEsXFxyXFxuICAucHktbGctMSB7XFxyXFxuICAgIHBhZGRpbmctYm90dG9tOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wbC1sZy0xLFxcclxcbiAgLnB4LWxnLTEge1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnAtbGctMiB7XFxyXFxuICAgIHBhZGRpbmc6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHQtbGctMixcXHJcXG4gIC5weS1sZy0yIHtcXHJcXG4gICAgcGFkZGluZy10b3A6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHItbGctMixcXHJcXG4gIC5weC1sZy0yIHtcXHJcXG4gICAgcGFkZGluZy1yaWdodDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wYi1sZy0yLFxcclxcbiAgLnB5LWxnLTIge1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogMC41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wbC1sZy0yLFxcclxcbiAgLnB4LWxnLTIge1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucC1sZy0zIHtcXHJcXG4gICAgcGFkZGluZzogMXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHQtbGctMyxcXHJcXG4gIC5weS1sZy0zIHtcXHJcXG4gICAgcGFkZGluZy10b3A6IDFyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnByLWxnLTMsXFxyXFxuICAucHgtbGctMyB7XFxyXFxuICAgIHBhZGRpbmctcmlnaHQ6IDFyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnBiLWxnLTMsXFxyXFxuICAucHktbGctMyB7XFxyXFxuICAgIHBhZGRpbmctYm90dG9tOiAxcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wbC1sZy0zLFxcclxcbiAgLnB4LWxnLTMge1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDFyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnAtbGctNCB7XFxyXFxuICAgIHBhZGRpbmc6IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHQtbGctNCxcXHJcXG4gIC5weS1sZy00IHtcXHJcXG4gICAgcGFkZGluZy10b3A6IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHItbGctNCxcXHJcXG4gIC5weC1sZy00IHtcXHJcXG4gICAgcGFkZGluZy1yaWdodDogMS41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wYi1sZy00LFxcclxcbiAgLnB5LWxnLTQge1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogMS41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wbC1sZy00LFxcclxcbiAgLnB4LWxnLTQge1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucC1sZy01IHtcXHJcXG4gICAgcGFkZGluZzogM3JlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHQtbGctNSxcXHJcXG4gIC5weS1sZy01IHtcXHJcXG4gICAgcGFkZGluZy10b3A6IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnByLWxnLTUsXFxyXFxuICAucHgtbGctNSB7XFxyXFxuICAgIHBhZGRpbmctcmlnaHQ6IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnBiLWxnLTUsXFxyXFxuICAucHktbGctNSB7XFxyXFxuICAgIHBhZGRpbmctYm90dG9tOiAzcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wbC1sZy01LFxcclxcbiAgLnB4LWxnLTUge1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm0tbGctYXV0byB7XFxyXFxuICAgIG1hcmdpbjogYXV0byAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubXQtbGctYXV0byxcXHJcXG4gIC5teS1sZy1hdXRvIHtcXHJcXG4gICAgbWFyZ2luLXRvcDogYXV0byAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubXItbGctYXV0byxcXHJcXG4gIC5teC1sZy1hdXRvIHtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tYi1sZy1hdXRvLFxcclxcbiAgLm15LWxnLWF1dG8ge1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiBhdXRvICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tbC1sZy1hdXRvLFxcclxcbiAgLm14LWxnLWF1dG8ge1xcclxcbiAgICBtYXJnaW4tbGVmdDogYXV0byAhaW1wb3J0YW50OyB9IH1cXHJcXG5AbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KSB7XFxyXFxuICAubS14bC0wIHtcXHJcXG4gICAgbWFyZ2luOiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tdC14bC0wLFxcclxcbiAgLm15LXhsLTAge1xcclxcbiAgICBtYXJnaW4tdG9wOiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tci14bC0wLFxcclxcbiAgLm14LXhsLTAge1xcclxcbiAgICBtYXJnaW4tcmlnaHQ6IDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1iLXhsLTAsXFxyXFxuICAubXkteGwtMCB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1sLXhsLTAsXFxyXFxuICAubXgteGwtMCB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tLXhsLTEge1xcclxcbiAgICBtYXJnaW46IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm10LXhsLTEsXFxyXFxuICAubXkteGwtMSB7XFxyXFxuICAgIG1hcmdpbi10b3A6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1yLXhsLTEsXFxyXFxuICAubXgteGwtMSB7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubWIteGwtMSxcXHJcXG4gIC5teS14bC0xIHtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubWwteGwtMSxcXHJcXG4gIC5teC14bC0xIHtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm0teGwtMiB7XFxyXFxuICAgIG1hcmdpbjogMC41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tdC14bC0yLFxcclxcbiAgLm15LXhsLTIge1xcclxcbiAgICBtYXJnaW4tdG9wOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1yLXhsLTIsXFxyXFxuICAubXgteGwtMiB7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tYi14bC0yLFxcclxcbiAgLm15LXhsLTIge1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1sLXhsLTIsXFxyXFxuICAubXgteGwtMiB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAwLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm0teGwtMyB7XFxyXFxuICAgIG1hcmdpbjogMXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubXQteGwtMyxcXHJcXG4gIC5teS14bC0zIHtcXHJcXG4gICAgbWFyZ2luLXRvcDogMXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubXIteGwtMyxcXHJcXG4gIC5teC14bC0zIHtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiAxcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tYi14bC0zLFxcclxcbiAgLm15LXhsLTMge1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tbC14bC0zLFxcclxcbiAgLm14LXhsLTMge1xcclxcbiAgICBtYXJnaW4tbGVmdDogMXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubS14bC00IHtcXHJcXG4gICAgbWFyZ2luOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm10LXhsLTQsXFxyXFxuICAubXkteGwtNCB7XFxyXFxuICAgIG1hcmdpbi10b3A6IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubXIteGwtNCxcXHJcXG4gIC5teC14bC00IHtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiAxLjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1iLXhsLTQsXFxyXFxuICAubXkteGwtNCB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubWwteGwtNCxcXHJcXG4gIC5teC14bC00IHtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubS14bC01IHtcXHJcXG4gICAgbWFyZ2luOiAzcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tdC14bC01LFxcclxcbiAgLm15LXhsLTUge1xcclxcbiAgICBtYXJnaW4tdG9wOiAzcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tci14bC01LFxcclxcbiAgLm14LXhsLTUge1xcclxcbiAgICBtYXJnaW4tcmlnaHQ6IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1iLXhsLTUsXFxyXFxuICAubXkteGwtNSB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm1sLXhsLTUsXFxyXFxuICAubXgteGwtNSB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAzcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wLXhsLTAge1xcclxcbiAgICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wdC14bC0wLFxcclxcbiAgLnB5LXhsLTAge1xcclxcbiAgICBwYWRkaW5nLXRvcDogMCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHIteGwtMCxcXHJcXG4gIC5weC14bC0wIHtcXHJcXG4gICAgcGFkZGluZy1yaWdodDogMCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucGIteGwtMCxcXHJcXG4gIC5weS14bC0wIHtcXHJcXG4gICAgcGFkZGluZy1ib3R0b206IDAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnBsLXhsLTAsXFxyXFxuICAucHgteGwtMCB7XFxyXFxuICAgIHBhZGRpbmctbGVmdDogMCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucC14bC0xIHtcXHJcXG4gICAgcGFkZGluZzogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHQteGwtMSxcXHJcXG4gIC5weS14bC0xIHtcXHJcXG4gICAgcGFkZGluZy10b3A6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnByLXhsLTEsXFxyXFxuICAucHgteGwtMSB7XFxyXFxuICAgIHBhZGRpbmctcmlnaHQ6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnBiLXhsLTEsXFxyXFxuICAucHkteGwtMSB7XFxyXFxuICAgIHBhZGRpbmctYm90dG9tOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wbC14bC0xLFxcclxcbiAgLnB4LXhsLTEge1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnAteGwtMiB7XFxyXFxuICAgIHBhZGRpbmc6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHQteGwtMixcXHJcXG4gIC5weS14bC0yIHtcXHJcXG4gICAgcGFkZGluZy10b3A6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHIteGwtMixcXHJcXG4gIC5weC14bC0yIHtcXHJcXG4gICAgcGFkZGluZy1yaWdodDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wYi14bC0yLFxcclxcbiAgLnB5LXhsLTIge1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogMC41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wbC14bC0yLFxcclxcbiAgLnB4LXhsLTIge1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucC14bC0zIHtcXHJcXG4gICAgcGFkZGluZzogMXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHQteGwtMyxcXHJcXG4gIC5weS14bC0zIHtcXHJcXG4gICAgcGFkZGluZy10b3A6IDFyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnByLXhsLTMsXFxyXFxuICAucHgteGwtMyB7XFxyXFxuICAgIHBhZGRpbmctcmlnaHQ6IDFyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnBiLXhsLTMsXFxyXFxuICAucHkteGwtMyB7XFxyXFxuICAgIHBhZGRpbmctYm90dG9tOiAxcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wbC14bC0zLFxcclxcbiAgLnB4LXhsLTMge1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDFyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnAteGwtNCB7XFxyXFxuICAgIHBhZGRpbmc6IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHQteGwtNCxcXHJcXG4gIC5weS14bC00IHtcXHJcXG4gICAgcGFkZGluZy10b3A6IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHIteGwtNCxcXHJcXG4gIC5weC14bC00IHtcXHJcXG4gICAgcGFkZGluZy1yaWdodDogMS41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wYi14bC00LFxcclxcbiAgLnB5LXhsLTQge1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogMS41cmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wbC14bC00LFxcclxcbiAgLnB4LXhsLTQge1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucC14bC01IHtcXHJcXG4gICAgcGFkZGluZzogM3JlbSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAucHQteGwtNSxcXHJcXG4gIC5weS14bC01IHtcXHJcXG4gICAgcGFkZGluZy10b3A6IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnByLXhsLTUsXFxyXFxuICAucHgteGwtNSB7XFxyXFxuICAgIHBhZGRpbmctcmlnaHQ6IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnBiLXhsLTUsXFxyXFxuICAucHkteGwtNSB7XFxyXFxuICAgIHBhZGRpbmctYm90dG9tOiAzcmVtICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5wbC14bC01LFxcclxcbiAgLnB4LXhsLTUge1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDNyZW0gIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLm0teGwtYXV0byB7XFxyXFxuICAgIG1hcmdpbjogYXV0byAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubXQteGwtYXV0byxcXHJcXG4gIC5teS14bC1hdXRvIHtcXHJcXG4gICAgbWFyZ2luLXRvcDogYXV0byAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAubXIteGwtYXV0byxcXHJcXG4gIC5teC14bC1hdXRvIHtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tYi14bC1hdXRvLFxcclxcbiAgLm15LXhsLWF1dG8ge1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiBhdXRvICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC5tbC14bC1hdXRvLFxcclxcbiAgLm14LXhsLWF1dG8ge1xcclxcbiAgICBtYXJnaW4tbGVmdDogYXV0byAhaW1wb3J0YW50OyB9IH1cXHJcXG4udGV4dC1qdXN0aWZ5IHtcXHJcXG4gIHRleHQtYWxpZ246IGp1c3RpZnkgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi50ZXh0LW5vd3JhcCB7XFxyXFxuICB3aGl0ZS1zcGFjZTogbm93cmFwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4udGV4dC10cnVuY2F0ZSB7XFxyXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxyXFxuICB3aGl0ZS1zcGFjZTogbm93cmFwOyB9XFxyXFxuXFxyXFxuLnRleHQtbGVmdCB7XFxyXFxuICB0ZXh0LWFsaWduOiBsZWZ0ICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4udGV4dC1yaWdodCB7XFxyXFxuICB0ZXh0LWFsaWduOiByaWdodCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLnRleHQtY2VudGVyIHtcXHJcXG4gIHRleHQtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDU3NnB4KSB7XFxyXFxuICAudGV4dC1zbS1sZWZ0IHtcXHJcXG4gICAgdGV4dC1hbGlnbjogbGVmdCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAudGV4dC1zbS1yaWdodCB7XFxyXFxuICAgIHRleHQtYWxpZ246IHJpZ2h0ICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC50ZXh0LXNtLWNlbnRlciB7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50OyB9IH1cXHJcXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXHJcXG4gIC50ZXh0LW1kLWxlZnQge1xcclxcbiAgICB0ZXh0LWFsaWduOiBsZWZ0ICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4gIC50ZXh0LW1kLXJpZ2h0IHtcXHJcXG4gICAgdGV4dC1hbGlnbjogcmlnaHQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnRleHQtbWQtY2VudGVyIHtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7IH0gfVxcclxcbkBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xcclxcbiAgLnRleHQtbGctbGVmdCB7XFxyXFxuICAgIHRleHQtYWxpZ246IGxlZnQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnRleHQtbGctcmlnaHQge1xcclxcbiAgICB0ZXh0LWFsaWduOiByaWdodCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAudGV4dC1sZy1jZW50ZXIge1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDsgfSB9XFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDEyMDBweCkge1xcclxcbiAgLnRleHQteGwtbGVmdCB7XFxyXFxuICAgIHRleHQtYWxpZ246IGxlZnQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbiAgLnRleHQteGwtcmlnaHQge1xcclxcbiAgICB0ZXh0LWFsaWduOiByaWdodCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuICAudGV4dC14bC1jZW50ZXIge1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDsgfSB9XFxyXFxuLnRleHQtbG93ZXJjYXNlIHtcXHJcXG4gIHRleHQtdHJhbnNmb3JtOiBsb3dlcmNhc2UgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi50ZXh0LXVwcGVyY2FzZSB7XFxyXFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4udGV4dC1jYXBpdGFsaXplIHtcXHJcXG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4uZm9udC13ZWlnaHQtbGlnaHQge1xcclxcbiAgZm9udC13ZWlnaHQ6IDMwMCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmZvbnQtd2VpZ2h0LW5vcm1hbCB7XFxyXFxuICBmb250LXdlaWdodDogbm9ybWFsICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4uZm9udC13ZWlnaHQtYm9sZCB7XFxyXFxuICBmb250LXdlaWdodDogYm9sZCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLmZvbnQtaXRhbGljIHtcXHJcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYyAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLnRleHQtd2hpdGUge1xcclxcbiAgY29sb3I6ICNmZmYgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi50ZXh0LXByaW1hcnkge1xcclxcbiAgY29sb3I6ICMwMDdiZmYgIWltcG9ydGFudDsgfVxcclxcblxcclxcbmEudGV4dC1wcmltYXJ5OmZvY3VzLCBhLnRleHQtcHJpbWFyeTpob3ZlciB7XFxyXFxuICBjb2xvcjogIzAwNjJjYyAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLnRleHQtc2Vjb25kYXJ5IHtcXHJcXG4gIGNvbG9yOiAjODY4ZTk2ICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG5hLnRleHQtc2Vjb25kYXJ5OmZvY3VzLCBhLnRleHQtc2Vjb25kYXJ5OmhvdmVyIHtcXHJcXG4gIGNvbG9yOiAjNmM3NTdkICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4udGV4dC1zdWNjZXNzIHtcXHJcXG4gIGNvbG9yOiAjMjhhNzQ1ICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG5hLnRleHQtc3VjY2Vzczpmb2N1cywgYS50ZXh0LXN1Y2Nlc3M6aG92ZXIge1xcclxcbiAgY29sb3I6ICMxZTdlMzQgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi50ZXh0LWluZm8ge1xcclxcbiAgY29sb3I6ICMxN2EyYjggIWltcG9ydGFudDsgfVxcclxcblxcclxcbmEudGV4dC1pbmZvOmZvY3VzLCBhLnRleHQtaW5mbzpob3ZlciB7XFxyXFxuICBjb2xvcjogIzExN2E4YiAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLnRleHQtd2FybmluZyB7XFxyXFxuICBjb2xvcjogI2ZmYzEwNyAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuYS50ZXh0LXdhcm5pbmc6Zm9jdXMsIGEudGV4dC13YXJuaW5nOmhvdmVyIHtcXHJcXG4gIGNvbG9yOiAjZDM5ZTAwICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4udGV4dC1kYW5nZXIge1xcclxcbiAgY29sb3I6ICNkYzM1NDUgIWltcG9ydGFudDsgfVxcclxcblxcclxcbmEudGV4dC1kYW5nZXI6Zm9jdXMsIGEudGV4dC1kYW5nZXI6aG92ZXIge1xcclxcbiAgY29sb3I6ICNiZDIxMzAgIWltcG9ydGFudDsgfVxcclxcblxcclxcbi50ZXh0LWxpZ2h0IHtcXHJcXG4gIGNvbG9yOiAjZjhmOWZhICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG5hLnRleHQtbGlnaHQ6Zm9jdXMsIGEudGV4dC1saWdodDpob3ZlciB7XFxyXFxuICBjb2xvcjogI2RhZTBlNSAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLnRleHQtZGFyayB7XFxyXFxuICBjb2xvcjogIzM0M2E0MCAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuYS50ZXh0LWRhcms6Zm9jdXMsIGEudGV4dC1kYXJrOmhvdmVyIHtcXHJcXG4gIGNvbG9yOiAjMWQyMTI0ICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4udGV4dC1tdXRlZCB7XFxyXFxuICBjb2xvcjogIzg2OGU5NiAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLnRleHQtaGlkZSB7XFxyXFxuICBmb250OiAwLzAgYTtcXHJcXG4gIGNvbG9yOiB0cmFuc3BhcmVudDtcXHJcXG4gIHRleHQtc2hhZG93OiBub25lO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxuICBib3JkZXI6IDA7IH1cXHJcXG5cXHJcXG4udmlzaWJsZSB7XFxyXFxuICB2aXNpYmlsaXR5OiB2aXNpYmxlICFpbXBvcnRhbnQ7IH1cXHJcXG5cXHJcXG4uaW52aXNpYmxlIHtcXHJcXG4gIHZpc2liaWxpdHk6IGhpZGRlbiAhaW1wb3J0YW50OyB9XFxyXFxuXFxyXFxuLyoqKlxcclxcbiNGMkMxMDBcXHJcXG4jRkI0OTNBXFxyXFxuIzFDMDIwM1xcclxcbiNFMDg5NTVcXHJcXG4qKi9cXHJcXG5ib2R5IHtcXHJcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXHJcXG4gIGNvbG9yOiAjMDAwOyB9XFxyXFxuXFxyXFxuYSwgYnV0dG9uLCBpbnB1dCB7XFxyXFxuICAtd2Via2l0LXRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2U7XFxyXFxuICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlOyB9XFxyXFxuXFxyXFxuc2VjdGlvbiB7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAyLjVyZW07IH1cXHJcXG5cXHJcXG4ubm8tbWIge1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMDsgfVxcclxcblxcclxcbmEge1xcclxcbiAgY29sb3I6ICNGQjQ5M0E7IH1cXHJcXG4gIGE6aG92ZXIsIGE6Zm9jdXMge1xcclxcbiAgICBjb2xvcjogI2ZhMWIwODsgfVxcclxcblxcclxcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIC5oMSwgLmgyLCAuaDMsIC5oNCwgLmg1LCAuaDYge1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMS41cmVtOyB9XFxyXFxuXFxyXFxuLmF2Zy1tLXRvcCB7XFxyXFxuICBtYXJnaW4tdG9wOiA0MHB4OyB9XFxyXFxuXFxyXFxuLmZvcm0tY29udHJvbCB7XFxyXFxuICBib3JkZXItY29sb3I6ICNmNGJiM2E7IH1cXHJcXG4gIC5mb3JtLWNvbnRyb2w6Zm9jdXMge1xcclxcbiAgICBib3JkZXItY29sb3I6ICNlZWE5MGQ7IH1cXHJcXG5cXHJcXG4uYnRuLXByaW1hcnkge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y0YmIzYTtcXHJcXG4gIGJvcmRlci1jb2xvcjogI2Y0YmIzYTsgfVxcclxcbiAgLmJ0bi1wcmltYXJ5OmhvdmVyLCAuYnRuLXByaW1hcnk6Zm9jdXMsIC5idG4tcHJpbWFyeTphY3RpdmUsIC5idG4tcHJpbWFyeS5hY3RpdmUge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkI0OTNBO1xcclxcbiAgICBib3JkZXItY29sb3I6ICNGQjQ5M0E7IH1cXHJcXG5cXHJcXG4uY29udGFpbmVyIHtcXHJcXG4gIHBhZGRpbmctbGVmdDogMjVweDtcXHJcXG4gIHBhZGRpbmctcmlnaHQ6IDI1cHg7IH1cXHJcXG5cXHJcXG4uYmctY292ZXIge1xcclxcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxyXFxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7IH1cXHJcXG5cXHJcXG4uZGFyay1iZyB7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmYzMTM1O1xcclxcbiAgY29sb3I6ICNmZmY7IH1cXHJcXG5cXHJcXG4ubm8tc3R5bGUge1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbiAgcGFkZGluZzogMDtcXHJcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7IH1cXHJcXG5cXHJcXG4ucGFnZS1saW5rIHtcXHJcXG4gIGNvbG9yOiAjRkI0OTNBOyB9XFxyXFxuICAucGFnZS1saW5rOmZvY3VzLCAucGFnZS1saW5rOmhvdmVyIHtcXHJcXG4gICAgY29sb3I6ICNGQjQ5M0E7IH1cXHJcXG5cXHJcXG4ucGFnZS1pdGVtLmFjdGl2ZSAucGFnZS1saW5rIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNGQjQ5M0E7XFxyXFxuICBib3JkZXItY29sb3I6ICNGQjQ5M0E7IH1cXHJcXG5cXHJcXG4ucGFkZGluZy10YiB7XFxyXFxuICBwYWRkaW5nOiAzMHB4IDA7IH1cXHJcXG5cXHJcXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXHJcXG4gIC5jb250YWluZXIge1xcclxcbiAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4O1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDE1cHg7IH1cXHJcXG5cXHJcXG4gIC53LW1lZGl1bSB7XFxyXFxuICAgIG1heC13aWR0aDogNzQwcHg7IH1cXHJcXG5cXHJcXG4gIC5hdmctbS10b3Age1xcclxcbiAgICBtYXJnaW4tdG9wOiA2MHB4OyB9IH1cXHJcXG5oZWFkZXIgPiAuY29udGFpbmVyIHtcXHJcXG4gIHBhZGRpbmctdG9wOiAxNXB4O1xcclxcbiAgcGFkZGluZy1ib3R0b206IDE1cHg7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cXHJcXG5cXHJcXG4ubmF2YmFyIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyZjMxMzU7XFxyXFxuICBwYWRkaW5nLWxlZnQ6IDI1cHg7XFxyXFxuICBwYWRkaW5nLXJpZ2h0OiAyNXB4OyB9XFxyXFxuXFxyXFxuLm5hdmJhci1kYXJrIC5uYXZiYXItbmF2IC5uYXYtbGluayB7XFxyXFxuICBjb2xvcjogI2ZmZjsgfVxcclxcbiAgLm5hdmJhci1kYXJrIC5uYXZiYXItbmF2IC5uYXYtbGluazpob3ZlciwgLm5hdmJhci1kYXJrIC5uYXZiYXItbmF2IC5uYXYtbGluazpmb2N1cyB7XFxyXFxuICAgIGNvbG9yOiAjZjRiYjNhOyB9XFxyXFxuICAubmF2YmFyLWRhcmsgLm5hdmJhci1uYXYgLm5hdi1saW5rLmFjdGl2ZSB7XFxyXFxuICAgIGJvcmRlci10b3A6IDJweCBzb2xpZCAjZjRiYjNhOyB9XFxyXFxuXFxyXFxuZm9vdGVyIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyZjMxMzU7XFxyXFxuICBwYWRkaW5nOiA0MHB4IDA7XFxyXFxuICBjb2xvcjogIzk5OTk5OTsgfVxcclxcbiAgZm9vdGVyIHNwYW4ge1xcclxcbiAgICBkaXNwbGF5OiBibG9jaztcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyOyB9XFxyXFxuICBmb290ZXIgYSB7XFxyXFxuICAgIG1hcmdpbjogMCAxcmVtO1xcclxcbiAgICBjb2xvcjogIzc3Nzc3NzsgfVxcclxcbiAgICBmb290ZXIgYTpob3ZlciwgZm9vdGVyIGE6Zm9jdXMge1xcclxcbiAgICAgIGNvbG9yOiAjYjNiM2IzO1xcclxcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxcclxcblxcclxcbi5zb2NpYWwtbGlua3Mge1xcclxcbiAgbWFyZ2luOiAxcmVtIDA7XFxyXFxuICBmb250LXNpemU6IDEuNHJlbTsgfVxcclxcblxcclxcbi5zaGFyZS1zb2NpYWwge1xcclxcbiAgY3Vyc29yOiBwb2ludGVyOyB9XFxyXFxuICAuc2hhcmUtc29jaWFsIC5kcm9wZG93bi10b2dnbGUge1xcclxcbiAgICBtYXJnaW46IDAgYXV0bztcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQ7XFxyXFxuICAgIHdpZHRoOiAycmVtO1xcclxcbiAgICBoZWlnaHQ6IDJyZW07XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAycmVtOyB9XFxyXFxuICAgIC5zaGFyZS1zb2NpYWwgLmRyb3Bkb3duLXRvZ2dsZTo6YWZ0ZXIge1xcclxcbiAgICAgIGRpc3BsYXk6IG5vbmU7IH1cXHJcXG4gIC5zaGFyZS1zb2NpYWwgLmRyb3Bkb3duLW1lbnUge1xcclxcbiAgICBmb250LXNpemU6IDIwcHg7IH1cXHJcXG5cXHJcXG4vKioqKiogaG9tZSBwYWdlKioqKi9cXHJcXG4ucGFnZS1ob21lIGgzIHtcXHJcXG4gIGZvbnQtc2l6ZTogMS41cmVtOyB9XFxyXFxuXFxyXFxuLmJhbm5lciB7XFxyXFxuICBwYWRkaW5nOiA4MHB4IDA7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNWY1O1xcclxcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9pbWFnZXMvYmFubmVyLmpwZyk7IH1cXHJcXG4gIC5iYW5uZXIgcCB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMS41cmVtOyB9XFxyXFxuXFxyXFxuLnNlYXJjaC1mb3JtIHtcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxcclxcbiAgLnNlYXJjaC1mb3JtIC5mb3JtLWNvbnRyb2wge1xcclxcbiAgICBwYWRkaW5nLXJpZ2h0OiA3MHB4OyB9XFxyXFxuICAgIC5zZWFyY2gtZm9ybSAuZm9ybS1jb250cm9sOmZvY3VzIHtcXHJcXG4gICAgICBib3gtc2hhZG93OiAwIDEwcHggNDBweCAwIHJnYmEoMCwgMCwgMCwgMC4xKTsgfVxcclxcbiAgLnNlYXJjaC1mb3JtIC5idG4ge1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHJpZ2h0OiAycHg7XFxyXFxuICAgIHRvcDogMnB4O1xcclxcbiAgICBoZWlnaHQ6IDQ0cHg7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAwcHg7IH1cXHJcXG4gIC5zZWFyY2gtZm9ybS5pbm5lciAuZm9ybS1jb250cm9sOmZvY3VzIHtcXHJcXG4gICAgYm94LXNoYWRvdzogbm9uZTsgfVxcclxcbiAgLnNlYXJjaC1mb3JtLmlubmVyIC5idG4ge1xcclxcbiAgICBoZWlnaHQ6IDM0cHg7IH1cXHJcXG5cXHJcXG4uc3R1ZHktbG9jYXRpb25zIC53cmFwIHtcXHJcXG4gIG1hcmdpbi10b3A6IDFyZW07XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNWY1OyB9XFxyXFxuLnN0dWR5LWxvY2F0aW9ucyAudGh1bWJuYWlsIHtcXHJcXG4gIG1pbi1oZWlnaHQ6IDI1MHB4O1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTsgfVxcclxcbi5zdHVkeS1sb2NhdGlvbnMgLmNvcHkge1xcclxcbiAgcGFkZGluZzogMXJlbTsgfVxcclxcblxcclxcbi5hcnRpY2xlcyxcXHJcXG4ubGV2ZWxzIHtcXHJcXG4gIHBhZGRpbmc6IDIuNXJlbSAwIC41cmVtOyB9XFxyXFxuXFxyXFxuLmFydGljbGVzIGFydGljbGUge1xcclxcbiAgY29sb3I6IGluaXRpYWw7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcclxcbiAgcGFkZGluZzogMjBweDtcXHJcXG4gIGJvcmRlci1ib3R0b206IDVweCBzb2xpZCAjOTk5OTk5O1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMnJlbTsgfVxcclxcblxcclxcbi5sZXZlbHMge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTsgfVxcclxcbiAgLmxldmVscyAuY29sLW1kLTYge1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAycmVtOyB9XFxyXFxuXFxyXFxuLnRlc3QtYmxvY2sge1xcclxcbiAgYm9yZGVyOiAxcHggc29saWQgI2Y1ZjVmNTtcXHJcXG4gIHBhZGRpbmc6IDFyZW07XFxyXFxuICBtYXJnaW4tYm90dG9tOiAxLjVyZW07IH1cXHJcXG5cXHJcXG4vKioqKioqKiBVbml2ZXJzaXRpZXMgKHNlYXJjaCkgKioqKioqKioqKi9cXHJcXG4uc2VhcmNoLWJhbm5lciB7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjRiYjNhOyB9XFxyXFxuXFxyXFxuLnNlYXJjaC1maWx0ZXIge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTsgfVxcclxcblxcclxcbiN1bml2ZXJzaXRpZXMgaDMge1xcclxcbiAgZm9udC1zaXplOiAxLjI1cmVtOyB9XFxyXFxuI3VuaXZlcnNpdGllcyAud3JhcHBlciB7XFxyXFxuICBtYXJnaW46IDAgMCA0MHB4O1xcclxcbiAgYm9yZGVyOiAxcHggc29saWQgI2Y1ZjVmNTtcXHJcXG4gIHBhZGRpbmc6IDEuNXJlbTtcXHJcXG4gIGJveC1zaGFkb3c6IDAgMHB4IDIwcHggMCByZ2JhKDExNiwgMTE2LCAxMTYsIDAuMSk7IH1cXHJcXG4jdW5pdmVyc2l0aWVzIC5sb2dvIHtcXHJcXG4gIHdpZHRoOiAxMDBweDtcXHJcXG4gIGhlaWdodDogMTAwcHg7XFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCAjZjVmNWY1O1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXHJcXG4gIG92ZXJmbG93OiBoaWRkZW47IH1cXHJcXG4jdW5pdmVyc2l0aWVzIGFkZHJlc3Mge1xcclxcbiAgY29sb3I6ICM5OTk5OTk7XFxyXFxuICBtYXJnaW4tdG9wOiA1cHg7IH1cXHJcXG4jdW5pdmVyc2l0aWVzIC5mZWF0dXJlIHtcXHJcXG4gIGNvbG9yOiAjNzc3Nzc3OyB9XFxyXFxuI3VuaXZlcnNpdGllcyAucmFua2luZ3Mgc3Ryb25nIHtcXHJcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gIG1hcmdpbi1ib3R0b206IDVweDtcXHJcXG4gIGNvbG9yOiAjZjRiYjNhOyB9XFxyXFxuI3VuaXZlcnNpdGllcyAuZmEge1xcclxcbiAgbWFyZ2luLXJpZ2h0OiAxNXB4OyB9XFxyXFxuXFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XFxyXFxuICBzZWN0aW9uIHtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogNHJlbTsgfVxcclxcblxcclxcbiAgaGVhZGVyID4gLmNvbnRhaW5lciB7XFxyXFxuICAgIHRleHQtYWxpZ246IGxlZnQ7IH1cXHJcXG5cXHJcXG4gIC5uYXZiYXIge1xcclxcbiAgICBwYWRkaW5nOiAwIDFyZW07IH1cXHJcXG5cXHJcXG4gIC5uYXYtbGluayB7XFxyXFxuICAgIHBhZGRpbmc6IDFyZW0gMnJlbTsgfVxcclxcblxcclxcbiAgZm9vdGVyIHtcXHJcXG4gICAgcGFkZGluZzogNjBweCAwOyB9XFxyXFxuICAgIGZvb3RlciBwIHtcXHJcXG4gICAgICBmbG9hdDogbGVmdDsgfVxcclxcblxcclxcbiAgLmZ0LWxpbmtzLFxcclxcbiAgLnNvY2lhbC1saW5rcyB7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfVxcclxcblxcclxcbiAgLnNvY2lhbC1saW5rcyB7XFxyXFxuICAgIG1hcmdpbjogMDsgfVxcclxcblxcclxcbiAgLnNoYXJlLXNvY2lhbCB7XFxyXFxuICAgIG1hcmdpbi10b3A6IDJyZW07IH1cXHJcXG4gICAgLnNoYXJlLXNvY2lhbCAuZHJvcGRvd24tdG9nZ2xlIHtcXHJcXG4gICAgICBtYXJnaW46IDA7IH1cXHJcXG5cXHJcXG4gIC8qKiogSG9tZSBwYWdlICoqKioqKioqKi9cXHJcXG4gIC5iYW5uZXIge1xcclxcbiAgICBtaW4taGVpZ2h0OiA1NTBweDsgfVxcclxcbiAgICAuYmFubmVyIGgxIHtcXHJcXG4gICAgICBtYXJnaW4tdG9wOiA2MHB4OyB9XFxyXFxuXFxyXFxuICAuc3R1ZHktbG9jYXRpb25zIC53cmFwIHtcXHJcXG4gICAgbWFyZ2luLXRvcDogMnJlbTsgfVxcclxcbiAgICAuc3R1ZHktbG9jYXRpb25zIC53cmFwIC5jb2wtbWQtNSB7XFxyXFxuICAgICAgcGFkZGluZy1yaWdodDogMDsgfVxcclxcbiAgLnN0dWR5LWxvY2F0aW9ucyAudGh1bWJuYWlsIHtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMDsgfVxcclxcblxcclxcbiAgLmFydGljbGVzLFxcclxcbiAgLmxldmVscyB7XFxyXFxuICAgIHBhZGRpbmc6IDRyZW0gMCAyLjVyZW07IH1cXHJcXG5cXHJcXG4gIC8qKioqKioqKioqKioqKiogVW5pdmVyc2l0aWVzIChzZWFyY2gpICoqKioqKioqKioqKioqL1xcclxcbiAgLmNvdmVyLTUwIHtcXHJcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9pbWFnZXMvc2VhcmNoLWJhbm5lci5qcGcpO1xcclxcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XFxyXFxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgcmlnaHQ6IDA7XFxyXFxuICAgIHRvcDogMDtcXHJcXG4gICAgYm90dG9tOiAwO1xcclxcbiAgICB3aWR0aDogNTAlOyB9XFxyXFxuXFxyXFxuICAjdW5pdmVyc2l0aWVzIC53cmFwcGVyIHtcXHJcXG4gICAgbWFyZ2luOiAwIDEwcHggNjBweDsgfSB9XFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDk5MnB4KSB7XFxyXFxuICAubmF2YmFyLWV4cGFuZC1sZyAubmF2YmFyLW5hdiAubmF2LWxpbmsge1xcclxcbiAgICBwYWRkaW5nOiAxcmVtIDJyZW07IH0gfVxcclxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIhLi9wdWJsaWMvc3R5bGVzL3NpdGUuY3NzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcblx0dmFyIGxpc3QgPSBbXTtcblxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXHRcdFx0aWYoaXRlbVsyXSkge1xuXHRcdFx0XHRyZXR1cm4gXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBjb250ZW50ICsgXCJ9XCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY29udGVudDtcblx0XHRcdH1cblx0XHR9KS5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG5cdFx0fVxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG5cdHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblx0aWYgKCFjc3NNYXBwaW5nKSB7XG5cdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdH1cblxuXHRpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG5cdFx0dmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0XHRcdHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLydcblx0XHR9KTtcblxuXHRcdHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuXHR9XG5cblx0cmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn1cblxuLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblx0dmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG5cdHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG5cblx0cmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXG4vLyBtb2R1bGUgaWQgPSA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbihzZWxlY3Rvcikge1xuXHRcdGlmICh0eXBlb2YgbWVtb1tzZWxlY3Rvcl0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGZuLmNhbGwodGhpcywgc2VsZWN0b3IpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmIChzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bc2VsZWN0b3JdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3NlbGVjdG9yXVxuXHR9O1xufSkoZnVuY3Rpb24gKHRhcmdldCkge1xuXHRyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpXG59KTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcblx0aWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8gKyBcIiBcIiArIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qIVxuICogQm9vdHN0cmFwIHY0LjAuMC1iZXRhIChodHRwczovL2dldGJvb3RzdHJhcC5jb20pXG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE3IFRoZSBCb290c3RyYXAgQXV0aG9ycyAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2dyYXBocy9jb250cmlidXRvcnMpXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICovXG5cbmlmICh0eXBlb2YgalF1ZXJ5ID09PSAndW5kZWZpbmVkJykge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnkuIGpRdWVyeSBtdXN0IGJlIGluY2x1ZGVkIGJlZm9yZSBCb290c3RyYXBcXCdzIEphdmFTY3JpcHQuJylcbn1cblxuKGZ1bmN0aW9uICgkKSB7XG4gIHZhciB2ZXJzaW9uID0gJC5mbi5qcXVlcnkuc3BsaXQoJyAnKVswXS5zcGxpdCgnLicpXG4gIGlmICgodmVyc2lvblswXSA8IDIgJiYgdmVyc2lvblsxXSA8IDkpIHx8ICh2ZXJzaW9uWzBdID09IDEgJiYgdmVyc2lvblsxXSA9PSA5ICYmIHZlcnNpb25bMl0gPCAxKSB8fCAodmVyc2lvblswXSA+PSA0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGF0IGxlYXN0IGpRdWVyeSB2MS45LjEgYnV0IGxlc3MgdGhhbiB2NC4wLjAnKVxuICB9XG59KShqUXVlcnkpO1xuXG4oZnVuY3Rpb24gKCkge1xudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMC4wLWJldGEpOiB1dGlsLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG52YXIgVXRpbCA9IGZ1bmN0aW9uICgkKSB7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBQcml2YXRlIFRyYW5zaXRpb25FbmQgSGVscGVyc1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIHRyYW5zaXRpb24gPSBmYWxzZTtcblxuICB2YXIgTUFYX1VJRCA9IDEwMDAwMDA7XG5cbiAgdmFyIFRyYW5zaXRpb25FbmRFdmVudCA9IHtcbiAgICBXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgTW96VHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnLFxuICAgIE9UcmFuc2l0aW9uOiAnb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQnLFxuICAgIHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJ1xuXG4gICAgLy8gc2hvdXRvdXQgQW5ndXNDcm9sbCAoaHR0cHM6Ly9nb28uZ2wvcHh3UUdwKVxuICB9O2Z1bmN0aW9uIHRvVHlwZShvYmopIHtcbiAgICByZXR1cm4ge30udG9TdHJpbmcuY2FsbChvYmopLm1hdGNoKC9cXHMoW2EtekEtWl0rKS8pWzFdLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0VsZW1lbnQob2JqKSB7XG4gICAgcmV0dXJuIChvYmpbMF0gfHwgb2JqKS5ub2RlVHlwZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNwZWNpYWxUcmFuc2l0aW9uRW5kRXZlbnQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJpbmRUeXBlOiB0cmFuc2l0aW9uLmVuZCxcbiAgICAgIGRlbGVnYXRlVHlwZTogdHJhbnNpdGlvbi5lbmQsXG4gICAgICBoYW5kbGU6IGZ1bmN0aW9uIGhhbmRsZShldmVudCkge1xuICAgICAgICBpZiAoJChldmVudC50YXJnZXQpLmlzKHRoaXMpKSB7XG4gICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbkVuZFRlc3QoKSB7XG4gICAgaWYgKHdpbmRvdy5RVW5pdCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Jvb3RzdHJhcCcpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBUcmFuc2l0aW9uRW5kRXZlbnQpIHtcbiAgICAgIGlmIChlbC5zdHlsZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZW5kOiBUcmFuc2l0aW9uRW5kRXZlbnRbbmFtZV1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kRW11bGF0b3IoZHVyYXRpb24pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuXG4gICAgJCh0aGlzKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZChfdGhpcyk7XG4gICAgICB9XG4gICAgfSwgZHVyYXRpb24pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uRW5kU3VwcG9ydCgpIHtcbiAgICB0cmFuc2l0aW9uID0gdHJhbnNpdGlvbkVuZFRlc3QoKTtcblxuICAgICQuZm4uZW11bGF0ZVRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kRW11bGF0b3I7XG5cbiAgICBpZiAoVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSkge1xuICAgICAgJC5ldmVudC5zcGVjaWFsW1V0aWwuVFJBTlNJVElPTl9FTkRdID0gZ2V0U3BlY2lhbFRyYW5zaXRpb25FbmRFdmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBQdWJsaWMgVXRpbCBBcGlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIFV0aWwgPSB7XG5cbiAgICBUUkFOU0lUSU9OX0VORDogJ2JzVHJhbnNpdGlvbkVuZCcsXG5cbiAgICBnZXRVSUQ6IGZ1bmN0aW9uIGdldFVJRChwcmVmaXgpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICAgICAgcHJlZml4ICs9IH5+KE1hdGgucmFuZG9tKCkgKiBNQVhfVUlEKTsgLy8gXCJ+flwiIGFjdHMgbGlrZSBhIGZhc3RlciBNYXRoLmZsb29yKCkgaGVyZVxuICAgICAgfSB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSk7XG4gICAgICByZXR1cm4gcHJlZml4O1xuICAgIH0sXG4gICAgZ2V0U2VsZWN0b3JGcm9tRWxlbWVudDogZnVuY3Rpb24gZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10YXJnZXQnKTtcbiAgICAgIGlmICghc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09ICcjJykge1xuICAgICAgICBzZWxlY3RvciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJykgfHwgJyc7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciAkc2VsZWN0b3IgPSAkKHNlbGVjdG9yKTtcbiAgICAgICAgcmV0dXJuICRzZWxlY3Rvci5sZW5ndGggPiAwID8gc2VsZWN0b3IgOiBudWxsO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSxcbiAgICByZWZsb3c6IGZ1bmN0aW9uIHJlZmxvdyhlbGVtZW50KSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgfSxcbiAgICB0cmlnZ2VyVHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gdHJpZ2dlclRyYW5zaXRpb25FbmQoZWxlbWVudCkge1xuICAgICAgJChlbGVtZW50KS50cmlnZ2VyKHRyYW5zaXRpb24uZW5kKTtcbiAgICB9LFxuICAgIHN1cHBvcnRzVHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkge1xuICAgICAgcmV0dXJuIEJvb2xlYW4odHJhbnNpdGlvbik7XG4gICAgfSxcbiAgICB0eXBlQ2hlY2tDb25maWc6IGZ1bmN0aW9uIHR5cGVDaGVja0NvbmZpZyhjb21wb25lbnROYW1lLCBjb25maWcsIGNvbmZpZ1R5cGVzKSB7XG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBjb25maWdUeXBlcykge1xuICAgICAgICBpZiAoY29uZmlnVHlwZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgdmFyIGV4cGVjdGVkVHlwZXMgPSBjb25maWdUeXBlc1twcm9wZXJ0eV07XG4gICAgICAgICAgdmFyIHZhbHVlID0gY29uZmlnW3Byb3BlcnR5XTtcbiAgICAgICAgICB2YXIgdmFsdWVUeXBlID0gdmFsdWUgJiYgaXNFbGVtZW50KHZhbHVlKSA/ICdlbGVtZW50JyA6IHRvVHlwZSh2YWx1ZSk7XG5cbiAgICAgICAgICBpZiAoIW5ldyBSZWdFeHAoZXhwZWN0ZWRUeXBlcykudGVzdCh2YWx1ZVR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoY29tcG9uZW50TmFtZS50b1VwcGVyQ2FzZSgpICsgJzogJyArICgnT3B0aW9uIFwiJyArIHByb3BlcnR5ICsgJ1wiIHByb3ZpZGVkIHR5cGUgXCInICsgdmFsdWVUeXBlICsgJ1wiICcpICsgKCdidXQgZXhwZWN0ZWQgdHlwZSBcIicgKyBleHBlY3RlZFR5cGVzICsgJ1wiLicpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgc2V0VHJhbnNpdGlvbkVuZFN1cHBvcnQoKTtcblxuICByZXR1cm4gVXRpbDtcbn0oalF1ZXJ5KTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4wLjAtYmV0YSk6IGFsZXJ0LmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG52YXIgQWxlcnQgPSBmdW5jdGlvbiAoJCkge1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSA9ICdhbGVydCc7XG4gIHZhciBWRVJTSU9OID0gJzQuMC4wLWJldGEnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMuYWxlcnQnO1xuICB2YXIgRVZFTlRfS0VZID0gJy4nICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV07XG4gIHZhciBUUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwO1xuXG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBESVNNSVNTOiAnW2RhdGEtZGlzbWlzcz1cImFsZXJ0XCJdJ1xuICB9O1xuXG4gIHZhciBFdmVudCA9IHtcbiAgICBDTE9TRTogJ2Nsb3NlJyArIEVWRU5UX0tFWSxcbiAgICBDTE9TRUQ6ICdjbG9zZWQnICsgRVZFTlRfS0VZLFxuICAgIENMSUNLX0RBVEFfQVBJOiAnY2xpY2snICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG4gIH07XG5cbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBBTEVSVDogJ2FsZXJ0JyxcbiAgICBGQURFOiAnZmFkZScsXG4gICAgU0hPVzogJ3Nob3cnXG5cbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcbiAgdmFyIEFsZXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFsZXJ0KGVsZW1lbnQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBbGVydCk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgIH1cblxuICAgIC8vIGdldHRlcnNcblxuICAgIC8vIHB1YmxpY1xuXG4gICAgQWxlcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gY2xvc2UoZWxlbWVudCkge1xuICAgICAgZWxlbWVudCA9IGVsZW1lbnQgfHwgdGhpcy5fZWxlbWVudDtcblxuICAgICAgdmFyIHJvb3RFbGVtZW50ID0gdGhpcy5fZ2V0Um9vdEVsZW1lbnQoZWxlbWVudCk7XG4gICAgICB2YXIgY3VzdG9tRXZlbnQgPSB0aGlzLl90cmlnZ2VyQ2xvc2VFdmVudChyb290RWxlbWVudCk7XG5cbiAgICAgIGlmIChjdXN0b21FdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlbW92ZUVsZW1lbnQocm9vdEVsZW1lbnQpO1xuICAgIH07XG5cbiAgICBBbGVydC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIHByaXZhdGVcblxuICAgIEFsZXJ0LnByb3RvdHlwZS5fZ2V0Um9vdEVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0Um9vdEVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpO1xuICAgICAgdmFyIHBhcmVudCA9IGZhbHNlO1xuXG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgcGFyZW50ID0gJChzZWxlY3RvcilbMF07XG4gICAgICB9XG5cbiAgICAgIGlmICghcGFyZW50KSB7XG4gICAgICAgIHBhcmVudCA9ICQoZWxlbWVudCkuY2xvc2VzdCgnLicgKyBDbGFzc05hbWUuQUxFUlQpWzBdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyZW50O1xuICAgIH07XG5cbiAgICBBbGVydC5wcm90b3R5cGUuX3RyaWdnZXJDbG9zZUV2ZW50ID0gZnVuY3Rpb24gX3RyaWdnZXJDbG9zZUV2ZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBjbG9zZUV2ZW50ID0gJC5FdmVudChFdmVudC5DTE9TRSk7XG5cbiAgICAgICQoZWxlbWVudCkudHJpZ2dlcihjbG9zZUV2ZW50KTtcbiAgICAgIHJldHVybiBjbG9zZUV2ZW50O1xuICAgIH07XG5cbiAgICBBbGVydC5wcm90b3R5cGUuX3JlbW92ZUVsZW1lbnQgPSBmdW5jdGlvbiBfcmVtb3ZlRWxlbWVudChlbGVtZW50KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgJChlbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgIGlmICghVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSB8fCAhJChlbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgICAgdGhpcy5fZGVzdHJveUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJChlbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuX2Rlc3Ryb3lFbGVtZW50KGVsZW1lbnQsIGV2ZW50KTtcbiAgICAgIH0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgIH07XG5cbiAgICBBbGVydC5wcm90b3R5cGUuX2Rlc3Ryb3lFbGVtZW50ID0gZnVuY3Rpb24gX2Rlc3Ryb3lFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICQoZWxlbWVudCkuZGV0YWNoKCkudHJpZ2dlcihFdmVudC5DTE9TRUQpLnJlbW92ZSgpO1xuICAgIH07XG5cbiAgICAvLyBzdGF0aWNcblxuICAgIEFsZXJ0Ll9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkZWxlbWVudCA9ICQodGhpcyk7XG4gICAgICAgIHZhciBkYXRhID0gJGVsZW1lbnQuZGF0YShEQVRBX0tFWSk7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBBbGVydCh0aGlzKTtcbiAgICAgICAgICAkZWxlbWVudC5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcgPT09ICdjbG9zZScpIHtcbiAgICAgICAgICBkYXRhW2NvbmZpZ10odGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBBbGVydC5faGFuZGxlRGlzbWlzcyA9IGZ1bmN0aW9uIF9oYW5kbGVEaXNtaXNzKGFsZXJ0SW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFsZXJ0SW5zdGFuY2UuY2xvc2UodGhpcyk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQWxlcnQsIG51bGwsIFt7XG4gICAgICBrZXk6ICdWRVJTSU9OJyxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQWxlcnQ7XG4gIH0oKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuRElTTUlTUywgQWxlcnQuX2hhbmRsZURpc21pc3MobmV3IEFsZXJ0KCkpKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FXSA9IEFsZXJ0Ll9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBBbGVydDtcbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIEFsZXJ0Ll9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIEFsZXJ0O1xufShqUXVlcnkpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMC1iZXRhKTogYnV0dG9uLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG52YXIgQnV0dG9uID0gZnVuY3Rpb24gKCQpIHtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUgPSAnYnV0dG9uJztcbiAgdmFyIFZFUlNJT04gPSAnNC4wLjAtYmV0YSc7XG4gIHZhciBEQVRBX0tFWSA9ICdicy5idXR0b24nO1xuICB2YXIgRVZFTlRfS0VZID0gJy4nICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV07XG5cbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBBQ1RJVkU6ICdhY3RpdmUnLFxuICAgIEJVVFRPTjogJ2J0bicsXG4gICAgRk9DVVM6ICdmb2N1cydcbiAgfTtcblxuICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgREFUQV9UT0dHTEVfQ0FSUk9UOiAnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsXG4gICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJidXR0b25zXCJdJyxcbiAgICBJTlBVVDogJ2lucHV0JyxcbiAgICBBQ1RJVkU6ICcuYWN0aXZlJyxcbiAgICBCVVRUT046ICcuYnRuJ1xuICB9O1xuXG4gIHZhciBFdmVudCA9IHtcbiAgICBDTElDS19EQVRBX0FQSTogJ2NsaWNrJyArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSxcbiAgICBGT0NVU19CTFVSX0RBVEFfQVBJOiAnZm9jdXMnICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZICsgJyAnICsgKCdibHVyJyArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSlcblxuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuICB2YXIgQnV0dG9uID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJ1dHRvbihlbGVtZW50KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnV0dG9uKTtcblxuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgLy8gZ2V0dGVyc1xuXG4gICAgLy8gcHVibGljXG5cbiAgICBCdXR0b24ucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgIHZhciB0cmlnZ2VyQ2hhbmdlRXZlbnQgPSB0cnVlO1xuICAgICAgdmFyIGFkZEFyaWFQcmVzc2VkID0gdHJ1ZTtcbiAgICAgIHZhciByb290RWxlbWVudCA9ICQodGhpcy5fZWxlbWVudCkuY2xvc2VzdChTZWxlY3Rvci5EQVRBX1RPR0dMRSlbMF07XG5cbiAgICAgIGlmIChyb290RWxlbWVudCkge1xuICAgICAgICB2YXIgaW5wdXQgPSAkKHRoaXMuX2VsZW1lbnQpLmZpbmQoU2VsZWN0b3IuSU5QVVQpWzBdO1xuXG4gICAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICAgIGlmIChpbnB1dC50eXBlID09PSAncmFkaW8nKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuY2hlY2tlZCAmJiAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5BQ1RJVkUpKSB7XG4gICAgICAgICAgICAgIHRyaWdnZXJDaGFuZ2VFdmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSAkKHJvb3RFbGVtZW50KS5maW5kKFNlbGVjdG9yLkFDVElWRSlbMF07XG5cbiAgICAgICAgICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAkKGFjdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCkge1xuICAgICAgICAgICAgaWYgKGlucHV0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSB8fCByb290RWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgfHwgaW5wdXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpIHx8IHJvb3RFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gISQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICAgICAkKGlucHV0KS50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbnB1dC5mb2N1cygpO1xuICAgICAgICAgIGFkZEFyaWFQcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFkZEFyaWFQcmVzc2VkKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnLCAhJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuQUNUSVZFKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlRXZlbnQpIHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQnV0dG9uLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gc3RhdGljXG5cbiAgICBCdXR0b24uX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgQnV0dG9uKHRoaXMpO1xuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnID09PSAndG9nZ2xlJykge1xuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKEJ1dHRvbiwgbnVsbCwgW3tcbiAgICAgIGtleTogJ1ZFUlNJT04nLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCdXR0b247XG4gIH0oKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEVfQ0FSUk9ULCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgdmFyIGJ1dHRvbiA9IGV2ZW50LnRhcmdldDtcblxuICAgIGlmICghJChidXR0b24pLmhhc0NsYXNzKENsYXNzTmFtZS5CVVRUT04pKSB7XG4gICAgICBidXR0b24gPSAkKGJ1dHRvbikuY2xvc2VzdChTZWxlY3Rvci5CVVRUT04pO1xuICAgIH1cblxuICAgIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJChidXR0b24pLCAndG9nZ2xlJyk7XG4gIH0pLm9uKEV2ZW50LkZPQ1VTX0JMVVJfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFX0NBUlJPVCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIGJ1dHRvbiA9ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFNlbGVjdG9yLkJVVFRPTilbMF07XG4gICAgJChidXR0b24pLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5GT0NVUywgL15mb2N1cyhpbik/JC8udGVzdChldmVudC50eXBlKSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUVdID0gQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBCdXR0b247XG4gICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgIHJldHVybiBCdXR0b24uX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICByZXR1cm4gQnV0dG9uO1xufShqUXVlcnkpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMC1iZXRhKTogY2Fyb3VzZWwuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbnZhciBDYXJvdXNlbCA9IGZ1bmN0aW9uICgkKSB7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FID0gJ2Nhcm91c2VsJztcbiAgdmFyIFZFUlNJT04gPSAnNC4wLjAtYmV0YSc7XG4gIHZhciBEQVRBX0tFWSA9ICdicy5jYXJvdXNlbCc7XG4gIHZhciBFVkVOVF9LRVkgPSAnLicgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXTtcbiAgdmFyIFRSQU5TSVRJT05fRFVSQVRJT04gPSA2MDA7XG4gIHZhciBBUlJPV19MRUZUX0tFWUNPREUgPSAzNzsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgbGVmdCBhcnJvdyBrZXlcbiAgdmFyIEFSUk9XX1JJR0hUX0tFWUNPREUgPSAzOTsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgcmlnaHQgYXJyb3cga2V5XG4gIHZhciBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUID0gNTAwOyAvLyBUaW1lIGZvciBtb3VzZSBjb21wYXQgZXZlbnRzIHRvIGZpcmUgYWZ0ZXIgdG91Y2hcblxuICB2YXIgRGVmYXVsdCA9IHtcbiAgICBpbnRlcnZhbDogNTAwMCxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBzbGlkZTogZmFsc2UsXG4gICAgcGF1c2U6ICdob3ZlcicsXG4gICAgd3JhcDogdHJ1ZVxuICB9O1xuXG4gIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICBpbnRlcnZhbDogJyhudW1iZXJ8Ym9vbGVhbiknLFxuICAgIGtleWJvYXJkOiAnYm9vbGVhbicsXG4gICAgc2xpZGU6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAgICBwYXVzZTogJyhzdHJpbmd8Ym9vbGVhbiknLFxuICAgIHdyYXA6ICdib29sZWFuJ1xuICB9O1xuXG4gIHZhciBEaXJlY3Rpb24gPSB7XG4gICAgTkVYVDogJ25leHQnLFxuICAgIFBSRVY6ICdwcmV2JyxcbiAgICBMRUZUOiAnbGVmdCcsXG4gICAgUklHSFQ6ICdyaWdodCdcbiAgfTtcblxuICB2YXIgRXZlbnQgPSB7XG4gICAgU0xJREU6ICdzbGlkZScgKyBFVkVOVF9LRVksXG4gICAgU0xJRDogJ3NsaWQnICsgRVZFTlRfS0VZLFxuICAgIEtFWURPV046ICdrZXlkb3duJyArIEVWRU5UX0tFWSxcbiAgICBNT1VTRUVOVEVSOiAnbW91c2VlbnRlcicgKyBFVkVOVF9LRVksXG4gICAgTU9VU0VMRUFWRTogJ21vdXNlbGVhdmUnICsgRVZFTlRfS0VZLFxuICAgIFRPVUNIRU5EOiAndG91Y2hlbmQnICsgRVZFTlRfS0VZLFxuICAgIExPQURfREFUQV9BUEk6ICdsb2FkJyArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSxcbiAgICBDTElDS19EQVRBX0FQSTogJ2NsaWNrJyArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICB9O1xuXG4gIHZhciBDbGFzc05hbWUgPSB7XG4gICAgQ0FST1VTRUw6ICdjYXJvdXNlbCcsXG4gICAgQUNUSVZFOiAnYWN0aXZlJyxcbiAgICBTTElERTogJ3NsaWRlJyxcbiAgICBSSUdIVDogJ2Nhcm91c2VsLWl0ZW0tcmlnaHQnLFxuICAgIExFRlQ6ICdjYXJvdXNlbC1pdGVtLWxlZnQnLFxuICAgIE5FWFQ6ICdjYXJvdXNlbC1pdGVtLW5leHQnLFxuICAgIFBSRVY6ICdjYXJvdXNlbC1pdGVtLXByZXYnLFxuICAgIElURU06ICdjYXJvdXNlbC1pdGVtJ1xuICB9O1xuXG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBBQ1RJVkU6ICcuYWN0aXZlJyxcbiAgICBBQ1RJVkVfSVRFTTogJy5hY3RpdmUuY2Fyb3VzZWwtaXRlbScsXG4gICAgSVRFTTogJy5jYXJvdXNlbC1pdGVtJyxcbiAgICBORVhUX1BSRVY6ICcuY2Fyb3VzZWwtaXRlbS1uZXh0LCAuY2Fyb3VzZWwtaXRlbS1wcmV2JyxcbiAgICBJTkRJQ0FUT1JTOiAnLmNhcm91c2VsLWluZGljYXRvcnMnLFxuICAgIERBVEFfU0xJREU6ICdbZGF0YS1zbGlkZV0sIFtkYXRhLXNsaWRlLXRvXScsXG4gICAgREFUQV9SSURFOiAnW2RhdGEtcmlkZT1cImNhcm91c2VsXCJdJ1xuXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG4gIHZhciBDYXJvdXNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDYXJvdXNlbChlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDYXJvdXNlbCk7XG5cbiAgICAgIHRoaXMuX2l0ZW1zID0gbnVsbDtcbiAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSBudWxsO1xuXG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7XG5cbiAgICAgIHRoaXMudG91Y2hUaW1lb3V0ID0gbnVsbDtcblxuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gJChlbGVtZW50KVswXTtcbiAgICAgIHRoaXMuX2luZGljYXRvcnNFbGVtZW50ID0gJCh0aGlzLl9lbGVtZW50KS5maW5kKFNlbGVjdG9yLklORElDQVRPUlMpWzBdO1xuXG4gICAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIC8vIGdldHRlcnNcblxuICAgIC8vIHB1YmxpY1xuXG4gICAgQ2Fyb3VzZWwucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgaWYgKCF0aGlzLl9pc1NsaWRpbmcpIHtcbiAgICAgICAgdGhpcy5fc2xpZGUoRGlyZWN0aW9uLk5FWFQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDYXJvdXNlbC5wcm90b3R5cGUubmV4dFdoZW5WaXNpYmxlID0gZnVuY3Rpb24gbmV4dFdoZW5WaXNpYmxlKCkge1xuICAgICAgLy8gRG9uJ3QgY2FsbCBuZXh0IHdoZW4gdGhlIHBhZ2UgaXNuJ3QgdmlzaWJsZVxuICAgICAgaWYgKCFkb2N1bWVudC5oaWRkZW4pIHtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENhcm91c2VsLnByb3RvdHlwZS5wcmV2ID0gZnVuY3Rpb24gcHJldigpIHtcbiAgICAgIGlmICghdGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgIHRoaXMuX3NsaWRlKERpcmVjdGlvbi5QUkVWKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ2Fyb3VzZWwucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoZXZlbnQpIHtcbiAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgdGhpcy5faXNQYXVzZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoJCh0aGlzLl9lbGVtZW50KS5maW5kKFNlbGVjdG9yLk5FWFRfUFJFVilbMF0gJiYgVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSkge1xuICAgICAgICBVdGlsLnRyaWdnZXJUcmFuc2l0aW9uRW5kKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICB0aGlzLmN5Y2xlKHRydWUpO1xuICAgICAgfVxuXG4gICAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKTtcbiAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgICB9O1xuXG4gICAgQ2Fyb3VzZWwucHJvdG90eXBlLmN5Y2xlID0gZnVuY3Rpb24gY3ljbGUoZXZlbnQpIHtcbiAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgdGhpcy5faXNQYXVzZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2ludGVydmFsKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpO1xuICAgICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcuaW50ZXJ2YWwgJiYgIXRoaXMuX2lzUGF1c2VkKSB7XG4gICAgICAgIHRoaXMuX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA/IHRoaXMubmV4dFdoZW5WaXNpYmxlIDogdGhpcy5uZXh0KS5iaW5kKHRoaXMpLCB0aGlzLl9jb25maWcuaW50ZXJ2YWwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDYXJvdXNlbC5wcm90b3R5cGUudG8gPSBmdW5jdGlvbiB0byhpbmRleCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSAkKHRoaXMuX2VsZW1lbnQpLmZpbmQoU2VsZWN0b3IuQUNUSVZFX0lURU0pWzBdO1xuXG4gICAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgodGhpcy5fYWN0aXZlRWxlbWVudCk7XG5cbiAgICAgIGlmIChpbmRleCA+IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDEgfHwgaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2lzU2xpZGluZykge1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uZShFdmVudC5TTElELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMy50byhpbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChhY3RpdmVJbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICB0aGlzLmN5Y2xlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpcmVjdGlvbiA9IGluZGV4ID4gYWN0aXZlSW5kZXggPyBEaXJlY3Rpb24uTkVYVCA6IERpcmVjdGlvbi5QUkVWO1xuXG4gICAgICB0aGlzLl9zbGlkZShkaXJlY3Rpb24sIHRoaXMuX2l0ZW1zW2luZGV4XSk7XG4gICAgfTtcblxuICAgIENhcm91c2VsLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEVWRU5UX0tFWSk7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuXG4gICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XG4gICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSBudWxsO1xuICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIHByaXZhdGVcblxuICAgIENhcm91c2VsLnByb3RvdHlwZS5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9ICQuZXh0ZW5kKHt9LCBEZWZhdWx0LCBjb25maWcpO1xuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSk7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBDYXJvdXNlbC5wcm90b3R5cGUuX2FkZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcua2V5Ym9hcmQpIHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5LRVlET1dOLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM0Ll9rZXlkb3duKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcucGF1c2UgPT09ICdob3ZlcicpIHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5NT1VTRUVOVEVSLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM0LnBhdXNlKGV2ZW50KTtcbiAgICAgICAgfSkub24oRXZlbnQuTU9VU0VMRUFWRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNC5jeWNsZShldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgLy8gaWYgaXQncyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlLCBtb3VzZWVudGVyL2xlYXZlIGFyZSBmaXJlZCBhc1xuICAgICAgICAgIC8vIHBhcnQgb2YgdGhlIG1vdXNlIGNvbXBhdGliaWxpdHkgZXZlbnRzIG9uIGZpcnN0IHRhcCAtIHRoZSBjYXJvdXNlbFxuICAgICAgICAgIC8vIHdvdWxkIHN0b3AgY3ljbGluZyB1bnRpbCB1c2VyIHRhcHBlZCBvdXQgb2YgaXQ7XG4gICAgICAgICAgLy8gaGVyZSwgd2UgbGlzdGVuIGZvciB0b3VjaGVuZCwgZXhwbGljaXRseSBwYXVzZSB0aGUgY2Fyb3VzZWxcbiAgICAgICAgICAvLyAoYXMgaWYgaXQncyB0aGUgc2Vjb25kIHRpbWUgd2UgdGFwIG9uIGl0LCBtb3VzZWVudGVyIGNvbXBhdCBldmVudFxuICAgICAgICAgIC8vIGlzIE5PVCBmaXJlZCkgYW5kIGFmdGVyIGEgdGltZW91dCAodG8gYWxsb3cgZm9yIG1vdXNlIGNvbXBhdGliaWxpdHlcbiAgICAgICAgICAvLyBldmVudHMgdG8gZmlyZSkgd2UgZXhwbGljaXRseSByZXN0YXJ0IGN5Y2xpbmdcbiAgICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LlRPVUNIRU5ELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczQucGF1c2UoKTtcbiAgICAgICAgICAgIGlmIChfdGhpczQudG91Y2hUaW1lb3V0KSB7XG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpczQudG91Y2hUaW1lb3V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzNC50b3VjaFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXM0LmN5Y2xlKGV2ZW50KTtcbiAgICAgICAgICAgIH0sIFRPVUNIRVZFTlRfQ09NUEFUX1dBSVQgKyBfdGhpczQuX2NvbmZpZy5pbnRlcnZhbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ2Fyb3VzZWwucHJvdG90eXBlLl9rZXlkb3duID0gZnVuY3Rpb24gX2tleWRvd24oZXZlbnQpIHtcbiAgICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoZXZlbnQud2hpY2gpIHtcbiAgICAgICAgY2FzZSBBUlJPV19MRUZUX0tFWUNPREU6XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB0aGlzLnByZXYoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBUlJPV19SSUdIVF9LRVlDT0RFOlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDYXJvdXNlbC5wcm90b3R5cGUuX2dldEl0ZW1JbmRleCA9IGZ1bmN0aW9uIF9nZXRJdGVtSW5kZXgoZWxlbWVudCkge1xuICAgICAgdGhpcy5faXRlbXMgPSAkLm1ha2VBcnJheSgkKGVsZW1lbnQpLnBhcmVudCgpLmZpbmQoU2VsZWN0b3IuSVRFTSkpO1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zLmluZGV4T2YoZWxlbWVudCk7XG4gICAgfTtcblxuICAgIENhcm91c2VsLnByb3RvdHlwZS5fZ2V0SXRlbUJ5RGlyZWN0aW9uID0gZnVuY3Rpb24gX2dldEl0ZW1CeURpcmVjdGlvbihkaXJlY3Rpb24sIGFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgIHZhciBpc05leHREaXJlY3Rpb24gPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5ORVhUO1xuICAgICAgdmFyIGlzUHJldkRpcmVjdGlvbiA9IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLlBSRVY7XG4gICAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoYWN0aXZlRWxlbWVudCk7XG4gICAgICB2YXIgbGFzdEl0ZW1JbmRleCA9IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDE7XG4gICAgICB2YXIgaXNHb2luZ1RvV3JhcCA9IGlzUHJldkRpcmVjdGlvbiAmJiBhY3RpdmVJbmRleCA9PT0gMCB8fCBpc05leHREaXJlY3Rpb24gJiYgYWN0aXZlSW5kZXggPT09IGxhc3RJdGVtSW5kZXg7XG5cbiAgICAgIGlmIChpc0dvaW5nVG9XcmFwICYmICF0aGlzLl9jb25maWcud3JhcCkge1xuICAgICAgICByZXR1cm4gYWN0aXZlRWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdmFyIGRlbHRhID0gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uUFJFViA/IC0xIDogMTtcbiAgICAgIHZhciBpdGVtSW5kZXggPSAoYWN0aXZlSW5kZXggKyBkZWx0YSkgJSB0aGlzLl9pdGVtcy5sZW5ndGg7XG5cbiAgICAgIHJldHVybiBpdGVtSW5kZXggPT09IC0xID8gdGhpcy5faXRlbXNbdGhpcy5faXRlbXMubGVuZ3RoIC0gMV0gOiB0aGlzLl9pdGVtc1tpdGVtSW5kZXhdO1xuICAgIH07XG5cbiAgICBDYXJvdXNlbC5wcm90b3R5cGUuX3RyaWdnZXJTbGlkZUV2ZW50ID0gZnVuY3Rpb24gX3RyaWdnZXJTbGlkZUV2ZW50KHJlbGF0ZWRUYXJnZXQsIGV2ZW50RGlyZWN0aW9uTmFtZSkge1xuICAgICAgdmFyIHRhcmdldEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgdmFyIGZyb21JbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleCgkKHRoaXMuX2VsZW1lbnQpLmZpbmQoU2VsZWN0b3IuQUNUSVZFX0lURU0pWzBdKTtcbiAgICAgIHZhciBzbGlkZUV2ZW50ID0gJC5FdmVudChFdmVudC5TTElERSwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0LFxuICAgICAgICBkaXJlY3Rpb246IGV2ZW50RGlyZWN0aW9uTmFtZSxcbiAgICAgICAgZnJvbTogZnJvbUluZGV4LFxuICAgICAgICB0bzogdGFyZ2V0SW5kZXhcbiAgICAgIH0pO1xuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2xpZGVFdmVudCk7XG5cbiAgICAgIHJldHVybiBzbGlkZUV2ZW50O1xuICAgIH07XG5cbiAgICBDYXJvdXNlbC5wcm90b3R5cGUuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQgPSBmdW5jdGlvbiBfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChlbGVtZW50KSB7XG4gICAgICBpZiAodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpIHtcbiAgICAgICAgJCh0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCkuZmluZChTZWxlY3Rvci5BQ1RJVkUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuXG4gICAgICAgIHZhciBuZXh0SW5kaWNhdG9yID0gdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQuY2hpbGRyZW5bdGhpcy5fZ2V0SXRlbUluZGV4KGVsZW1lbnQpXTtcblxuICAgICAgICBpZiAobmV4dEluZGljYXRvcikge1xuICAgICAgICAgICQobmV4dEluZGljYXRvcikuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ2Fyb3VzZWwucHJvdG90eXBlLl9zbGlkZSA9IGZ1bmN0aW9uIF9zbGlkZShkaXJlY3Rpb24sIGVsZW1lbnQpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICB2YXIgYWN0aXZlRWxlbWVudCA9ICQodGhpcy5fZWxlbWVudCkuZmluZChTZWxlY3Rvci5BQ1RJVkVfSVRFTSlbMF07XG4gICAgICB2YXIgYWN0aXZlRWxlbWVudEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KGFjdGl2ZUVsZW1lbnQpO1xuICAgICAgdmFyIG5leHRFbGVtZW50ID0gZWxlbWVudCB8fCBhY3RpdmVFbGVtZW50ICYmIHRoaXMuX2dldEl0ZW1CeURpcmVjdGlvbihkaXJlY3Rpb24sIGFjdGl2ZUVsZW1lbnQpO1xuICAgICAgdmFyIG5leHRFbGVtZW50SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgobmV4dEVsZW1lbnQpO1xuICAgICAgdmFyIGlzQ3ljbGluZyA9IEJvb2xlYW4odGhpcy5faW50ZXJ2YWwpO1xuXG4gICAgICB2YXIgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSB2b2lkIDA7XG4gICAgICB2YXIgb3JkZXJDbGFzc05hbWUgPSB2b2lkIDA7XG4gICAgICB2YXIgZXZlbnREaXJlY3Rpb25OYW1lID0gdm9pZCAwO1xuXG4gICAgICBpZiAoZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uTkVYVCkge1xuICAgICAgICBkaXJlY3Rpb25hbENsYXNzTmFtZSA9IENsYXNzTmFtZS5MRUZUO1xuICAgICAgICBvcmRlckNsYXNzTmFtZSA9IENsYXNzTmFtZS5ORVhUO1xuICAgICAgICBldmVudERpcmVjdGlvbk5hbWUgPSBEaXJlY3Rpb24uTEVGVDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLlJJR0hUO1xuICAgICAgICBvcmRlckNsYXNzTmFtZSA9IENsYXNzTmFtZS5QUkVWO1xuICAgICAgICBldmVudERpcmVjdGlvbk5hbWUgPSBEaXJlY3Rpb24uUklHSFQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXh0RWxlbWVudCAmJiAkKG5leHRFbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuQUNUSVZFKSkge1xuICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2xpZGVFdmVudCA9IHRoaXMuX3RyaWdnZXJTbGlkZUV2ZW50KG5leHRFbGVtZW50LCBldmVudERpcmVjdGlvbk5hbWUpO1xuICAgICAgaWYgKHNsaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWFjdGl2ZUVsZW1lbnQgfHwgIW5leHRFbGVtZW50KSB7XG4gICAgICAgIC8vIHNvbWUgd2VpcmRuZXNzIGlzIGhhcHBlbmluZywgc28gd2UgYmFpbFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzU2xpZGluZyA9IHRydWU7XG5cbiAgICAgIGlmIChpc0N5Y2xpbmcpIHtcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KG5leHRFbGVtZW50KTtcblxuICAgICAgdmFyIHNsaWRFdmVudCA9ICQuRXZlbnQoRXZlbnQuU0xJRCwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBuZXh0RWxlbWVudCxcbiAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICAgIGZyb206IGFjdGl2ZUVsZW1lbnRJbmRleCxcbiAgICAgICAgdG86IG5leHRFbGVtZW50SW5kZXhcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSAmJiAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TTElERSkpIHtcblxuICAgICAgICAkKG5leHRFbGVtZW50KS5hZGRDbGFzcyhvcmRlckNsYXNzTmFtZSk7XG5cbiAgICAgICAgVXRpbC5yZWZsb3cobmV4dEVsZW1lbnQpO1xuXG4gICAgICAgICQoYWN0aXZlRWxlbWVudCkuYWRkQ2xhc3MoZGlyZWN0aW9uYWxDbGFzc05hbWUpO1xuICAgICAgICAkKG5leHRFbGVtZW50KS5hZGRDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG5cbiAgICAgICAgJChhY3RpdmVFbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICQobmV4dEVsZW1lbnQpLnJlbW92ZUNsYXNzKGRpcmVjdGlvbmFsQ2xhc3NOYW1lICsgJyAnICsgb3JkZXJDbGFzc05hbWUpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuXG4gICAgICAgICAgJChhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFICsgJyAnICsgb3JkZXJDbGFzc05hbWUgKyAnICcgKyBkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG5cbiAgICAgICAgICBfdGhpczUuX2lzU2xpZGluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJChfdGhpczUuX2VsZW1lbnQpLnRyaWdnZXIoc2xpZEV2ZW50KTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoVFJBTlNJVElPTl9EVVJBVElPTik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKGFjdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICAkKG5leHRFbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcblxuICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNsaWRFdmVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0N5Y2xpbmcpIHtcbiAgICAgICAgdGhpcy5jeWNsZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBzdGF0aWNcblxuICAgIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZKTtcbiAgICAgICAgdmFyIF9jb25maWcgPSAkLmV4dGVuZCh7fSwgRGVmYXVsdCwgJCh0aGlzKS5kYXRhKCkpO1xuXG4gICAgICAgIGlmICgodHlwZW9mIGNvbmZpZyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY29uZmlnKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgJC5leHRlbmQoX2NvbmZpZywgY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhY3Rpb24gPSB0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJyA/IGNvbmZpZyA6IF9jb25maWcuc2xpZGU7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBDYXJvdXNlbCh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgZGF0YS50byhjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKGRhdGFbYWN0aW9uXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicgKyBhY3Rpb24gKyAnXCInKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGF0YVthY3Rpb25dKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoX2NvbmZpZy5pbnRlcnZhbCkge1xuICAgICAgICAgIGRhdGEucGF1c2UoKTtcbiAgICAgICAgICBkYXRhLmN5Y2xlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBDYXJvdXNlbC5fZGF0YUFwaUNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIF9kYXRhQXBpQ2xpY2tIYW5kbGVyKGV2ZW50KSB7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7XG5cbiAgICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGFyZ2V0ID0gJChzZWxlY3RvcilbMF07XG5cbiAgICAgIGlmICghdGFyZ2V0IHx8ICEkKHRhcmdldCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkNBUk9VU0VMKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjb25maWcgPSAkLmV4dGVuZCh7fSwgJCh0YXJnZXQpLmRhdGEoKSwgJCh0aGlzKS5kYXRhKCkpO1xuICAgICAgdmFyIHNsaWRlSW5kZXggPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1zbGlkZS10bycpO1xuXG4gICAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgICBjb25maWcuaW50ZXJ2YWwgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQodGFyZ2V0KSwgY29uZmlnKTtcblxuICAgICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgICAgJCh0YXJnZXQpLmRhdGEoREFUQV9LRVkpLnRvKHNsaWRlSW5kZXgpO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ2Fyb3VzZWwsIG51bGwsIFt7XG4gICAgICBrZXk6ICdWRVJTSU9OJyxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdEZWZhdWx0JyxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ2Fyb3VzZWw7XG4gIH0oKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9TTElERSwgQ2Fyb3VzZWwuX2RhdGFBcGlDbGlja0hhbmRsZXIpO1xuXG4gICQod2luZG93KS5vbihFdmVudC5MT0FEX0RBVEFfQVBJLCBmdW5jdGlvbiAoKSB7XG4gICAgJChTZWxlY3Rvci5EQVRBX1JJREUpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRjYXJvdXNlbCA9ICQodGhpcyk7XG4gICAgICBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJGNhcm91c2VsLCAkY2Fyb3VzZWwuZGF0YSgpKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRV0gPSBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gQ2Fyb3VzZWw7XG4gICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgIHJldHVybiBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIHJldHVybiBDYXJvdXNlbDtcbn0oalF1ZXJ5KTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4wLjAtYmV0YSk6IGNvbGxhcHNlLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG52YXIgQ29sbGFwc2UgPSBmdW5jdGlvbiAoJCkge1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSA9ICdjb2xsYXBzZSc7XG4gIHZhciBWRVJTSU9OID0gJzQuMC4wLWJldGEnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMuY29sbGFwc2UnO1xuICB2YXIgRVZFTlRfS0VZID0gJy4nICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV07XG4gIHZhciBUUkFOU0lUSU9OX0RVUkFUSU9OID0gNjAwO1xuXG4gIHZhciBEZWZhdWx0ID0ge1xuICAgIHRvZ2dsZTogdHJ1ZSxcbiAgICBwYXJlbnQ6ICcnXG4gIH07XG5cbiAgdmFyIERlZmF1bHRUeXBlID0ge1xuICAgIHRvZ2dsZTogJ2Jvb2xlYW4nLFxuICAgIHBhcmVudDogJ3N0cmluZydcbiAgfTtcblxuICB2YXIgRXZlbnQgPSB7XG4gICAgU0hPVzogJ3Nob3cnICsgRVZFTlRfS0VZLFxuICAgIFNIT1dOOiAnc2hvd24nICsgRVZFTlRfS0VZLFxuICAgIEhJREU6ICdoaWRlJyArIEVWRU5UX0tFWSxcbiAgICBISURERU46ICdoaWRkZW4nICsgRVZFTlRfS0VZLFxuICAgIENMSUNLX0RBVEFfQVBJOiAnY2xpY2snICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG4gIH07XG5cbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBTSE9XOiAnc2hvdycsXG4gICAgQ09MTEFQU0U6ICdjb2xsYXBzZScsXG4gICAgQ09MTEFQU0lORzogJ2NvbGxhcHNpbmcnLFxuICAgIENPTExBUFNFRDogJ2NvbGxhcHNlZCdcbiAgfTtcblxuICB2YXIgRGltZW5zaW9uID0ge1xuICAgIFdJRFRIOiAnd2lkdGgnLFxuICAgIEhFSUdIVDogJ2hlaWdodCdcbiAgfTtcblxuICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgQUNUSVZFUzogJy5zaG93LCAuY29sbGFwc2luZycsXG4gICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXSdcblxuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuICB2YXIgQ29sbGFwc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29sbGFwc2UoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29sbGFwc2UpO1xuXG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSAkLm1ha2VBcnJheSgkKCdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtocmVmPVwiIycgKyBlbGVtZW50LmlkICsgJ1wiXSwnICsgKCdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtkYXRhLXRhcmdldD1cIiMnICsgZWxlbWVudC5pZCArICdcIl0nKSkpO1xuICAgICAgdmFyIHRhYlRvZ2dsZXMgPSAkKFNlbGVjdG9yLkRBVEFfVE9HR0xFKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFiVG9nZ2xlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZWxlbSA9IHRhYlRvZ2dsZXNbaV07XG4gICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtKTtcbiAgICAgICAgaWYgKHNlbGVjdG9yICE9PSBudWxsICYmICQoc2VsZWN0b3IpLmZpbHRlcihlbGVtZW50KS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhpcy5fdHJpZ2dlckFycmF5LnB1c2goZWxlbSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fcGFyZW50ID0gdGhpcy5fY29uZmlnLnBhcmVudCA/IHRoaXMuX2dldFBhcmVudCgpIDogbnVsbDtcblxuICAgICAgaWYgKCF0aGlzLl9jb25maWcucGFyZW50KSB7XG4gICAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl9lbGVtZW50LCB0aGlzLl90cmlnZ2VyQXJyYXkpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLnRvZ2dsZSkge1xuICAgICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGdldHRlcnNcblxuICAgIC8vIHB1YmxpY1xuXG4gICAgQ29sbGFwc2UucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgIGlmICgkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDb2xsYXBzZS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBhY3RpdmVzID0gdm9pZCAwO1xuICAgICAgdmFyIGFjdGl2ZXNEYXRhID0gdm9pZCAwO1xuXG4gICAgICBpZiAodGhpcy5fcGFyZW50KSB7XG4gICAgICAgIGFjdGl2ZXMgPSAkLm1ha2VBcnJheSgkKHRoaXMuX3BhcmVudCkuY2hpbGRyZW4oKS5jaGlsZHJlbihTZWxlY3Rvci5BQ1RJVkVTKSk7XG4gICAgICAgIGlmICghYWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgICAgICBhY3RpdmVzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWN0aXZlcykge1xuICAgICAgICBhY3RpdmVzRGF0YSA9ICQoYWN0aXZlcykuZGF0YShEQVRBX0tFWSk7XG4gICAgICAgIGlmIChhY3RpdmVzRGF0YSAmJiBhY3RpdmVzRGF0YS5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGFydEV2ZW50ID0gJC5FdmVudChFdmVudC5TSE9XKTtcbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzdGFydEV2ZW50KTtcbiAgICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZXMpIHtcbiAgICAgICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQoYWN0aXZlcyksICdoaWRlJyk7XG4gICAgICAgIGlmICghYWN0aXZlc0RhdGEpIHtcbiAgICAgICAgICAkKGFjdGl2ZXMpLmRhdGEoREFUQV9LRVksIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKTtcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gMDtcblxuICAgICAgaWYgKHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGgpIHtcbiAgICAgICAgJCh0aGlzLl90cmlnZ2VyQXJyYXkpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRUQpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKHRydWUpO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgJChfdGhpczYuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgICBfdGhpczYuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnO1xuXG4gICAgICAgIF90aGlzNi5zZXRUcmFuc2l0aW9uaW5nKGZhbHNlKTtcblxuICAgICAgICAkKF90aGlzNi5fZWxlbWVudCkudHJpZ2dlcihFdmVudC5TSE9XTik7XG4gICAgICB9O1xuXG4gICAgICBpZiAoIVV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkpIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2FwaXRhbGl6ZWREaW1lbnNpb24gPSBkaW1lbnNpb25bMF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSgxKTtcbiAgICAgIHZhciBzY3JvbGxTaXplID0gJ3Njcm9sbCcgKyBjYXBpdGFsaXplZERpbWVuc2lvbjtcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRSQU5TSVRJT05fRFVSQVRJT04pO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSB0aGlzLl9lbGVtZW50W3Njcm9sbFNpemVdICsgJ3B4JztcbiAgICB9O1xuXG4gICAgQ29sbGFwc2UucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgISQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXJ0RXZlbnQgPSAkLkV2ZW50KEV2ZW50LkhJREUpO1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHN0YXJ0RXZlbnQpO1xuICAgICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5fZ2V0RGltZW5zaW9uKCk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IHRoaXMuX2VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbZGltZW5zaW9uXSArICdweCc7XG5cbiAgICAgIFV0aWwucmVmbG93KHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgaWYgKHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgdHJpZ2dlciA9IHRoaXMuX3RyaWdnZXJBcnJheVtpXTtcbiAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodHJpZ2dlcik7XG4gICAgICAgICAgaWYgKHNlbGVjdG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgJGVsZW0gPSAkKHNlbGVjdG9yKTtcbiAgICAgICAgICAgIGlmICghJGVsZW0uaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgICAgICAgICQodHJpZ2dlcikuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFRCkuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKHRydWUpO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgX3RoaXM3LnNldFRyYW5zaXRpb25pbmcoZmFsc2UpO1xuICAgICAgICAkKF90aGlzNy5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNJTkcpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSkudHJpZ2dlcihFdmVudC5ISURERU4pO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gJyc7XG5cbiAgICAgIGlmICghVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSkge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUUkFOU0lUSU9OX0RVUkFUSU9OKTtcbiAgICB9O1xuXG4gICAgQ29sbGFwc2UucHJvdG90eXBlLnNldFRyYW5zaXRpb25pbmcgPSBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uaW5nKGlzVHJhbnNpdGlvbmluZykge1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gaXNUcmFuc2l0aW9uaW5nO1xuICAgIH07XG5cbiAgICBDb2xsYXBzZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuXG4gICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy5fcGFyZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fdHJpZ2dlckFycmF5ID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIHByaXZhdGVcblxuICAgIENvbGxhcHNlLnByb3RvdHlwZS5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9ICQuZXh0ZW5kKHt9LCBEZWZhdWx0LCBjb25maWcpO1xuICAgICAgY29uZmlnLnRvZ2dsZSA9IEJvb2xlYW4oY29uZmlnLnRvZ2dsZSk7IC8vIGNvZXJjZSBzdHJpbmcgdmFsdWVzXG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIENvbGxhcHNlLnByb3RvdHlwZS5fZ2V0RGltZW5zaW9uID0gZnVuY3Rpb24gX2dldERpbWVuc2lvbigpIHtcbiAgICAgIHZhciBoYXNXaWR0aCA9ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoRGltZW5zaW9uLldJRFRIKTtcbiAgICAgIHJldHVybiBoYXNXaWR0aCA/IERpbWVuc2lvbi5XSURUSCA6IERpbWVuc2lvbi5IRUlHSFQ7XG4gICAgfTtcblxuICAgIENvbGxhcHNlLnByb3RvdHlwZS5fZ2V0UGFyZW50ID0gZnVuY3Rpb24gX2dldFBhcmVudCgpIHtcbiAgICAgIHZhciBfdGhpczggPSB0aGlzO1xuXG4gICAgICB2YXIgcGFyZW50ID0gJCh0aGlzLl9jb25maWcucGFyZW50KVswXTtcbiAgICAgIHZhciBzZWxlY3RvciA9ICdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtkYXRhLXBhcmVudD1cIicgKyB0aGlzLl9jb25maWcucGFyZW50ICsgJ1wiXSc7XG5cbiAgICAgICQocGFyZW50KS5maW5kKHNlbGVjdG9yKS5lYWNoKGZ1bmN0aW9uIChpLCBlbGVtZW50KSB7XG4gICAgICAgIF90aGlzOC5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKENvbGxhcHNlLl9nZXRUYXJnZXRGcm9tRWxlbWVudChlbGVtZW50KSwgW2VsZW1lbnRdKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcGFyZW50O1xuICAgIH07XG5cbiAgICBDb2xsYXBzZS5wcm90b3R5cGUuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyA9IGZ1bmN0aW9uIF9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoZWxlbWVudCwgdHJpZ2dlckFycmF5KSB7XG4gICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICB2YXIgaXNPcGVuID0gJChlbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgICAgaWYgKHRyaWdnZXJBcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICAkKHRyaWdnZXJBcnJheSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFRCwgIWlzT3BlbikuYXR0cignYXJpYS1leHBhbmRlZCcsIGlzT3Blbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gc3RhdGljXG5cbiAgICBDb2xsYXBzZS5fZ2V0VGFyZ2V0RnJvbUVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0VGFyZ2V0RnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpO1xuICAgICAgcmV0dXJuIHNlbGVjdG9yID8gJChzZWxlY3RvcilbMF0gOiBudWxsO1xuICAgIH07XG5cbiAgICBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgICB2YXIgZGF0YSA9ICR0aGlzLmRhdGEoREFUQV9LRVkpO1xuICAgICAgICB2YXIgX2NvbmZpZyA9ICQuZXh0ZW5kKHt9LCBEZWZhdWx0LCAkdGhpcy5kYXRhKCksICh0eXBlb2YgY29uZmlnID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjb25maWcpKSA9PT0gJ29iamVjdCcgJiYgY29uZmlnKTtcblxuICAgICAgICBpZiAoIWRhdGEgJiYgX2NvbmZpZy50b2dnbGUgJiYgL3Nob3d8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgICAgX2NvbmZpZy50b2dnbGUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgQ29sbGFwc2UodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJHRoaXMuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoZGF0YVtjb25maWddID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJyArIGNvbmZpZyArICdcIicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhDb2xsYXBzZSwgbnVsbCwgW3tcbiAgICAgIGtleTogJ1ZFUlNJT04nLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ0RlZmF1bHQnLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0O1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBDb2xsYXBzZTtcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKCEvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICB2YXIgJHRyaWdnZXIgPSAkKHRoaXMpO1xuICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTtcbiAgICAkKHNlbGVjdG9yKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGFyZ2V0ID0gJCh0aGlzKTtcbiAgICAgIHZhciBkYXRhID0gJHRhcmdldC5kYXRhKERBVEFfS0VZKTtcbiAgICAgIHZhciBjb25maWcgPSBkYXRhID8gJ3RvZ2dsZScgOiAkdHJpZ2dlci5kYXRhKCk7XG4gICAgICBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJHRhcmdldCwgY29uZmlnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRV0gPSBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gQ29sbGFwc2U7XG4gICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgIHJldHVybiBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIHJldHVybiBDb2xsYXBzZTtcbn0oalF1ZXJ5KTtcblxuLyogZ2xvYmFsIFBvcHBlciAqL1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMC1iZXRhKTogZHJvcGRvd24uanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbnZhciBEcm9wZG93biA9IGZ1bmN0aW9uICgkKSB7XG5cbiAgLyoqXG4gICAqIENoZWNrIGZvciBQb3BwZXIgZGVwZW5kZW5jeVxuICAgKiBQb3BwZXIgLSBodHRwczovL3BvcHBlci5qcy5vcmdcbiAgICovXG4gIGlmICh0eXBlb2YgUG9wcGVyID09PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwIGRyb3Bkb3duIHJlcXVpcmUgUG9wcGVyLmpzIChodHRwczovL3BvcHBlci5qcy5vcmcpJyk7XG4gIH1cblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUgPSAnZHJvcGRvd24nO1xuICB2YXIgVkVSU0lPTiA9ICc0LjAuMC1iZXRhJztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLmRyb3Bkb3duJztcbiAgdmFyIEVWRU5UX0tFWSA9ICcuJyArIERBVEFfS0VZO1xuICB2YXIgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW05BTUVdO1xuICB2YXIgRVNDQVBFX0tFWUNPREUgPSAyNzsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgRXNjYXBlIChFc2MpIGtleVxuICB2YXIgU1BBQ0VfS0VZQ09ERSA9IDMyOyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBzcGFjZSBrZXlcbiAgdmFyIFRBQl9LRVlDT0RFID0gOTsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgdGFiIGtleVxuICB2YXIgQVJST1dfVVBfS0VZQ09ERSA9IDM4OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB1cCBhcnJvdyBrZXlcbiAgdmFyIEFSUk9XX0RPV05fS0VZQ09ERSA9IDQwOyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBkb3duIGFycm93IGtleVxuICB2YXIgUklHSFRfTU9VU0VfQlVUVE9OX1dISUNIID0gMzsgLy8gTW91c2VFdmVudC53aGljaCB2YWx1ZSBmb3IgdGhlIHJpZ2h0IGJ1dHRvbiAoYXNzdW1pbmcgYSByaWdodC1oYW5kZWQgbW91c2UpXG4gIHZhciBSRUdFWFBfS0VZRE9XTiA9IG5ldyBSZWdFeHAoQVJST1dfVVBfS0VZQ09ERSArICd8JyArIEFSUk9XX0RPV05fS0VZQ09ERSArICd8JyArIEVTQ0FQRV9LRVlDT0RFKTtcblxuICB2YXIgRXZlbnQgPSB7XG4gICAgSElERTogJ2hpZGUnICsgRVZFTlRfS0VZLFxuICAgIEhJRERFTjogJ2hpZGRlbicgKyBFVkVOVF9LRVksXG4gICAgU0hPVzogJ3Nob3cnICsgRVZFTlRfS0VZLFxuICAgIFNIT1dOOiAnc2hvd24nICsgRVZFTlRfS0VZLFxuICAgIENMSUNLOiAnY2xpY2snICsgRVZFTlRfS0VZLFxuICAgIENMSUNLX0RBVEFfQVBJOiAnY2xpY2snICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZLFxuICAgIEtFWURPV05fREFUQV9BUEk6ICdrZXlkb3duJyArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSxcbiAgICBLRVlVUF9EQVRBX0FQSTogJ2tleXVwJyArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICB9O1xuXG4gIHZhciBDbGFzc05hbWUgPSB7XG4gICAgRElTQUJMRUQ6ICdkaXNhYmxlZCcsXG4gICAgU0hPVzogJ3Nob3cnLFxuICAgIERST1BVUDogJ2Ryb3B1cCcsXG4gICAgTUVOVVJJR0hUOiAnZHJvcGRvd24tbWVudS1yaWdodCcsXG4gICAgTUVOVUxFRlQ6ICdkcm9wZG93bi1tZW51LWxlZnQnXG4gIH07XG5cbiAgdmFyIFNlbGVjdG9yID0ge1xuICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIl0nLFxuICAgIEZPUk1fQ0hJTEQ6ICcuZHJvcGRvd24gZm9ybScsXG4gICAgTUVOVTogJy5kcm9wZG93bi1tZW51JyxcbiAgICBOQVZCQVJfTkFWOiAnLm5hdmJhci1uYXYnLFxuICAgIFZJU0lCTEVfSVRFTVM6ICcuZHJvcGRvd24tbWVudSAuZHJvcGRvd24taXRlbTpub3QoLmRpc2FibGVkKSdcbiAgfTtcblxuICB2YXIgQXR0YWNobWVudE1hcCA9IHtcbiAgICBUT1A6ICd0b3Atc3RhcnQnLFxuICAgIFRPUEVORDogJ3RvcC1lbmQnLFxuICAgIEJPVFRPTTogJ2JvdHRvbS1zdGFydCcsXG4gICAgQk9UVE9NRU5EOiAnYm90dG9tLWVuZCdcbiAgfTtcblxuICB2YXIgRGVmYXVsdCA9IHtcbiAgICBwbGFjZW1lbnQ6IEF0dGFjaG1lbnRNYXAuQk9UVE9NLFxuICAgIG9mZnNldDogMCxcbiAgICBmbGlwOiB0cnVlXG4gIH07XG5cbiAgdmFyIERlZmF1bHRUeXBlID0ge1xuICAgIHBsYWNlbWVudDogJ3N0cmluZycsXG4gICAgb2Zmc2V0OiAnKG51bWJlcnxzdHJpbmcpJyxcbiAgICBmbGlwOiAnYm9vbGVhbidcblxuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuICB2YXIgRHJvcGRvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRHJvcGRvd24oZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHJvcGRvd24pO1xuXG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX21lbnUgPSB0aGlzLl9nZXRNZW51RWxlbWVudCgpO1xuICAgICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKTtcblxuICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICAvLyBnZXR0ZXJzXG5cbiAgICAvLyBwdWJsaWNcblxuICAgIERyb3Bkb3duLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5kaXNhYmxlZCB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgdmFyIGlzQWN0aXZlID0gJCh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgIERyb3Bkb3duLl9jbGVhck1lbnVzKCk7XG5cbiAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICB9O1xuICAgICAgdmFyIHNob3dFdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPVywgcmVsYXRlZFRhcmdldCk7XG5cbiAgICAgICQocGFyZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XG5cbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMuX2VsZW1lbnQ7XG4gICAgICAvLyBmb3IgZHJvcHVwIHdpdGggYWxpZ25tZW50IHdlIHVzZSB0aGUgcGFyZW50IGFzIHBvcHBlciBjb250YWluZXJcbiAgICAgIGlmICgkKHBhcmVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BVUCkpIHtcbiAgICAgICAgaWYgKCQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLk1FTlVMRUZUKSB8fCAkKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5NRU5VUklHSFQpKSB7XG4gICAgICAgICAgZWxlbWVudCA9IHBhcmVudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5fcG9wcGVyID0gbmV3IFBvcHBlcihlbGVtZW50LCB0aGlzLl9tZW51LCB0aGlzLl9nZXRQb3BwZXJDb25maWcoKSk7XG5cbiAgICAgIC8vIGlmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmFcbiAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgdG8gdGhlIGJvZHkncyBpbW1lZGlhdGUgY2hpbGRyZW47XG4gICAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xuICAgICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sXG4gICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmICEkKHBhcmVudCkuY2xvc2VzdChTZWxlY3Rvci5OQVZCQVJfTkFWKS5sZW5ndGgpIHtcbiAgICAgICAgJCgnYm9keScpLmNoaWxkcmVuKCkub24oJ21vdXNlb3ZlcicsIG51bGwsICQubm9vcCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG5cbiAgICAgICQodGhpcy5fbWVudSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuICAgICAgJChwYXJlbnQpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5TSE9XKS50cmlnZ2VyKCQuRXZlbnQoRXZlbnQuU0hPV04sIHJlbGF0ZWRUYXJnZXQpKTtcbiAgICB9O1xuXG4gICAgRHJvcGRvd24ucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcbiAgICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEVWRU5UX0tFWSk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX21lbnUgPSBudWxsO1xuICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDtcbiAgICB9O1xuXG4gICAgRHJvcGRvd24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuX2luTmF2YmFyID0gdGhpcy5fZGV0ZWN0TmF2YmFyKCk7XG4gICAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3BvcHBlci5zY2hlZHVsZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBwcml2YXRlXG5cbiAgICBEcm9wZG93bi5wcm90b3R5cGUuX2FkZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuQ0xJQ0ssIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgX3RoaXM5LnRvZ2dsZSgpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIERyb3Bkb3duLnByb3RvdHlwZS5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIHZhciBlbGVtZW50RGF0YSA9ICQodGhpcy5fZWxlbWVudCkuZGF0YSgpO1xuICAgICAgaWYgKGVsZW1lbnREYXRhLnBsYWNlbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVsZW1lbnREYXRhLnBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXBbZWxlbWVudERhdGEucGxhY2VtZW50LnRvVXBwZXJDYXNlKCldO1xuICAgICAgfVxuXG4gICAgICBjb25maWcgPSAkLmV4dGVuZCh7fSwgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LCAkKHRoaXMuX2VsZW1lbnQpLmRhdGEoKSwgY29uZmlnKTtcblxuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKTtcblxuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgRHJvcGRvd24ucHJvdG90eXBlLl9nZXRNZW51RWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRNZW51RWxlbWVudCgpIHtcbiAgICAgIGlmICghdGhpcy5fbWVudSkge1xuICAgICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICB0aGlzLl9tZW51ID0gJChwYXJlbnQpLmZpbmQoU2VsZWN0b3IuTUVOVSlbMF07XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fbWVudTtcbiAgICB9O1xuXG4gICAgRHJvcGRvd24ucHJvdG90eXBlLl9nZXRQbGFjZW1lbnQgPSBmdW5jdGlvbiBfZ2V0UGxhY2VtZW50KCkge1xuICAgICAgdmFyICRwYXJlbnREcm9wZG93biA9ICQodGhpcy5fZWxlbWVudCkucGFyZW50KCk7XG4gICAgICB2YXIgcGxhY2VtZW50ID0gdGhpcy5fY29uZmlnLnBsYWNlbWVudDtcblxuICAgICAgLy8gSGFuZGxlIGRyb3B1cFxuICAgICAgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUFVQKSB8fCB0aGlzLl9jb25maWcucGxhY2VtZW50ID09PSBBdHRhY2htZW50TWFwLlRPUCkge1xuICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLlRPUDtcbiAgICAgICAgaWYgKCQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLk1FTlVSSUdIVCkpIHtcbiAgICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLlRPUEVORDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgkKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5NRU5VUklHSFQpKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuQk9UVE9NRU5EO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgICB9O1xuXG4gICAgRHJvcGRvd24ucHJvdG90eXBlLl9kZXRlY3ROYXZiYXIgPSBmdW5jdGlvbiBfZGV0ZWN0TmF2YmFyKCkge1xuICAgICAgcmV0dXJuICQodGhpcy5fZWxlbWVudCkuY2xvc2VzdCgnLm5hdmJhcicpLmxlbmd0aCA+IDA7XG4gICAgfTtcblxuICAgIERyb3Bkb3duLnByb3RvdHlwZS5fZ2V0UG9wcGVyQ29uZmlnID0gZnVuY3Rpb24gX2dldFBvcHBlckNvbmZpZygpIHtcbiAgICAgIHZhciBwb3BwZXJDb25maWcgPSB7XG4gICAgICAgIHBsYWNlbWVudDogdGhpcy5fZ2V0UGxhY2VtZW50KCksXG4gICAgICAgIG1vZGlmaWVyczoge1xuICAgICAgICAgIG9mZnNldDoge1xuICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLl9jb25maWcub2Zmc2V0XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmbGlwOiB7XG4gICAgICAgICAgICBlbmFibGVkOiB0aGlzLl9jb25maWcuZmxpcFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERpc2FibGUgUG9wcGVyLmpzIGZvciBEcm9wZG93biBpbiBOYXZiYXJcbiAgICAgIH07aWYgKHRoaXMuX2luTmF2YmFyKSB7XG4gICAgICAgIHBvcHBlckNvbmZpZy5tb2RpZmllcnMuYXBwbHlTdHlsZSA9IHtcbiAgICAgICAgICBlbmFibGVkOiAhdGhpcy5faW5OYXZiYXJcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwb3BwZXJDb25maWc7XG4gICAgfTtcblxuICAgIC8vIHN0YXRpY1xuXG4gICAgRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuICAgICAgICB2YXIgX2NvbmZpZyA9ICh0eXBlb2YgY29uZmlnID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjb25maWcpKSA9PT0gJ29iamVjdCcgPyBjb25maWcgOiBudWxsO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgRHJvcGRvd24odGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmIChkYXRhW2NvbmZpZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInICsgY29uZmlnICsgJ1wiJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgRHJvcGRvd24uX2NsZWFyTWVudXMgPSBmdW5jdGlvbiBfY2xlYXJNZW51cyhldmVudCkge1xuICAgICAgaWYgKGV2ZW50ICYmIChldmVudC53aGljaCA9PT0gUklHSFRfTU9VU0VfQlVUVE9OX1dISUNIIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcgJiYgZXZlbnQud2hpY2ggIT09IFRBQl9LRVlDT0RFKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0b2dnbGVzID0gJC5tYWtlQXJyYXkoJChTZWxlY3Rvci5EQVRBX1RPR0dMRSkpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2dnbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodG9nZ2xlc1tpXSk7XG4gICAgICAgIHZhciBjb250ZXh0ID0gJCh0b2dnbGVzW2ldKS5kYXRhKERBVEFfS0VZKTtcbiAgICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogdG9nZ2xlc1tpXVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRyb3Bkb3duTWVudSA9IGNvbnRleHQuX21lbnU7XG4gICAgICAgIGlmICghJChwYXJlbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50ICYmIChldmVudC50eXBlID09PSAnY2xpY2snICYmIC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcgJiYgZXZlbnQud2hpY2ggPT09IFRBQl9LRVlDT0RFKSAmJiAkLmNvbnRhaW5zKHBhcmVudCwgZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQoRXZlbnQuSElERSwgcmVsYXRlZFRhcmdldCk7XG4gICAgICAgICQocGFyZW50KS50cmlnZ2VyKGhpZGVFdmVudCk7XG4gICAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSByZW1vdmUgdGhlIGV4dHJhXG4gICAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG4gICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICAkKCdib2R5JykuY2hpbGRyZW4oKS5vZmYoJ21vdXNlb3ZlcicsIG51bGwsICQubm9vcCk7XG4gICAgICAgIH1cblxuICAgICAgICB0b2dnbGVzW2ldLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICQoZHJvcGRvd25NZW51KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG4gICAgICAgICQocGFyZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVykudHJpZ2dlcigkLkV2ZW50KEV2ZW50LkhJRERFTiwgcmVsYXRlZFRhcmdldCkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0UGFyZW50RnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIHBhcmVudCA9IHZvaWQgMDtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcblxuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIHBhcmVudCA9ICQoc2VsZWN0b3IpWzBdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyZW50IHx8IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICB9O1xuXG4gICAgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlciA9IGZ1bmN0aW9uIF9kYXRhQXBpS2V5ZG93bkhhbmRsZXIoZXZlbnQpIHtcbiAgICAgIGlmICghUkVHRVhQX0tFWURPV04udGVzdChldmVudC53aGljaCkgfHwgL2J1dHRvbi9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpICYmIGV2ZW50LndoaWNoID09PSBTUEFDRV9LRVlDT0RFIHx8IC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICBpZiAodGhpcy5kaXNhYmxlZCB8fCAkKHRoaXMpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMpO1xuICAgICAgdmFyIGlzQWN0aXZlID0gJChwYXJlbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgaWYgKCFpc0FjdGl2ZSAmJiAoZXZlbnQud2hpY2ggIT09IEVTQ0FQRV9LRVlDT0RFIHx8IGV2ZW50LndoaWNoICE9PSBTUEFDRV9LRVlDT0RFKSB8fCBpc0FjdGl2ZSAmJiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFIHx8IGV2ZW50LndoaWNoID09PSBTUEFDRV9LRVlDT0RFKSkge1xuXG4gICAgICAgIGlmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUpIHtcbiAgICAgICAgICB2YXIgdG9nZ2xlID0gJChwYXJlbnQpLmZpbmQoU2VsZWN0b3IuREFUQV9UT0dHTEUpWzBdO1xuICAgICAgICAgICQodG9nZ2xlKS50cmlnZ2VyKCdmb2N1cycpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh0aGlzKS50cmlnZ2VyKCdjbGljaycpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpdGVtcyA9ICQocGFyZW50KS5maW5kKFNlbGVjdG9yLlZJU0lCTEVfSVRFTVMpLmdldCgpO1xuXG4gICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpbmRleCA9IGl0ZW1zLmluZGV4T2YoZXZlbnQudGFyZ2V0KTtcblxuICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBBUlJPV19VUF9LRVlDT0RFICYmIGluZGV4ID4gMCkge1xuICAgICAgICAvLyB1cFxuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEFSUk9XX0RPV05fS0VZQ09ERSAmJiBpbmRleCA8IGl0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgLy8gZG93blxuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gMDtcbiAgICAgIH1cblxuICAgICAgaXRlbXNbaW5kZXhdLmZvY3VzKCk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhEcm9wZG93biwgbnVsbCwgW3tcbiAgICAgIGtleTogJ1ZFUlNJT04nLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ0RlZmF1bHQnLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ0RlZmF1bHRUeXBlJyxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdFR5cGU7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIERyb3Bkb3duO1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJChkb2N1bWVudCkub24oRXZlbnQuS0VZRE9XTl9EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIpLm9uKEV2ZW50LktFWURPV05fREFUQV9BUEksIFNlbGVjdG9yLk1FTlUsIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJICsgJyAnICsgRXZlbnQuS0VZVVBfREFUQV9BUEksIERyb3Bkb3duLl9jbGVhck1lbnVzKS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZS5jYWxsKCQodGhpcyksICd0b2dnbGUnKTtcbiAgfSkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkZPUk1fQ0hJTEQsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRV0gPSBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gRHJvcGRvd247XG4gICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgIHJldHVybiBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIHJldHVybiBEcm9wZG93bjtcbn0oalF1ZXJ5KTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4wLjAtYmV0YSk6IG1vZGFsLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG52YXIgTW9kYWwgPSBmdW5jdGlvbiAoJCkge1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSA9ICdtb2RhbCc7XG4gIHZhciBWRVJTSU9OID0gJzQuMC4wLWJldGEnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMubW9kYWwnO1xuICB2YXIgRVZFTlRfS0VZID0gJy4nICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV07XG4gIHZhciBUUkFOU0lUSU9OX0RVUkFUSU9OID0gMzAwO1xuICB2YXIgQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTiA9IDE1MDtcbiAgdmFyIEVTQ0FQRV9LRVlDT0RFID0gMjc7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIEVzY2FwZSAoRXNjKSBrZXlcblxuICB2YXIgRGVmYXVsdCA9IHtcbiAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBmb2N1czogdHJ1ZSxcbiAgICBzaG93OiB0cnVlXG4gIH07XG5cbiAgdmFyIERlZmF1bHRUeXBlID0ge1xuICAgIGJhY2tkcm9wOiAnKGJvb2xlYW58c3RyaW5nKScsXG4gICAga2V5Ym9hcmQ6ICdib29sZWFuJyxcbiAgICBmb2N1czogJ2Jvb2xlYW4nLFxuICAgIHNob3c6ICdib29sZWFuJ1xuICB9O1xuXG4gIHZhciBFdmVudCA9IHtcbiAgICBISURFOiAnaGlkZScgKyBFVkVOVF9LRVksXG4gICAgSElEREVOOiAnaGlkZGVuJyArIEVWRU5UX0tFWSxcbiAgICBTSE9XOiAnc2hvdycgKyBFVkVOVF9LRVksXG4gICAgU0hPV046ICdzaG93bicgKyBFVkVOVF9LRVksXG4gICAgRk9DVVNJTjogJ2ZvY3VzaW4nICsgRVZFTlRfS0VZLFxuICAgIFJFU0laRTogJ3Jlc2l6ZScgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0tfRElTTUlTUzogJ2NsaWNrLmRpc21pc3MnICsgRVZFTlRfS0VZLFxuICAgIEtFWURPV05fRElTTUlTUzogJ2tleWRvd24uZGlzbWlzcycgKyBFVkVOVF9LRVksXG4gICAgTU9VU0VVUF9ESVNNSVNTOiAnbW91c2V1cC5kaXNtaXNzJyArIEVWRU5UX0tFWSxcbiAgICBNT1VTRURPV05fRElTTUlTUzogJ21vdXNlZG93bi5kaXNtaXNzJyArIEVWRU5UX0tFWSxcbiAgICBDTElDS19EQVRBX0FQSTogJ2NsaWNrJyArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICB9O1xuXG4gIHZhciBDbGFzc05hbWUgPSB7XG4gICAgU0NST0xMQkFSX01FQVNVUkVSOiAnbW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUnLFxuICAgIEJBQ0tEUk9QOiAnbW9kYWwtYmFja2Ryb3AnLFxuICAgIE9QRU46ICdtb2RhbC1vcGVuJyxcbiAgICBGQURFOiAnZmFkZScsXG4gICAgU0hPVzogJ3Nob3cnXG4gIH07XG5cbiAgdmFyIFNlbGVjdG9yID0ge1xuICAgIERJQUxPRzogJy5tb2RhbC1kaWFsb2cnLFxuICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwibW9kYWxcIl0nLFxuICAgIERBVEFfRElTTUlTUzogJ1tkYXRhLWRpc21pc3M9XCJtb2RhbFwiXScsXG4gICAgRklYRURfQ09OVEVOVDogJy5maXhlZC10b3AsIC5maXhlZC1ib3R0b20sIC5pcy1maXhlZCwgLnN0aWNreS10b3AnLFxuICAgIE5BVkJBUl9UT0dHTEVSOiAnLm5hdmJhci10b2dnbGVyJ1xuXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG4gIHZhciBNb2RhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNb2RhbChlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb2RhbCk7XG5cbiAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9kaWFsb2cgPSAkKGVsZW1lbnQpLmZpbmQoU2VsZWN0b3IuRElBTE9HKVswXTtcbiAgICAgIHRoaXMuX2JhY2tkcm9wID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZTtcbiAgICAgIHRoaXMuX2lzQm9keU92ZXJmbG93aW5nID0gZmFsc2U7XG4gICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2U7XG4gICAgICB0aGlzLl9vcmlnaW5hbEJvZHlQYWRkaW5nID0gMDtcbiAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gMDtcbiAgICB9XG5cbiAgICAvLyBnZXR0ZXJzXG5cbiAgICAvLyBwdWJsaWNcblxuICAgIE1vZGFsLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUocmVsYXRlZFRhcmdldCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2lzU2hvd24gPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdyhyZWxhdGVkVGFyZ2V0KTtcbiAgICB9O1xuXG4gICAgTW9kYWwucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiBzaG93KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIHZhciBfdGhpczEwID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpICYmICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpKSB7XG4gICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBzaG93RXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNIT1csIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldFxuICAgICAgfSk7XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93biB8fCBzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc1Nob3duID0gdHJ1ZTtcblxuICAgICAgdGhpcy5fY2hlY2tTY3JvbGxiYXIoKTtcbiAgICAgIHRoaXMuX3NldFNjcm9sbGJhcigpO1xuXG4gICAgICAkKGRvY3VtZW50LmJvZHkpLmFkZENsYXNzKENsYXNzTmFtZS5PUEVOKTtcblxuICAgICAgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKTtcbiAgICAgIHRoaXMuX3NldFJlc2l6ZUV2ZW50KCk7XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuQ0xJQ0tfRElTTUlTUywgU2VsZWN0b3IuREFUQV9ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMTAuaGlkZShldmVudCk7XG4gICAgICB9KTtcblxuICAgICAgJCh0aGlzLl9kaWFsb2cpLm9uKEV2ZW50Lk1PVVNFRE9XTl9ESVNNSVNTLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoX3RoaXMxMC5fZWxlbWVudCkub25lKEV2ZW50Lk1PVVNFVVBfRElTTUlTUywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKCQoZXZlbnQudGFyZ2V0KS5pcyhfdGhpczEwLl9lbGVtZW50KSkge1xuICAgICAgICAgICAgX3RoaXMxMC5faWdub3JlQmFja2Ryb3BDbGljayA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9zaG93QmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMxMC5fc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgTW9kYWwucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiBoaWRlKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7XG5cbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8ICF0aGlzLl9pc1Nob3duKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRyYW5zaXRpb24gPSBVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpICYmICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpO1xuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgaGlkZUV2ZW50ID0gJC5FdmVudChFdmVudC5ISURFKTtcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKGhpZGVFdmVudCk7XG5cbiAgICAgIGlmICghdGhpcy5faXNTaG93biB8fCBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc1Nob3duID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuX3NldEVzY2FwZUV2ZW50KCk7XG4gICAgICB0aGlzLl9zZXRSZXNpemVFdmVudCgpO1xuXG4gICAgICAkKGRvY3VtZW50KS5vZmYoRXZlbnQuRk9DVVNJTik7XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9mZihFdmVudC5DTElDS19ESVNNSVNTKTtcbiAgICAgICQodGhpcy5fZGlhbG9nKS5vZmYoRXZlbnQuTU9VU0VET1dOX0RJU01JU1MpO1xuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuXG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczExLl9oaWRlTW9kYWwoZXZlbnQpO1xuICAgICAgICB9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUUkFOU0lUSU9OX0RVUkFUSU9OKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2hpZGVNb2RhbCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBNb2RhbC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuXG4gICAgICAkKHdpbmRvdywgZG9jdW1lbnQsIHRoaXMuX2VsZW1lbnQsIHRoaXMuX2JhY2tkcm9wKS5vZmYoRVZFTlRfS0VZKTtcblxuICAgICAgdGhpcy5fY29uZmlnID0gbnVsbDtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fZGlhbG9nID0gbnVsbDtcbiAgICAgIHRoaXMuX2JhY2tkcm9wID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzU2hvd24gPSBudWxsO1xuICAgICAgdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgPSBudWxsO1xuICAgICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IG51bGw7XG4gICAgICB0aGlzLl9zY3JvbGxiYXJXaWR0aCA9IG51bGw7XG4gICAgfTtcblxuICAgIE1vZGFsLnByb3RvdHlwZS5oYW5kbGVVcGRhdGUgPSBmdW5jdGlvbiBoYW5kbGVVcGRhdGUoKSB7XG4gICAgICB0aGlzLl9hZGp1c3REaWFsb2coKTtcbiAgICB9O1xuXG4gICAgLy8gcHJpdmF0ZVxuXG4gICAgTW9kYWwucHJvdG90eXBlLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gJC5leHRlbmQoe30sIERlZmF1bHQsIGNvbmZpZyk7XG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIE1vZGFsLnByb3RvdHlwZS5fc2hvd0VsZW1lbnQgPSBmdW5jdGlvbiBfc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCkge1xuICAgICAgdmFyIF90aGlzMTIgPSB0aGlzO1xuXG4gICAgICB2YXIgdHJhbnNpdGlvbiA9IFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkgJiYgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSk7XG5cbiAgICAgIGlmICghdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlIHx8IHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgLy8gZG9uJ3QgbW92ZSBtb2RhbHMgZG9tIHBvc2l0aW9uXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc2Nyb2xsVG9wID0gMDtcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgVXRpbC5yZWZsb3codGhpcy5fZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmZvY3VzKSB7XG4gICAgICAgIHRoaXMuX2VuZm9yY2VGb2N1cygpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2hvd25FdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPV04sIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldFxuICAgICAgfSk7XG5cbiAgICAgIHZhciB0cmFuc2l0aW9uQ29tcGxldGUgPSBmdW5jdGlvbiB0cmFuc2l0aW9uQ29tcGxldGUoKSB7XG4gICAgICAgIGlmIChfdGhpczEyLl9jb25maWcuZm9jdXMpIHtcbiAgICAgICAgICBfdGhpczEyLl9lbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMxMi5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICAgICQoX3RoaXMxMi5fZWxlbWVudCkudHJpZ2dlcihzaG93bkV2ZW50KTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgICQodGhpcy5fZGlhbG9nKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgdHJhbnNpdGlvbkNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUUkFOU0lUSU9OX0RVUkFUSU9OKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zaXRpb25Db21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBNb2RhbC5wcm90b3R5cGUuX2VuZm9yY2VGb2N1cyA9IGZ1bmN0aW9uIF9lbmZvcmNlRm9jdXMoKSB7XG4gICAgICB2YXIgX3RoaXMxMyA9IHRoaXM7XG5cbiAgICAgICQoZG9jdW1lbnQpLm9mZihFdmVudC5GT0NVU0lOKSAvLyBndWFyZCBhZ2FpbnN0IGluZmluaXRlIGZvY3VzIGxvb3BcbiAgICAgIC5vbihFdmVudC5GT0NVU0lOLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50ICE9PSBldmVudC50YXJnZXQgJiYgX3RoaXMxMy5fZWxlbWVudCAhPT0gZXZlbnQudGFyZ2V0ICYmICEkKF90aGlzMTMuX2VsZW1lbnQpLmhhcyhldmVudC50YXJnZXQpLmxlbmd0aCkge1xuICAgICAgICAgIF90aGlzMTMuX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIE1vZGFsLnByb3RvdHlwZS5fc2V0RXNjYXBlRXZlbnQgPSBmdW5jdGlvbiBfc2V0RXNjYXBlRXZlbnQoKSB7XG4gICAgICB2YXIgX3RoaXMxNCA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9pc1Nob3duICYmIHRoaXMuX2NvbmZpZy5rZXlib2FyZCkge1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LktFWURPV05fRElTTUlTUywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBFU0NBUEVfS0VZQ09ERSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIF90aGlzMTQuaGlkZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLl9pc1Nob3duKSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEV2ZW50LktFWURPV05fRElTTUlTUyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIE1vZGFsLnByb3RvdHlwZS5fc2V0UmVzaXplRXZlbnQgPSBmdW5jdGlvbiBfc2V0UmVzaXplRXZlbnQoKSB7XG4gICAgICB2YXIgX3RoaXMxNSA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9pc1Nob3duKSB7XG4gICAgICAgICQod2luZG93KS5vbihFdmVudC5SRVNJWkUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczE1LmhhbmRsZVVwZGF0ZShldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJCh3aW5kb3cpLm9mZihFdmVudC5SRVNJWkUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBNb2RhbC5wcm90b3R5cGUuX2hpZGVNb2RhbCA9IGZ1bmN0aW9uIF9oaWRlTW9kYWwoKSB7XG4gICAgICB2YXIgX3RoaXMxNiA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLl9zaG93QmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuICAgICAgICAkKGRvY3VtZW50LmJvZHkpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5PUEVOKTtcbiAgICAgICAgX3RoaXMxNi5fcmVzZXRBZGp1c3RtZW50cygpO1xuICAgICAgICBfdGhpczE2Ll9yZXNldFNjcm9sbGJhcigpO1xuICAgICAgICAkKF90aGlzMTYuX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQuSElEREVOKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBNb2RhbC5wcm90b3R5cGUuX3JlbW92ZUJhY2tkcm9wID0gZnVuY3Rpb24gX3JlbW92ZUJhY2tkcm9wKCkge1xuICAgICAgaWYgKHRoaXMuX2JhY2tkcm9wKSB7XG4gICAgICAgICQodGhpcy5fYmFja2Ryb3ApLnJlbW92ZSgpO1xuICAgICAgICB0aGlzLl9iYWNrZHJvcCA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcblxuICAgIE1vZGFsLnByb3RvdHlwZS5fc2hvd0JhY2tkcm9wID0gZnVuY3Rpb24gX3Nob3dCYWNrZHJvcChjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzMTcgPSB0aGlzO1xuXG4gICAgICB2YXIgYW5pbWF0ZSA9ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpID8gQ2xhc3NOYW1lLkZBREUgOiAnJztcblxuICAgICAgaWYgKHRoaXMuX2lzU2hvd24gJiYgdGhpcy5fY29uZmlnLmJhY2tkcm9wKSB7XG4gICAgICAgIHZhciBkb0FuaW1hdGUgPSBVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpICYmIGFuaW1hdGU7XG5cbiAgICAgICAgdGhpcy5fYmFja2Ryb3AgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fYmFja2Ryb3AuY2xhc3NOYW1lID0gQ2xhc3NOYW1lLkJBQ0tEUk9QO1xuXG4gICAgICAgIGlmIChhbmltYXRlKSB7XG4gICAgICAgICAgJCh0aGlzLl9iYWNrZHJvcCkuYWRkQ2xhc3MoYW5pbWF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KTtcblxuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGlmIChfdGhpczE3Ll9pZ25vcmVCYWNrZHJvcENsaWNrKSB7XG4gICAgICAgICAgICBfdGhpczE3Ll9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKF90aGlzMTcuX2NvbmZpZy5iYWNrZHJvcCA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICAgICAgIF90aGlzMTcuX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMxNy5oaWRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZG9BbmltYXRlKSB7XG4gICAgICAgICAgVXRpbC5yZWZsb3codGhpcy5fYmFja2Ryb3ApO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh0aGlzLl9iYWNrZHJvcCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRvQW5pbWF0ZSkge1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh0aGlzLl9iYWNrZHJvcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNhbGxiYWNrKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChCQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2lzU2hvd24gJiYgdGhpcy5fYmFja2Ryb3ApIHtcbiAgICAgICAgJCh0aGlzLl9iYWNrZHJvcCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICAgIHZhciBjYWxsYmFja1JlbW92ZSA9IGZ1bmN0aW9uIGNhbGxiYWNrUmVtb3ZlKCkge1xuICAgICAgICAgIF90aGlzMTcuX3JlbW92ZUJhY2tkcm9wKCk7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSAmJiAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuICAgICAgICAgICQodGhpcy5fYmFja2Ryb3ApLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjYWxsYmFja1JlbW92ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbGJhY2tSZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gdGhlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcbiAgICAvLyB0b2RvIChmYXQpOiB0aGVzZSBzaG91bGQgcHJvYmFibHkgYmUgcmVmYWN0b3JlZCBvdXQgb2YgbW9kYWwuanNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBNb2RhbC5wcm90b3R5cGUuX2FkanVzdERpYWxvZyA9IGZ1bmN0aW9uIF9hZGp1c3REaWFsb2coKSB7XG4gICAgICB2YXIgaXNNb2RhbE92ZXJmbG93aW5nID0gdGhpcy5fZWxlbWVudC5zY3JvbGxIZWlnaHQgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuXG4gICAgICBpZiAoIXRoaXMuX2lzQm9keU92ZXJmbG93aW5nICYmIGlzTW9kYWxPdmVyZmxvd2luZykge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gdGhpcy5fc2Nyb2xsYmFyV2lkdGggKyAncHgnO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgJiYgIWlzTW9kYWxPdmVyZmxvd2luZykge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IHRoaXMuX3Njcm9sbGJhcldpZHRoICsgJ3B4JztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgTW9kYWwucHJvdG90eXBlLl9yZXNldEFkanVzdG1lbnRzID0gZnVuY3Rpb24gX3Jlc2V0QWRqdXN0bWVudHMoKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gJyc7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9ICcnO1xuICAgIH07XG5cbiAgICBNb2RhbC5wcm90b3R5cGUuX2NoZWNrU2Nyb2xsYmFyID0gZnVuY3Rpb24gX2NoZWNrU2Nyb2xsYmFyKCkge1xuICAgICAgdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIDwgd2luZG93LmlubmVyV2lkdGg7XG4gICAgICB0aGlzLl9zY3JvbGxiYXJXaWR0aCA9IHRoaXMuX2dldFNjcm9sbGJhcldpZHRoKCk7XG4gICAgfTtcblxuICAgIE1vZGFsLnByb3RvdHlwZS5fc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gX3NldFNjcm9sbGJhcigpIHtcbiAgICAgIHZhciBfdGhpczE4ID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2lzQm9keU92ZXJmbG93aW5nKSB7XG4gICAgICAgIC8vIE5vdGU6IERPTU5vZGUuc3R5bGUucGFkZGluZ1JpZ2h0IHJldHVybnMgdGhlIGFjdHVhbCB2YWx1ZSBvciAnJyBpZiBub3Qgc2V0XG4gICAgICAgIC8vICAgd2hpbGUgJChET01Ob2RlKS5jc3MoJ3BhZGRpbmctcmlnaHQnKSByZXR1cm5zIHRoZSBjYWxjdWxhdGVkIHZhbHVlIG9yIDAgaWYgbm90IHNldFxuXG4gICAgICAgIC8vIEFkanVzdCBmaXhlZCBjb250ZW50IHBhZGRpbmdcbiAgICAgICAgJChTZWxlY3Rvci5GSVhFRF9DT05URU5UKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgIHZhciBhY3R1YWxQYWRkaW5nID0gJChlbGVtZW50KVswXS5zdHlsZS5wYWRkaW5nUmlnaHQ7XG4gICAgICAgICAgdmFyIGNhbGN1bGF0ZWRQYWRkaW5nID0gJChlbGVtZW50KS5jc3MoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgICAkKGVsZW1lbnQpLmRhdGEoJ3BhZGRpbmctcmlnaHQnLCBhY3R1YWxQYWRkaW5nKS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBwYXJzZUZsb2F0KGNhbGN1bGF0ZWRQYWRkaW5nKSArIF90aGlzMTguX3Njcm9sbGJhcldpZHRoICsgJ3B4Jyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEFkanVzdCBuYXZiYXItdG9nZ2xlciBtYXJnaW5cbiAgICAgICAgJChTZWxlY3Rvci5OQVZCQVJfVE9HR0xFUikuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgYWN0dWFsTWFyZ2luID0gJChlbGVtZW50KVswXS5zdHlsZS5tYXJnaW5SaWdodDtcbiAgICAgICAgICB2YXIgY2FsY3VsYXRlZE1hcmdpbiA9ICQoZWxlbWVudCkuY3NzKCdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgICAkKGVsZW1lbnQpLmRhdGEoJ21hcmdpbi1yaWdodCcsIGFjdHVhbE1hcmdpbikuY3NzKCdtYXJnaW4tcmlnaHQnLCBwYXJzZUZsb2F0KGNhbGN1bGF0ZWRNYXJnaW4pICsgX3RoaXMxOC5fc2Nyb2xsYmFyV2lkdGggKyAncHgnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQWRqdXN0IGJvZHkgcGFkZGluZ1xuICAgICAgICB2YXIgYWN0dWFsUGFkZGluZyA9IGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0O1xuICAgICAgICB2YXIgY2FsY3VsYXRlZFBhZGRpbmcgPSAkKCdib2R5JykuY3NzKCdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgICQoJ2JvZHknKS5kYXRhKCdwYWRkaW5nLXJpZ2h0JywgYWN0dWFsUGFkZGluZykuY3NzKCdwYWRkaW5nLXJpZ2h0JywgcGFyc2VGbG9hdChjYWxjdWxhdGVkUGFkZGluZykgKyB0aGlzLl9zY3JvbGxiYXJXaWR0aCArICdweCcpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBNb2RhbC5wcm90b3R5cGUuX3Jlc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gX3Jlc2V0U2Nyb2xsYmFyKCkge1xuICAgICAgLy8gUmVzdG9yZSBmaXhlZCBjb250ZW50IHBhZGRpbmdcbiAgICAgICQoU2VsZWN0b3IuRklYRURfQ09OVEVOVCkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHBhZGRpbmcgPSAkKGVsZW1lbnQpLmRhdGEoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgaWYgKHR5cGVvZiBwYWRkaW5nICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICQoZWxlbWVudCkuY3NzKCdwYWRkaW5nLXJpZ2h0JywgcGFkZGluZykucmVtb3ZlRGF0YSgncGFkZGluZy1yaWdodCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gUmVzdG9yZSBuYXZiYXItdG9nZ2xlciBtYXJnaW5cbiAgICAgICQoU2VsZWN0b3IuTkFWQkFSX1RPR0dMRVIpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgIHZhciBtYXJnaW4gPSAkKGVsZW1lbnQpLmRhdGEoJ21hcmdpbi1yaWdodCcpO1xuICAgICAgICBpZiAodHlwZW9mIG1hcmdpbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAkKGVsZW1lbnQpLmNzcygnbWFyZ2luLXJpZ2h0JywgbWFyZ2luKS5yZW1vdmVEYXRhKCdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIFJlc3RvcmUgYm9keSBwYWRkaW5nXG4gICAgICB2YXIgcGFkZGluZyA9ICQoJ2JvZHknKS5kYXRhKCdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICBpZiAodHlwZW9mIHBhZGRpbmcgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICQoJ2JvZHknKS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBwYWRkaW5nKS5yZW1vdmVEYXRhKCdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIE1vZGFsLnByb3RvdHlwZS5fZ2V0U2Nyb2xsYmFyV2lkdGggPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsYmFyV2lkdGgoKSB7XG4gICAgICAvLyB0aHggZC53YWxzaFxuICAgICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc2Nyb2xsRGl2LmNsYXNzTmFtZSA9IENsYXNzTmFtZS5TQ1JPTExCQVJfTUVBU1VSRVI7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG4gICAgICB2YXIgc2Nyb2xsYmFyV2lkdGggPSBzY3JvbGxEaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG4gICAgICByZXR1cm4gc2Nyb2xsYmFyV2lkdGg7XG4gICAgfTtcblxuICAgIC8vIHN0YXRpY1xuXG4gICAgTW9kYWwuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnLCByZWxhdGVkVGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuICAgICAgICB2YXIgX2NvbmZpZyA9ICQuZXh0ZW5kKHt9LCBNb2RhbC5EZWZhdWx0LCAkKHRoaXMpLmRhdGEoKSwgKHR5cGVvZiBjb25maWcgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGNvbmZpZykpID09PSAnb2JqZWN0JyAmJiBjb25maWcpO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgTW9kYWwodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmIChkYXRhW2NvbmZpZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInICsgY29uZmlnICsgJ1wiJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRhdGFbY29uZmlnXShyZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgfSBlbHNlIGlmIChfY29uZmlnLnNob3cpIHtcbiAgICAgICAgICBkYXRhLnNob3cocmVsYXRlZFRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoTW9kYWwsIG51bGwsIFt7XG4gICAgICBrZXk6ICdWRVJTSU9OJyxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdEZWZhdWx0JyxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTW9kYWw7XG4gIH0oKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBfdGhpczE5ID0gdGhpcztcblxuICAgIHZhciB0YXJnZXQgPSB2b2lkIDA7XG4gICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO1xuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICB0YXJnZXQgPSAkKHNlbGVjdG9yKVswXTtcbiAgICB9XG5cbiAgICB2YXIgY29uZmlnID0gJCh0YXJnZXQpLmRhdGEoREFUQV9LRVkpID8gJ3RvZ2dsZScgOiAkLmV4dGVuZCh7fSwgJCh0YXJnZXQpLmRhdGEoKSwgJCh0aGlzKS5kYXRhKCkpO1xuXG4gICAgaWYgKHRoaXMudGFnTmFtZSA9PT0gJ0EnIHx8IHRoaXMudGFnTmFtZSA9PT0gJ0FSRUEnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHZhciAkdGFyZ2V0ID0gJCh0YXJnZXQpLm9uZShFdmVudC5TSE9XLCBmdW5jdGlvbiAoc2hvd0V2ZW50KSB7XG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIC8vIG9ubHkgcmVnaXN0ZXIgZm9jdXMgcmVzdG9yZXIgaWYgbW9kYWwgd2lsbCBhY3R1YWxseSBnZXQgc2hvd25cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkdGFyZ2V0Lm9uZShFdmVudC5ISURERU4sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCQoX3RoaXMxOSkuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgICBfdGhpczE5LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgTW9kYWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQodGFyZ2V0KSwgY29uZmlnLCB0aGlzKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRV0gPSBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gTW9kYWw7XG4gICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgIHJldHVybiBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIHJldHVybiBNb2RhbDtcbn0oalF1ZXJ5KTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4wLjAtYmV0YSk6IHNjcm9sbHNweS5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxudmFyIFNjcm9sbFNweSA9IGZ1bmN0aW9uICgkKSB7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FID0gJ3Njcm9sbHNweSc7XG4gIHZhciBWRVJTSU9OID0gJzQuMC4wLWJldGEnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMuc2Nyb2xsc3B5JztcbiAgdmFyIEVWRU5UX0tFWSA9ICcuJyArIERBVEFfS0VZO1xuICB2YXIgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW05BTUVdO1xuXG4gIHZhciBEZWZhdWx0ID0ge1xuICAgIG9mZnNldDogMTAsXG4gICAgbWV0aG9kOiAnYXV0bycsXG4gICAgdGFyZ2V0OiAnJ1xuICB9O1xuXG4gIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICBvZmZzZXQ6ICdudW1iZXInLFxuICAgIG1ldGhvZDogJ3N0cmluZycsXG4gICAgdGFyZ2V0OiAnKHN0cmluZ3xlbGVtZW50KSdcbiAgfTtcblxuICB2YXIgRXZlbnQgPSB7XG4gICAgQUNUSVZBVEU6ICdhY3RpdmF0ZScgKyBFVkVOVF9LRVksXG4gICAgU0NST0xMOiAnc2Nyb2xsJyArIEVWRU5UX0tFWSxcbiAgICBMT0FEX0RBVEFfQVBJOiAnbG9hZCcgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcbiAgfTtcblxuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIERST1BET1dOX0lURU06ICdkcm9wZG93bi1pdGVtJyxcbiAgICBEUk9QRE9XTl9NRU5VOiAnZHJvcGRvd24tbWVudScsXG4gICAgQUNUSVZFOiAnYWN0aXZlJ1xuICB9O1xuXG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBEQVRBX1NQWTogJ1tkYXRhLXNweT1cInNjcm9sbFwiXScsXG4gICAgQUNUSVZFOiAnLmFjdGl2ZScsXG4gICAgTkFWX0xJU1RfR1JPVVA6ICcubmF2LCAubGlzdC1ncm91cCcsXG4gICAgTkFWX0xJTktTOiAnLm5hdi1saW5rJyxcbiAgICBMSVNUX0lURU1TOiAnLmxpc3QtZ3JvdXAtaXRlbScsXG4gICAgRFJPUERPV046ICcuZHJvcGRvd24nLFxuICAgIERST1BET1dOX0lURU1TOiAnLmRyb3Bkb3duLWl0ZW0nLFxuICAgIERST1BET1dOX1RPR0dMRTogJy5kcm9wZG93bi10b2dnbGUnXG4gIH07XG5cbiAgdmFyIE9mZnNldE1ldGhvZCA9IHtcbiAgICBPRkZTRVQ6ICdvZmZzZXQnLFxuICAgIFBPU0lUSU9OOiAncG9zaXRpb24nXG5cbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcbiAgdmFyIFNjcm9sbFNweSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY3JvbGxTcHkoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB2YXIgX3RoaXMyMCA9IHRoaXM7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTY3JvbGxTcHkpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuX3Njcm9sbEVsZW1lbnQgPSBlbGVtZW50LnRhZ05hbWUgPT09ICdCT0RZJyA/IHdpbmRvdyA6IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX3NlbGVjdG9yID0gdGhpcy5fY29uZmlnLnRhcmdldCArICcgJyArIFNlbGVjdG9yLk5BVl9MSU5LUyArICcsJyArICh0aGlzLl9jb25maWcudGFyZ2V0ICsgJyAnICsgU2VsZWN0b3IuTElTVF9JVEVNUyArICcsJykgKyAodGhpcy5fY29uZmlnLnRhcmdldCArICcgJyArIFNlbGVjdG9yLkRST1BET1dOX0lURU1TKTtcbiAgICAgIHRoaXMuX29mZnNldHMgPSBbXTtcbiAgICAgIHRoaXMuX3RhcmdldHMgPSBbXTtcbiAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG4gICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSAwO1xuXG4gICAgICAkKHRoaXMuX3Njcm9sbEVsZW1lbnQpLm9uKEV2ZW50LlNDUk9MTCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBfdGhpczIwLl9wcm9jZXNzKGV2ZW50KTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgIHRoaXMuX3Byb2Nlc3MoKTtcbiAgICB9XG5cbiAgICAvLyBnZXR0ZXJzXG5cbiAgICAvLyBwdWJsaWNcblxuICAgIFNjcm9sbFNweS5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgICB2YXIgX3RoaXMyMSA9IHRoaXM7XG5cbiAgICAgIHZhciBhdXRvTWV0aG9kID0gdGhpcy5fc2Nyb2xsRWxlbWVudCAhPT0gdGhpcy5fc2Nyb2xsRWxlbWVudC53aW5kb3cgPyBPZmZzZXRNZXRob2QuUE9TSVRJT04gOiBPZmZzZXRNZXRob2QuT0ZGU0VUO1xuXG4gICAgICB2YXIgb2Zmc2V0TWV0aG9kID0gdGhpcy5fY29uZmlnLm1ldGhvZCA9PT0gJ2F1dG8nID8gYXV0b01ldGhvZCA6IHRoaXMuX2NvbmZpZy5tZXRob2Q7XG5cbiAgICAgIHZhciBvZmZzZXRCYXNlID0gb2Zmc2V0TWV0aG9kID09PSBPZmZzZXRNZXRob2QuUE9TSVRJT04gPyB0aGlzLl9nZXRTY3JvbGxUb3AoKSA6IDA7XG5cbiAgICAgIHRoaXMuX29mZnNldHMgPSBbXTtcbiAgICAgIHRoaXMuX3RhcmdldHMgPSBbXTtcblxuICAgICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gdGhpcy5fZ2V0U2Nyb2xsSGVpZ2h0KCk7XG5cbiAgICAgIHZhciB0YXJnZXRzID0gJC5tYWtlQXJyYXkoJCh0aGlzLl9zZWxlY3RvcikpO1xuXG4gICAgICB0YXJnZXRzLm1hcChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gdm9pZCAwO1xuICAgICAgICB2YXIgdGFyZ2V0U2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHRhcmdldFNlbGVjdG9yKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gJCh0YXJnZXRTZWxlY3RvcilbMF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgdmFyIHRhcmdldEJDUiA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICBpZiAodGFyZ2V0QkNSLndpZHRoIHx8IHRhcmdldEJDUi5oZWlnaHQpIHtcbiAgICAgICAgICAgIC8vIHRvZG8gKGZhdCk6IHJlbW92ZSBza2V0Y2ggcmVsaWFuY2Ugb24galF1ZXJ5IHBvc2l0aW9uL29mZnNldFxuICAgICAgICAgICAgcmV0dXJuIFskKHRhcmdldClbb2Zmc2V0TWV0aG9kXSgpLnRvcCArIG9mZnNldEJhc2UsIHRhcmdldFNlbGVjdG9yXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhWzBdIC0gYlswXTtcbiAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgX3RoaXMyMS5fb2Zmc2V0cy5wdXNoKGl0ZW1bMF0pO1xuICAgICAgICBfdGhpczIxLl90YXJnZXRzLnB1c2goaXRlbVsxXSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgU2Nyb2xsU3B5LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICAkKHRoaXMuX3Njcm9sbEVsZW1lbnQpLm9mZihFVkVOVF9LRVkpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX3Njcm9sbEVsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fY29uZmlnID0gbnVsbDtcbiAgICAgIHRoaXMuX3NlbGVjdG9yID0gbnVsbDtcbiAgICAgIHRoaXMuX29mZnNldHMgPSBudWxsO1xuICAgICAgdGhpcy5fdGFyZ2V0cyA9IG51bGw7XG4gICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsO1xuICAgICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gcHJpdmF0ZVxuXG4gICAgU2Nyb2xsU3B5LnByb3RvdHlwZS5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9ICQuZXh0ZW5kKHt9LCBEZWZhdWx0LCBjb25maWcpO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZy50YXJnZXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBpZCA9ICQoY29uZmlnLnRhcmdldCkuYXR0cignaWQnKTtcbiAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgIGlkID0gVXRpbC5nZXRVSUQoTkFNRSk7XG4gICAgICAgICAgJChjb25maWcudGFyZ2V0KS5hdHRyKCdpZCcsIGlkKTtcbiAgICAgICAgfVxuICAgICAgICBjb25maWcudGFyZ2V0ID0gJyMnICsgaWQ7XG4gICAgICB9XG5cbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpO1xuXG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBTY3JvbGxTcHkucHJvdG90eXBlLl9nZXRTY3JvbGxUb3AgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsVG9wKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHdpbmRvdyA/IHRoaXMuX3Njcm9sbEVsZW1lbnQucGFnZVlPZmZzZXQgOiB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbFRvcDtcbiAgICB9O1xuXG4gICAgU2Nyb2xsU3B5LnByb3RvdHlwZS5fZ2V0U2Nyb2xsSGVpZ2h0ID0gZnVuY3Rpb24gX2dldFNjcm9sbEhlaWdodCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbEhlaWdodCB8fCBNYXRoLm1heChkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCk7XG4gICAgfTtcblxuICAgIFNjcm9sbFNweS5wcm90b3R5cGUuX2dldE9mZnNldEhlaWdodCA9IGZ1bmN0aW9uIF9nZXRPZmZzZXRIZWlnaHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID8gd2luZG93LmlubmVySGVpZ2h0IDogdGhpcy5fc2Nyb2xsRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgfTtcblxuICAgIFNjcm9sbFNweS5wcm90b3R5cGUuX3Byb2Nlc3MgPSBmdW5jdGlvbiBfcHJvY2VzcygpIHtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLl9nZXRTY3JvbGxUb3AoKSArIHRoaXMuX2NvbmZpZy5vZmZzZXQ7XG4gICAgICB2YXIgc2Nyb2xsSGVpZ2h0ID0gdGhpcy5fZ2V0U2Nyb2xsSGVpZ2h0KCk7XG4gICAgICB2YXIgbWF4U2Nyb2xsID0gdGhpcy5fY29uZmlnLm9mZnNldCArIHNjcm9sbEhlaWdodCAtIHRoaXMuX2dldE9mZnNldEhlaWdodCgpO1xuXG4gICAgICBpZiAodGhpcy5fc2Nyb2xsSGVpZ2h0ICE9PSBzY3JvbGxIZWlnaHQpIHtcbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzY3JvbGxUb3AgPj0gbWF4U2Nyb2xsKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLl90YXJnZXRzW3RoaXMuX3RhcmdldHMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCAhPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgdGhpcy5fYWN0aXZhdGUodGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgJiYgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1swXSAmJiB0aGlzLl9vZmZzZXRzWzBdID4gMCkge1xuICAgICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsO1xuICAgICAgICB0aGlzLl9jbGVhcigpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLl9vZmZzZXRzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICB2YXIgaXNBY3RpdmVUYXJnZXQgPSB0aGlzLl9hY3RpdmVUYXJnZXQgIT09IHRoaXMuX3RhcmdldHNbaV0gJiYgc2Nyb2xsVG9wID49IHRoaXMuX29mZnNldHNbaV0gJiYgKHRoaXMuX29mZnNldHNbaSArIDFdID09PSB1bmRlZmluZWQgfHwgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1tpICsgMV0pO1xuXG4gICAgICAgIGlmIChpc0FjdGl2ZVRhcmdldCkge1xuICAgICAgICAgIHRoaXMuX2FjdGl2YXRlKHRoaXMuX3RhcmdldHNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIFNjcm9sbFNweS5wcm90b3R5cGUuX2FjdGl2YXRlID0gZnVuY3Rpb24gX2FjdGl2YXRlKHRhcmdldCkge1xuICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gdGFyZ2V0O1xuXG4gICAgICB0aGlzLl9jbGVhcigpO1xuXG4gICAgICB2YXIgcXVlcmllcyA9IHRoaXMuX3NlbGVjdG9yLnNwbGl0KCcsJyk7XG4gICAgICBxdWVyaWVzID0gcXVlcmllcy5tYXAoZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RvciArICdbZGF0YS10YXJnZXQ9XCInICsgdGFyZ2V0ICsgJ1wiXSwnICsgKHNlbGVjdG9yICsgJ1tocmVmPVwiJyArIHRhcmdldCArICdcIl0nKTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgJGxpbmsgPSAkKHF1ZXJpZXMuam9pbignLCcpKTtcblxuICAgICAgaWYgKCRsaW5rLmhhc0NsYXNzKENsYXNzTmFtZS5EUk9QRE9XTl9JVEVNKSkge1xuICAgICAgICAkbGluay5jbG9zZXN0KFNlbGVjdG9yLkRST1BET1dOKS5maW5kKFNlbGVjdG9yLkRST1BET1dOX1RPR0dMRSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICRsaW5rLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2V0IHRyaWdnZXJlZCBsaW5rIGFzIGFjdGl2ZVxuICAgICAgICAkbGluay5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgLy8gU2V0IHRyaWdnZXJlZCBsaW5rcyBwYXJlbnRzIGFzIGFjdGl2ZVxuICAgICAgICAvLyBXaXRoIGJvdGggPHVsPiBhbmQgPG5hdj4gbWFya3VwIGEgcGFyZW50IGlzIHRoZSBwcmV2aW91cyBzaWJsaW5nIG9mIGFueSBuYXYgYW5jZXN0b3JcbiAgICAgICAgJGxpbmsucGFyZW50cyhTZWxlY3Rvci5OQVZfTElTVF9HUk9VUCkucHJldihTZWxlY3Rvci5OQVZfTElOS1MgKyAnLCAnICsgU2VsZWN0b3IuTElTVF9JVEVNUykuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICB9XG5cbiAgICAgICQodGhpcy5fc2Nyb2xsRWxlbWVudCkudHJpZ2dlcihFdmVudC5BQ1RJVkFURSwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0YXJnZXRcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTY3JvbGxTcHkucHJvdG90eXBlLl9jbGVhciA9IGZ1bmN0aW9uIF9jbGVhcigpIHtcbiAgICAgICQodGhpcy5fc2VsZWN0b3IpLmZpbHRlcihTZWxlY3Rvci5BQ1RJVkUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgIH07XG5cbiAgICAvLyBzdGF0aWNcblxuICAgIFNjcm9sbFNweS5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSk7XG4gICAgICAgIHZhciBfY29uZmlnID0gKHR5cGVvZiBjb25maWcgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGNvbmZpZykpID09PSAnb2JqZWN0JyAmJiBjb25maWc7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBTY3JvbGxTcHkodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmIChkYXRhW2NvbmZpZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInICsgY29uZmlnICsgJ1wiJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKFNjcm9sbFNweSwgbnVsbCwgW3tcbiAgICAgIGtleTogJ1ZFUlNJT04nLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ0RlZmF1bHQnLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0O1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBTY3JvbGxTcHk7XG4gIH0oKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkKHdpbmRvdykub24oRXZlbnQuTE9BRF9EQVRBX0FQSSwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY3JvbGxTcHlzID0gJC5tYWtlQXJyYXkoJChTZWxlY3Rvci5EQVRBX1NQWSkpO1xuXG4gICAgZm9yICh2YXIgaSA9IHNjcm9sbFNweXMubGVuZ3RoOyBpLS07KSB7XG4gICAgICB2YXIgJHNweSA9ICQoc2Nyb2xsU3B5c1tpXSk7XG4gICAgICBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZS5jYWxsKCRzcHksICRzcHkuZGF0YSgpKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUVdID0gU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBTY3JvbGxTcHk7XG4gICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgIHJldHVybiBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICByZXR1cm4gU2Nyb2xsU3B5O1xufShqUXVlcnkpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMC1iZXRhKTogdGFiLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG52YXIgVGFiID0gZnVuY3Rpb24gKCQpIHtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUgPSAndGFiJztcbiAgdmFyIFZFUlNJT04gPSAnNC4wLjAtYmV0YSc7XG4gIHZhciBEQVRBX0tFWSA9ICdicy50YWInO1xuICB2YXIgRVZFTlRfS0VZID0gJy4nICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV07XG4gIHZhciBUUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwO1xuXG4gIHZhciBFdmVudCA9IHtcbiAgICBISURFOiAnaGlkZScgKyBFVkVOVF9LRVksXG4gICAgSElEREVOOiAnaGlkZGVuJyArIEVWRU5UX0tFWSxcbiAgICBTSE9XOiAnc2hvdycgKyBFVkVOVF9LRVksXG4gICAgU0hPV046ICdzaG93bicgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0tfREFUQV9BUEk6ICdjbGljaycgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcbiAgfTtcblxuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIERST1BET1dOX01FTlU6ICdkcm9wZG93bi1tZW51JyxcbiAgICBBQ1RJVkU6ICdhY3RpdmUnLFxuICAgIERJU0FCTEVEOiAnZGlzYWJsZWQnLFxuICAgIEZBREU6ICdmYWRlJyxcbiAgICBTSE9XOiAnc2hvdydcbiAgfTtcblxuICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgRFJPUERPV046ICcuZHJvcGRvd24nLFxuICAgIE5BVl9MSVNUX0dST1VQOiAnLm5hdiwgLmxpc3QtZ3JvdXAnLFxuICAgIEFDVElWRTogJy5hY3RpdmUnLFxuICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwidGFiXCJdLCBbZGF0YS10b2dnbGU9XCJwaWxsXCJdLCBbZGF0YS10b2dnbGU9XCJsaXN0XCJdJyxcbiAgICBEUk9QRE9XTl9UT0dHTEU6ICcuZHJvcGRvd24tdG9nZ2xlJyxcbiAgICBEUk9QRE9XTl9BQ1RJVkVfQ0hJTEQ6ICc+IC5kcm9wZG93bi1tZW51IC5hY3RpdmUnXG5cbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcbiAgdmFyIFRhYiA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUYWIoZWxlbWVudCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRhYik7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgIH1cblxuICAgIC8vIGdldHRlcnNcblxuICAgIC8vIHB1YmxpY1xuXG4gICAgVGFiLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgIHZhciBfdGhpczIyID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSAmJiB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFICYmICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSkgfHwgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRElTQUJMRUQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRhcmdldCA9IHZvaWQgMDtcbiAgICAgIHZhciBwcmV2aW91cyA9IHZvaWQgMDtcbiAgICAgIHZhciBsaXN0RWxlbWVudCA9ICQodGhpcy5fZWxlbWVudCkuY2xvc2VzdChTZWxlY3Rvci5OQVZfTElTVF9HUk9VUClbMF07XG4gICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG5cbiAgICAgIGlmIChsaXN0RWxlbWVudCkge1xuICAgICAgICBwcmV2aW91cyA9ICQubWFrZUFycmF5KCQobGlzdEVsZW1lbnQpLmZpbmQoU2VsZWN0b3IuQUNUSVZFKSk7XG4gICAgICAgIHByZXZpb3VzID0gcHJldmlvdXNbcHJldmlvdXMubGVuZ3RoIC0gMV07XG4gICAgICB9XG5cbiAgICAgIHZhciBoaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50LkhJREUsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBzaG93RXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNIT1csIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogcHJldmlvdXNcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocHJldmlvdXMpIHtcbiAgICAgICAgJChwcmV2aW91cykudHJpZ2dlcihoaWRlRXZlbnQpO1xuICAgICAgfVxuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2hvd0V2ZW50KTtcblxuICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgdGFyZ2V0ID0gJChzZWxlY3RvcilbMF07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2FjdGl2YXRlKHRoaXMuX2VsZW1lbnQsIGxpc3RFbGVtZW50KTtcblxuICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIHZhciBoaWRkZW5FdmVudCA9ICQuRXZlbnQoRXZlbnQuSElEREVOLCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogX3RoaXMyMi5fZWxlbWVudFxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgc2hvd25FdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPV04sIHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiBwcmV2aW91c1xuICAgICAgICB9KTtcblxuICAgICAgICAkKHByZXZpb3VzKS50cmlnZ2VyKGhpZGRlbkV2ZW50KTtcbiAgICAgICAgJChfdGhpczIyLl9lbGVtZW50KS50cmlnZ2VyKHNob3duRXZlbnQpO1xuICAgICAgfTtcblxuICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0YXJnZXQsIHRhcmdldC5wYXJlbnROb2RlLCBjb21wbGV0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBUYWIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBwcml2YXRlXG5cbiAgICBUYWIucHJvdG90eXBlLl9hY3RpdmF0ZSA9IGZ1bmN0aW9uIF9hY3RpdmF0ZShlbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMyMyA9IHRoaXM7XG5cbiAgICAgIHZhciBhY3RpdmUgPSAkKGNvbnRhaW5lcikuZmluZChTZWxlY3Rvci5BQ1RJVkUpWzBdO1xuICAgICAgdmFyIGlzVHJhbnNpdGlvbmluZyA9IGNhbGxiYWNrICYmIFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkgJiYgYWN0aXZlICYmICQoYWN0aXZlKS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSk7XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMyMy5fdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgaXNUcmFuc2l0aW9uaW5nLCBjYWxsYmFjayk7XG4gICAgICB9O1xuXG4gICAgICBpZiAoYWN0aXZlICYmIGlzVHJhbnNpdGlvbmluZykge1xuICAgICAgICAkKGFjdGl2ZSkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUUkFOU0lUSU9OX0RVUkFUSU9OKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgJChhY3RpdmUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVGFiLnByb3RvdHlwZS5fdHJhbnNpdGlvbkNvbXBsZXRlID0gZnVuY3Rpb24gX3RyYW5zaXRpb25Db21wbGV0ZShlbGVtZW50LCBhY3RpdmUsIGlzVHJhbnNpdGlvbmluZywgY2FsbGJhY2spIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgJChhY3RpdmUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuXG4gICAgICAgIHZhciBkcm9wZG93bkNoaWxkID0gJChhY3RpdmUucGFyZW50Tm9kZSkuZmluZChTZWxlY3Rvci5EUk9QRE9XTl9BQ1RJVkVfQ0hJTEQpWzBdO1xuXG4gICAgICAgIGlmIChkcm9wZG93bkNoaWxkKSB7XG4gICAgICAgICAgJChkcm9wZG93bkNoaWxkKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFjdGl2ZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgICQoZWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuXG4gICAgICBpZiAoaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgIFV0aWwucmVmbG93KGVsZW1lbnQpO1xuICAgICAgICAkKGVsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkZBREUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWxlbWVudC5wYXJlbnROb2RlICYmICQoZWxlbWVudC5wYXJlbnROb2RlKS5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUERPV05fTUVOVSkpIHtcblxuICAgICAgICB2YXIgZHJvcGRvd25FbGVtZW50ID0gJChlbGVtZW50KS5jbG9zZXN0KFNlbGVjdG9yLkRST1BET1dOKVswXTtcbiAgICAgICAgaWYgKGRyb3Bkb3duRWxlbWVudCkge1xuICAgICAgICAgICQoZHJvcGRvd25FbGVtZW50KS5maW5kKFNlbGVjdG9yLkRST1BET1dOX1RPR0dMRSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gc3RhdGljXG5cbiAgICBUYWIuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgICAgdmFyIGRhdGEgPSAkdGhpcy5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IFRhYih0aGlzKTtcbiAgICAgICAgICAkdGhpcy5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmIChkYXRhW2NvbmZpZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInICsgY29uZmlnICsgJ1wiJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKFRhYiwgbnVsbCwgW3tcbiAgICAgIGtleTogJ1ZFUlNJT04nLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBUYWI7XG4gIH0oKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgVGFiLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkKHRoaXMpLCAnc2hvdycpO1xuICB9KTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FXSA9IFRhYi5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gVGFiO1xuICAkLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICByZXR1cm4gVGFiLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIFRhYjtcbn0oalF1ZXJ5KTtcblxuLyogZ2xvYmFsIFBvcHBlciAqL1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMC1iZXRhKTogdG9vbHRpcC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxudmFyIFRvb2x0aXAgPSBmdW5jdGlvbiAoJCkge1xuXG4gIC8qKlxuICAgKiBDaGVjayBmb3IgUG9wcGVyIGRlcGVuZGVuY3lcbiAgICogUG9wcGVyIC0gaHR0cHM6Ly9wb3BwZXIuanMub3JnXG4gICAqL1xuICBpZiAodHlwZW9mIFBvcHBlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcCB0b29sdGlwcyByZXF1aXJlIFBvcHBlci5qcyAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKScpO1xuICB9XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FID0gJ3Rvb2x0aXAnO1xuICB2YXIgVkVSU0lPTiA9ICc0LjAuMC1iZXRhJztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLnRvb2x0aXAnO1xuICB2YXIgRVZFTlRfS0VZID0gJy4nICsgREFUQV9LRVk7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW05BTUVdO1xuICB2YXIgVFJBTlNJVElPTl9EVVJBVElPTiA9IDE1MDtcbiAgdmFyIENMQVNTX1BSRUZJWCA9ICdicy10b29sdGlwJztcbiAgdmFyIEJTQ0xTX1BSRUZJWF9SRUdFWCA9IG5ldyBSZWdFeHAoJyhefFxcXFxzKScgKyBDTEFTU19QUkVGSVggKyAnXFxcXFMrJywgJ2cnKTtcblxuICB2YXIgRGVmYXVsdFR5cGUgPSB7XG4gICAgYW5pbWF0aW9uOiAnYm9vbGVhbicsXG4gICAgdGVtcGxhdGU6ICdzdHJpbmcnLFxuICAgIHRpdGxlOiAnKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKScsXG4gICAgdHJpZ2dlcjogJ3N0cmluZycsXG4gICAgZGVsYXk6ICcobnVtYmVyfG9iamVjdCknLFxuICAgIGh0bWw6ICdib29sZWFuJyxcbiAgICBzZWxlY3RvcjogJyhzdHJpbmd8Ym9vbGVhbiknLFxuICAgIHBsYWNlbWVudDogJyhzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgICBvZmZzZXQ6ICcobnVtYmVyfHN0cmluZyknLFxuICAgIGNvbnRhaW5lcjogJyhzdHJpbmd8ZWxlbWVudHxib29sZWFuKScsXG4gICAgZmFsbGJhY2tQbGFjZW1lbnQ6ICcoc3RyaW5nfGFycmF5KSdcbiAgfTtcblxuICB2YXIgQXR0YWNobWVudE1hcCA9IHtcbiAgICBBVVRPOiAnYXV0bycsXG4gICAgVE9QOiAndG9wJyxcbiAgICBSSUdIVDogJ3JpZ2h0JyxcbiAgICBCT1RUT006ICdib3R0b20nLFxuICAgIExFRlQ6ICdsZWZ0J1xuICB9O1xuXG4gIHZhciBEZWZhdWx0ID0ge1xuICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ0b29sdGlwXCIgcm9sZT1cInRvb2x0aXBcIj4nICsgJzxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PicgKyAnPGRpdiBjbGFzcz1cInRvb2x0aXAtaW5uZXJcIj48L2Rpdj48L2Rpdj4nLFxuICAgIHRyaWdnZXI6ICdob3ZlciBmb2N1cycsXG4gICAgdGl0bGU6ICcnLFxuICAgIGRlbGF5OiAwLFxuICAgIGh0bWw6IGZhbHNlLFxuICAgIHNlbGVjdG9yOiBmYWxzZSxcbiAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgIG9mZnNldDogMCxcbiAgICBjb250YWluZXI6IGZhbHNlLFxuICAgIGZhbGxiYWNrUGxhY2VtZW50OiAnZmxpcCdcbiAgfTtcblxuICB2YXIgSG92ZXJTdGF0ZSA9IHtcbiAgICBTSE9XOiAnc2hvdycsXG4gICAgT1VUOiAnb3V0J1xuICB9O1xuXG4gIHZhciBFdmVudCA9IHtcbiAgICBISURFOiAnaGlkZScgKyBFVkVOVF9LRVksXG4gICAgSElEREVOOiAnaGlkZGVuJyArIEVWRU5UX0tFWSxcbiAgICBTSE9XOiAnc2hvdycgKyBFVkVOVF9LRVksXG4gICAgU0hPV046ICdzaG93bicgKyBFVkVOVF9LRVksXG4gICAgSU5TRVJURUQ6ICdpbnNlcnRlZCcgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0s6ICdjbGljaycgKyBFVkVOVF9LRVksXG4gICAgRk9DVVNJTjogJ2ZvY3VzaW4nICsgRVZFTlRfS0VZLFxuICAgIEZPQ1VTT1VUOiAnZm9jdXNvdXQnICsgRVZFTlRfS0VZLFxuICAgIE1PVVNFRU5URVI6ICdtb3VzZWVudGVyJyArIEVWRU5UX0tFWSxcbiAgICBNT1VTRUxFQVZFOiAnbW91c2VsZWF2ZScgKyBFVkVOVF9LRVlcbiAgfTtcblxuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIEZBREU6ICdmYWRlJyxcbiAgICBTSE9XOiAnc2hvdydcbiAgfTtcblxuICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgVE9PTFRJUDogJy50b29sdGlwJyxcbiAgICBUT09MVElQX0lOTkVSOiAnLnRvb2x0aXAtaW5uZXInLFxuICAgIEFSUk9XOiAnLmFycm93J1xuICB9O1xuXG4gIHZhciBUcmlnZ2VyID0ge1xuICAgIEhPVkVSOiAnaG92ZXInLFxuICAgIEZPQ1VTOiAnZm9jdXMnLFxuICAgIENMSUNLOiAnY2xpY2snLFxuICAgIE1BTlVBTDogJ21hbnVhbCdcblxuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuICB2YXIgVG9vbHRpcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUb29sdGlwKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRvb2x0aXApO1xuXG4gICAgICAvLyBwcml2YXRlXG4gICAgICB0aGlzLl9pc0VuYWJsZWQgPSB0cnVlO1xuICAgICAgdGhpcy5fdGltZW91dCA9IDA7XG4gICAgICB0aGlzLl9ob3ZlclN0YXRlID0gJyc7XG4gICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyID0ge307XG4gICAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xuXG4gICAgICAvLyBwcm90ZWN0ZWRcbiAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLmNvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy50aXAgPSBudWxsO1xuXG4gICAgICB0aGlzLl9zZXRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICAvLyBnZXR0ZXJzXG5cbiAgICAvLyBwdWJsaWNcblxuICAgIFRvb2x0aXAucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IHRydWU7XG4gICAgfTtcblxuICAgIFRvb2x0aXAucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgICAgdGhpcy5faXNFbmFibGVkID0gZmFsc2U7XG4gICAgfTtcblxuICAgIFRvb2x0aXAucHJvdG90eXBlLnRvZ2dsZUVuYWJsZWQgPSBmdW5jdGlvbiB0b2dnbGVFbmFibGVkKCkge1xuICAgICAgdGhpcy5faXNFbmFibGVkID0gIXRoaXMuX2lzRW5hYmxlZDtcbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGRhdGFLZXkgPSB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZO1xuICAgICAgICB2YXIgY29udGV4dCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KTtcblxuICAgICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgICBjb250ZXh0ID0gbmV3IHRoaXMuY29uc3RydWN0b3IoZXZlbnQuY3VycmVudFRhcmdldCwgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSk7XG4gICAgICAgICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXksIGNvbnRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlci5jbGljayA9ICFjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyLmNsaWNrO1xuXG4gICAgICAgIGlmIChjb250ZXh0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcbiAgICAgICAgICBjb250ZXh0Ll9lbnRlcihudWxsLCBjb250ZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0Ll9sZWF2ZShudWxsLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcblxuICAgICAgICBpZiAoJCh0aGlzLmdldFRpcEVsZW1lbnQoKSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgICAgdGhpcy5fbGVhdmUobnVsbCwgdGhpcyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZW50ZXIobnVsbCwgdGhpcyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFRvb2x0aXAucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xuXG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZKTtcblxuICAgICAgJCh0aGlzLmVsZW1lbnQpLm9mZih0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0tFWSk7XG4gICAgICAkKHRoaXMuZWxlbWVudCkuY2xvc2VzdCgnLm1vZGFsJykub2ZmKCdoaWRlLmJzLm1vZGFsJyk7XG5cbiAgICAgIGlmICh0aGlzLnRpcCkge1xuICAgICAgICAkKHRoaXMudGlwKS5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNFbmFibGVkID0gbnVsbDtcbiAgICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsO1xuICAgICAgdGhpcy5faG92ZXJTdGF0ZSA9IG51bGw7XG4gICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyID0gbnVsbDtcbiAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XG5cbiAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLmNvbmZpZyA9IG51bGw7XG4gICAgICB0aGlzLnRpcCA9IG51bGw7XG4gICAgfTtcblxuICAgIFRvb2x0aXAucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgdmFyIF90aGlzMjQgPSB0aGlzO1xuXG4gICAgICBpZiAoJCh0aGlzLmVsZW1lbnQpLmNzcygnZGlzcGxheScpID09PSAnbm9uZScpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgdXNlIHNob3cgb24gdmlzaWJsZSBlbGVtZW50cycpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2hvd0V2ZW50ID0gJC5FdmVudCh0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LlNIT1cpO1xuICAgICAgaWYgKHRoaXMuaXNXaXRoQ29udGVudCgpICYmIHRoaXMuX2lzRW5hYmxlZCkge1xuICAgICAgICAkKHRoaXMuZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICAgIHZhciBpc0luVGhlRG9tID0gJC5jb250YWlucyh0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCAhaXNJblRoZURvbSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcbiAgICAgICAgdmFyIHRpcElkID0gVXRpbC5nZXRVSUQodGhpcy5jb25zdHJ1Y3Rvci5OQU1FKTtcblxuICAgICAgICB0aXAuc2V0QXR0cmlidXRlKCdpZCcsIHRpcElkKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScsIHRpcElkKTtcblxuICAgICAgICB0aGlzLnNldENvbnRlbnQoKTtcblxuICAgICAgICBpZiAodGhpcy5jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgJCh0aXApLmFkZENsYXNzKENsYXNzTmFtZS5GQURFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwbGFjZW1lbnQgPSB0eXBlb2YgdGhpcy5jb25maWcucGxhY2VtZW50ID09PSAnZnVuY3Rpb24nID8gdGhpcy5jb25maWcucGxhY2VtZW50LmNhbGwodGhpcywgdGlwLCB0aGlzLmVsZW1lbnQpIDogdGhpcy5jb25maWcucGxhY2VtZW50O1xuXG4gICAgICAgIHZhciBhdHRhY2htZW50ID0gdGhpcy5fZ2V0QXR0YWNobWVudChwbGFjZW1lbnQpO1xuICAgICAgICB0aGlzLmFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KTtcblxuICAgICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5jb25maWcuY29udGFpbmVyID09PSBmYWxzZSA/IGRvY3VtZW50LmJvZHkgOiAkKHRoaXMuY29uZmlnLmNvbnRhaW5lcik7XG5cbiAgICAgICAgJCh0aXApLmRhdGEodGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSwgdGhpcyk7XG5cbiAgICAgICAgaWYgKCEkLmNvbnRhaW5zKHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgdGhpcy50aXApKSB7XG4gICAgICAgICAgJCh0aXApLmFwcGVuZFRvKGNvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMuZWxlbWVudCkudHJpZ2dlcih0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LklOU0VSVEVEKTtcblxuICAgICAgICB0aGlzLl9wb3BwZXIgPSBuZXcgUG9wcGVyKHRoaXMuZWxlbWVudCwgdGlwLCB7XG4gICAgICAgICAgcGxhY2VtZW50OiBhdHRhY2htZW50LFxuICAgICAgICAgIG1vZGlmaWVyczoge1xuICAgICAgICAgICAgb2Zmc2V0OiB7XG4gICAgICAgICAgICAgIG9mZnNldDogdGhpcy5jb25maWcub2Zmc2V0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmxpcDoge1xuICAgICAgICAgICAgICBiZWhhdmlvcjogdGhpcy5jb25maWcuZmFsbGJhY2tQbGFjZW1lbnRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhcnJvdzoge1xuICAgICAgICAgICAgICBlbGVtZW50OiBTZWxlY3Rvci5BUlJPV1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgb25DcmVhdGU6IGZ1bmN0aW9uIG9uQ3JlYXRlKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLm9yaWdpbmFsUGxhY2VtZW50ICE9PSBkYXRhLnBsYWNlbWVudCkge1xuICAgICAgICAgICAgICBfdGhpczI0Ll9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoZGF0YSkge1xuICAgICAgICAgICAgX3RoaXMyNC5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGRhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCh0aXApLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgICAvLyBpZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgYWRkIGV4dHJhXG4gICAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgdG8gdGhlIGJvZHkncyBpbW1lZGlhdGUgY2hpbGRyZW47XG4gICAgICAgIC8vIG9ubHkgbmVlZGVkIGJlY2F1c2Ugb2YgYnJva2VuIGV2ZW50IGRlbGVnYXRpb24gb24gaU9TXG4gICAgICAgIC8vIGh0dHBzOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxNC8wMi9tb3VzZV9ldmVudF9idWIuaHRtbFxuICAgICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgJCgnYm9keScpLmNoaWxkcmVuKCkub24oJ21vdXNlb3ZlcicsIG51bGwsICQubm9vcCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICBpZiAoX3RoaXMyNC5jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICBfdGhpczI0Ll9maXhUcmFuc2l0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBwcmV2SG92ZXJTdGF0ZSA9IF90aGlzMjQuX2hvdmVyU3RhdGU7XG4gICAgICAgICAgX3RoaXMyNC5faG92ZXJTdGF0ZSA9IG51bGw7XG5cbiAgICAgICAgICAkKF90aGlzMjQuZWxlbWVudCkudHJpZ2dlcihfdGhpczI0LmNvbnN0cnVjdG9yLkV2ZW50LlNIT1dOKTtcblxuICAgICAgICAgIGlmIChwcmV2SG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5PVVQpIHtcbiAgICAgICAgICAgIF90aGlzMjQuX2xlYXZlKG51bGwsIF90aGlzMjQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSAmJiAkKHRoaXMudGlwKS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgICAgICAkKHRoaXMudGlwKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRvb2x0aXAuX1RSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIGhpZGUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczI1ID0gdGhpcztcblxuICAgICAgdmFyIHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuICAgICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5ISURFKTtcbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICBpZiAoX3RoaXMyNS5faG92ZXJTdGF0ZSAhPT0gSG92ZXJTdGF0ZS5TSE9XICYmIHRpcC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgdGlwLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGlwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMjUuX2NsZWFuVGlwQ2xhc3MoKTtcbiAgICAgICAgX3RoaXMyNS5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScpO1xuICAgICAgICAkKF90aGlzMjUuZWxlbWVudCkudHJpZ2dlcihfdGhpczI1LmNvbnN0cnVjdG9yLkV2ZW50LkhJRERFTik7XG4gICAgICAgIGlmIChfdGhpczI1Ll9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgICBfdGhpczI1Ll9wb3BwZXIuZGVzdHJveSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgJCh0aGlzLmVsZW1lbnQpLnRyaWdnZXIoaGlkZUV2ZW50KTtcblxuICAgICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICQodGlwKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgIC8vIGlmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSByZW1vdmUgdGhlIGV4dHJhXG4gICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxuICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAkKCdib2R5JykuY2hpbGRyZW4oKS5vZmYoJ21vdXNlb3ZlcicsIG51bGwsICQubm9vcCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVHJpZ2dlci5DTElDS10gPSBmYWxzZTtcbiAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVHJpZ2dlci5GT0NVU10gPSBmYWxzZTtcbiAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVHJpZ2dlci5IT1ZFUl0gPSBmYWxzZTtcblxuICAgICAgaWYgKFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkgJiYgJCh0aGlzLnRpcCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpKSB7XG5cbiAgICAgICAgJCh0aXApLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoVFJBTlNJVElPTl9EVVJBVElPTik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9ob3ZlclN0YXRlID0gJyc7XG4gICAgfTtcblxuICAgIFRvb2x0aXAucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIHByb3RlY3RlZFxuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuaXNXaXRoQ29udGVudCA9IGZ1bmN0aW9uIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gQm9vbGVhbih0aGlzLmdldFRpdGxlKCkpO1xuICAgIH07XG5cbiAgICBUb29sdGlwLnByb3RvdHlwZS5hZGRBdHRhY2htZW50Q2xhc3MgPSBmdW5jdGlvbiBhZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCkge1xuICAgICAgJCh0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3MoQ0xBU1NfUFJFRklYICsgJy0nICsgYXR0YWNobWVudCk7XG4gICAgfTtcblxuICAgIFRvb2x0aXAucHJvdG90eXBlLmdldFRpcEVsZW1lbnQgPSBmdW5jdGlvbiBnZXRUaXBFbGVtZW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMudGlwID0gdGhpcy50aXAgfHwgJCh0aGlzLmNvbmZpZy50ZW1wbGF0ZSlbMF07XG4gICAgfTtcblxuICAgIFRvb2x0aXAucHJvdG90eXBlLnNldENvbnRlbnQgPSBmdW5jdGlvbiBzZXRDb250ZW50KCkge1xuICAgICAgdmFyICR0aXAgPSAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTtcbiAgICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoJHRpcC5maW5kKFNlbGVjdG9yLlRPT0xUSVBfSU5ORVIpLCB0aGlzLmdldFRpdGxlKCkpO1xuICAgICAgJHRpcC5yZW1vdmVDbGFzcyhDbGFzc05hbWUuRkFERSArICcgJyArIENsYXNzTmFtZS5TSE9XKTtcbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuc2V0RWxlbWVudENvbnRlbnQgPSBmdW5jdGlvbiBzZXRFbGVtZW50Q29udGVudCgkZWxlbWVudCwgY29udGVudCkge1xuICAgICAgdmFyIGh0bWwgPSB0aGlzLmNvbmZpZy5odG1sO1xuICAgICAgaWYgKCh0eXBlb2YgY29udGVudCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY29udGVudCkpID09PSAnb2JqZWN0JyAmJiAoY29udGVudC5ub2RlVHlwZSB8fCBjb250ZW50LmpxdWVyeSkpIHtcbiAgICAgICAgLy8gY29udGVudCBpcyBhIERPTSBub2RlIG9yIGEgalF1ZXJ5XG4gICAgICAgIGlmIChodG1sKSB7XG4gICAgICAgICAgaWYgKCEkKGNvbnRlbnQpLnBhcmVudCgpLmlzKCRlbGVtZW50KSkge1xuICAgICAgICAgICAgJGVsZW1lbnQuZW1wdHkoKS5hcHBlbmQoY29udGVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRlbGVtZW50LnRleHQoJChjb250ZW50KS50ZXh0KCkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkZWxlbWVudFtodG1sID8gJ2h0bWwnIDogJ3RleHQnXShjb250ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0VGl0bGUgPSBmdW5jdGlvbiBnZXRUaXRsZSgpIHtcbiAgICAgIHZhciB0aXRsZSA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKTtcblxuICAgICAgaWYgKCF0aXRsZSkge1xuICAgICAgICB0aXRsZSA9IHR5cGVvZiB0aGlzLmNvbmZpZy50aXRsZSA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuY29uZmlnLnRpdGxlLmNhbGwodGhpcy5lbGVtZW50KSA6IHRoaXMuY29uZmlnLnRpdGxlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGl0bGU7XG4gICAgfTtcblxuICAgIC8vIHByaXZhdGVcblxuICAgIFRvb2x0aXAucHJvdG90eXBlLl9nZXRBdHRhY2htZW50ID0gZnVuY3Rpb24gX2dldEF0dGFjaG1lbnQocGxhY2VtZW50KSB7XG4gICAgICByZXR1cm4gQXR0YWNobWVudE1hcFtwbGFjZW1lbnQudG9VcHBlckNhc2UoKV07XG4gICAgfTtcblxuICAgIFRvb2x0aXAucHJvdG90eXBlLl9zZXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfc2V0TGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF90aGlzMjYgPSB0aGlzO1xuXG4gICAgICB2YXIgdHJpZ2dlcnMgPSB0aGlzLmNvbmZpZy50cmlnZ2VyLnNwbGl0KCcgJyk7XG5cbiAgICAgIHRyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXIpIHtcbiAgICAgICAgaWYgKHRyaWdnZXIgPT09ICdjbGljaycpIHtcbiAgICAgICAgICAkKF90aGlzMjYuZWxlbWVudCkub24oX3RoaXMyNi5jb25zdHJ1Y3Rvci5FdmVudC5DTElDSywgX3RoaXMyNi5jb25maWcuc2VsZWN0b3IsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMjYudG9nZ2xlKGV2ZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyICE9PSBUcmlnZ2VyLk1BTlVBTCkge1xuICAgICAgICAgIHZhciBldmVudEluID0gdHJpZ2dlciA9PT0gVHJpZ2dlci5IT1ZFUiA/IF90aGlzMjYuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VFTlRFUiA6IF90aGlzMjYuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNJTjtcbiAgICAgICAgICB2YXIgZXZlbnRPdXQgPSB0cmlnZ2VyID09PSBUcmlnZ2VyLkhPVkVSID8gX3RoaXMyNi5jb25zdHJ1Y3Rvci5FdmVudC5NT1VTRUxFQVZFIDogX3RoaXMyNi5jb25zdHJ1Y3Rvci5FdmVudC5GT0NVU09VVDtcblxuICAgICAgICAgICQoX3RoaXMyNi5lbGVtZW50KS5vbihldmVudEluLCBfdGhpczI2LmNvbmZpZy5zZWxlY3RvciwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyNi5fZW50ZXIoZXZlbnQpO1xuICAgICAgICAgIH0pLm9uKGV2ZW50T3V0LCBfdGhpczI2LmNvbmZpZy5zZWxlY3RvciwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyNi5fbGVhdmUoZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgJChfdGhpczI2LmVsZW1lbnQpLmNsb3Nlc3QoJy5tb2RhbCcpLm9uKCdoaWRlLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczI2LmhpZGUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMuY29uZmlnLnNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0gJC5leHRlbmQoe30sIHRoaXMuY29uZmlnLCB7XG4gICAgICAgICAgdHJpZ2dlcjogJ21hbnVhbCcsXG4gICAgICAgICAgc2VsZWN0b3I6ICcnXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZml4VGl0bGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuX2ZpeFRpdGxlID0gZnVuY3Rpb24gX2ZpeFRpdGxlKCkge1xuICAgICAgdmFyIHRpdGxlVHlwZSA9IF90eXBlb2YodGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC10aXRsZScpKTtcbiAgICAgIGlmICh0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpIHx8IHRpdGxlVHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC10aXRsZScsIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykgfHwgJycpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCd0aXRsZScsICcnKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuX2VudGVyID0gZnVuY3Rpb24gX2VudGVyKGV2ZW50LCBjb250ZXh0KSB7XG4gICAgICB2YXIgZGF0YUtleSA9IHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVk7XG5cbiAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KTtcblxuICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5jdXJyZW50VGFyZ2V0LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcbiAgICAgICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXksIGNvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltldmVudC50eXBlID09PSAnZm9jdXNpbicgPyBUcmlnZ2VyLkZPQ1VTIDogVHJpZ2dlci5IT1ZFUl0gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoJChjb250ZXh0LmdldFRpcEVsZW1lbnQoKSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpIHx8IGNvbnRleHQuX2hvdmVyU3RhdGUgPT09IEhvdmVyU3RhdGUuU0hPVykge1xuICAgICAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID0gSG92ZXJTdGF0ZS5TSE9XO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNsZWFyVGltZW91dChjb250ZXh0Ll90aW1lb3V0KTtcblxuICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhvdmVyU3RhdGUuU0hPVztcblxuICAgICAgaWYgKCFjb250ZXh0LmNvbmZpZy5kZWxheSB8fCAhY29udGV4dC5jb25maWcuZGVsYXkuc2hvdykge1xuICAgICAgICBjb250ZXh0LnNob3coKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Ll90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLlNIT1cpIHtcbiAgICAgICAgICBjb250ZXh0LnNob3coKTtcbiAgICAgICAgfVxuICAgICAgfSwgY29udGV4dC5jb25maWcuZGVsYXkuc2hvdyk7XG4gICAgfTtcblxuICAgIFRvb2x0aXAucHJvdG90eXBlLl9sZWF2ZSA9IGZ1bmN0aW9uIF9sZWF2ZShldmVudCwgY29udGV4dCkge1xuICAgICAgdmFyIGRhdGFLZXkgPSB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZO1xuXG4gICAgICBjb250ZXh0ID0gY29udGV4dCB8fCAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSk7XG5cbiAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICBjb250ZXh0ID0gbmV3IHRoaXMuY29uc3RydWN0b3IoZXZlbnQuY3VycmVudFRhcmdldCwgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSk7XG4gICAgICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5LCBjb250ZXh0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgIGNvbnRleHQuX2FjdGl2ZVRyaWdnZXJbZXZlbnQudHlwZSA9PT0gJ2ZvY3Vzb3V0JyA/IFRyaWdnZXIuRk9DVVMgOiBUcmlnZ2VyLkhPVkVSXSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29udGV4dC5faXNXaXRoQWN0aXZlVHJpZ2dlcigpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpO1xuXG4gICAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID0gSG92ZXJTdGF0ZS5PVVQ7XG5cbiAgICAgIGlmICghY29udGV4dC5jb25maWcuZGVsYXkgfHwgIWNvbnRleHQuY29uZmlnLmRlbGF5LmhpZGUpIHtcbiAgICAgICAgY29udGV4dC5oaWRlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5PVVQpIHtcbiAgICAgICAgICBjb250ZXh0LmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSwgY29udGV4dC5jb25maWcuZGVsYXkuaGlkZSk7XG4gICAgfTtcblxuICAgIFRvb2x0aXAucHJvdG90eXBlLl9pc1dpdGhBY3RpdmVUcmlnZ2VyID0gZnVuY3Rpb24gX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSB7XG4gICAgICBmb3IgKHZhciB0cmlnZ2VyIGluIHRoaXMuX2FjdGl2ZVRyaWdnZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRyaWdnZXJbdHJpZ2dlcl0pIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIFRvb2x0aXAucHJvdG90eXBlLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gJC5leHRlbmQoe30sIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCwgJCh0aGlzLmVsZW1lbnQpLmRhdGEoKSwgY29uZmlnKTtcblxuICAgICAgaWYgKGNvbmZpZy5kZWxheSAmJiB0eXBlb2YgY29uZmlnLmRlbGF5ID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25maWcuZGVsYXkgPSB7XG4gICAgICAgICAgc2hvdzogY29uZmlnLmRlbGF5LFxuICAgICAgICAgIGhpZGU6IGNvbmZpZy5kZWxheVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLnRpdGxlICYmIHR5cGVvZiBjb25maWcudGl0bGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmZpZy50aXRsZSA9IGNvbmZpZy50aXRsZS50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLmNvbnRlbnQgJiYgdHlwZW9mIGNvbmZpZy5jb250ZW50ID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25maWcuY29udGVudCA9IGNvbmZpZy5jb250ZW50LnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSk7XG5cbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIFRvb2x0aXAucHJvdG90eXBlLl9nZXREZWxlZ2F0ZUNvbmZpZyA9IGZ1bmN0aW9uIF9nZXREZWxlZ2F0ZUNvbmZpZygpIHtcbiAgICAgIHZhciBjb25maWcgPSB7fTtcblxuICAgICAgaWYgKHRoaXMuY29uZmlnKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmNvbmZpZykge1xuICAgICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRba2V5XSAhPT0gdGhpcy5jb25maWdba2V5XSkge1xuICAgICAgICAgICAgY29uZmlnW2tleV0gPSB0aGlzLmNvbmZpZ1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBUb29sdGlwLnByb3RvdHlwZS5fY2xlYW5UaXBDbGFzcyA9IGZ1bmN0aW9uIF9jbGVhblRpcENsYXNzKCkge1xuICAgICAgdmFyICR0aXAgPSAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTtcbiAgICAgIHZhciB0YWJDbGFzcyA9ICR0aXAuYXR0cignY2xhc3MnKS5tYXRjaChCU0NMU19QUkVGSVhfUkVHRVgpO1xuICAgICAgaWYgKHRhYkNsYXNzICE9PSBudWxsICYmIHRhYkNsYXNzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgJHRpcC5yZW1vdmVDbGFzcyh0YWJDbGFzcy5qb2luKCcnKSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFRvb2x0aXAucHJvdG90eXBlLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UgPSBmdW5jdGlvbiBfaGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGRhdGEpIHtcbiAgICAgIHRoaXMuX2NsZWFuVGlwQ2xhc3MoKTtcbiAgICAgIHRoaXMuYWRkQXR0YWNobWVudENsYXNzKHRoaXMuX2dldEF0dGFjaG1lbnQoZGF0YS5wbGFjZW1lbnQpKTtcbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuX2ZpeFRyYW5zaXRpb24gPSBmdW5jdGlvbiBfZml4VHJhbnNpdGlvbigpIHtcbiAgICAgIHZhciB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcbiAgICAgIHZhciBpbml0Q29uZmlnQW5pbWF0aW9uID0gdGhpcy5jb25maWcuYW5pbWF0aW9uO1xuICAgICAgaWYgKHRpcC5nZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JykgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgJCh0aXApLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5GQURFKTtcbiAgICAgIHRoaXMuY29uZmlnLmFuaW1hdGlvbiA9IGZhbHNlO1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICAgIHRoaXMuY29uZmlnLmFuaW1hdGlvbiA9IGluaXRDb25maWdBbmltYXRpb247XG4gICAgfTtcblxuICAgIC8vIHN0YXRpY1xuXG4gICAgVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSk7XG4gICAgICAgIHZhciBfY29uZmlnID0gKHR5cGVvZiBjb25maWcgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGNvbmZpZykpID09PSAnb2JqZWN0JyAmJiBjb25maWc7XG5cbiAgICAgICAgaWYgKCFkYXRhICYmIC9kaXNwb3NlfGhpZGUvLnRlc3QoY29uZmlnKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgVG9vbHRpcCh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKGRhdGFbY29uZmlnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicgKyBjb25maWcgKyAnXCInKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoVG9vbHRpcCwgbnVsbCwgW3tcbiAgICAgIGtleTogJ1ZFUlNJT04nLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ0RlZmF1bHQnLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ05BTUUnLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBOQU1FO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ0RBVEFfS0VZJyxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gREFUQV9LRVk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnRXZlbnQnLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBFdmVudDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdFVkVOVF9LRVknLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBFVkVOVF9LRVk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnRGVmYXVsdFR5cGUnLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0VHlwZTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVG9vbHRpcDtcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUVdID0gVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gVG9vbHRpcDtcbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIFRvb2x0aXAuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICByZXR1cm4gVG9vbHRpcDtcbn0oalF1ZXJ5KTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4wLjAtYmV0YSk6IHBvcG92ZXIuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbnZhciBQb3BvdmVyID0gZnVuY3Rpb24gKCQpIHtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUgPSAncG9wb3Zlcic7XG4gIHZhciBWRVJTSU9OID0gJzQuMC4wLWJldGEnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMucG9wb3Zlcic7XG4gIHZhciBFVkVOVF9LRVkgPSAnLicgKyBEQVRBX0tFWTtcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV07XG4gIHZhciBDTEFTU19QUkVGSVggPSAnYnMtcG9wb3Zlcic7XG4gIHZhciBCU0NMU19QUkVGSVhfUkVHRVggPSBuZXcgUmVnRXhwKCcoXnxcXFxccyknICsgQ0xBU1NfUFJFRklYICsgJ1xcXFxTKycsICdnJyk7XG5cbiAgdmFyIERlZmF1bHQgPSAkLmV4dGVuZCh7fSwgVG9vbHRpcC5EZWZhdWx0LCB7XG4gICAgcGxhY2VtZW50OiAncmlnaHQnLFxuICAgIHRyaWdnZXI6ICdjbGljaycsXG4gICAgY29udGVudDogJycsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwicG9wb3ZlclwiIHJvbGU9XCJ0b29sdGlwXCI+JyArICc8ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj4nICsgJzxoMyBjbGFzcz1cInBvcG92ZXItaGVhZGVyXCI+PC9oMz4nICsgJzxkaXYgY2xhc3M9XCJwb3BvdmVyLWJvZHlcIj48L2Rpdj48L2Rpdj4nXG4gIH0pO1xuXG4gIHZhciBEZWZhdWx0VHlwZSA9ICQuZXh0ZW5kKHt9LCBUb29sdGlwLkRlZmF1bHRUeXBlLCB7XG4gICAgY29udGVudDogJyhzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbiknXG4gIH0pO1xuXG4gIHZhciBDbGFzc05hbWUgPSB7XG4gICAgRkFERTogJ2ZhZGUnLFxuICAgIFNIT1c6ICdzaG93J1xuICB9O1xuXG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBUSVRMRTogJy5wb3BvdmVyLWhlYWRlcicsXG4gICAgQ09OVEVOVDogJy5wb3BvdmVyLWJvZHknXG4gIH07XG5cbiAgdmFyIEV2ZW50ID0ge1xuICAgIEhJREU6ICdoaWRlJyArIEVWRU5UX0tFWSxcbiAgICBISURERU46ICdoaWRkZW4nICsgRVZFTlRfS0VZLFxuICAgIFNIT1c6ICdzaG93JyArIEVWRU5UX0tFWSxcbiAgICBTSE9XTjogJ3Nob3duJyArIEVWRU5UX0tFWSxcbiAgICBJTlNFUlRFRDogJ2luc2VydGVkJyArIEVWRU5UX0tFWSxcbiAgICBDTElDSzogJ2NsaWNrJyArIEVWRU5UX0tFWSxcbiAgICBGT0NVU0lOOiAnZm9jdXNpbicgKyBFVkVOVF9LRVksXG4gICAgRk9DVVNPVVQ6ICdmb2N1c291dCcgKyBFVkVOVF9LRVksXG4gICAgTU9VU0VFTlRFUjogJ21vdXNlZW50ZXInICsgRVZFTlRfS0VZLFxuICAgIE1PVVNFTEVBVkU6ICdtb3VzZWxlYXZlJyArIEVWRU5UX0tFWVxuXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG4gIHZhciBQb3BvdmVyID0gZnVuY3Rpb24gKF9Ub29sdGlwKSB7XG4gICAgX2luaGVyaXRzKFBvcG92ZXIsIF9Ub29sdGlwKTtcblxuICAgIGZ1bmN0aW9uIFBvcG92ZXIoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9wb3Zlcik7XG5cbiAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfVG9vbHRpcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICAvLyBvdmVycmlkZXNcblxuICAgIFBvcG92ZXIucHJvdG90eXBlLmlzV2l0aENvbnRlbnQgPSBmdW5jdGlvbiBpc1dpdGhDb250ZW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKSB8fCB0aGlzLl9nZXRDb250ZW50KCk7XG4gICAgfTtcblxuICAgIFBvcG92ZXIucHJvdG90eXBlLmFkZEF0dGFjaG1lbnRDbGFzcyA9IGZ1bmN0aW9uIGFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KSB7XG4gICAgICAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKS5hZGRDbGFzcyhDTEFTU19QUkVGSVggKyAnLScgKyBhdHRhY2htZW50KTtcbiAgICB9O1xuXG4gICAgUG9wb3Zlci5wcm90b3R5cGUuZ2V0VGlwRWxlbWVudCA9IGZ1bmN0aW9uIGdldFRpcEVsZW1lbnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy50aXAgPSB0aGlzLnRpcCB8fCAkKHRoaXMuY29uZmlnLnRlbXBsYXRlKVswXTtcbiAgICB9O1xuXG4gICAgUG9wb3Zlci5wcm90b3R5cGUuc2V0Q29udGVudCA9IGZ1bmN0aW9uIHNldENvbnRlbnQoKSB7XG4gICAgICB2YXIgJHRpcCA9ICQodGhpcy5nZXRUaXBFbGVtZW50KCkpO1xuXG4gICAgICAvLyB3ZSB1c2UgYXBwZW5kIGZvciBodG1sIG9iamVjdHMgdG8gbWFpbnRhaW4ganMgZXZlbnRzXG4gICAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KCR0aXAuZmluZChTZWxlY3Rvci5USVRMRSksIHRoaXMuZ2V0VGl0bGUoKSk7XG4gICAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KCR0aXAuZmluZChTZWxlY3Rvci5DT05URU5UKSwgdGhpcy5fZ2V0Q29udGVudCgpKTtcblxuICAgICAgJHRpcC5yZW1vdmVDbGFzcyhDbGFzc05hbWUuRkFERSArICcgJyArIENsYXNzTmFtZS5TSE9XKTtcbiAgICB9O1xuXG4gICAgLy8gcHJpdmF0ZVxuXG4gICAgUG9wb3Zlci5wcm90b3R5cGUuX2dldENvbnRlbnQgPSBmdW5jdGlvbiBfZ2V0Q29udGVudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbnRlbnQnKSB8fCAodHlwZW9mIHRoaXMuY29uZmlnLmNvbnRlbnQgPT09ICdmdW5jdGlvbicgPyB0aGlzLmNvbmZpZy5jb250ZW50LmNhbGwodGhpcy5lbGVtZW50KSA6IHRoaXMuY29uZmlnLmNvbnRlbnQpO1xuICAgIH07XG5cbiAgICBQb3BvdmVyLnByb3RvdHlwZS5fY2xlYW5UaXBDbGFzcyA9IGZ1bmN0aW9uIF9jbGVhblRpcENsYXNzKCkge1xuICAgICAgdmFyICR0aXAgPSAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTtcbiAgICAgIHZhciB0YWJDbGFzcyA9ICR0aXAuYXR0cignY2xhc3MnKS5tYXRjaChCU0NMU19QUkVGSVhfUkVHRVgpO1xuICAgICAgaWYgKHRhYkNsYXNzICE9PSBudWxsICYmIHRhYkNsYXNzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgJHRpcC5yZW1vdmVDbGFzcyh0YWJDbGFzcy5qb2luKCcnKSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIHN0YXRpY1xuXG4gICAgUG9wb3Zlci5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSk7XG4gICAgICAgIHZhciBfY29uZmlnID0gKHR5cGVvZiBjb25maWcgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGNvbmZpZykpID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IG51bGw7XG5cbiAgICAgICAgaWYgKCFkYXRhICYmIC9kZXN0cm95fGhpZGUvLnRlc3QoY29uZmlnKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgUG9wb3Zlcih0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKGRhdGFbY29uZmlnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicgKyBjb25maWcgKyAnXCInKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoUG9wb3ZlciwgbnVsbCwgW3tcbiAgICAgIGtleTogJ1ZFUlNJT04nLFxuXG5cbiAgICAgIC8vIGdldHRlcnNcblxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ0RlZmF1bHQnLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ05BTUUnLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBOQU1FO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ0RBVEFfS0VZJyxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gREFUQV9LRVk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnRXZlbnQnLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBFdmVudDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdFVkVOVF9LRVknLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBFVkVOVF9LRVk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnRGVmYXVsdFR5cGUnLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0VHlwZTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUG9wb3ZlcjtcbiAgfShUb29sdGlwKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FXSA9IFBvcG92ZXIuX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFBvcG92ZXI7XG4gICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgIHJldHVybiBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIFBvcG92ZXI7XG59KGpRdWVyeSk7XG5cblxufSkoKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9ib290c3RyYXAvZGlzdC9qcy9ib290c3RyYXAuanNcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqIVxuICogQGZpbGVPdmVydmlldyBLaWNrYXNzIGxpYnJhcnkgdG8gY3JlYXRlIGFuZCBwbGFjZSBwb3BwZXJzIG5lYXIgdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnRzLlxuICogQHZlcnNpb24gMS4xMi45XG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE2IEZlZGVyaWNvIFppdm9sbyBhbmQgY29udHJpYnV0b3JzXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gKiBTT0ZUV0FSRS5cbiAqL1xudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgbG9uZ2VyVGltZW91dEJyb3dzZXJzID0gWydFZGdlJywgJ1RyaWRlbnQnLCAnRmlyZWZveCddO1xudmFyIHRpbWVvdXREdXJhdGlvbiA9IDA7XG5mb3IgKHZhciBpID0gMDsgaSA8IGxvbmdlclRpbWVvdXRCcm93c2Vycy5sZW5ndGg7IGkgKz0gMSkge1xuICBpZiAoaXNCcm93c2VyICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihsb25nZXJUaW1lb3V0QnJvd3NlcnNbaV0pID49IDApIHtcbiAgICB0aW1lb3V0RHVyYXRpb24gPSAxO1xuICAgIGJyZWFrO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1pY3JvdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2FsbGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgd2luZG93LlByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGVkID0gZmFsc2U7XG4gICAgICBmbigpO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0YXNrRGVib3VuY2UoZm4pIHtcbiAgdmFyIHNjaGVkdWxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghc2NoZWR1bGVkKSB7XG4gICAgICBzY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICBmbigpO1xuICAgICAgfSwgdGltZW91dER1cmF0aW9uKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBzdXBwb3J0c01pY3JvVGFza3MgPSBpc0Jyb3dzZXIgJiYgd2luZG93LlByb21pc2U7XG5cbi8qKlxuKiBDcmVhdGUgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiBhIG1ldGhvZCwgdGhhdCdzIGFzeW5jaHJvbm91c2x5IGRlZmVycmVkXG4qIGJ1dCBjYWxsZWQgaW4gdGhlIG1pbmltdW0gdGltZSBwb3NzaWJsZS5cbipcbiogQG1ldGhvZFxuKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4qIEBhcmd1bWVudCB7RnVuY3Rpb259IGZuXG4qIEByZXR1cm5zIHtGdW5jdGlvbn1cbiovXG52YXIgZGVib3VuY2UgPSBzdXBwb3J0c01pY3JvVGFza3MgPyBtaWNyb3Rhc2tEZWJvdW5jZSA6IHRhc2tEZWJvdW5jZTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFyaWFibGUgaXMgYSBmdW5jdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBbnl9IGZ1bmN0aW9uVG9DaGVjayAtIHZhcmlhYmxlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvOiBpcyBhIGZ1bmN0aW9uP1xuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGZ1bmN0aW9uVG9DaGVjaykge1xuICB2YXIgZ2V0VHlwZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb25Ub0NoZWNrICYmIGdldFR5cGUudG9TdHJpbmcuY2FsbChmdW5jdGlvblRvQ2hlY2spID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIEdldCBDU1MgY29tcHV0ZWQgcHJvcGVydHkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHlcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciBjc3MgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xuICByZXR1cm4gcHJvcGVydHkgPyBjc3NbcHJvcGVydHldIDogY3NzO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcmVudE5vZGUgb3IgdGhlIGhvc3Qgb2YgdGhlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG4gIHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNjcm9sbGluZyBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHNjcm9sbCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gUmV0dXJuIGJvZHksIGBnZXRTY3JvbGxgIHdpbGwgdGFrZSBjYXJlIHRvIGdldCB0aGUgY29ycmVjdCBgc2Nyb2xsVG9wYCBmcm9tIGl0XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgc3dpdGNoIChlbGVtZW50Lm5vZGVOYW1lKSB7XG4gICAgY2FzZSAnSFRNTCc6XG4gICAgY2FzZSAnQk9EWSc6XG4gICAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHk7XG4gICAgY2FzZSAnI2RvY3VtZW50JzpcbiAgICAgIHJldHVybiBlbGVtZW50LmJvZHk7XG4gIH1cblxuICAvLyBGaXJlZm94IHdhbnQgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcblxuICB2YXIgX2dldFN0eWxlQ29tcHV0ZWRQcm9wID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dYLFxuICAgICAgb3ZlcmZsb3dZID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WTtcblxuICBpZiAoLyhhdXRvfHNjcm9sbCkvLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG9mZnNldCBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIG9mZnNldFBhcmVudCA9IGVsZW1lbnQgJiYgZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG4gIHZhciBub2RlTmFtZSA9IG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQubm9kZU5hbWU7XG5cbiAgaWYgKCFub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIC5vZmZzZXRQYXJlbnQgd2lsbCByZXR1cm4gdGhlIGNsb3Nlc3QgVEQgb3IgVEFCTEUgaW4gY2FzZVxuICAvLyBubyBvZmZzZXRQYXJlbnQgaXMgcHJlc2VudCwgSSBoYXRlIHRoaXMgam9iLi4uXG4gIGlmIChbJ1REJywgJ1RBQkxFJ10uaW5kZXhPZihvZmZzZXRQYXJlbnQubm9kZU5hbWUpICE9PSAtMSAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkob2Zmc2V0UGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycpIHtcbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50O1xufVxuXG5mdW5jdGlvbiBpc09mZnNldENvbnRhaW5lcihlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIG5vZGVOYW1lID09PSAnSFRNTCcgfHwgZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpID09PSBlbGVtZW50O1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSByb290IG5vZGUgKGRvY3VtZW50LCBzaGFkb3dET00gcm9vdCkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybnMge0VsZW1lbnR9IHJvb3Qgbm9kZVxuICovXG5mdW5jdGlvbiBnZXRSb290KG5vZGUpIHtcbiAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBnZXRSb290KG5vZGUucGFyZW50Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgb2Zmc2V0IHBhcmVudCBjb21tb24gdG8gdGhlIHR3byBwcm92aWRlZCBub2Rlc1xuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MVxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MlxuICogQHJldHVybnMge0VsZW1lbnR9IGNvbW1vbiBvZmZzZXQgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGVsZW1lbnQyKSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQxIHx8ICFlbGVtZW50MS5ub2RlVHlwZSB8fCAhZWxlbWVudDIgfHwgIWVsZW1lbnQyLm5vZGVUeXBlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIEhlcmUgd2UgbWFrZSBzdXJlIHRvIGdpdmUgYXMgXCJzdGFydFwiIHRoZSBlbGVtZW50IHRoYXQgY29tZXMgZmlyc3QgaW4gdGhlIERPTVxuICB2YXIgb3JkZXIgPSBlbGVtZW50MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtZW50MikgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORztcbiAgdmFyIHN0YXJ0ID0gb3JkZXIgPyBlbGVtZW50MSA6IGVsZW1lbnQyO1xuICB2YXIgZW5kID0gb3JkZXIgPyBlbGVtZW50MiA6IGVsZW1lbnQxO1xuXG4gIC8vIEdldCBjb21tb24gYW5jZXN0b3IgY29udGFpbmVyXG4gIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIHJhbmdlLnNldFN0YXJ0KHN0YXJ0LCAwKTtcbiAgcmFuZ2Uuc2V0RW5kKGVuZCwgMCk7XG4gIHZhciBjb21tb25BbmNlc3RvckNvbnRhaW5lciA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuXG4gIC8vIEJvdGggbm9kZXMgYXJlIGluc2lkZSAjZG9jdW1lbnRcblxuICBpZiAoZWxlbWVudDEgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyICYmIGVsZW1lbnQyICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciB8fCBzdGFydC5jb250YWlucyhlbmQpKSB7XG4gICAgaWYgKGlzT2Zmc2V0Q29udGFpbmVyKGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSkge1xuICAgICAgcmV0dXJuIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQoY29tbW9uQW5jZXN0b3JDb250YWluZXIpO1xuICB9XG5cbiAgLy8gb25lIG9mIHRoZSBub2RlcyBpcyBpbnNpZGUgc2hhZG93RE9NLCBmaW5kIHdoaWNoIG9uZVxuICB2YXIgZWxlbWVudDFyb290ID0gZ2V0Um9vdChlbGVtZW50MSk7XG4gIGlmIChlbGVtZW50MXJvb3QuaG9zdCkge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxcm9vdC5ob3N0LCBlbGVtZW50Mik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGdldFJvb3QoZWxlbWVudDIpLmhvc3QpO1xuICB9XG59XG5cbi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50IGluIHRoZSBnaXZlbiBzaWRlICh0b3AgYW5kIGxlZnQpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzaWRlIGB0b3BgIG9yIGBsZWZ0YFxuICogQHJldHVybnMge251bWJlcn0gYW1vdW50IG9mIHNjcm9sbGVkIHBpeGVsc1xuICovXG5mdW5jdGlvbiBnZXRTY3JvbGwoZWxlbWVudCkge1xuICB2YXIgc2lkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ3RvcCc7XG5cbiAgdmFyIHVwcGVyU2lkZSA9IHNpZGUgPT09ICd0b3AnID8gJ3Njcm9sbFRvcCcgOiAnc2Nyb2xsTGVmdCc7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB2YXIgc2Nyb2xsaW5nRWxlbWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGh0bWw7XG4gICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnRbdXBwZXJTaWRlXTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50W3VwcGVyU2lkZV07XG59XG5cbi8qXG4gKiBTdW0gb3Igc3VidHJhY3QgdGhlIGVsZW1lbnQgc2Nyb2xsIHZhbHVlcyAobGVmdCBhbmQgdG9wKSBmcm9tIGEgZ2l2ZW4gcmVjdCBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0IC0gUmVjdCBvYmplY3QgeW91IHdhbnQgdG8gY2hhbmdlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgZnJvbSB0aGUgZnVuY3Rpb24gcmVhZHMgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc3VidHJhY3QgLSBzZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBzdWJ0cmFjdCB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHJldHVybiB7T2JqZWN0fSByZWN0IC0gVGhlIG1vZGlmaWVyIHJlY3Qgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGluY2x1ZGVTY3JvbGwocmVjdCwgZWxlbWVudCkge1xuICB2YXIgc3VidHJhY3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICB2YXIgbW9kaWZpZXIgPSBzdWJ0cmFjdCA/IC0xIDogMTtcbiAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbi8qXG4gKiBIZWxwZXIgdG8gZGV0ZWN0IGJvcmRlcnMgb2YgYSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlc1xuICogUmVzdWx0IG9mIGBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHlgIG9uIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gYXhpcyAtIGB4YCBvciBgeWBcbiAqIEByZXR1cm4ge251bWJlcn0gYm9yZGVycyAtIFRoZSBib3JkZXJzIHNpemUgb2YgdGhlIGdpdmVuIGF4aXNcbiAqL1xuXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsIGF4aXMpIHtcbiAgdmFyIHNpZGVBID0gYXhpcyA9PT0gJ3gnID8gJ0xlZnQnIDogJ1RvcCc7XG4gIHZhciBzaWRlQiA9IHNpZGVBID09PSAnTGVmdCcgPyAnUmlnaHQnIDogJ0JvdHRvbSc7XG5cbiAgcmV0dXJuIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUEgKyAnV2lkdGgnXSwgMTApICsgcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQiArICdXaWR0aCddLCAxMCk7XG59XG5cbi8qKlxuICogVGVsbHMgaWYgeW91IGFyZSBydW5uaW5nIEludGVybmV0IEV4cGxvcmVyIDEwXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gaXNJRTEwXG4gKi9cbnZhciBpc0lFMTAgPSB1bmRlZmluZWQ7XG5cbnZhciBpc0lFMTAkMSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKGlzSUUxMCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaXNJRTEwID0gbmF2aWdhdG9yLmFwcFZlcnNpb24uaW5kZXhPZignTVNJRSAxMCcpICE9PSAtMTtcbiAgfVxuICByZXR1cm4gaXNJRTEwO1xufTtcblxuZnVuY3Rpb24gZ2V0U2l6ZShheGlzLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSB7XG4gIHJldHVybiBNYXRoLm1heChib2R5WydvZmZzZXQnICsgYXhpc10sIGJvZHlbJ3Njcm9sbCcgKyBheGlzXSwgaHRtbFsnY2xpZW50JyArIGF4aXNdLCBodG1sWydvZmZzZXQnICsgYXhpc10sIGh0bWxbJ3Njcm9sbCcgKyBheGlzXSwgaXNJRTEwJDEoKSA/IGh0bWxbJ29mZnNldCcgKyBheGlzXSArIGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnVG9wJyA6ICdMZWZ0JyldICsgY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdCb3R0b20nIDogJ1JpZ2h0JyldIDogMCk7XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvd1NpemVzKCkge1xuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gIHZhciBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgY29tcHV0ZWRTdHlsZSA9IGlzSUUxMCQxKCkgJiYgZ2V0Q29tcHV0ZWRTdHlsZShodG1sKTtcblxuICByZXR1cm4ge1xuICAgIGhlaWdodDogZ2V0U2l6ZSgnSGVpZ2h0JywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSksXG4gICAgd2lkdGg6IGdldFNpemUoJ1dpZHRoJywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSlcbiAgfTtcbn1cblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxuXG5cblxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIEdpdmVuIGVsZW1lbnQgb2Zmc2V0cywgZ2VuZXJhdGUgYW4gb3V0cHV0IHNpbWlsYXIgdG8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gb2Zmc2V0c1xuICogQHJldHVybnMge09iamVjdH0gQ2xpZW50UmVjdCBsaWtlIG91dHB1dFxuICovXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0KG9mZnNldHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvZmZzZXRzLCB7XG4gICAgcmlnaHQ6IG9mZnNldHMubGVmdCArIG9mZnNldHMud2lkdGgsXG4gICAgYm90dG9tOiBvZmZzZXRzLnRvcCArIG9mZnNldHMuaGVpZ2h0XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBib3VuZGluZyBjbGllbnQgcmVjdCBvZiBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtPYmplY3R9IGNsaWVudCByZWN0XG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0ge307XG5cbiAgLy8gSUUxMCAxMCBGSVg6IFBsZWFzZSwgZG9uJ3QgYXNrLCB0aGUgZWxlbWVudCBpc24ndFxuICAvLyBjb25zaWRlcmVkIGluIERPTSBpbiBzb21lIGNpcmN1bXN0YW5jZXMuLi5cbiAgLy8gVGhpcyBpc24ndCByZXByb2R1Y2libGUgaW4gSUUxMCBjb21wYXRpYmlsaXR5IG1vZGUgb2YgSUUxMVxuICBpZiAoaXNJRTEwJDEoKSkge1xuICAgIHRyeSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICAgICAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgICAgIHJlY3QudG9wICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0O1xuICAgICAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0O1xuICAgIH0gY2F0Y2ggKGVycikge31cbiAgfSBlbHNlIHtcbiAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSB7XG4gICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgIHRvcDogcmVjdC50b3AsXG4gICAgd2lkdGg6IHJlY3QucmlnaHQgLSByZWN0LmxlZnQsXG4gICAgaGVpZ2h0OiByZWN0LmJvdHRvbSAtIHJlY3QudG9wXG4gIH07XG5cbiAgLy8gc3VidHJhY3Qgc2Nyb2xsYmFyIHNpemUgZnJvbSBzaXplc1xuICB2YXIgc2l6ZXMgPSBlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcgPyBnZXRXaW5kb3dTaXplcygpIDoge307XG4gIHZhciB3aWR0aCA9IHNpemVzLndpZHRoIHx8IGVsZW1lbnQuY2xpZW50V2lkdGggfHwgcmVzdWx0LnJpZ2h0IC0gcmVzdWx0LmxlZnQ7XG4gIHZhciBoZWlnaHQgPSBzaXplcy5oZWlnaHQgfHwgZWxlbWVudC5jbGllbnRIZWlnaHQgfHwgcmVzdWx0LmJvdHRvbSAtIHJlc3VsdC50b3A7XG5cbiAgdmFyIGhvcml6U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRXaWR0aCAtIHdpZHRoO1xuICB2YXIgdmVydFNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gaGVpZ2h0O1xuXG4gIC8vIGlmIGFuIGh5cG90aGV0aWNhbCBzY3JvbGxiYXIgaXMgZGV0ZWN0ZWQsIHdlIG11c3QgYmUgc3VyZSBpdCdzIG5vdCBhIGBib3JkZXJgXG4gIC8vIHdlIG1ha2UgdGhpcyBjaGVjayBjb25kaXRpb25hbCBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICBpZiAoaG9yaXpTY3JvbGxiYXIgfHwgdmVydFNjcm9sbGJhcikge1xuICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCk7XG4gICAgaG9yaXpTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneCcpO1xuICAgIHZlcnRTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneScpO1xuXG4gICAgcmVzdWx0LndpZHRoIC09IGhvcml6U2Nyb2xsYmFyO1xuICAgIHJlc3VsdC5oZWlnaHQgLT0gdmVydFNjcm9sbGJhcjtcbiAgfVxuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KHJlc3VsdCk7XG59XG5cbmZ1bmN0aW9uIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShjaGlsZHJlbiwgcGFyZW50KSB7XG4gIHZhciBpc0lFMTAgPSBpc0lFMTAkMSgpO1xuICB2YXIgaXNIVE1MID0gcGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCc7XG4gIHZhciBjaGlsZHJlblJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoY2hpbGRyZW4pO1xuICB2YXIgcGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChwYXJlbnQpO1xuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGNoaWxkcmVuKTtcblxuICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KHBhcmVudCk7XG4gIHZhciBib3JkZXJUb3BXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlclRvcFdpZHRoLCAxMCk7XG4gIHZhciBib3JkZXJMZWZ0V2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJMZWZ0V2lkdGgsIDEwKTtcblxuICB2YXIgb2Zmc2V0cyA9IGdldENsaWVudFJlY3Qoe1xuICAgIHRvcDogY2hpbGRyZW5SZWN0LnRvcCAtIHBhcmVudFJlY3QudG9wIC0gYm9yZGVyVG9wV2lkdGgsXG4gICAgbGVmdDogY2hpbGRyZW5SZWN0LmxlZnQgLSBwYXJlbnRSZWN0LmxlZnQgLSBib3JkZXJMZWZ0V2lkdGgsXG4gICAgd2lkdGg6IGNoaWxkcmVuUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IGNoaWxkcmVuUmVjdC5oZWlnaHRcbiAgfSk7XG4gIG9mZnNldHMubWFyZ2luVG9wID0gMDtcbiAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gMDtcblxuICAvLyBTdWJ0cmFjdCBtYXJnaW5zIG9mIGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGl0J3MgYmVpbmcgdXNlZCBhcyBwYXJlbnRcbiAgLy8gd2UgZG8gdGhpcyBvbmx5IG9uIEhUTUwgYmVjYXVzZSBpdCdzIHRoZSBvbmx5IGVsZW1lbnQgdGhhdCBiZWhhdmVzXG4gIC8vIGRpZmZlcmVudGx5IHdoZW4gbWFyZ2lucyBhcmUgYXBwbGllZCB0byBpdC4gVGhlIG1hcmdpbnMgYXJlIGluY2x1ZGVkIGluXG4gIC8vIHRoZSBib3ggb2YgdGhlIGRvY3VtZW50RWxlbWVudCwgaW4gdGhlIG90aGVyIGNhc2VzIG5vdC5cbiAgaWYgKCFpc0lFMTAgJiYgaXNIVE1MKSB7XG4gICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCwgMTApO1xuICAgIHZhciBtYXJnaW5MZWZ0ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCwgMTApO1xuXG4gICAgb2Zmc2V0cy50b3AgLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5ib3R0b20gLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5sZWZ0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG4gICAgb2Zmc2V0cy5yaWdodCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuXG4gICAgLy8gQXR0YWNoIG1hcmdpblRvcCBhbmQgbWFyZ2luTGVmdCBiZWNhdXNlIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyB3ZSBtYXkgbmVlZCB0aGVtXG4gICAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gbWFyZ2luTGVmdDtcbiAgfVxuXG4gIGlmIChpc0lFMTAgPyBwYXJlbnQuY29udGFpbnMoc2Nyb2xsUGFyZW50KSA6IHBhcmVudCA9PT0gc2Nyb2xsUGFyZW50ICYmIHNjcm9sbFBhcmVudC5ub2RlTmFtZSAhPT0gJ0JPRFknKSB7XG4gICAgb2Zmc2V0cyA9IGluY2x1ZGVTY3JvbGwob2Zmc2V0cywgcGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG5mdW5jdGlvbiBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUoZWxlbWVudCkge1xuICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciByZWxhdGl2ZU9mZnNldCA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShlbGVtZW50LCBodG1sKTtcbiAgdmFyIHdpZHRoID0gTWF0aC5tYXgoaHRtbC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gIHZhciBoZWlnaHQgPSBNYXRoLm1heChodG1sLmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuXG4gIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoaHRtbCk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGh0bWwsICdsZWZ0Jyk7XG5cbiAgdmFyIG9mZnNldCA9IHtcbiAgICB0b3A6IHNjcm9sbFRvcCAtIHJlbGF0aXZlT2Zmc2V0LnRvcCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpblRvcCxcbiAgICBsZWZ0OiBzY3JvbGxMZWZ0IC0gcmVsYXRpdmVPZmZzZXQubGVmdCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpbkxlZnQsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3Qob2Zmc2V0KTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBpcyBmaXhlZCBvciBpcyBpbnNpZGUgYSBmaXhlZCBwYXJlbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBjdXN0b21Db250YWluZXJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG8gXCJpc0ZpeGVkP1wiXG4gKi9cbmZ1bmN0aW9uIGlzRml4ZWQoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gaXNGaXhlZChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbn1cblxuLyoqXG4gKiBDb21wdXRlZCB0aGUgYm91bmRhcmllcyBsaW1pdHMgYW5kIHJldHVybiB0aGVtXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IHBhZGRpbmdcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50IC0gRWxlbWVudCB1c2VkIHRvIGRlZmluZSB0aGUgYm91bmRhcmllc1xuICogQHJldHVybnMge09iamVjdH0gQ29vcmRpbmF0ZXMgb2YgdGhlIGJvdW5kYXJpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIGJvdW5kYXJpZXMgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuICB2YXIgb2Zmc2V0UGFyZW50ID0gZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIHJlZmVyZW5jZSk7XG5cbiAgLy8gSGFuZGxlIHZpZXdwb3J0IGNhc2VcbiAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAndmlld3BvcnQnKSB7XG4gICAgYm91bmRhcmllcyA9IGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShvZmZzZXRQYXJlbnQpO1xuICB9IGVsc2Uge1xuICAgIC8vIEhhbmRsZSBvdGhlciBjYXNlcyBiYXNlZCBvbiBET00gZWxlbWVudCB1c2VkIGFzIGJvdW5kYXJpZXNcbiAgICB2YXIgYm91bmRhcmllc05vZGUgPSB2b2lkIDA7XG4gICAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShyZWZlcmVuY2UpKTtcbiAgICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd3aW5kb3cnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBib3VuZGFyaWVzRWxlbWVudDtcbiAgICB9XG5cbiAgICB2YXIgb2Zmc2V0cyA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShib3VuZGFyaWVzTm9kZSwgb2Zmc2V0UGFyZW50KTtcblxuICAgIC8vIEluIGNhc2Ugb2YgSFRNTCwgd2UgbmVlZCBhIGRpZmZlcmVudCBjb21wdXRhdGlvblxuICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0hUTUwnICYmICFpc0ZpeGVkKG9mZnNldFBhcmVudCkpIHtcbiAgICAgIHZhciBfZ2V0V2luZG93U2l6ZXMgPSBnZXRXaW5kb3dTaXplcygpLFxuICAgICAgICAgIGhlaWdodCA9IF9nZXRXaW5kb3dTaXplcy5oZWlnaHQsXG4gICAgICAgICAgd2lkdGggPSBfZ2V0V2luZG93U2l6ZXMud2lkdGg7XG5cbiAgICAgIGJvdW5kYXJpZXMudG9wICs9IG9mZnNldHMudG9wIC0gb2Zmc2V0cy5tYXJnaW5Ub3A7XG4gICAgICBib3VuZGFyaWVzLmJvdHRvbSA9IGhlaWdodCArIG9mZnNldHMudG9wO1xuICAgICAgYm91bmRhcmllcy5sZWZ0ICs9IG9mZnNldHMubGVmdCAtIG9mZnNldHMubWFyZ2luTGVmdDtcbiAgICAgIGJvdW5kYXJpZXMucmlnaHQgPSB3aWR0aCArIG9mZnNldHMubGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZm9yIGFsbCB0aGUgb3RoZXIgRE9NIGVsZW1lbnRzLCB0aGlzIG9uZSBpcyBnb29kXG4gICAgICBib3VuZGFyaWVzID0gb2Zmc2V0cztcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgcGFkZGluZ3NcbiAgYm91bmRhcmllcy5sZWZ0ICs9IHBhZGRpbmc7XG4gIGJvdW5kYXJpZXMudG9wICs9IHBhZGRpbmc7XG4gIGJvdW5kYXJpZXMucmlnaHQgLT0gcGFkZGluZztcbiAgYm91bmRhcmllcy5ib3R0b20gLT0gcGFkZGluZztcblxuICByZXR1cm4gYm91bmRhcmllcztcbn1cblxuZnVuY3Rpb24gZ2V0QXJlYShfcmVmKSB7XG4gIHZhciB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodDtcblxuICByZXR1cm4gd2lkdGggKiBoZWlnaHQ7XG59XG5cbi8qKlxuICogVXRpbGl0eSB1c2VkIHRvIHRyYW5zZm9ybSB0aGUgYGF1dG9gIHBsYWNlbWVudCB0byB0aGUgcGxhY2VtZW50IHdpdGggbW9yZVxuICogYXZhaWxhYmxlIHNwYWNlLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQocGxhY2VtZW50LCByZWZSZWN0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgdmFyIHBhZGRpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDA7XG5cbiAgaWYgKHBsYWNlbWVudC5pbmRleE9mKCdhdXRvJykgPT09IC0xKSB7XG4gICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpO1xuXG4gIHZhciByZWN0cyA9IHtcbiAgICB0b3A6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiByZWZSZWN0LnRvcCAtIGJvdW5kYXJpZXMudG9wXG4gICAgfSxcbiAgICByaWdodDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMucmlnaHQgLSByZWZSZWN0LnJpZ2h0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodFxuICAgIH0sXG4gICAgYm90dG9tOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5ib3R0b20gLSByZWZSZWN0LmJvdHRvbVxuICAgIH0sXG4gICAgbGVmdDoge1xuICAgICAgd2lkdGg6IHJlZlJlY3QubGVmdCAtIGJvdW5kYXJpZXMubGVmdCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9XG4gIH07XG5cbiAgdmFyIHNvcnRlZEFyZWFzID0gT2JqZWN0LmtleXMocmVjdHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGtleToga2V5XG4gICAgfSwgcmVjdHNba2V5XSwge1xuICAgICAgYXJlYTogZ2V0QXJlYShyZWN0c1trZXldKVxuICAgIH0pO1xuICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGIuYXJlYSAtIGEuYXJlYTtcbiAgfSk7XG5cbiAgdmFyIGZpbHRlcmVkQXJlYXMgPSBzb3J0ZWRBcmVhcy5maWx0ZXIoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIHdpZHRoID0gX3JlZjIud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IF9yZWYyLmhlaWdodDtcbiAgICByZXR1cm4gd2lkdGggPj0gcG9wcGVyLmNsaWVudFdpZHRoICYmIGhlaWdodCA+PSBwb3BwZXIuY2xpZW50SGVpZ2h0O1xuICB9KTtcblxuICB2YXIgY29tcHV0ZWRQbGFjZW1lbnQgPSBmaWx0ZXJlZEFyZWFzLmxlbmd0aCA+IDAgPyBmaWx0ZXJlZEFyZWFzWzBdLmtleSA6IHNvcnRlZEFyZWFzWzBdLmtleTtcblxuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgcmV0dXJuIGNvbXB1dGVkUGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcbn1cblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZVxuICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlKSB7XG4gIHZhciBjb21tb25PZmZzZXRQYXJlbnQgPSBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgcmVmZXJlbmNlKTtcbiAgcmV0dXJuIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShyZWZlcmVuY2UsIGNvbW1vbk9mZnNldFBhcmVudCk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvdXRlciBzaXplcyBvZiB0aGUgZ2l2ZW4gZWxlbWVudCAob2Zmc2V0IHNpemUgKyBtYXJnaW5zKVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBvYmplY3QgY29udGFpbmluZyB3aWR0aCBhbmQgaGVpZ2h0IHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0T3V0ZXJTaXplcyhlbGVtZW50KSB7XG4gIHZhciBzdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICB2YXIgeCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Cb3R0b20pO1xuICB2YXIgeSA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQpICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luUmlnaHQpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoICsgeSxcbiAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgeFxuICB9O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50XG4gKi9cbmZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICB2YXIgaGFzaCA9IHsgbGVmdDogJ3JpZ2h0JywgcmlnaHQ6ICdsZWZ0JywgYm90dG9tOiAndG9wJywgdG9wOiAnYm90dG9tJyB9O1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcG9zaXRpb24gLSBDU1MgcG9zaXRpb24gdGhlIFBvcHBlciB3aWxsIGdldCBhcHBsaWVkXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzIC0gdGhlIHJlZmVyZW5jZSBvZmZzZXRzICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEBwYXJhbSB7U3RyaW5nfSBwbGFjZW1lbnQgLSBvbmUgb2YgdGhlIHZhbGlkIHBsYWNlbWVudCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9mZnNldHMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UG9wcGVyT2Zmc2V0cyhwb3BwZXIsIHJlZmVyZW5jZU9mZnNldHMsIHBsYWNlbWVudCkge1xuICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICAvLyBHZXQgcG9wcGVyIG5vZGUgc2l6ZXNcbiAgdmFyIHBvcHBlclJlY3QgPSBnZXRPdXRlclNpemVzKHBvcHBlcik7XG5cbiAgLy8gQWRkIHBvc2l0aW9uLCB3aWR0aCBhbmQgaGVpZ2h0IHRvIG91ciBvZmZzZXRzIG9iamVjdFxuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHtcbiAgICB3aWR0aDogcG9wcGVyUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHBvcHBlclJlY3QuaGVpZ2h0XG4gIH07XG5cbiAgLy8gZGVwZW5kaW5nIGJ5IHRoZSBwb3BwZXIgcGxhY2VtZW50IHdlIGhhdmUgdG8gY29tcHV0ZSBpdHMgb2Zmc2V0cyBzbGlnaHRseSBkaWZmZXJlbnRseVxuICB2YXIgaXNIb3JpeiA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBtYWluU2lkZSA9IGlzSG9yaXogPyAndG9wJyA6ICdsZWZ0JztcbiAgdmFyIHNlY29uZGFyeVNpZGUgPSBpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBtZWFzdXJlbWVudCA9IGlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIHZhciBzZWNvbmRhcnlNZWFzdXJlbWVudCA9ICFpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gIHBvcHBlck9mZnNldHNbbWFpblNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1ttYWluU2lkZV0gKyByZWZlcmVuY2VPZmZzZXRzW21lYXN1cmVtZW50XSAvIDIgLSBwb3BwZXJSZWN0W21lYXN1cmVtZW50XSAvIDI7XG4gIGlmIChwbGFjZW1lbnQgPT09IHNlY29uZGFyeVNpZGUpIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSAtIHBvcHBlclJlY3Rbc2Vjb25kYXJ5TWVhc3VyZW1lbnRdO1xuICB9IGVsc2Uge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW2dldE9wcG9zaXRlUGxhY2VtZW50KHNlY29uZGFyeVNpZGUpXTtcbiAgfVxuXG4gIHJldHVybiBwb3BwZXJPZmZzZXRzO1xufVxuXG4vKipcbiAqIE1pbWljcyB0aGUgYGZpbmRgIG1ldGhvZCBvZiBBcnJheVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5mdW5jdGlvbiBmaW5kKGFyciwgY2hlY2spIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kIGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmQpIHtcbiAgICByZXR1cm4gYXJyLmZpbmQoY2hlY2spO1xuICB9XG5cbiAgLy8gdXNlIGBmaWx0ZXJgIHRvIG9idGFpbiB0aGUgc2FtZSBiZWhhdmlvciBvZiBgZmluZGBcbiAgcmV0dXJuIGFyci5maWx0ZXIoY2hlY2spWzBdO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW5kZXggb2YgdGhlIG1hdGNoaW5nIG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBwcm9wLCB2YWx1ZSkge1xuICAvLyB1c2UgbmF0aXZlIGZpbmRJbmRleCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgpIHtcbiAgICByZXR1cm4gYXJyLmZpbmRJbmRleChmdW5jdGlvbiAoY3VyKSB7XG4gICAgICByZXR1cm4gY3VyW3Byb3BdID09PSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHVzZSBgZmluZGAgKyBgaW5kZXhPZmAgaWYgYGZpbmRJbmRleGAgaXNuJ3Qgc3VwcG9ydGVkXG4gIHZhciBtYXRjaCA9IGZpbmQoYXJyLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9ialtwcm9wXSA9PT0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gYXJyLmluZGV4T2YobWF0Y2gpO1xufVxuXG4vKipcbiAqIExvb3AgdHJvdWdoIHRoZSBsaXN0IG9mIG1vZGlmaWVycyBhbmQgcnVuIHRoZW0gaW4gb3JkZXIsXG4gKiBlYWNoIG9mIHRoZW0gd2lsbCB0aGVuIGVkaXQgdGhlIGRhdGEgb2JqZWN0LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmRzIC0gT3B0aW9uYWwgbW9kaWZpZXIgbmFtZSB1c2VkIGFzIHN0b3BwZXJcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fVxuICovXG5mdW5jdGlvbiBydW5Nb2RpZmllcnMobW9kaWZpZXJzLCBkYXRhLCBlbmRzKSB7XG4gIHZhciBtb2RpZmllcnNUb1J1biA9IGVuZHMgPT09IHVuZGVmaW5lZCA/IG1vZGlmaWVycyA6IG1vZGlmaWVycy5zbGljZSgwLCBmaW5kSW5kZXgobW9kaWZpZXJzLCAnbmFtZScsIGVuZHMpKTtcblxuICBtb2RpZmllcnNUb1J1bi5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIGlmIChtb2RpZmllclsnZnVuY3Rpb24nXSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICAgIGNvbnNvbGUud2FybignYG1vZGlmaWVyLmZ1bmN0aW9uYCBpcyBkZXByZWNhdGVkLCB1c2UgYG1vZGlmaWVyLmZuYCEnKTtcbiAgICB9XG4gICAgdmFyIGZuID0gbW9kaWZpZXJbJ2Z1bmN0aW9uJ10gfHwgbW9kaWZpZXIuZm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgaWYgKG1vZGlmaWVyLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihmbikpIHtcbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIHRvIG9mZnNldHMgdG8gbWFrZSB0aGVtIGEgY29tcGxldGUgY2xpZW50UmVjdCBvYmplY3RcbiAgICAgIC8vIHdlIGRvIHRoaXMgYmVmb3JlIGVhY2ggbW9kaWZpZXIgdG8gbWFrZSBzdXJlIHRoZSBwcmV2aW91cyBvbmUgZG9lc24ndFxuICAgICAgLy8gbWVzcyB3aXRoIHRoZXNlIHZhbHVlc1xuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG4gICAgICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucmVmZXJlbmNlKTtcblxuICAgICAgZGF0YSA9IGZuKGRhdGEsIG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIsIGNvbXB1dGluZyB0aGUgbmV3IG9mZnNldHMgYW5kIGFwcGx5aW5nXG4gKiB0aGUgbmV3IHN0eWxlLjxiciAvPlxuICogUHJlZmVyIGBzY2hlZHVsZVVwZGF0ZWAgb3ZlciBgdXBkYXRlYCBiZWNhdXNlIG9mIHBlcmZvcm1hbmNlIHJlYXNvbnMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgLy8gaWYgcG9wcGVyIGlzIGRlc3Ryb3llZCwgZG9uJ3QgcGVyZm9ybSBhbnkgZnVydGhlciB1cGRhdGVcbiAgaWYgKHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZGF0YSA9IHtcbiAgICBpbnN0YW5jZTogdGhpcyxcbiAgICBzdHlsZXM6IHt9LFxuICAgIGFycm93U3R5bGVzOiB7fSxcbiAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICBmbGlwcGVkOiBmYWxzZSxcbiAgICBvZmZzZXRzOiB7fVxuICB9O1xuXG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyh0aGlzLnN0YXRlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICBkYXRhLnBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KHRoaXMub3B0aW9ucy5wbGFjZW1lbnQsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgLy8gc3RvcmUgdGhlIGNvbXB1dGVkIHBsYWNlbWVudCBpbnNpZGUgYG9yaWdpbmFsUGxhY2VtZW50YFxuICBkYXRhLm9yaWdpbmFsUGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG5cbiAgLy8gY29tcHV0ZSB0aGUgcG9wcGVyIG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldFBvcHBlck9mZnNldHModGhpcy5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KTtcbiAgZGF0YS5vZmZzZXRzLnBvcHBlci5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cbiAgLy8gcnVuIHRoZSBtb2RpZmllcnNcbiAgZGF0YSA9IHJ1bk1vZGlmaWVycyh0aGlzLm1vZGlmaWVycywgZGF0YSk7XG5cbiAgLy8gdGhlIGZpcnN0IGB1cGRhdGVgIHdpbGwgY2FsbCBgb25DcmVhdGVgIGNhbGxiYWNrXG4gIC8vIHRoZSBvdGhlciBvbmVzIHdpbGwgY2FsbCBgb25VcGRhdGVgIGNhbGxiYWNrXG4gIGlmICghdGhpcy5zdGF0ZS5pc0NyZWF0ZWQpIHtcbiAgICB0aGlzLnN0YXRlLmlzQ3JlYXRlZCA9IHRydWU7XG4gICAgdGhpcy5vcHRpb25zLm9uQ3JlYXRlKGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3B0aW9ucy5vblVwZGF0ZShkYXRhKTtcbiAgfVxufVxuXG4vKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGlzIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllckVuYWJsZWQobW9kaWZpZXJzLCBtb2RpZmllck5hbWUpIHtcbiAgcmV0dXJuIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICAgIGVuYWJsZWQgPSBfcmVmLmVuYWJsZWQ7XG4gICAgcmV0dXJuIGVuYWJsZWQgJiYgbmFtZSA9PT0gbW9kaWZpZXJOYW1lO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHByZWZpeGVkIHN1cHBvcnRlZCBwcm9wZXJ0eSBuYW1lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHkgKGNhbWVsQ2FzZSlcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHByZWZpeGVkIHByb3BlcnR5IChjYW1lbENhc2Ugb3IgUGFzY2FsQ2FzZSwgZGVwZW5kaW5nIG9uIHRoZSB2ZW5kb3IgcHJlZml4KVxuICovXG5mdW5jdGlvbiBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUocHJvcGVydHkpIHtcbiAgdmFyIHByZWZpeGVzID0gW2ZhbHNlLCAnbXMnLCAnV2Via2l0JywgJ01veicsICdPJ107XG4gIHZhciB1cHBlclByb3AgPSBwcm9wZXJ0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnNsaWNlKDEpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgdmFyIHByZWZpeCA9IHByZWZpeGVzW2ldO1xuICAgIHZhciB0b0NoZWNrID0gcHJlZml4ID8gJycgKyBwcmVmaXggKyB1cHBlclByb3AgOiBwcm9wZXJ0eTtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50LmJvZHkuc3R5bGVbdG9DaGVja10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdG9DaGVjaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRGVzdHJveSB0aGUgcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gIHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQgPSB0cnVlO1xuXG4gIC8vIHRvdWNoIERPTSBvbmx5IGlmIGBhcHBseVN0eWxlYCBtb2RpZmllciBpcyBlbmFibGVkXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZCh0aGlzLm1vZGlmaWVycywgJ2FwcGx5U3R5bGUnKSkge1xuICAgIHRoaXMucG9wcGVyLnJlbW92ZUF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnKTtcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5sZWZ0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucG9zaXRpb24gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS50b3AgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZVtnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpXSA9ICcnO1xuICB9XG5cbiAgdGhpcy5kaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKTtcblxuICAvLyByZW1vdmUgdGhlIHBvcHBlciBpZiB1c2VyIGV4cGxpY2l0eSBhc2tlZCBmb3IgdGhlIGRlbGV0aW9uIG9uIGRlc3Ryb3lcbiAgLy8gZG8gbm90IHVzZSBgcmVtb3ZlYCBiZWNhdXNlIElFMTEgZG9lc24ndCBzdXBwb3J0IGl0XG4gIGlmICh0aGlzLm9wdGlvbnMucmVtb3ZlT25EZXN0cm95KSB7XG4gICAgdGhpcy5wb3BwZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBvcHBlcik7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogR2V0IHRoZSB3aW5kb3cgYXNzb2NpYXRlZCB3aXRoIHRoZSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtXaW5kb3d9XG4gKi9cbmZ1bmN0aW9uIGdldFdpbmRvdyhlbGVtZW50KSB7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50O1xuICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiB3aW5kb3c7XG59XG5cbmZ1bmN0aW9uIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxQYXJlbnQsIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cykge1xuICB2YXIgaXNCb2R5ID0gc2Nyb2xsUGFyZW50Lm5vZGVOYW1lID09PSAnQk9EWSc7XG4gIHZhciB0YXJnZXQgPSBpc0JvZHkgPyBzY3JvbGxQYXJlbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHNjcm9sbFBhcmVudDtcbiAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgaWYgKCFpc0JvZHkpIHtcbiAgICBhdHRhY2hUb1Njcm9sbFBhcmVudHMoZ2V0U2Nyb2xsUGFyZW50KHRhcmdldC5wYXJlbnROb2RlKSwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKTtcbiAgfVxuICBzY3JvbGxQYXJlbnRzLnB1c2godGFyZ2V0KTtcbn1cblxuLyoqXG4gKiBTZXR1cCBuZWVkZWQgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNldHVwRXZlbnRMaXN0ZW5lcnMocmVmZXJlbmNlLCBvcHRpb25zLCBzdGF0ZSwgdXBkYXRlQm91bmQpIHtcbiAgLy8gUmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvd1xuICBzdGF0ZS51cGRhdGVCb3VuZCA9IHVwZGF0ZUJvdW5kO1xuICBnZXRXaW5kb3cocmVmZXJlbmNlKS5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzdGF0ZS51cGRhdGVCb3VuZCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIC8vIFNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBzY3JvbGwgcGFyZW50c1xuICB2YXIgc2Nyb2xsRWxlbWVudCA9IGdldFNjcm9sbFBhcmVudChyZWZlcmVuY2UpO1xuICBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsRWxlbWVudCwgJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kLCBzdGF0ZS5zY3JvbGxQYXJlbnRzKTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IHNjcm9sbEVsZW1lbnQ7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSB0cnVlO1xuXG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBJdCB3aWxsIGFkZCByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgc3RhcnQgcmVjYWxjdWxhdGluZ1xuICogcG9zaXRpb24gb2YgdGhlIHBvcHBlciBlbGVtZW50IHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKCF0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHtcbiAgICB0aGlzLnN0YXRlID0gc2V0dXBFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLCB0aGlzLnN0YXRlLCB0aGlzLnNjaGVkdWxlVXBkYXRlKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnMocmVmZXJlbmNlLCBzdGF0ZSkge1xuICAvLyBSZW1vdmUgcmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvd1xuICBnZXRXaW5kb3cocmVmZXJlbmNlKS5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzdGF0ZS51cGRhdGVCb3VuZCk7XG5cbiAgLy8gUmVtb3ZlIHNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBzY3JvbGwgcGFyZW50c1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCk7XG4gIH0pO1xuXG4gIC8vIFJlc2V0IHN0YXRlXG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gbnVsbDtcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cyA9IFtdO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gbnVsbDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGZhbHNlO1xuICByZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogSXQgd2lsbCByZW1vdmUgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHdvbid0IHJlY2FsY3VsYXRlIHBvcHBlciBwb3NpdGlvblxuICogd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuIEl0IGFsc28gd29uJ3QgdHJpZ2dlciBvblVwZGF0ZSBjYWxsYmFjayBhbnltb3JlLFxuICogdW5sZXNzIHlvdSBjYWxsIGB1cGRhdGVgIG1ldGhvZCBtYW51YWxseS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAodGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gICAgdGhpcy5zdGF0ZSA9IHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLnN0YXRlKTtcbiAgfVxufVxuXG4vKipcbiAqIFRlbGxzIGlmIGEgZ2l2ZW4gaW5wdXQgaXMgYSBudW1iZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Kn0gaW5wdXQgdG8gY2hlY2tcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTnVtZXJpYyhuKSB7XG4gIHJldHVybiBuICE9PSAnJyAmJiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XG59XG5cbi8qKlxuICogU2V0IHRoZSBzdHlsZSB0byB0aGUgZ2l2ZW4gcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBzdHlsZSB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0U3R5bGVzKGVsZW1lbnQsIHN0eWxlcykge1xuICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgdW5pdCA9ICcnO1xuICAgIC8vIGFkZCB1bml0IGlmIHRoZSB2YWx1ZSBpcyBudW1lcmljIGFuZCBpcyBvbmUgb2YgdGhlIGZvbGxvd2luZ1xuICAgIGlmIChbJ3dpZHRoJywgJ2hlaWdodCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5pbmRleE9mKHByb3ApICE9PSAtMSAmJiBpc051bWVyaWMoc3R5bGVzW3Byb3BdKSkge1xuICAgICAgdW5pdCA9ICdweCc7XG4gICAgfVxuICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBzdHlsZXNbcHJvcF0gKyB1bml0O1xuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGF0dHJpYnV0ZXMgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgYXR0cmlidXRlcyB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlcyhlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW3Byb3BdO1xuICAgIGlmICh2YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKHByb3AsIGF0dHJpYnV0ZXNbcHJvcF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuc3R5bGVzIC0gTGlzdCBvZiBzdHlsZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5hdHRyaWJ1dGVzIC0gTGlzdCBvZiBhdHRyaWJ1dGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIHNhbWUgZGF0YSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gYXBwbHlTdHlsZShkYXRhKSB7XG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLnN0eWxlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIGluIHRoaXMgd2F5IHdlIGNhbiBtYWtlIHRoZSAzcmQgcGFydHkgbW9kaWZpZXJzIGFkZCBjdXN0b20gc3R5bGVzIHRvIGl0XG4gIC8vIEJlIGF3YXJlLCBtb2RpZmllcnMgY291bGQgb3ZlcnJpZGUgdGhlIHByb3BlcnRpZXMgZGVmaW5lZCBpbiB0aGUgcHJldmlvdXNcbiAgLy8gbGluZXMgb2YgdGhpcyBtb2RpZmllciFcbiAgc2V0U3R5bGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLnN0eWxlcyk7XG5cbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuYXR0cmlidXRlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIHRoZXkgd2lsbCBiZSBzZXQgYXMgSFRNTCBhdHRyaWJ1dGVzIG9mIHRoZSBlbGVtZW50XG4gIHNldEF0dHJpYnV0ZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuYXR0cmlidXRlcyk7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGRlZmluZWQgYW5kIGFycm93U3R5bGVzIGhhcyBzb21lIHByb3BlcnRpZXNcbiAgaWYgKGRhdGEuYXJyb3dFbGVtZW50ICYmIE9iamVjdC5rZXlzKGRhdGEuYXJyb3dTdHlsZXMpLmxlbmd0aCkge1xuICAgIHNldFN0eWxlcyhkYXRhLmFycm93RWxlbWVudCwgZGF0YS5hcnJvd1N0eWxlcyk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHgtcGxhY2VtZW50IGF0dHJpYnV0ZSBiZWZvcmUgZXZlcnl0aGluZyBlbHNlIGJlY2F1c2UgaXQgY291bGQgYmUgdXNlZFxuICogdG8gYWRkIG1hcmdpbnMgdG8gdGhlIHBvcHBlciBtYXJnaW5zIG5lZWRzIHRvIGJlIGNhbGN1bGF0ZWQgdG8gZ2V0IHRoZVxuICogY29ycmVjdCBwb3BwZXIgb2Zmc2V0cy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIubW9kaWZpZXJzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgYXMgcG9wcGVyLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBQb3BwZXIuanMgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlT25Mb2FkKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIHN0YXRlKSB7XG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICB2YXIgcmVmZXJlbmNlT2Zmc2V0cyA9IGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgdmFyIHBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KG9wdGlvbnMucGxhY2VtZW50LCByZWZlcmVuY2VPZmZzZXRzLCBwb3BwZXIsIHJlZmVyZW5jZSwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTtcblxuICBwb3BwZXIuc2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcsIHBsYWNlbWVudCk7XG5cbiAgLy8gQXBwbHkgYHBvc2l0aW9uYCB0byBwb3BwZXIgYmVmb3JlIGFueXRoaW5nIGVsc2UgYmVjYXVzZVxuICAvLyB3aXRob3V0IHRoZSBwb3NpdGlvbiBhcHBsaWVkIHdlIGNhbid0IGd1YXJhbnRlZSBjb3JyZWN0IGNvbXB1dGF0aW9uc1xuICBzZXRTdHlsZXMocG9wcGVyLCB7IHBvc2l0aW9uOiAnYWJzb2x1dGUnIH0pO1xuXG4gIHJldHVybiBvcHRpb25zO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlU3R5bGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgeCA9IG9wdGlvbnMueCxcbiAgICAgIHkgPSBvcHRpb25zLnk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIC8vIFJlbW92ZSB0aGlzIGxlZ2FjeSBzdXBwb3J0IGluIFBvcHBlci5qcyB2MlxuXG4gIHZhciBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ2FwcGx5U3R5bGUnO1xuICB9KS5ncHVBY2NlbGVyYXRpb247XG4gIGlmIChsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybignV0FSTklORzogYGdwdUFjY2VsZXJhdGlvbmAgb3B0aW9uIG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyIGFuZCB3aWxsIG5vdCBiZSBzdXBwb3J0ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIFBvcHBlci5qcyEnKTtcbiAgfVxuICB2YXIgZ3B1QWNjZWxlcmF0aW9uID0gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQgPyBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gOiBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbjtcblxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIG9mZnNldFBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50KTtcblxuICAvLyBTdHlsZXNcbiAgdmFyIHN0eWxlcyA9IHtcbiAgICBwb3NpdGlvbjogcG9wcGVyLnBvc2l0aW9uXG4gIH07XG5cbiAgLy8gZmxvb3Igc2lkZXMgdG8gYXZvaWQgYmx1cnJ5IHRleHRcbiAgdmFyIG9mZnNldHMgPSB7XG4gICAgbGVmdDogTWF0aC5mbG9vcihwb3BwZXIubGVmdCksXG4gICAgdG9wOiBNYXRoLmZsb29yKHBvcHBlci50b3ApLFxuICAgIGJvdHRvbTogTWF0aC5mbG9vcihwb3BwZXIuYm90dG9tKSxcbiAgICByaWdodDogTWF0aC5mbG9vcihwb3BwZXIucmlnaHQpXG4gIH07XG5cbiAgdmFyIHNpZGVBID0geCA9PT0gJ2JvdHRvbScgPyAndG9wJyA6ICdib3R0b20nO1xuICB2YXIgc2lkZUIgPSB5ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcblxuICAvLyBpZiBncHVBY2NlbGVyYXRpb24gaXMgc2V0IHRvIGB0cnVlYCBhbmQgdHJhbnNmb3JtIGlzIHN1cHBvcnRlZCxcbiAgLy8gIHdlIHVzZSBgdHJhbnNsYXRlM2RgIHRvIGFwcGx5IHRoZSBwb3NpdGlvbiB0byB0aGUgcG9wcGVyIHdlXG4gIC8vIGF1dG9tYXRpY2FsbHkgdXNlIHRoZSBzdXBwb3J0ZWQgcHJlZml4ZWQgdmVyc2lvbiBpZiBuZWVkZWRcbiAgdmFyIHByZWZpeGVkUHJvcGVydHkgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuXG4gIC8vIG5vdywgbGV0J3MgbWFrZSBhIHN0ZXAgYmFjayBhbmQgbG9vayBhdCB0aGlzIGNvZGUgY2xvc2VseSAod3RmPylcbiAgLy8gSWYgdGhlIGNvbnRlbnQgb2YgdGhlIHBvcHBlciBncm93cyBvbmNlIGl0J3MgYmVlbiBwb3NpdGlvbmVkLCBpdFxuICAvLyBtYXkgaGFwcGVuIHRoYXQgdGhlIHBvcHBlciBnZXRzIG1pc3BsYWNlZCBiZWNhdXNlIG9mIHRoZSBuZXcgY29udGVudFxuICAvLyBvdmVyZmxvd2luZyBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVG8gYXZvaWQgdGhpcyBwcm9ibGVtLCB3ZSBwcm92aWRlIHR3byBvcHRpb25zICh4IGFuZCB5KSwgd2hpY2ggYWxsb3dcbiAgLy8gdGhlIGNvbnN1bWVyIHRvIGRlZmluZSB0aGUgb2Zmc2V0IG9yaWdpbi5cbiAgLy8gSWYgd2UgcG9zaXRpb24gYSBwb3BwZXIgb24gdG9wIG9mIGEgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIGNhbiBzZXRcbiAgLy8gYHhgIHRvIGB0b3BgIHRvIG1ha2UgdGhlIHBvcHBlciBncm93IHRvd2FyZHMgaXRzIHRvcCBpbnN0ZWFkIG9mXG4gIC8vIGl0cyBib3R0b20uXG4gIHZhciBsZWZ0ID0gdm9pZCAwLFxuICAgICAgdG9wID0gdm9pZCAwO1xuICBpZiAoc2lkZUEgPT09ICdib3R0b20nKSB7XG4gICAgdG9wID0gLW9mZnNldFBhcmVudFJlY3QuaGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gb2Zmc2V0cy50b3A7XG4gIH1cbiAgaWYgKHNpZGVCID09PSAncmlnaHQnKSB7XG4gICAgbGVmdCA9IC1vZmZzZXRQYXJlbnRSZWN0LndpZHRoICsgb2Zmc2V0cy5yaWdodDtcbiAgfSBlbHNlIHtcbiAgICBsZWZ0ID0gb2Zmc2V0cy5sZWZ0O1xuICB9XG4gIGlmIChncHVBY2NlbGVyYXRpb24gJiYgcHJlZml4ZWRQcm9wZXJ0eSkge1xuICAgIHN0eWxlc1twcmVmaXhlZFByb3BlcnR5XSA9ICd0cmFuc2xhdGUzZCgnICsgbGVmdCArICdweCwgJyArIHRvcCArICdweCwgMCknO1xuICAgIHN0eWxlc1tzaWRlQV0gPSAwO1xuICAgIHN0eWxlc1tzaWRlQl0gPSAwO1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gJ3RyYW5zZm9ybSc7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3Rod2VyaXNlLCB3ZSB1c2UgdGhlIHN0YW5kYXJkIGB0b3BgLCBgbGVmdGAsIGBib3R0b21gIGFuZCBgcmlnaHRgIHByb3BlcnRpZXNcbiAgICB2YXIgaW52ZXJ0VG9wID0gc2lkZUEgPT09ICdib3R0b20nID8gLTEgOiAxO1xuICAgIHZhciBpbnZlcnRMZWZ0ID0gc2lkZUIgPT09ICdyaWdodCcgPyAtMSA6IDE7XG4gICAgc3R5bGVzW3NpZGVBXSA9IHRvcCAqIGludmVydFRvcDtcbiAgICBzdHlsZXNbc2lkZUJdID0gbGVmdCAqIGludmVydExlZnQ7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSBzaWRlQSArICcsICcgKyBzaWRlQjtcbiAgfVxuXG4gIC8vIEF0dHJpYnV0ZXNcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7XG4gICAgJ3gtcGxhY2VtZW50JzogZGF0YS5wbGFjZW1lbnRcbiAgfTtcblxuICAvLyBVcGRhdGUgYGRhdGFgIGF0dHJpYnV0ZXMsIHN0eWxlcyBhbmQgYXJyb3dTdHlsZXNcbiAgZGF0YS5hdHRyaWJ1dGVzID0gX2V4dGVuZHMoe30sIGF0dHJpYnV0ZXMsIGRhdGEuYXR0cmlidXRlcyk7XG4gIGRhdGEuc3R5bGVzID0gX2V4dGVuZHMoe30sIHN0eWxlcywgZGF0YS5zdHlsZXMpO1xuICBkYXRhLmFycm93U3R5bGVzID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5hcnJvdywgZGF0YS5hcnJvd1N0eWxlcyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgZGVwZW5kcyBmcm9tIGFub3RoZXIgb25lLjxiciAvPlxuICogSXQgY2hlY2tzIGlmIHRoZSBuZWVkZWQgbW9kaWZpZXIgaXMgbGlzdGVkIGFuZCBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzIC0gbGlzdCBvZiBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0aW5nTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGluZyBtb2RpZmllclxuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RlZE5hbWUgLSBuYW1lIG9mIHJlcXVlc3RlZCBtb2RpZmllclxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJSZXF1aXJlZChtb2RpZmllcnMsIHJlcXVlc3RpbmdOYW1lLCByZXF1ZXN0ZWROYW1lKSB7XG4gIHZhciByZXF1ZXN0aW5nID0gZmluZChtb2RpZmllcnMsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgcmV0dXJuIG5hbWUgPT09IHJlcXVlc3RpbmdOYW1lO1xuICB9KTtcblxuICB2YXIgaXNSZXF1aXJlZCA9ICEhcmVxdWVzdGluZyAmJiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gcmVxdWVzdGVkTmFtZSAmJiBtb2RpZmllci5lbmFibGVkICYmIG1vZGlmaWVyLm9yZGVyIDwgcmVxdWVzdGluZy5vcmRlcjtcbiAgfSk7XG5cbiAgaWYgKCFpc1JlcXVpcmVkKSB7XG4gICAgdmFyIF9yZXF1ZXN0aW5nID0gJ2AnICsgcmVxdWVzdGluZ05hbWUgKyAnYCc7XG4gICAgdmFyIHJlcXVlc3RlZCA9ICdgJyArIHJlcXVlc3RlZE5hbWUgKyAnYCc7XG4gICAgY29uc29sZS53YXJuKHJlcXVlc3RlZCArICcgbW9kaWZpZXIgaXMgcmVxdWlyZWQgYnkgJyArIF9yZXF1ZXN0aW5nICsgJyBtb2RpZmllciBpbiBvcmRlciB0byB3b3JrLCBiZSBzdXJlIHRvIGluY2x1ZGUgaXQgYmVmb3JlICcgKyBfcmVxdWVzdGluZyArICchJyk7XG4gIH1cbiAgcmV0dXJuIGlzUmVxdWlyZWQ7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBhcnJvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzJGFycm93O1xuXG4gIC8vIGFycm93IGRlcGVuZHMgb24ga2VlcFRvZ2V0aGVyIGluIG9yZGVyIHRvIHdvcmtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdhcnJvdycsICdrZWVwVG9nZXRoZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGFycm93RWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudDtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgYSBzdHJpbmcsIHN1cHBvc2UgaXQncyBhIENTUyBzZWxlY3RvclxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgbm90IGZvdW5kLCBkb24ndCBydW4gdGhlIG1vZGlmaWVyXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBpZiB0aGUgYXJyb3dFbGVtZW50IGlzbid0IGEgcXVlcnkgc2VsZWN0b3Igd2UgbXVzdCBjaGVjayB0aGF0IHRoZVxuICAgIC8vIHByb3ZpZGVkIERPTSBub2RlIGlzIGNoaWxkIG9mIGl0cyBwb3BwZXIgbm9kZVxuICAgIGlmICghZGF0YS5pbnN0YW5jZS5wb3BwZXIuY29udGFpbnMoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgYXJyb3cuZWxlbWVudGAgbXVzdCBiZSBjaGlsZCBvZiBpdHMgcG9wcGVyIGVsZW1lbnQhJyk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNpZGVDYXBpdGFsaXplZCA9IGlzVmVydGljYWwgPyAnVG9wJyA6ICdMZWZ0JztcbiAgdmFyIHNpZGUgPSBzaWRlQ2FwaXRhbGl6ZWQudG9Mb3dlckNhc2UoKTtcbiAgdmFyIGFsdFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2JvdHRvbScgOiAncmlnaHQnO1xuICB2YXIgYXJyb3dFbGVtZW50U2l6ZSA9IGdldE91dGVyU2l6ZXMoYXJyb3dFbGVtZW50KVtsZW5dO1xuXG4gIC8vXG4gIC8vIGV4dGVuZHMga2VlcFRvZ2V0aGVyIGJlaGF2aW9yIG1ha2luZyBzdXJlIHRoZSBwb3BwZXIgYW5kIGl0c1xuICAvLyByZWZlcmVuY2UgaGF2ZSBlbm91Z2ggcGl4ZWxzIGluIGNvbmp1Y3Rpb25cbiAgLy9cblxuICAvLyB0b3AvbGVmdCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUgPCBwb3BwZXJbc2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC09IHBvcHBlcltzaWRlXSAtIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUpO1xuICB9XG4gIC8vIGJvdHRvbS9yaWdodCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplID4gcG9wcGVyW29wU2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdICs9IHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgLSBwb3BwZXJbb3BTaWRlXTtcbiAgfVxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcblxuICAvLyBjb21wdXRlIGNlbnRlciBvZiB0aGUgcG9wcGVyXG4gIHZhciBjZW50ZXIgPSByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbGVuXSAvIDIgLSBhcnJvd0VsZW1lbnRTaXplIC8gMjtcblxuICAvLyBDb21wdXRlIHRoZSBzaWRlVmFsdWUgdXNpbmcgdGhlIHVwZGF0ZWQgcG9wcGVyIG9mZnNldHNcbiAgLy8gdGFrZSBwb3BwZXIgbWFyZ2luIGluIGFjY291bnQgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIHRoaXMgaW5mbyBhdmFpbGFibGVcbiAgdmFyIGNzcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBwb3BwZXJNYXJnaW5TaWRlID0gcGFyc2VGbG9hdChjc3NbJ21hcmdpbicgKyBzaWRlQ2FwaXRhbGl6ZWRdLCAxMCk7XG4gIHZhciBwb3BwZXJCb3JkZXJTaWRlID0gcGFyc2VGbG9hdChjc3NbJ2JvcmRlcicgKyBzaWRlQ2FwaXRhbGl6ZWQgKyAnV2lkdGgnXSwgMTApO1xuICB2YXIgc2lkZVZhbHVlID0gY2VudGVyIC0gZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtIHBvcHBlck1hcmdpblNpZGUgLSBwb3BwZXJCb3JkZXJTaWRlO1xuXG4gIC8vIHByZXZlbnQgYXJyb3dFbGVtZW50IGZyb20gYmVpbmcgcGxhY2VkIG5vdCBjb250aWd1b3VzbHkgdG8gaXRzIHBvcHBlclxuICBzaWRlVmFsdWUgPSBNYXRoLm1heChNYXRoLm1pbihwb3BwZXJbbGVuXSAtIGFycm93RWxlbWVudFNpemUsIHNpZGVWYWx1ZSksIDApO1xuXG4gIGRhdGEuYXJyb3dFbGVtZW50ID0gYXJyb3dFbGVtZW50O1xuICBkYXRhLm9mZnNldHMuYXJyb3cgPSAoX2RhdGEkb2Zmc2V0cyRhcnJvdyA9IHt9LCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBzaWRlLCBNYXRoLnJvdW5kKHNpZGVWYWx1ZSkpLCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBhbHRTaWRlLCAnJyksIF9kYXRhJG9mZnNldHMkYXJyb3cpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IHZhcmlhdGlvbiBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IHZhcmlhdGlvblxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbikge1xuICBpZiAodmFyaWF0aW9uID09PSAnZW5kJykge1xuICAgIHJldHVybiAnc3RhcnQnO1xuICB9IGVsc2UgaWYgKHZhcmlhdGlvbiA9PT0gJ3N0YXJ0Jykge1xuICAgIHJldHVybiAnZW5kJztcbiAgfVxuICByZXR1cm4gdmFyaWF0aW9uO1xufVxuXG4vKipcbiAqIExpc3Qgb2YgYWNjZXB0ZWQgcGxhY2VtZW50cyB0byB1c2UgYXMgdmFsdWVzIG9mIHRoZSBgcGxhY2VtZW50YCBvcHRpb24uPGJyIC8+XG4gKiBWYWxpZCBwbGFjZW1lbnRzIGFyZTpcbiAqIC0gYGF1dG9gXG4gKiAtIGB0b3BgXG4gKiAtIGByaWdodGBcbiAqIC0gYGJvdHRvbWBcbiAqIC0gYGxlZnRgXG4gKlxuICogRWFjaCBwbGFjZW1lbnQgY2FuIGhhdmUgYSB2YXJpYXRpb24gZnJvbSB0aGlzIGxpc3Q6XG4gKiAtIGAtc3RhcnRgXG4gKiAtIGAtZW5kYFxuICpcbiAqIFZhcmlhdGlvbnMgYXJlIGludGVycHJldGVkIGVhc2lseSBpZiB5b3UgdGhpbmsgb2YgdGhlbSBhcyB0aGUgbGVmdCB0byByaWdodFxuICogd3JpdHRlbiBsYW5ndWFnZXMuIEhvcml6b250YWxseSAoYHRvcGAgYW5kIGBib3R0b21gKSwgYHN0YXJ0YCBpcyBsZWZ0IGFuZCBgZW5kYFxuICogaXMgcmlnaHQuPGJyIC8+XG4gKiBWZXJ0aWNhbGx5IChgbGVmdGAgYW5kIGByaWdodGApLCBgc3RhcnRgIGlzIHRvcCBhbmQgYGVuZGAgaXMgYm90dG9tLlxuICpcbiAqIFNvbWUgdmFsaWQgZXhhbXBsZXMgYXJlOlxuICogLSBgdG9wLWVuZGAgKG9uIHRvcCBvZiByZWZlcmVuY2UsIHJpZ2h0IGFsaWduZWQpXG4gKiAtIGByaWdodC1zdGFydGAgKG9uIHJpZ2h0IG9mIHJlZmVyZW5jZSwgdG9wIGFsaWduZWQpXG4gKiAtIGBib3R0b21gIChvbiBib3R0b20sIGNlbnRlcmVkKVxuICogLSBgYXV0by1yaWdodGAgKG9uIHRoZSBzaWRlIHdpdGggbW9yZSBzcGFjZSBhdmFpbGFibGUsIGFsaWdubWVudCBkZXBlbmRzIGJ5IHBsYWNlbWVudClcbiAqXG4gKiBAc3RhdGljXG4gKiBAdHlwZSB7QXJyYXl9XG4gKiBAZW51bSB7U3RyaW5nfVxuICogQHJlYWRvbmx5XG4gKiBAbWV0aG9kIHBsYWNlbWVudHNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xudmFyIHBsYWNlbWVudHMgPSBbJ2F1dG8tc3RhcnQnLCAnYXV0bycsICdhdXRvLWVuZCcsICd0b3Atc3RhcnQnLCAndG9wJywgJ3RvcC1lbmQnLCAncmlnaHQtc3RhcnQnLCAncmlnaHQnLCAncmlnaHQtZW5kJywgJ2JvdHRvbS1lbmQnLCAnYm90dG9tJywgJ2JvdHRvbS1zdGFydCcsICdsZWZ0LWVuZCcsICdsZWZ0JywgJ2xlZnQtc3RhcnQnXTtcblxuLy8gR2V0IHJpZCBvZiBgYXV0b2AgYGF1dG8tc3RhcnRgIGFuZCBgYXV0by1lbmRgXG52YXIgdmFsaWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cy5zbGljZSgzKTtcblxuLyoqXG4gKiBHaXZlbiBhbiBpbml0aWFsIHBsYWNlbWVudCwgcmV0dXJucyBhbGwgdGhlIHN1YnNlcXVlbnQgcGxhY2VtZW50c1xuICogY2xvY2t3aXNlIChvciBjb3VudGVyLWNsb2Nrd2lzZSkuXG4gKlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCAtIEEgdmFsaWQgcGxhY2VtZW50IChpdCBhY2NlcHRzIHZhcmlhdGlvbnMpXG4gKiBAYXJndW1lbnQge0Jvb2xlYW59IGNvdW50ZXIgLSBTZXQgdG8gdHJ1ZSB0byB3YWxrIHRoZSBwbGFjZW1lbnRzIGNvdW50ZXJjbG9ja3dpc2VcbiAqIEByZXR1cm5zIHtBcnJheX0gcGxhY2VtZW50cyBpbmNsdWRpbmcgdGhlaXIgdmFyaWF0aW9uc1xuICovXG5mdW5jdGlvbiBjbG9ja3dpc2UocGxhY2VtZW50KSB7XG4gIHZhciBjb3VudGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICB2YXIgaW5kZXggPSB2YWxpZFBsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpO1xuICB2YXIgYXJyID0gdmFsaWRQbGFjZW1lbnRzLnNsaWNlKGluZGV4ICsgMSkuY29uY2F0KHZhbGlkUGxhY2VtZW50cy5zbGljZSgwLCBpbmRleCkpO1xuICByZXR1cm4gY291bnRlciA/IGFyci5yZXZlcnNlKCkgOiBhcnI7XG59XG5cbnZhciBCRUhBVklPUlMgPSB7XG4gIEZMSVA6ICdmbGlwJyxcbiAgQ0xPQ0tXSVNFOiAnY2xvY2t3aXNlJyxcbiAgQ09VTlRFUkNMT0NLV0lTRTogJ2NvdW50ZXJjbG9ja3dpc2UnXG59O1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gZmxpcChkYXRhLCBvcHRpb25zKSB7XG4gIC8vIGlmIGBpbm5lcmAgbW9kaWZpZXIgaXMgZW5hYmxlZCwgd2UgY2FuJ3QgdXNlIHRoZSBgZmxpcGAgbW9kaWZpZXJcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaW5uZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgaWYgKGRhdGEuZmxpcHBlZCAmJiBkYXRhLnBsYWNlbWVudCA9PT0gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCkge1xuICAgIC8vIHNlZW1zIGxpa2UgZmxpcCBpcyB0cnlpbmcgdG8gbG9vcCwgcHJvYmFibHkgdGhlcmUncyBub3QgZW5vdWdoIHNwYWNlIG9uIGFueSBvZiB0aGUgZmxpcHBhYmxlIHNpZGVzXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQpO1xuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICB2YXIgdmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVsxXSB8fCAnJztcblxuICB2YXIgZmxpcE9yZGVyID0gW107XG5cbiAgc3dpdGNoIChvcHRpb25zLmJlaGF2aW9yKSB7XG4gICAgY2FzZSBCRUhBVklPUlMuRkxJUDpcbiAgICAgIGZsaXBPcmRlciA9IFtwbGFjZW1lbnQsIHBsYWNlbWVudE9wcG9zaXRlXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ09VTlRFUkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQsIHRydWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGZsaXBPcmRlciA9IG9wdGlvbnMuYmVoYXZpb3I7XG4gIH1cblxuICBmbGlwT3JkZXIuZm9yRWFjaChmdW5jdGlvbiAoc3RlcCwgaW5kZXgpIHtcbiAgICBpZiAocGxhY2VtZW50ICE9PSBzdGVwIHx8IGZsaXBPcmRlci5sZW5ndGggPT09IGluZGV4ICsgMSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgICBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICB2YXIgcG9wcGVyT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG4gICAgdmFyIHJlZk9mZnNldHMgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuXG4gICAgLy8gdXNpbmcgZmxvb3IgYmVjYXVzZSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgbWF5IGNvbnRhaW4gZGVjaW1hbHMgd2UgYXJlIG5vdCBnb2luZyB0byBjb25zaWRlciBoZXJlXG4gICAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbiAgICB2YXIgb3ZlcmxhcHNSZWYgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKHJlZk9mZnNldHMubGVmdCkgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnICYmIGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihyZWZPZmZzZXRzLnJpZ2h0KSB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKHJlZk9mZnNldHMudG9wKSB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKHJlZk9mZnNldHMuYm90dG9tKTtcblxuICAgIHZhciBvdmVyZmxvd3NMZWZ0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5sZWZ0KSA8IGZsb29yKGJvdW5kYXJpZXMubGVmdCk7XG4gICAgdmFyIG92ZXJmbG93c1JpZ2h0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihib3VuZGFyaWVzLnJpZ2h0KTtcbiAgICB2YXIgb3ZlcmZsb3dzVG9wID0gZmxvb3IocG9wcGVyT2Zmc2V0cy50b3ApIDwgZmxvb3IoYm91bmRhcmllcy50b3ApO1xuICAgIHZhciBvdmVyZmxvd3NCb3R0b20gPSBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihib3VuZGFyaWVzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzQm91bmRhcmllcyA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIG92ZXJmbG93c0xlZnQgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnICYmIG92ZXJmbG93c1JpZ2h0IHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgb3ZlcmZsb3dzVG9wIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgb3ZlcmZsb3dzQm90dG9tO1xuXG4gICAgLy8gZmxpcCB0aGUgdmFyaWF0aW9uIGlmIHJlcXVpcmVkXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICAgIHZhciBmbGlwcGVkVmFyaWF0aW9uID0gISFvcHRpb25zLmZsaXBWYXJpYXRpb25zICYmIChpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NSaWdodCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzVG9wIHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzQm90dG9tKTtcblxuICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzIHx8IGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgIC8vIHRoaXMgYm9vbGVhbiB0byBkZXRlY3QgYW55IGZsaXAgbG9vcFxuICAgICAgZGF0YS5mbGlwcGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gZmxpcE9yZGVyW2luZGV4ICsgMV07XG4gICAgICB9XG5cbiAgICAgIGlmIChmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAgIHZhcmlhdGlvbiA9IGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGRhdGEucGxhY2VtZW50ID0gcGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcblxuICAgICAgLy8gdGhpcyBvYmplY3QgY29udGFpbnMgYHBvc2l0aW9uYCwgd2Ugd2FudCB0byBwcmVzZXJ2ZSBpdCBhbG9uZyB3aXRoXG4gICAgICAvLyBhbnkgYWRkaXRpb25hbCBwcm9wZXJ0eSB3ZSBtYXkgYWRkIGluIHRoZSBmdXR1cmVcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLnBvcHBlciwgZ2V0UG9wcGVyT2Zmc2V0cyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgZGF0YS5wbGFjZW1lbnQpKTtcblxuICAgICAgZGF0YSA9IHJ1bk1vZGlmaWVycyhkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZGF0YSwgJ2ZsaXAnKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGtlZXBUb2dldGhlcihkYXRhKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbiAgdmFyIGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAncmlnaHQnIDogJ2JvdHRvbSc7XG4gIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgaWYgKHBvcHBlcltzaWRlXSA8IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSAtIHBvcHBlclttZWFzdXJlbWVudF07XG4gIH1cbiAgaWYgKHBvcHBlcltvcFNpZGVdID4gZmxvb3IocmVmZXJlbmNlW3NpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtzaWRlXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBjb250YWluaW5nIHZhbHVlICsgdW5pdCBpbnRvIGEgcHggdmFsdWUgbnVtYmVyXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gc3RyIC0gVmFsdWUgKyB1bml0IHN0cmluZ1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IG1lYXN1cmVtZW50IC0gYGhlaWdodGAgb3IgYHdpZHRoYFxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzXG4gKiBAcmV0dXJucyB7TnVtYmVyfFN0cmluZ31cbiAqIFZhbHVlIGluIHBpeGVscywgb3Igb3JpZ2luYWwgc3RyaW5nIGlmIG5vIHZhbHVlcyB3ZXJlIGV4dHJhY3RlZFxuICovXG5mdW5jdGlvbiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpIHtcbiAgLy8gc2VwYXJhdGUgdmFsdWUgZnJvbSB1bml0XG4gIHZhciBzcGxpdCA9IHN0ci5tYXRjaCgvKCg/OlxcLXxcXCspP1xcZCpcXC4/XFxkKikoLiopLyk7XG4gIHZhciB2YWx1ZSA9ICtzcGxpdFsxXTtcbiAgdmFyIHVuaXQgPSBzcGxpdFsyXTtcblxuICAvLyBJZiBpdCdzIG5vdCBhIG51bWJlciBpdCdzIGFuIG9wZXJhdG9yLCBJIGd1ZXNzXG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgaWYgKHVuaXQuaW5kZXhPZignJScpID09PSAwKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB2b2lkIDA7XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICBjYXNlICclcCc6XG4gICAgICAgIGVsZW1lbnQgPSBwb3BwZXJPZmZzZXRzO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyUnOlxuICAgICAgY2FzZSAnJXInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZWxlbWVudCA9IHJlZmVyZW5jZU9mZnNldHM7XG4gICAgfVxuXG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0KGVsZW1lbnQpO1xuICAgIHJldHVybiByZWN0W21lYXN1cmVtZW50XSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2UgaWYgKHVuaXQgPT09ICd2aCcgfHwgdW5pdCA9PT0gJ3Z3Jykge1xuICAgIC8vIGlmIGlzIGEgdmggb3IgdncsIHdlIGNhbGN1bGF0ZSB0aGUgc2l6ZSBiYXNlZCBvbiB0aGUgdmlld3BvcnRcbiAgICB2YXIgc2l6ZSA9IHZvaWQgMDtcbiAgICBpZiAodW5pdCA9PT0gJ3ZoJykge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gICAgfVxuICAgIHJldHVybiBzaXplIC8gMTAwICogdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgaXMgYW4gZXhwbGljaXQgcGl4ZWwgdW5pdCwgd2UgZ2V0IHJpZCBvZiB0aGUgdW5pdCBhbmQga2VlcCB0aGUgdmFsdWVcbiAgICAvLyBpZiBpcyBhbiBpbXBsaWNpdCB1bml0LCBpdCdzIHB4LCBhbmQgd2UgcmV0dXJuIGp1c3QgdGhlIHZhbHVlXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5cbi8qKlxuICogUGFyc2UgYW4gYG9mZnNldGAgc3RyaW5nIHRvIGV4dHJhcG9sYXRlIGB4YCBhbmQgYHlgIG51bWVyaWMgb2Zmc2V0cy5cbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fVxuICogQHByaXZhdGVcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBvZmZzZXRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IGJhc2VQbGFjZW1lbnRcbiAqIEByZXR1cm5zIHtBcnJheX0gYSB0d28gY2VsbHMgYXJyYXkgd2l0aCB4IGFuZCB5IG9mZnNldHMgaW4gbnVtYmVyc1xuICovXG5mdW5jdGlvbiBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMsIGJhc2VQbGFjZW1lbnQpIHtcbiAgdmFyIG9mZnNldHMgPSBbMCwgMF07XG5cbiAgLy8gVXNlIGhlaWdodCBpZiBwbGFjZW1lbnQgaXMgbGVmdCBvciByaWdodCBhbmQgaW5kZXggaXMgMCBvdGhlcndpc2UgdXNlIHdpZHRoXG4gIC8vIGluIHRoaXMgd2F5IHRoZSBmaXJzdCBvZmZzZXQgd2lsbCB1c2UgYW4gYXhpcyBhbmQgdGhlIHNlY29uZCBvbmVcbiAgLy8gd2lsbCB1c2UgdGhlIG90aGVyIG9uZVxuICB2YXIgdXNlSGVpZ2h0ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgLy8gU3BsaXQgdGhlIG9mZnNldCBzdHJpbmcgdG8gb2J0YWluIGEgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzXG4gIC8vIFRoZSByZWdleCBhZGRyZXNzZXMgdmFsdWVzIHdpdGggdGhlIHBsdXMgb3IgbWludXMgc2lnbiBpbiBmcm9udCAoKzEwLCAtMjAsIGV0YylcbiAgdmFyIGZyYWdtZW50cyA9IG9mZnNldC5zcGxpdCgvKFxcK3xcXC0pLykubWFwKGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcudHJpbSgpO1xuICB9KTtcblxuICAvLyBEZXRlY3QgaWYgdGhlIG9mZnNldCBzdHJpbmcgY29udGFpbnMgYSBwYWlyIG9mIHZhbHVlcyBvciBhIHNpbmdsZSBvbmVcbiAgLy8gdGhleSBjb3VsZCBiZSBzZXBhcmF0ZWQgYnkgY29tbWEgb3Igc3BhY2VcbiAgdmFyIGRpdmlkZXIgPSBmcmFnbWVudHMuaW5kZXhPZihmaW5kKGZyYWdtZW50cywgZnVuY3Rpb24gKGZyYWcpIHtcbiAgICByZXR1cm4gZnJhZy5zZWFyY2goLyx8XFxzLykgIT09IC0xO1xuICB9KSk7XG5cbiAgaWYgKGZyYWdtZW50c1tkaXZpZGVyXSAmJiBmcmFnbWVudHNbZGl2aWRlcl0uaW5kZXhPZignLCcpID09PSAtMSkge1xuICAgIGNvbnNvbGUud2FybignT2Zmc2V0cyBzZXBhcmF0ZWQgYnkgd2hpdGUgc3BhY2UocykgYXJlIGRlcHJlY2F0ZWQsIHVzZSBhIGNvbW1hICgsKSBpbnN0ZWFkLicpO1xuICB9XG5cbiAgLy8gSWYgZGl2aWRlciBpcyBmb3VuZCwgd2UgZGl2aWRlIHRoZSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHMgdG8gZGl2aWRlXG4gIC8vIHRoZW0gYnkgb2ZzZXQgWCBhbmQgWS5cbiAgdmFyIHNwbGl0UmVnZXggPSAvXFxzKixcXHMqfFxccysvO1xuICB2YXIgb3BzID0gZGl2aWRlciAhPT0gLTEgPyBbZnJhZ21lbnRzLnNsaWNlKDAsIGRpdmlkZXIpLmNvbmNhdChbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzBdXSksIFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMV1dLmNvbmNhdChmcmFnbWVudHMuc2xpY2UoZGl2aWRlciArIDEpKV0gOiBbZnJhZ21lbnRzXTtcblxuICAvLyBDb252ZXJ0IHRoZSB2YWx1ZXMgd2l0aCB1bml0cyB0byBhYnNvbHV0ZSBwaXhlbHMgdG8gYWxsb3cgb3VyIGNvbXB1dGF0aW9uc1xuICBvcHMgPSBvcHMubWFwKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcbiAgICAvLyBNb3N0IG9mIHRoZSB1bml0cyByZWx5IG9uIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgcG9wcGVyXG4gICAgdmFyIG1lYXN1cmVtZW50ID0gKGluZGV4ID09PSAxID8gIXVzZUhlaWdodCA6IHVzZUhlaWdodCkgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgdmFyIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgcmV0dXJuIG9wXG4gICAgLy8gVGhpcyBhZ2dyZWdhdGVzIGFueSBgK2Agb3IgYC1gIHNpZ24gdGhhdCBhcmVuJ3QgY29uc2lkZXJlZCBvcGVyYXRvcnNcbiAgICAvLyBlLmcuOiAxMCArICs1ID0+IFsxMCwgKywgKzVdXG4gICAgLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgICAgaWYgKGFbYS5sZW5ndGggLSAxXSA9PT0gJycgJiYgWycrJywgJy0nXS5pbmRleE9mKGIpICE9PSAtMSkge1xuICAgICAgICBhW2EubGVuZ3RoIC0gMV0gPSBiO1xuICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IHRydWU7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIGlmIChtZXJnZVdpdGhQcmV2aW91cykge1xuICAgICAgICBhW2EubGVuZ3RoIC0gMV0gKz0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYS5jb25jYXQoYik7XG4gICAgICB9XG4gICAgfSwgW10pXG4gICAgLy8gSGVyZSB3ZSBjb252ZXJ0IHRoZSBzdHJpbmcgdmFsdWVzIGludG8gbnVtYmVyIHZhbHVlcyAoaW4gcHgpXG4gICAgLm1hcChmdW5jdGlvbiAoc3RyKSB7XG4gICAgICByZXR1cm4gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gTG9vcCB0cm91Z2ggdGhlIG9mZnNldHMgYXJyYXlzIGFuZCBleGVjdXRlIHRoZSBvcGVyYXRpb25zXG4gIG9wcy5mb3JFYWNoKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcbiAgICBvcC5mb3JFYWNoKGZ1bmN0aW9uIChmcmFnLCBpbmRleDIpIHtcbiAgICAgIGlmIChpc051bWVyaWMoZnJhZykpIHtcbiAgICAgICAgb2Zmc2V0c1tpbmRleF0gKz0gZnJhZyAqIChvcFtpbmRleDIgLSAxXSA9PT0gJy0nID8gLTEgOiAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEBhcmd1bWVudCB7TnVtYmVyfFN0cmluZ30gb3B0aW9ucy5vZmZzZXQ9MFxuICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIG9mZnNldChkYXRhLCBfcmVmKSB7XG4gIHZhciBvZmZzZXQgPSBfcmVmLm9mZnNldDtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LFxuICAgICAgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICB2YXIgb2Zmc2V0cyA9IHZvaWQgMDtcbiAgaWYgKGlzTnVtZXJpYygrb2Zmc2V0KSkge1xuICAgIG9mZnNldHMgPSBbK29mZnNldCwgMF07XG4gIH0gZWxzZSB7XG4gICAgb2Zmc2V0cyA9IHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyLCByZWZlcmVuY2UsIGJhc2VQbGFjZW1lbnQpO1xuICB9XG5cbiAgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdsZWZ0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdyaWdodCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAndG9wJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdib3R0b20nKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMV07XG4gIH1cblxuICBkYXRhLnBvcHBlciA9IHBvcHBlcjtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBib3VuZGFyaWVzRWxlbWVudCA9IG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQgfHwgZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcblxuICAvLyBJZiBvZmZzZXRQYXJlbnQgaXMgdGhlIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSByZWFsbHkgd2FudCB0b1xuICAvLyBnbyBvbmUgc3RlcCB1cCBhbmQgdXNlIHRoZSBuZXh0IG9mZnNldFBhcmVudCBhcyByZWZlcmVuY2UgdG9cbiAgLy8gYXZvaWQgdG8gbWFrZSB0aGlzIG1vZGlmaWVyIGNvbXBsZXRlbHkgdXNlbGVzcyBhbmQgbG9vayBsaWtlIGJyb2tlblxuICBpZiAoZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UgPT09IGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gICAgYm91bmRhcmllc0VsZW1lbnQgPSBnZXRPZmZzZXRQYXJlbnQoYm91bmRhcmllc0VsZW1lbnQpO1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCk7XG4gIG9wdGlvbnMuYm91bmRhcmllcyA9IGJvdW5kYXJpZXM7XG5cbiAgdmFyIG9yZGVyID0gb3B0aW9ucy5wcmlvcml0eTtcbiAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgdmFyIGNoZWNrID0ge1xuICAgIHByaW1hcnk6IGZ1bmN0aW9uIHByaW1hcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbcGxhY2VtZW50XTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA8IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5tYXgocG9wcGVyW3BsYWNlbWVudF0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIHBsYWNlbWVudCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2Vjb25kYXJ5OiBmdW5jdGlvbiBzZWNvbmRhcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgbWFpblNpZGUgPSBwbGFjZW1lbnQgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAndG9wJztcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlclttYWluU2lkZV07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPiBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWluKHBvcHBlclttYWluU2lkZV0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSAtIChwbGFjZW1lbnQgPT09ICdyaWdodCcgPyBwb3BwZXIud2lkdGggOiBwb3BwZXIuaGVpZ2h0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIG1haW5TaWRlLCB2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIG9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHZhciBzaWRlID0gWydsZWZ0JywgJ3RvcCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTEgPyAncHJpbWFyeScgOiAnc2Vjb25kYXJ5JztcbiAgICBwb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBjaGVja1tzaWRlXShwbGFjZW1lbnQpKTtcbiAgfSk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IHBvcHBlcjtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gc2hpZnQoZGF0YSkge1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBzaGlmdHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIC8vIGlmIHNoaWZ0IHNoaWZ0dmFyaWF0aW9uIGlzIHNwZWNpZmllZCwgcnVuIHRoZSBtb2RpZmllclxuICBpZiAoc2hpZnR2YXJpYXRpb24pIHtcbiAgICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2UsXG4gICAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyO1xuXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ2JvdHRvbScsICd0b3AnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcbiAgICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gICAgdmFyIHNoaWZ0T2Zmc2V0cyA9IHtcbiAgICAgIHN0YXJ0OiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdKSxcbiAgICAgIGVuZDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVttZWFzdXJlbWVudF0gLSBwb3BwZXJbbWVhc3VyZW1lbnRdKVxuICAgIH07XG5cbiAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgc2hpZnRPZmZzZXRzW3NoaWZ0dmFyaWF0aW9uXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGhpZGUoZGF0YSkge1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2hpZGUnLCAncHJldmVudE92ZXJmbG93JykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciByZWZSZWN0ID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcbiAgdmFyIGJvdW5kID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdwcmV2ZW50T3ZlcmZsb3cnO1xuICB9KS5ib3VuZGFyaWVzO1xuXG4gIGlmIChyZWZSZWN0LmJvdHRvbSA8IGJvdW5kLnRvcCB8fCByZWZSZWN0LmxlZnQgPiBib3VuZC5yaWdodCB8fCByZWZSZWN0LnRvcCA+IGJvdW5kLmJvdHRvbSB8fCByZWZSZWN0LnJpZ2h0IDwgYm91bmQubGVmdCkge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IHRydWU7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSAnJztcbiAgfSBlbHNlIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gZmFsc2U7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBpbm5lcihkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc0hvcml6ID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgdmFyIHN1YnRyYWN0TGVuZ3RoID0gWyd0b3AnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPT09IC0xO1xuXG4gIHBvcHBlcltpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCddID0gcmVmZXJlbmNlW2Jhc2VQbGFjZW1lbnRdIC0gKHN1YnRyYWN0TGVuZ3RoID8gcG9wcGVyW2lzSG9yaXogPyAnd2lkdGgnIDogJ2hlaWdodCddIDogMCk7XG5cbiAgZGF0YS5wbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChwb3BwZXIpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIE1vZGlmaWVyIGZ1bmN0aW9uLCBlYWNoIG1vZGlmaWVyIGNhbiBoYXZlIGEgZnVuY3Rpb24gb2YgdGhpcyB0eXBlIGFzc2lnbmVkXG4gKiB0byBpdHMgYGZuYCBwcm9wZXJ0eS48YnIgLz5cbiAqIFRoZXNlIGZ1bmN0aW9ucyB3aWxsIGJlIGNhbGxlZCBvbiBlYWNoIHVwZGF0ZSwgdGhpcyBtZWFucyB0aGF0IHlvdSBtdXN0XG4gKiBtYWtlIHN1cmUgdGhleSBhcmUgcGVyZm9ybWFudCBlbm91Z2ggdG8gYXZvaWQgcGVyZm9ybWFuY2UgYm90dGxlbmVja3MuXG4gKlxuICogQGZ1bmN0aW9uIE1vZGlmaWVyRm5cbiAqIEBhcmd1bWVudCB7ZGF0YU9iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5cbi8qKlxuICogTW9kaWZpZXJzIGFyZSBwbHVnaW5zIHVzZWQgdG8gYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHlvdXIgcG9wcGVycy48YnIgLz5cbiAqIFBvcHBlci5qcyB1c2VzIGEgc2V0IG9mIDkgbW9kaWZpZXJzIHRvIHByb3ZpZGUgYWxsIHRoZSBiYXNpYyBmdW5jdGlvbmFsaXRpZXNcbiAqIG5lZWRlZCBieSB0aGUgbGlicmFyeS5cbiAqXG4gKiBVc3VhbGx5IHlvdSBkb24ndCB3YW50IHRvIG92ZXJyaWRlIHRoZSBgb3JkZXJgLCBgZm5gIGFuZCBgb25Mb2FkYCBwcm9wcy5cbiAqIEFsbCB0aGUgb3RoZXIgcHJvcGVydGllcyBhcmUgY29uZmlndXJhdGlvbnMgdGhhdCBjb3VsZCBiZSB0d2Vha2VkLlxuICogQG5hbWVzcGFjZSBtb2RpZmllcnNcbiAqL1xudmFyIG1vZGlmaWVycyA9IHtcbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gc2hpZnQgdGhlIHBvcHBlciBvbiB0aGUgc3RhcnQgb3IgZW5kIG9mIGl0cyByZWZlcmVuY2VcbiAgICogZWxlbWVudC48YnIgLz5cbiAgICogSXQgd2lsbCByZWFkIHRoZSB2YXJpYXRpb24gb2YgdGhlIGBwbGFjZW1lbnRgIHByb3BlcnR5LjxiciAvPlxuICAgKiBJdCBjYW4gYmUgb25lIGVpdGhlciBgLWVuZGAgb3IgYC1zdGFydGAuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBzaGlmdDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0xMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDEwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHNoaWZ0XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBgb2Zmc2V0YCBtb2RpZmllciBjYW4gc2hpZnQgeW91ciBwb3BwZXIgb24gYm90aCBpdHMgYXhpcy5cbiAgICpcbiAgICogSXQgYWNjZXB0cyB0aGUgZm9sbG93aW5nIHVuaXRzOlxuICAgKiAtIGBweGAgb3IgdW5pdGxlc3MsIGludGVycHJldGVkIGFzIHBpeGVsc1xuICAgKiAtIGAlYCBvciBgJXJgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gICAqIC0gYCVwYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiAtIGB2d2AsIENTUyB2aWV3cG9ydCB3aWR0aCB1bml0XG4gICAqIC0gYHZoYCwgQ1NTIHZpZXdwb3J0IGhlaWdodCB1bml0XG4gICAqXG4gICAqIEZvciBsZW5ndGggaXMgaW50ZW5kZWQgdGhlIG1haW4gYXhpcyByZWxhdGl2ZSB0byB0aGUgcGxhY2VtZW50IG9mIHRoZSBwb3BwZXIuPGJyIC8+XG4gICAqIFRoaXMgbWVhbnMgdGhhdCBpZiB0aGUgcGxhY2VtZW50IGlzIGB0b3BgIG9yIGBib3R0b21gLCB0aGUgbGVuZ3RoIHdpbGwgYmUgdGhlXG4gICAqIGB3aWR0aGAuIEluIGNhc2Ugb2YgYGxlZnRgIG9yIGByaWdodGAsIGl0IHdpbGwgYmUgdGhlIGhlaWdodC5cbiAgICpcbiAgICogWW91IGNhbiBwcm92aWRlIGEgc2luZ2xlIHZhbHVlIChhcyBgTnVtYmVyYCBvciBgU3RyaW5nYCksIG9yIGEgcGFpciBvZiB2YWx1ZXNcbiAgICogYXMgYFN0cmluZ2AgZGl2aWRlZCBieSBhIGNvbW1hIG9yIG9uZSAob3IgbW9yZSkgd2hpdGUgc3BhY2VzLjxiciAvPlxuICAgKiBUaGUgbGF0dGVyIGlzIGEgZGVwcmVjYXRlZCBtZXRob2QgYmVjYXVzZSBpdCBsZWFkcyB0byBjb25mdXNpb24gYW5kIHdpbGwgYmVcbiAgICogcmVtb3ZlZCBpbiB2Mi48YnIgLz5cbiAgICogQWRkaXRpb25hbGx5LCBpdCBhY2NlcHRzIGFkZGl0aW9ucyBhbmQgc3VidHJhY3Rpb25zIGJldHdlZW4gZGlmZmVyZW50IHVuaXRzLlxuICAgKiBOb3RlIHRoYXQgbXVsdGlwbGljYXRpb25zIGFuZCBkaXZpc2lvbnMgYXJlbid0IHN1cHBvcnRlZC5cbiAgICpcbiAgICogVmFsaWQgZXhhbXBsZXMgYXJlOlxuICAgKiBgYGBcbiAgICogMTBcbiAgICogJzEwJSdcbiAgICogJzEwLCAxMCdcbiAgICogJzEwJSwgMTAnXG4gICAqICcxMCArIDEwJSdcbiAgICogJzEwIC0gNXZoICsgMyUnXG4gICAqICctMTBweCArIDV2aCwgNXB4IC0gNiUnXG4gICAqIGBgYFxuICAgKiA+ICoqTkIqKjogSWYgeW91IGRlc2lyZSB0byBhcHBseSBvZmZzZXRzIHRvIHlvdXIgcG9wcGVycyBpbiBhIHdheSB0aGF0IG1heSBtYWtlIHRoZW0gb3ZlcmxhcFxuICAgKiA+IHdpdGggdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnQsIHVuZm9ydHVuYXRlbHksIHlvdSB3aWxsIGhhdmUgdG8gZGlzYWJsZSB0aGUgYGZsaXBgIG1vZGlmaWVyLlxuICAgKiA+IE1vcmUgb24gdGhpcyBbcmVhZGluZyB0aGlzIGlzc3VlXShodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9pc3N1ZXMvMzczKVxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgb2Zmc2V0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTIwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogb2Zmc2V0LFxuICAgIC8qKiBAcHJvcCB7TnVtYmVyfFN0cmluZ30gb2Zmc2V0PTBcbiAgICAgKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAgICAgKi9cbiAgICBvZmZzZXQ6IDBcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBwcmV2ZW50IHRoZSBwb3BwZXIgZnJvbSBiZWluZyBwb3NpdGlvbmVkIG91dHNpZGUgdGhlIGJvdW5kYXJ5LlxuICAgKlxuICAgKiBBbiBzY2VuYXJpbyBleGlzdHMgd2hlcmUgdGhlIHJlZmVyZW5jZSBpdHNlbGYgaXMgbm90IHdpdGhpbiB0aGUgYm91bmRhcmllcy48YnIgLz5cbiAgICogV2UgY2FuIHNheSBpdCBoYXMgXCJlc2NhcGVkIHRoZSBib3VuZGFyaWVzXCIg4oCUIG9yIGp1c3QgXCJlc2NhcGVkXCIuPGJyIC8+XG4gICAqIEluIHRoaXMgY2FzZSB3ZSBuZWVkIHRvIGRlY2lkZSB3aGV0aGVyIHRoZSBwb3BwZXIgc2hvdWxkIGVpdGhlcjpcbiAgICpcbiAgICogLSBkZXRhY2ggZnJvbSB0aGUgcmVmZXJlbmNlIGFuZCByZW1haW4gXCJ0cmFwcGVkXCIgaW4gdGhlIGJvdW5kYXJpZXMsIG9yXG4gICAqIC0gaWYgaXQgc2hvdWxkIGlnbm9yZSB0aGUgYm91bmRhcnkgYW5kIFwiZXNjYXBlIHdpdGggaXRzIHJlZmVyZW5jZVwiXG4gICAqXG4gICAqIFdoZW4gYGVzY2FwZVdpdGhSZWZlcmVuY2VgIGlzIHNldCB0b2B0cnVlYCBhbmQgcmVmZXJlbmNlIGlzIGNvbXBsZXRlbHlcbiAgICogb3V0c2lkZSBpdHMgYm91bmRhcmllcywgdGhlIHBvcHBlciB3aWxsIG92ZXJmbG93IChvciBjb21wbGV0ZWx5IGxlYXZlKVxuICAgKiB0aGUgYm91bmRhcmllcyBpbiBvcmRlciB0byByZW1haW4gYXR0YWNoZWQgdG8gdGhlIGVkZ2Ugb2YgdGhlIHJlZmVyZW5jZS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHByZXZlbnRPdmVyZmxvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0zMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDMwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7QXJyYXl9IFtwcmlvcml0eT1bJ2xlZnQnLCdyaWdodCcsJ3RvcCcsJ2JvdHRvbSddXVxuICAgICAqIFBvcHBlciB3aWxsIHRyeSB0byBwcmV2ZW50IG92ZXJmbG93IGZvbGxvd2luZyB0aGVzZSBwcmlvcml0aWVzIGJ5IGRlZmF1bHQsXG4gICAgICogdGhlbiwgaXQgY291bGQgb3ZlcmZsb3cgb24gdGhlIGxlZnQgYW5kIG9uIHRvcCBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHByaW9yaXR5OiBbJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ2JvdHRvbSddLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIEFtb3VudCBvZiBwaXhlbCB1c2VkIHRvIGRlZmluZSBhIG1pbmltdW0gZGlzdGFuY2UgYmV0d2VlbiB0aGUgYm91bmRhcmllc1xuICAgICAqIGFuZCB0aGUgcG9wcGVyIHRoaXMgbWFrZXMgc3VyZSB0aGUgcG9wcGVyIGhhcyBhbHdheXMgYSBsaXR0bGUgcGFkZGluZ1xuICAgICAqIGJldHdlZW4gdGhlIGVkZ2VzIG9mIGl0cyBjb250YWluZXJcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSdzY3JvbGxQYXJlbnQnXG4gICAgICogQm91bmRhcmllcyB1c2VkIGJ5IHRoZSBtb2RpZmllciwgY2FuIGJlIGBzY3JvbGxQYXJlbnRgLCBgd2luZG93YCxcbiAgICAgKiBgdmlld3BvcnRgIG9yIGFueSBET00gZWxlbWVudC5cbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3Njcm9sbFBhcmVudCdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHN1cmUgdGhlIHJlZmVyZW5jZSBhbmQgaXRzIHBvcHBlciBzdGF5IG5lYXIgZWFjaG90aGVyc1xuICAgKiB3aXRob3V0IGxlYXZpbmcgYW55IGdhcCBiZXR3ZWVuIHRoZSB0d28uIEV4cGVjaWFsbHkgdXNlZnVsIHdoZW4gdGhlIGFycm93IGlzXG4gICAqIGVuYWJsZWQgYW5kIHlvdSB3YW50IHRvIGFzc3VyZSBpdCB0byBwb2ludCB0byBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEl0IGNhcmVzIG9ubHkgYWJvdXQgdGhlIGZpcnN0IGF4aXMsIHlvdSBjYW4gc3RpbGwgaGF2ZSBwb3BwZXJzIHdpdGggbWFyZ2luXG4gICAqIGJldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAga2VlcFRvZ2V0aGVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTQwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNDAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjoga2VlcFRvZ2V0aGVyXG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoaXMgbW9kaWZpZXIgaXMgdXNlZCB0byBtb3ZlIHRoZSBgYXJyb3dFbGVtZW50YCBvZiB0aGUgcG9wcGVyIHRvIG1ha2VcbiAgICogc3VyZSBpdCBpcyBwb3NpdGlvbmVkIGJldHdlZW4gdGhlIHJlZmVyZW5jZSBlbGVtZW50IGFuZCBpdHMgcG9wcGVyIGVsZW1lbnQuXG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgb3V0ZXIgc2l6ZSBvZiB0aGUgYGFycm93RWxlbWVudGAgbm9kZSB0byBkZXRlY3QgaG93IG1hbnlcbiAgICogcGl4ZWxzIG9mIGNvbmp1Y3Rpb24gYXJlIG5lZWRlZC5cbiAgICpcbiAgICogSXQgaGFzIG5vIGVmZmVjdCBpZiBubyBgYXJyb3dFbGVtZW50YCBpcyBwcm92aWRlZC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFycm93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTUwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXJyb3csXG4gICAgLyoqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGVsZW1lbnQ9J1t4LWFycm93XScgLSBTZWxlY3RvciBvciBub2RlIHVzZWQgYXMgYXJyb3cgKi9cbiAgICBlbGVtZW50OiAnW3gtYXJyb3ddJ1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGZsaXAgdGhlIHBvcHBlcidzIHBsYWNlbWVudCB3aGVuIGl0IHN0YXJ0cyB0byBvdmVybGFwIGl0c1xuICAgKiByZWZlcmVuY2UgZWxlbWVudC5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKlxuICAgKiAqKk5PVEU6KiogdGhpcyBtb2RpZmllciB3aWxsIGludGVycnVwdCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUgYW5kIHdpbGxcbiAgICogcmVzdGFydCBpdCBpZiBpdCBkZXRlY3RzIHRoZSBuZWVkIHRvIGZsaXAgdGhlIHBsYWNlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGZsaXA6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA2MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBmbGlwLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8QXJyYXl9IGJlaGF2aW9yPSdmbGlwJ1xuICAgICAqIFRoZSBiZWhhdmlvciB1c2VkIHRvIGNoYW5nZSB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50LiBJdCBjYW4gYmUgb25lIG9mXG4gICAgICogYGZsaXBgLCBgY2xvY2t3aXNlYCwgYGNvdW50ZXJjbG9ja3dpc2VgIG9yIGFuIGFycmF5IHdpdGggYSBsaXN0IG9mIHZhbGlkXG4gICAgICogcGxhY2VtZW50cyAod2l0aCBvcHRpb25hbCB2YXJpYXRpb25zKS5cbiAgICAgKi9cbiAgICBiZWhhdmlvcjogJ2ZsaXAnLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBmbGlwIGlmIGl0IGhpdHMgdGhlIGVkZ2VzIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0ndmlld3BvcnQnXG4gICAgICogVGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBkZWZpbmUgdGhlIGJvdW5kYXJpZXMgb2YgdGhlIHBvcHBlciBwb3NpdGlvbixcbiAgICAgKiB0aGUgcG9wcGVyIHdpbGwgbmV2ZXIgYmUgcGxhY2VkIG91dHNpZGUgb2YgdGhlIGRlZmluZWQgYm91bmRhcmllc1xuICAgICAqIChleGNlcHQgaWYga2VlcFRvZ2V0aGVyIGlzIGVuYWJsZWQpXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICd2aWV3cG9ydCdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHRoZSBwb3BwZXIgZmxvdyB0b3dhcmQgdGhlIGlubmVyIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQnkgZGVmYXVsdCwgd2hlbiB0aGlzIG1vZGlmaWVyIGlzIGRpc2FibGVkLCB0aGUgcG9wcGVyIHdpbGwgYmUgcGxhY2VkIG91dHNpZGVcbiAgICogdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaW5uZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA3MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPWZhbHNlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGlubmVyXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gaGlkZSB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dHNpZGUgb2YgdGhlXG4gICAqIHBvcHBlciBib3VuZGFyaWVzLiBJdCB3aWxsIHNldCBhIGB4LW91dC1vZi1ib3VuZGFyaWVzYCBhdHRyaWJ1dGUgd2hpY2ggY2FuXG4gICAqIGJlIHVzZWQgdG8gaGlkZSB3aXRoIGEgQ1NTIHNlbGVjdG9yIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGlzXG4gICAqIG91dCBvZiBib3VuZGFyaWVzLlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBoaWRlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTgwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogODAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaGlkZVxuICB9LFxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgc3R5bGUgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBlbGVtZW50IHRvIGdldHNcbiAgICogcHJvcGVybHkgcG9zaXRpb25lZC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgbW9kaWZpZXIgd2lsbCBub3QgdG91Y2ggdGhlIERPTSwgaXQganVzdCBwcmVwYXJlcyB0aGUgc3R5bGVzXG4gICAqIHNvIHRoYXQgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGNhbiBhcHBseSBpdC4gVGhpcyBzZXBhcmF0aW9uIGlzIHVzZWZ1bFxuICAgKiBpbiBjYXNlIHlvdSBuZWVkIHRvIHJlcGxhY2UgYGFwcGx5U3R5bGVgIHdpdGggYSBjdXN0b20gaW1wbGVtZW50YXRpb24uXG4gICAqXG4gICAqIFRoaXMgbW9kaWZpZXIgaGFzIGA4NTBgIGFzIGBvcmRlcmAgdmFsdWUgdG8gbWFpbnRhaW4gYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgKiB3aXRoIHByZXZpb3VzIHZlcnNpb25zIG9mIFBvcHBlci5qcy4gRXhwZWN0IHRoZSBtb2RpZmllcnMgb3JkZXJpbmcgbWV0aG9kXG4gICAqIHRvIGNoYW5nZSBpbiBmdXR1cmUgbWFqb3IgdmVyc2lvbnMgb2YgdGhlIGxpYnJhcnkuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBjb21wdXRlU3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODUwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4NTAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBjb21wdXRlU3R5bGUsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNkIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdHJ1ZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nYm90dG9tJ11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFggYXhpcyAoYGJvdHRvbWAgb3IgYHRvcGApLiBBS0EgWCBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGBib3R0b21gXG4gICAgICovXG4gICAgeDogJ2JvdHRvbScsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2xlZnQnXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWSBheGlzIChgbGVmdGAgb3IgYHJpZ2h0YCkuIEFLQSBZIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYHJpZ2h0YFxuICAgICAqL1xuICAgIHk6ICdyaWdodCdcbiAgfSxcblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgY29tcHV0ZWQgc3R5bGVzIHRvIHRoZSBwb3BwZXIgZWxlbWVudC5cbiAgICpcbiAgICogQWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyBhcmUgbGltaXRlZCB0byB0aGlzIG1vZGlmaWVyLiBUaGlzIGlzIHVzZWZ1bCBpbiBjYXNlXG4gICAqIHlvdSB3YW50IHRvIGludGVncmF0ZSBQb3BwZXIuanMgaW5zaWRlIGEgZnJhbWV3b3JrIG9yIHZpZXcgbGlicmFyeSBhbmQgeW91XG4gICAqIHdhbnQgdG8gZGVsZWdhdGUgYWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyB0byBpdC5cbiAgICpcbiAgICogTm90ZSB0aGF0IGlmIHlvdSBkaXNhYmxlIHRoaXMgbW9kaWZpZXIsIHlvdSBtdXN0IG1ha2Ugc3VyZSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogaGFzIGl0cyBwb3NpdGlvbiBzZXQgdG8gYGFic29sdXRlYCBiZWZvcmUgUG9wcGVyLmpzIGNhbiBkbyBpdHMgd29yayFcbiAgICpcbiAgICogSnVzdCBkaXNhYmxlIHRoaXMgbW9kaWZpZXIgYW5kIGRlZmluZSB5b3Ugb3duIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgZWZmZWN0LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXBwbHlTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj05MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDkwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFwcGx5U3R5bGUsXG4gICAgLyoqIEBwcm9wIHtGdW5jdGlvbn0gKi9cbiAgICBvbkxvYWQ6IGFwcGx5U3R5bGVPbkxvYWQsXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjEwLjAsIHRoZSBwcm9wZXJ0eSBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllclxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzZCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHVuZGVmaW5lZFxuICB9XG59O1xuXG4vKipcbiAqIFRoZSBgZGF0YU9iamVjdGAgaXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBpbmZvcm1hdGlvbnMgdXNlZCBieSBQb3BwZXIuanNcbiAqIHRoaXMgb2JqZWN0IGdldCBwYXNzZWQgdG8gbW9kaWZpZXJzIGFuZCB0byB0aGUgYG9uQ3JlYXRlYCBhbmQgYG9uVXBkYXRlYCBjYWxsYmFja3MuXG4gKiBAbmFtZSBkYXRhT2JqZWN0XG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5pbnN0YW5jZSBUaGUgUG9wcGVyLmpzIGluc3RhbmNlXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5wbGFjZW1lbnQgUGxhY2VtZW50IGFwcGxpZWQgdG8gcG9wcGVyXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCBQbGFjZW1lbnQgb3JpZ2luYWxseSBkZWZpbmVkIG9uIGluaXRcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5mbGlwcGVkIFRydWUgaWYgcG9wcGVyIGhhcyBiZWVuIGZsaXBwZWQgYnkgZmxpcCBtb2RpZmllclxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmhpZGUgVHJ1ZSBpZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0IG9mIGJvdW5kYXJpZXMsIHVzZWZ1bCB0byBrbm93IHdoZW4gdG8gaGlkZSB0aGUgcG9wcGVyLlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gZGF0YS5hcnJvd0VsZW1lbnQgTm9kZSB1c2VkIGFzIGFycm93IGJ5IGFycm93IG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5zdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsIGl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5hcnJvd1N0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBhcnJvdywgaXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmJvdW5kYXJpZXMgT2Zmc2V0cyBvZiB0aGUgcG9wcGVyIGJvdW5kYXJpZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMgVGhlIG1lYXN1cmVtZW50cyBvZiBwb3BwZXIsIHJlZmVyZW5jZSBhbmQgYXJyb3cgZWxlbWVudHMuXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnBvcHBlciBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucmVmZXJlbmNlIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5hcnJvd10gYHRvcGAgYW5kIGBsZWZ0YCBvZmZzZXRzLCBvbmx5IG9uZSBvZiB0aGVtIHdpbGwgYmUgZGlmZmVyZW50IGZyb20gMFxuICovXG5cbi8qKlxuICogRGVmYXVsdCBvcHRpb25zIHByb3ZpZGVkIHRvIFBvcHBlci5qcyBjb25zdHJ1Y3Rvci48YnIgLz5cbiAqIFRoZXNlIGNhbiBiZSBvdmVycmlkZW4gdXNpbmcgdGhlIGBvcHRpb25zYCBhcmd1bWVudCBvZiBQb3BwZXIuanMuPGJyIC8+XG4gKiBUbyBvdmVycmlkZSBhbiBvcHRpb24sIHNpbXBseSBwYXNzIGFzIDNyZCBhcmd1bWVudCBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZVxuICogc3RydWN0dXJlIG9mIHRoaXMgb2JqZWN0LCBleGFtcGxlOlxuICogYGBgXG4gKiBuZXcgUG9wcGVyKHJlZiwgcG9wLCB7XG4gKiAgIG1vZGlmaWVyczoge1xuICogICAgIHByZXZlbnRPdmVyZmxvdzogeyBlbmFibGVkOiBmYWxzZSB9XG4gKiAgIH1cbiAqIH0pXG4gKiBgYGBcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbnZhciBEZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFBvcHBlcidzIHBsYWNlbWVudFxuICAgKiBAcHJvcCB7UG9wcGVyLnBsYWNlbWVudHN9IHBsYWNlbWVudD0nYm90dG9tJ1xuICAgKi9cbiAgcGxhY2VtZW50OiAnYm90dG9tJyxcblxuICAvKipcbiAgICogV2hldGhlciBldmVudHMgKHJlc2l6ZSwgc2Nyb2xsKSBhcmUgaW5pdGlhbGx5IGVuYWJsZWRcbiAgICogQHByb3Age0Jvb2xlYW59IGV2ZW50c0VuYWJsZWQ9dHJ1ZVxuICAgKi9cbiAgZXZlbnRzRW5hYmxlZDogdHJ1ZSxcblxuICAvKipcbiAgICogU2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gYXV0b21hdGljYWxseSByZW1vdmUgdGhlIHBvcHBlciB3aGVuXG4gICAqIHlvdSBjYWxsIHRoZSBgZGVzdHJveWAgbWV0aG9kLlxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcmVtb3ZlT25EZXN0cm95PWZhbHNlXG4gICAqL1xuICByZW1vdmVPbkRlc3Ryb3k6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIGNyZWF0ZWQuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uQ3JlYXRlfVxuICAgKi9cbiAgb25DcmVhdGU6IGZ1bmN0aW9uIG9uQ3JlYXRlKCkge30sXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgdXBkYXRlZCwgdGhpcyBjYWxsYmFjayBpcyBub3QgY2FsbGVkXG4gICAqIG9uIHRoZSBpbml0aWFsaXphdGlvbi9jcmVhdGlvbiBvZiB0aGUgcG9wcGVyLCBidXQgb25seSBvbiBzdWJzZXF1ZW50XG4gICAqIHVwZGF0ZXMuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uVXBkYXRlfVxuICAgKi9cbiAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKCkge30sXG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgbW9kaWZpZXJzIHVzZWQgdG8gbW9kaWZ5IHRoZSBvZmZzZXRzIGJlZm9yZSB0aGV5IGFyZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuXG4gICAqIFRoZXkgcHJvdmlkZSBtb3N0IG9mIHRoZSBmdW5jdGlvbmFsaXRpZXMgb2YgUG9wcGVyLmpzXG4gICAqIEBwcm9wIHttb2RpZmllcnN9XG4gICAqL1xuICBtb2RpZmllcnM6IG1vZGlmaWVyc1xufTtcblxuLyoqXG4gKiBAY2FsbGJhY2sgb25DcmVhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIG9uVXBkYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vLyBVdGlsc1xuLy8gTWV0aG9kc1xudmFyIFBvcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBQb3BwZXIuanMgaW5zdGFuY2VcbiAgICogQGNsYXNzIFBvcHBlclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fHJlZmVyZW5jZU9iamVjdH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgYXMgcG9wcGVyLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFlvdXIgY3VzdG9tIG9wdGlvbnMgdG8gb3ZlcnJpZGUgdGhlIG9uZXMgZGVmaW5lZCBpbiBbRGVmYXVsdHNdKCNkZWZhdWx0cylcbiAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZSAtIFRoZSBnZW5lcmF0ZWQgUG9wcGVyLmpzIGluc3RhbmNlXG4gICAqL1xuICBmdW5jdGlvbiBQb3BwZXIocmVmZXJlbmNlLCBwb3BwZXIpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcHBlcik7XG5cbiAgICB0aGlzLnNjaGVkdWxlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShfdGhpcy51cGRhdGUpO1xuICAgIH07XG5cbiAgICAvLyBtYWtlIHVwZGF0ZSgpIGRlYm91bmNlZCwgc28gdGhhdCBpdCBvbmx5IHJ1bnMgYXQgbW9zdCBvbmNlLXBlci10aWNrXG4gICAgdGhpcy51cGRhdGUgPSBkZWJvdW5jZSh0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTtcblxuICAgIC8vIHdpdGgge30gd2UgY3JlYXRlIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBvcHRpb25zIGluc2lkZSBpdFxuICAgIHRoaXMub3B0aW9ucyA9IF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgLy8gaW5pdCBzdGF0ZVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0Rlc3Ryb3llZDogZmFsc2UsXG4gICAgICBpc0NyZWF0ZWQ6IGZhbHNlLFxuICAgICAgc2Nyb2xsUGFyZW50czogW11cbiAgICB9O1xuXG4gICAgLy8gZ2V0IHJlZmVyZW5jZSBhbmQgcG9wcGVyIGVsZW1lbnRzIChhbGxvdyBqUXVlcnkgd3JhcHBlcnMpXG4gICAgdGhpcy5yZWZlcmVuY2UgPSByZWZlcmVuY2UgJiYgcmVmZXJlbmNlLmpxdWVyeSA/IHJlZmVyZW5jZVswXSA6IHJlZmVyZW5jZTtcbiAgICB0aGlzLnBvcHBlciA9IHBvcHBlciAmJiBwb3BwZXIuanF1ZXJ5ID8gcG9wcGVyWzBdIDogcG9wcGVyO1xuXG4gICAgLy8gRGVlcCBtZXJnZSBtb2RpZmllcnMgb3B0aW9uc1xuICAgIHRoaXMub3B0aW9ucy5tb2RpZmllcnMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVycywgb3B0aW9ucy5tb2RpZmllcnMpKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA9IF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzW25hbWVdIHx8IHt9LCBvcHRpb25zLm1vZGlmaWVycyA/IG9wdGlvbnMubW9kaWZpZXJzW25hbWVdIDoge30pO1xuICAgIH0pO1xuXG4gICAgLy8gUmVmYWN0b3JpbmcgbW9kaWZpZXJzJyBsaXN0IChPYmplY3QgPT4gQXJyYXkpXG4gICAgdGhpcy5tb2RpZmllcnMgPSBPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMubW9kaWZpZXJzKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgIG5hbWU6IG5hbWVcbiAgICAgIH0sIF90aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdKTtcbiAgICB9KVxuICAgIC8vIHNvcnQgdGhlIG1vZGlmaWVycyBieSBvcmRlclxuICAgIC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYS5vcmRlciAtIGIub3JkZXI7XG4gICAgfSk7XG5cbiAgICAvLyBtb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBjb2RlIHdoZW4gUG9wcGVyLmpzIGdldCBpbml0ZWRcbiAgICAvLyBzdWNoIGNvZGUgaXMgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgb2YgaXRzIG1vZGlmaWVyXG4gICAgLy8gdGhleSBjb3VsZCBhZGQgbmV3IHByb3BlcnRpZXMgdG8gdGhlaXIgb3B0aW9ucyBjb25maWd1cmF0aW9uXG4gICAgLy8gQkUgQVdBUkU6IGRvbid0IGFkZCBvcHRpb25zIHRvIGBvcHRpb25zLm1vZGlmaWVycy5uYW1lYCBidXQgdG8gYG1vZGlmaWVyT3B0aW9uc2AhXG4gICAgdGhpcy5tb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXJPcHRpb25zKSB7XG4gICAgICBpZiAobW9kaWZpZXJPcHRpb25zLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihtb2RpZmllck9wdGlvbnMub25Mb2FkKSkge1xuICAgICAgICBtb2RpZmllck9wdGlvbnMub25Mb2FkKF90aGlzLnJlZmVyZW5jZSwgX3RoaXMucG9wcGVyLCBfdGhpcy5vcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIF90aGlzLnN0YXRlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGZpcmUgdGhlIGZpcnN0IHVwZGF0ZSB0byBwb3NpdGlvbiB0aGUgcG9wcGVyIGluIHRoZSByaWdodCBwbGFjZVxuICAgIHRoaXMudXBkYXRlKCk7XG5cbiAgICB2YXIgZXZlbnRzRW5hYmxlZCA9IHRoaXMub3B0aW9ucy5ldmVudHNFbmFibGVkO1xuICAgIGlmIChldmVudHNFbmFibGVkKSB7XG4gICAgICAvLyBzZXR1cCBldmVudCBsaXN0ZW5lcnMsIHRoZXkgd2lsbCB0YWtlIGNhcmUgb2YgdXBkYXRlIHRoZSBwb3NpdGlvbiBpbiBzcGVjaWZpYyBzaXR1YXRpb25zXG4gICAgICB0aGlzLmVuYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkID0gZXZlbnRzRW5hYmxlZDtcbiAgfVxuXG4gIC8vIFdlIGNhbid0IHVzZSBjbGFzcyBwcm9wZXJ0aWVzIGJlY2F1c2UgdGhleSBkb24ndCBnZXQgbGlzdGVkIGluIHRoZVxuICAvLyBjbGFzcyBwcm90b3R5cGUgYW5kIGJyZWFrIHN0dWZmIGxpa2UgU2lub24gc3R1YnNcblxuXG4gIGNyZWF0ZUNsYXNzKFBvcHBlciwgW3tcbiAgICBrZXk6ICd1cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUkJDEoKSB7XG4gICAgICByZXR1cm4gdXBkYXRlLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3kkJDEoKSB7XG4gICAgICByZXR1cm4gZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2VuYWJsZUV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMkJDEoKSB7XG4gICAgICByZXR1cm4gZW5hYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkaXNhYmxlRXZlbnRMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMkJDEoKSB7XG4gICAgICByZXR1cm4gZGlzYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2NoZWR1bGUgYW4gdXBkYXRlLCBpdCB3aWxsIHJ1biBvbiB0aGUgbmV4dCBVSSB1cGRhdGUgYXZhaWxhYmxlXG4gICAgICogQG1ldGhvZCBzY2hlZHVsZVVwZGF0ZVxuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuXG4gICAgLyoqXG4gICAgICogQ29sbGVjdGlvbiBvZiB1dGlsaXRpZXMgdXNlZnVsIHdoZW4gd3JpdGluZyBjdXN0b20gbW9kaWZpZXJzLlxuICAgICAqIFN0YXJ0aW5nIGZyb20gdmVyc2lvbiAxLjcsIHRoaXMgbWV0aG9kIGlzIGF2YWlsYWJsZSBvbmx5IGlmIHlvdVxuICAgICAqIGluY2x1ZGUgYHBvcHBlci11dGlscy5qc2AgYmVmb3JlIGBwb3BwZXIuanNgLlxuICAgICAqXG4gICAgICogKipERVBSRUNBVElPTioqOiBUaGlzIHdheSB0byBhY2Nlc3MgUG9wcGVyVXRpbHMgaXMgZGVwcmVjYXRlZFxuICAgICAqIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjIhIFVzZSB0aGUgUG9wcGVyVXRpbHMgbW9kdWxlIGRpcmVjdGx5IGluc3RlYWQuXG4gICAgICogRHVlIHRvIHRoZSBoaWdoIGluc3RhYmlsaXR5IG9mIHRoZSBtZXRob2RzIGNvbnRhaW5lZCBpbiBVdGlscywgd2UgY2FuJ3RcbiAgICAgKiBndWFyYW50ZWUgdGhlbSB0byBmb2xsb3cgc2VtdmVyLiBVc2UgdGhlbSBhdCB5b3VyIG93biByaXNrIVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjhcbiAgICAgKiBAbWVtYmVyIFV0aWxzXG4gICAgICogQG1lbWJlcm9mIFBvcHBlclxuICAgICAqL1xuXG4gIH1dKTtcbiAgcmV0dXJuIFBvcHBlcjtcbn0oKTtcblxuLyoqXG4gKiBUaGUgYHJlZmVyZW5jZU9iamVjdGAgaXMgYW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGNvbXBhdGlibGUgd2l0aCBQb3BwZXIuanNcbiAqIGFuZCBsZXRzIHlvdSB1c2UgaXQgYXMgcmVwbGFjZW1lbnQgb2YgYSByZWFsIERPTSBub2RlLjxiciAvPlxuICogWW91IGNhbiB1c2UgdGhpcyBtZXRob2QgdG8gcG9zaXRpb24gYSBwb3BwZXIgcmVsYXRpdmVseSB0byBhIHNldCBvZiBjb29yZGluYXRlc1xuICogaW4gY2FzZSB5b3UgZG9uJ3QgaGF2ZSBhIERPTSBub2RlIHRvIHVzZSBhcyByZWZlcmVuY2UuXG4gKlxuICogYGBgXG4gKiBuZXcgUG9wcGVyKHJlZmVyZW5jZU9iamVjdCwgcG9wcGVyTm9kZSk7XG4gKiBgYGBcbiAqXG4gKiBOQjogVGhpcyBmZWF0dXJlIGlzbid0IHN1cHBvcnRlZCBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMFxuICogQG5hbWUgcmVmZXJlbmNlT2JqZWN0XG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBkYXRhLmdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzZXQgb2YgY29vcmRpbmF0ZXMgY29tcGF0aWJsZSB3aXRoIHRoZSBuYXRpdmUgYGdldEJvdW5kaW5nQ2xpZW50UmVjdGAgbWV0aG9kLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50V2lkdGhcbiAqIEFuIEVTNiBnZXR0ZXIgdGhhdCB3aWxsIHJldHVybiB0aGUgd2lkdGggb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRIZWlnaHRcbiAqIEFuIEVTNiBnZXR0ZXIgdGhhdCB3aWxsIHJldHVybiB0aGUgaGVpZ2h0IG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICovXG5cblxuUG9wcGVyLlV0aWxzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKS5Qb3BwZXJVdGlscztcblBvcHBlci5wbGFjZW1lbnRzID0gcGxhY2VtZW50cztcblBvcHBlci5EZWZhdWx0cyA9IERlZmF1bHRzO1xuXG5leHBvcnQgZGVmYXVsdCBQb3BwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3BwZXIuanMubWFwXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9wb3BwZXIuanMvZGlzdC9lc20vcG9wcGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=