!function(n){function r(e){if(t[e])return t[e].exports;var o=t[e]={i:e,l:!1,exports:{}};return n[e].call(o.exports,o,o.exports,r),o.l=!0,o.exports}var t={};r.m=n,r.c=t,r.d=function(n,t,e){r.o(n,t)||Object.defineProperty(n,t,{configurable:!1,enumerable:!0,get:e})},r.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(t,"a",t),t},r.o=function(n,r){return Object.prototype.hasOwnProperty.call(n,r)},r.p="",r(r.s=0)}([function(n,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var e=t(9),o=(t.n(e),t(2));t.n(o),t(1);"serviceWorker"in navigator&&navigator.serviceWorker.register("/sw.js").then(function(n){}).catch(function(n){}),window.addEventListener("online",function(n){},!1),window.addEventListener("offline",function(n){},!1)},function(n,r,t){var e;!function(r,t){"use strict";"object"==typeof n&&"object"==typeof n.exports?n.exports=r.document?t(r,!0):function(n){if(!n.document)throw new Error("jQuery requires a window with a document");return t(n)}:t(r)}("undefined"!=typeof window?window:this,function(t,o){"use strict";function i(n,r){var t=(r=r||J).createElement("script");t.text=n,r.head.appendChild(t).parentNode.removeChild(t)}function a(n){var r=!!n&&"length"in n&&n.length,t=pn.type(n);return"function"!==t&&!pn.isWindow(n)&&("array"===t||0===r||"number"==typeof r&&r>0&&r-1 in n)}function l(n,r){return n.nodeName&&n.nodeName.toLowerCase()===r.toLowerCase()}function s(n,r,t){return pn.isFunction(r)?pn.grep(n,function(n,e){return!!r.call(n,e,n)!==t}):r.nodeType?pn.grep(n,function(n){return n===r!==t}):"string"!=typeof r?pn.grep(n,function(n){return en.call(r,n)>-1!==t}):wn.test(r)?pn.filter(r,n,t):(r=pn.filter(r,n),pn.grep(n,function(n){return en.call(r,n)>-1!==t&&1===n.nodeType}))}function d(n,r){for(;(n=n[r])&&1!==n.nodeType;);return n}function c(n){return n}function p(n){throw n}function m(n,r,t,e){var o;try{n&&pn.isFunction(o=n.promise)?o.call(n).done(r).fail(t):n&&pn.isFunction(o=n.then)?o.call(n,r,t):r.apply(void 0,[n].slice(e))}catch(n){t.apply(void 0,[n])}}function f(){J.removeEventListener("DOMContentLoaded",f),t.removeEventListener("load",f),pn.ready()}function u(){this.expando=pn.expando+u.uid++}function g(n,r,t){var e;if(void 0===t&&1===n.nodeType)if(e="data-"+r.replace(Ln,"-$&").toLowerCase(),"string"==typeof(t=n.getAttribute(e))){try{t=function(n){return"true"===n||"false"!==n&&("null"===n?null:n===+n+""?+n:On.test(n)?JSON.parse(n):n)}(t)}catch(n){}jn.set(n,r,t)}else t=void 0;return t}function h(n,r,t,e){var o,i=1,a=20,l=e?function(){return e.cur()}:function(){return pn.css(n,r,"")},s=l(),d=t&&t[3]||(pn.cssNumber[r]?"":"px"),c=(pn.cssNumber[r]||"px"!==d&&+s)&&Hn.exec(pn.css(n,r));if(c&&c[3]!==d){d=d||c[3],t=t||[],c=+s||1;do{c/=i=i||".5",pn.style(n,r,c+d)}while(i!==(i=l()/s)&&1!==i&&--a)}return t&&(c=+c||+s||0,o=t[1]?c+(t[1]+1)*t[2]:+t[2],e&&(e.unit=d,e.start=c,e.end=o)),o}function b(n){var r,t=n.ownerDocument,e=n.nodeName,o=Wn[e];return o||(r=t.body.appendChild(t.createElement(e)),o=pn.css(r,"display"),r.parentNode.removeChild(r),"none"===o&&(o="block"),Wn[e]=o,o)}function v(n,r){for(var t,e,o=[],i=0,a=n.length;i<a;i++)(e=n[i]).style&&(t=e.style.display,r?("none"===t&&(o[i]=In.get(e,"display")||null,o[i]||(e.style.display="")),""===e.style.display&&Mn(e)&&(o[i]=b(e))):"none"!==t&&(o[i]="none",In.set(e,"display",t)));for(i=0;i<a;i++)null!=o[i]&&(n[i].style.display=o[i]);return n}function x(n,r){var t;return t=void 0!==n.getElementsByTagName?n.getElementsByTagName(r||"*"):void 0!==n.querySelectorAll?n.querySelectorAll(r||"*"):[],void 0===r||r&&l(n,r)?pn.merge([n],t):t}function y(n,r){for(var t=0,e=n.length;t<e;t++)In.set(n[t],"globalEval",!r||In.get(r[t],"globalEval"))}function w(n,r,t,e,o){for(var i,a,l,s,d,c,p=r.createDocumentFragment(),m=[],f=0,u=n.length;f<u;f++)if((i=n[f])||0===i)if("object"===pn.type(i))pn.merge(m,i.nodeType?[i]:i);else if(Vn.test(i)){for(a=a||p.appendChild(r.createElement("div")),l=(qn.exec(i)||["",""])[1].toLowerCase(),s=Un[l]||Un._default,a.innerHTML=s[1]+pn.htmlPrefilter(i)+s[2],c=s[0];c--;)a=a.lastChild;pn.merge(m,a.childNodes),(a=p.firstChild).textContent=""}else m.push(r.createTextNode(i));for(p.textContent="",f=0;i=m[f++];)if(e&&pn.inArray(i,e)>-1)o&&o.push(i);else if(d=pn.contains(i.ownerDocument,i),a=x(p.appendChild(i),"script"),d&&y(a),t)for(c=0;i=a[c++];)zn.test(i.type||"")&&t.push(i);return p}function k(){return!0}function _(){return!1}function E(){try{return J.activeElement}catch(n){}}function T(n,r,t,e,o,i){var a,l;if("object"==typeof r){"string"!=typeof t&&(e=e||t,t=void 0);for(l in r)T(n,l,t,e,r[l],i);return n}if(null==e&&null==o?(o=t,e=t=void 0):null==o&&("string"==typeof t?(o=e,e=void 0):(o=e,e=t,t=void 0)),!1===o)o=_;else if(!o)return n;return 1===i&&(a=o,(o=function(n){return pn().off(n),a.apply(this,arguments)}).guid=a.guid||(a.guid=pn.guid++)),n.each(function(){pn.event.add(this,r,o,e,t)})}function C(n,r){return l(n,"table")&&l(11!==r.nodeType?r:r.firstChild,"tr")?pn(">tbody",n)[0]||n:n}function A(n){return n.type=(null!==n.getAttribute("type"))+"/"+n.type,n}function S(n){var r=Zn.exec(n.type);return r?n.type=r[1]:n.removeAttribute("type"),n}function D(n,r){var t,e,o,i,a,l,s,d;if(1===r.nodeType){if(In.hasData(n)&&(i=In.access(n),a=In.set(r,i),d=i.events)){delete a.handle,a.events={};for(o in d)for(t=0,e=d[o].length;t<e;t++)pn.event.add(r,o,d[o][t])}jn.hasData(n)&&(l=jn.access(n),s=pn.extend({},l),jn.set(r,s))}}function N(n,r){var t=r.nodeName.toLowerCase();"input"===t&&Bn.test(n.type)?r.checked=n.checked:"input"!==t&&"textarea"!==t||(r.defaultValue=n.defaultValue)}function I(n,r,t,e){r=rn.apply([],r);var o,a,l,s,d,c,p=0,m=n.length,f=m-1,u=r[0],g=pn.isFunction(u);if(g||m>1&&"string"==typeof u&&!cn.checkClone&&Jn.test(u))return n.each(function(o){var i=n.eq(o);g&&(r[0]=u.call(this,o,i.html())),I(i,r,t,e)});if(m&&(o=w(r,n[0].ownerDocument,!1,n,e),a=o.firstChild,1===o.childNodes.length&&(o=a),a||e)){for(s=(l=pn.map(x(o,"script"),A)).length;p<m;p++)d=o,p!==f&&(d=pn.clone(d,!0,!0),s&&pn.merge(l,x(d,"script"))),t.call(n[p],d,p);if(s)for(c=l[l.length-1].ownerDocument,pn.map(l,S),p=0;p<s;p++)d=l[p],zn.test(d.type||"")&&!In.access(d,"globalEval")&&pn.contains(c,d)&&(d.src?pn._evalUrl&&pn._evalUrl(d.src):i(d.textContent.replace(nr,""),c))}return n}function j(n,r,t){for(var e,o=r?pn.filter(r,n):n,i=0;null!=(e=o[i]);i++)t||1!==e.nodeType||pn.cleanData(x(e)),e.parentNode&&(t&&pn.contains(e.ownerDocument,e)&&y(x(e,"script")),e.parentNode.removeChild(e));return n}function O(n,r,t){var e,o,i,a,l=n.style;return(t=t||er(n))&&(""!==(a=t.getPropertyValue(r)||t[r])||pn.contains(n.ownerDocument,n)||(a=pn.style(n,r)),!cn.pixelMarginRight()&&tr.test(a)&&rr.test(r)&&(e=l.width,o=l.minWidth,i=l.maxWidth,l.minWidth=l.maxWidth=l.width=a,a=t.width,l.width=e,l.minWidth=o,l.maxWidth=i)),void 0!==a?a+"":a}function L(n,r){return{get:function(){if(!n())return(this.get=r).apply(this,arguments);delete this.get}}}function P(n){var r=pn.cssProps[n];return r||(r=pn.cssProps[n]=function(n){if(n in dr)return n;for(var r=n[0].toUpperCase()+n.slice(1),t=sr.length;t--;)if((n=sr[t]+r)in dr)return n}(n)||n),r}function H(n,r,t){var e=Hn.exec(r);return e?Math.max(0,e[2]-(t||0))+(e[3]||"px"):r}function R(n,r,t,e,o){var i,a=0;for(i=t===(e?"border":"content")?4:"width"===r?1:0;i<4;i+=2)"margin"===t&&(a+=pn.css(n,t+Rn[i],!0,o)),e?("content"===t&&(a-=pn.css(n,"padding"+Rn[i],!0,o)),"margin"!==t&&(a-=pn.css(n,"border"+Rn[i]+"Width",!0,o))):(a+=pn.css(n,"padding"+Rn[i],!0,o),"padding"!==t&&(a+=pn.css(n,"border"+Rn[i]+"Width",!0,o)));return a}function M(n,r,t){var e,o=er(n),i=O(n,r,o),a="border-box"===pn.css(n,"boxSizing",!1,o);return tr.test(i)?i:(e=a&&(cn.boxSizingReliable()||i===n.style[r]),"auto"===i&&(i=n["offset"+r[0].toUpperCase()+r.slice(1)]),(i=parseFloat(i)||0)+R(n,r,t||(a?"border":"content"),e,o)+"px")}function F(n,r,t,e,o){return new F.prototype.init(n,r,t,e,o)}function W(){pr&&(!1===J.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(W):t.setTimeout(W,pn.fx.interval),pn.fx.tick())}function B(){return t.setTimeout(function(){cr=void 0}),cr=pn.now()}function q(n,r){var t,e=0,o={height:n};for(r=r?1:0;e<4;e+=2-r)o["margin"+(t=Rn[e])]=o["padding"+t]=n;return r&&(o.opacity=o.width=n),o}function z(n,r,t){for(var e,o=(U.tweeners[r]||[]).concat(U.tweeners["*"]),i=0,a=o.length;i<a;i++)if(e=o[i].call(t,r,n))return e}function U(n,r,t){var e,o,i=0,a=U.prefilters.length,l=pn.Deferred().always(function(){delete s.elem}),s=function(){if(o)return!1;for(var r=cr||B(),t=Math.max(0,d.startTime+d.duration-r),e=1-(t/d.duration||0),i=0,a=d.tweens.length;i<a;i++)d.tweens[i].run(e);return l.notifyWith(n,[d,e,t]),e<1&&a?t:(a||l.notifyWith(n,[d,1,0]),l.resolveWith(n,[d]),!1)},d=l.promise({elem:n,props:pn.extend({},r),opts:pn.extend(!0,{specialEasing:{},easing:pn.easing._default},t),originalProperties:r,originalOptions:t,startTime:cr||B(),duration:t.duration,tweens:[],createTween:function(r,t){var e=pn.Tween(n,d.opts,r,t,d.opts.specialEasing[r]||d.opts.easing);return d.tweens.push(e),e},stop:function(r){var t=0,e=r?d.tweens.length:0;if(o)return this;for(o=!0;t<e;t++)d.tweens[t].run(1);return r?(l.notifyWith(n,[d,1,0]),l.resolveWith(n,[d,r])):l.rejectWith(n,[d,r]),this}}),c=d.props;for(!function(n,r){var t,e,o,i,a;for(t in n)if(e=pn.camelCase(t),o=r[e],i=n[t],Array.isArray(i)&&(o=i[1],i=n[t]=i[0]),t!==e&&(n[e]=i,delete n[t]),(a=pn.cssHooks[e])&&"expand"in a){i=a.expand(i),delete n[e];for(t in i)t in n||(n[t]=i[t],r[t]=o)}else r[e]=o}(c,d.opts.specialEasing);i<a;i++)if(e=U.prefilters[i].call(d,n,c,d.opts))return pn.isFunction(e.stop)&&(pn._queueHooks(d.elem,d.opts.queue).stop=pn.proxy(e.stop,e)),e;return pn.map(c,z,d),pn.isFunction(d.opts.start)&&d.opts.start.call(n,d),d.progress(d.opts.progress).done(d.opts.done,d.opts.complete).fail(d.opts.fail).always(d.opts.always),pn.fx.timer(pn.extend(s,{elem:n,anim:d,queue:d.opts.queue})),d}function V(n){return(n.match(Cn)||[]).join(" ")}function K(n){return n.getAttribute&&n.getAttribute("class")||""}function $(n,r,t,e){var o;if(Array.isArray(r))pn.each(r,function(r,o){t||_r.test(n)?e(n,o):$(n+"["+("object"==typeof o&&null!=o?r:"")+"]",o,t,e)});else if(t||"object"!==pn.type(r))e(n,r);else for(o in r)$(n+"["+o+"]",r[o],t,e)}function Q(n){return function(r,t){"string"!=typeof r&&(t=r,r="*");var e,o=0,i=r.toLowerCase().match(Cn)||[];if(pn.isFunction(t))for(;e=i[o++];)"+"===e[0]?(e=e.slice(1)||"*",(n[e]=n[e]||[]).unshift(t)):(n[e]=n[e]||[]).push(t)}}function Y(n,r,t,e){function o(l){var s;return i[l]=!0,pn.each(n[l]||[],function(n,l){var d=l(r,t,e);return"string"!=typeof d||a||i[d]?a?!(s=d):void 0:(r.dataTypes.unshift(d),o(d),!1)}),s}var i={},a=n===Lr;return o(r.dataTypes[0])||!i["*"]&&o("*")}function G(n,r){var t,e,o=pn.ajaxSettings.flatOptions||{};for(t in r)void 0!==r[t]&&((o[t]?n:e||(e={}))[t]=r[t]);return e&&pn.extend(!0,n,e),n}var X=[],J=t.document,Z=Object.getPrototypeOf,nn=X.slice,rn=X.concat,tn=X.push,en=X.indexOf,on={},an=on.toString,ln=on.hasOwnProperty,sn=ln.toString,dn=sn.call(Object),cn={},pn=function(n,r){return new pn.fn.init(n,r)},mn=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,fn=/^-ms-/,un=/-([a-z])/g,gn=function(n,r){return r.toUpperCase()};pn.fn=pn.prototype={jquery:"3.2.1",constructor:pn,length:0,toArray:function(){return nn.call(this)},get:function(n){return null==n?nn.call(this):n<0?this[n+this.length]:this[n]},pushStack:function(n){var r=pn.merge(this.constructor(),n);return r.prevObject=this,r},each:function(n){return pn.each(this,n)},map:function(n){return this.pushStack(pn.map(this,function(r,t){return n.call(r,t,r)}))},slice:function(){return this.pushStack(nn.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(n){var r=this.length,t=+n+(n<0?r:0);return this.pushStack(t>=0&&t<r?[this[t]]:[])},end:function(){return this.prevObject||this.constructor()},push:tn,sort:X.sort,splice:X.splice},pn.extend=pn.fn.extend=function(){var n,r,t,e,o,i,a=arguments[0]||{},l=1,s=arguments.length,d=!1;for("boolean"==typeof a&&(d=a,a=arguments[l]||{},l++),"object"==typeof a||pn.isFunction(a)||(a={}),l===s&&(a=this,l--);l<s;l++)if(null!=(n=arguments[l]))for(r in n)t=a[r],a!==(e=n[r])&&(d&&e&&(pn.isPlainObject(e)||(o=Array.isArray(e)))?(o?(o=!1,i=t&&Array.isArray(t)?t:[]):i=t&&pn.isPlainObject(t)?t:{},a[r]=pn.extend(d,i,e)):void 0!==e&&(a[r]=e));return a},pn.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(n){throw new Error(n)},noop:function(){},isFunction:function(n){return"function"===pn.type(n)},isWindow:function(n){return null!=n&&n===n.window},isNumeric:function(n){var r=pn.type(n);return("number"===r||"string"===r)&&!isNaN(n-parseFloat(n))},isPlainObject:function(n){var r,t;return!(!n||"[object Object]"!==an.call(n))&&(!(r=Z(n))||"function"==typeof(t=ln.call(r,"constructor")&&r.constructor)&&sn.call(t)===dn)},isEmptyObject:function(n){var r;for(r in n)return!1;return!0},type:function(n){return null==n?n+"":"object"==typeof n||"function"==typeof n?on[an.call(n)]||"object":typeof n},globalEval:function(n){i(n)},camelCase:function(n){return n.replace(fn,"ms-").replace(un,gn)},each:function(n,r){var t,e=0;if(a(n))for(t=n.length;e<t&&!1!==r.call(n[e],e,n[e]);e++);else for(e in n)if(!1===r.call(n[e],e,n[e]))break;return n},trim:function(n){return null==n?"":(n+"").replace(mn,"")},makeArray:function(n,r){var t=r||[];return null!=n&&(a(Object(n))?pn.merge(t,"string"==typeof n?[n]:n):tn.call(t,n)),t},inArray:function(n,r,t){return null==r?-1:en.call(r,n,t)},merge:function(n,r){for(var t=+r.length,e=0,o=n.length;e<t;e++)n[o++]=r[e];return n.length=o,n},grep:function(n,r,t){for(var e=[],o=0,i=n.length,a=!t;o<i;o++)!r(n[o],o)!==a&&e.push(n[o]);return e},map:function(n,r,t){var e,o,i=0,l=[];if(a(n))for(e=n.length;i<e;i++)null!=(o=r(n[i],i,t))&&l.push(o);else for(i in n)null!=(o=r(n[i],i,t))&&l.push(o);return rn.apply([],l)},guid:1,proxy:function(n,r){var t,e,o;if("string"==typeof r&&(t=n[r],r=n,n=t),pn.isFunction(n))return e=nn.call(arguments,2),o=function(){return n.apply(r||this,e.concat(nn.call(arguments)))},o.guid=n.guid=n.guid||pn.guid++,o},now:Date.now,support:cn}),"function"==typeof Symbol&&(pn.fn[Symbol.iterator]=X[Symbol.iterator]),pn.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(n,r){on["[object "+r+"]"]=r.toLowerCase()});var hn=function(n){function r(n,r,t,e){var o,i,a,l,s,d,c,m=r&&r.ownerDocument,u=r?r.nodeType:9;if(t=t||[],"string"!=typeof n||!n||1!==u&&9!==u&&11!==u)return t;if(!e&&((r?r.ownerDocument||r:F)!==I&&N(r),r=r||I,O)){if(11!==u&&(s=hn.exec(n)))if(o=s[1]){if(9===u){if(!(a=r.getElementById(o)))return t;if(a.id===o)return t.push(a),t}else if(m&&(a=m.getElementById(o))&&R(r,a)&&a.id===o)return t.push(a),t}else{if(s[2])return G.apply(t,r.getElementsByTagName(n)),t;if((o=s[3])&&y.getElementsByClassName&&r.getElementsByClassName)return G.apply(t,r.getElementsByClassName(o)),t}if(y.qsa&&!U[n+" "]&&(!L||!L.test(n))){if(1!==u)m=r,c=n;else if("object"!==r.nodeName.toLowerCase()){for((l=r.getAttribute("id"))?l=l.replace(yn,wn):r.setAttribute("id",l=M),i=(d=E(n)).length;i--;)d[i]="#"+l+" "+f(d[i]);c=d.join(","),m=bn.test(n)&&p(r.parentNode)||r}if(c)try{return G.apply(t,m.querySelectorAll(c)),t}catch(n){}finally{l===M&&r.removeAttribute("id")}}}return C(n.replace(an,"$1"),r,t,e)}function t(){function n(t,e){return r.push(t+" ")>w.cacheLength&&delete n[r.shift()],n[t+" "]=e}var r=[];return n}function e(n){return n[M]=!0,n}function o(n){var r=I.createElement("fieldset");try{return!!n(r)}catch(n){return!1}finally{r.parentNode&&r.parentNode.removeChild(r),r=null}}function i(n,r){for(var t=n.split("|"),e=t.length;e--;)w.attrHandle[t[e]]=r}function a(n,r){var t=r&&n,e=t&&1===n.nodeType&&1===r.nodeType&&n.sourceIndex-r.sourceIndex;if(e)return e;if(t)for(;t=t.nextSibling;)if(t===r)return-1;return n?1:-1}function l(n){return function(r){return"input"===r.nodeName.toLowerCase()&&r.type===n}}function s(n){return function(r){var t=r.nodeName.toLowerCase();return("input"===t||"button"===t)&&r.type===n}}function d(n){return function(r){return"form"in r?r.parentNode&&!1===r.disabled?"label"in r?"label"in r.parentNode?r.parentNode.disabled===n:r.disabled===n:r.isDisabled===n||r.isDisabled!==!n&&_n(r)===n:r.disabled===n:"label"in r&&r.disabled===n}}function c(n){return e(function(r){return r=+r,e(function(t,e){for(var o,i=n([],t.length,r),a=i.length;a--;)t[o=i[a]]&&(t[o]=!(e[o]=t[o]))})})}function p(n){return n&&void 0!==n.getElementsByTagName&&n}function m(){}function f(n){for(var r=0,t=n.length,e="";r<t;r++)e+=n[r].value;return e}function u(n,r,t){var e=r.dir,o=r.next,i=o||e,a=t&&"parentNode"===i,l=B++;return r.first?function(r,t,o){for(;r=r[e];)if(1===r.nodeType||a)return n(r,t,o);return!1}:function(r,t,s){var d,c,p,m=[W,l];if(s){for(;r=r[e];)if((1===r.nodeType||a)&&n(r,t,s))return!0}else for(;r=r[e];)if(1===r.nodeType||a)if(p=r[M]||(r[M]={}),c=p[r.uniqueID]||(p[r.uniqueID]={}),o&&o===r.nodeName.toLowerCase())r=r[e]||r;else{if((d=c[i])&&d[0]===W&&d[1]===l)return m[2]=d[2];if(c[i]=m,m[2]=n(r,t,s))return!0}return!1}}function g(n){return n.length>1?function(r,t,e){for(var o=n.length;o--;)if(!n[o](r,t,e))return!1;return!0}:n[0]}function h(n,r,t,e,o){for(var i,a=[],l=0,s=n.length,d=null!=r;l<s;l++)(i=n[l])&&(t&&!t(i,e,o)||(a.push(i),d&&r.push(l)));return a}function b(n,t,o,i,a,l){return i&&!i[M]&&(i=b(i)),a&&!a[M]&&(a=b(a,l)),e(function(e,l,s,d){var c,p,m,f=[],u=[],g=l.length,b=e||function(n,t,e){for(var o=0,i=t.length;o<i;o++)r(n,t[o],e);return e}(t||"*",s.nodeType?[s]:s,[]),v=!n||!e&&t?b:h(b,f,n,s,d),x=o?a||(e?n:g||i)?[]:l:v;if(o&&o(v,x,s,d),i)for(c=h(x,u),i(c,[],s,d),p=c.length;p--;)(m=c[p])&&(x[u[p]]=!(v[u[p]]=m));if(e){if(a||n){if(a){for(c=[],p=x.length;p--;)(m=x[p])&&c.push(v[p]=m);a(null,x=[],c,d)}for(p=x.length;p--;)(m=x[p])&&(c=a?J(e,m):f[p])>-1&&(e[c]=!(l[c]=m))}}else x=h(x===l?x.splice(g,x.length):x),a?a(null,l,x,d):G.apply(l,x)})}function v(n){for(var r,t,e,o=n.length,i=w.relative[n[0].type],a=i||w.relative[" "],l=i?1:0,s=u(function(n){return n===r},a,!0),d=u(function(n){return J(r,n)>-1},a,!0),c=[function(n,t,e){var o=!i&&(e||t!==A)||((r=t).nodeType?s(n,t,e):d(n,t,e));return r=null,o}];l<o;l++)if(t=w.relative[n[l].type])c=[u(g(c),t)];else{if((t=w.filter[n[l].type].apply(null,n[l].matches))[M]){for(e=++l;e<o&&!w.relative[n[e].type];e++);return b(l>1&&g(c),l>1&&f(n.slice(0,l-1).concat({value:" "===n[l-2].type?"*":""})).replace(an,"$1"),t,l<e&&v(n.slice(l,e)),e<o&&v(n=n.slice(e)),e<o&&f(n))}c.push(t)}return g(c)}var x,y,w,k,_,E,T,C,A,S,D,N,I,j,O,L,P,H,R,M="sizzle"+1*new Date,F=n.document,W=0,B=0,q=t(),z=t(),U=t(),V=function(n,r){return n===r&&(D=!0),0},K={}.hasOwnProperty,$=[],Q=$.pop,Y=$.push,G=$.push,X=$.slice,J=function(n,r){for(var t=0,e=n.length;t<e;t++)if(n[t]===r)return t;return-1},Z="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nn="[\\x20\\t\\r\\n\\f]",rn="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",tn="\\["+nn+"*("+rn+")(?:"+nn+"*([*^$|!~]?=)"+nn+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+rn+"))|)"+nn+"*\\]",en=":("+rn+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+tn+")*)|.*)\\)|)",on=new RegExp(nn+"+","g"),an=new RegExp("^"+nn+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nn+"+$","g"),ln=new RegExp("^"+nn+"*,"+nn+"*"),sn=new RegExp("^"+nn+"*([>+~]|"+nn+")"+nn+"*"),dn=new RegExp("="+nn+"*([^\\]'\"]*?)"+nn+"*\\]","g"),cn=new RegExp(en),pn=new RegExp("^"+rn+"$"),mn={ID:new RegExp("^#("+rn+")"),CLASS:new RegExp("^\\.("+rn+")"),TAG:new RegExp("^("+rn+"|[*])"),ATTR:new RegExp("^"+tn),PSEUDO:new RegExp("^"+en),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nn+"*(even|odd|(([+-]|)(\\d*)n|)"+nn+"*(?:([+-]|)"+nn+"*(\\d+)|))"+nn+"*\\)|)","i"),bool:new RegExp("^(?:"+Z+")$","i"),needsContext:new RegExp("^"+nn+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nn+"*((?:-\\d)?\\d*)"+nn+"*\\)|)(?=[^-]|$)","i")},fn=/^(?:input|select|textarea|button)$/i,un=/^h\d$/i,gn=/^[^{]+\{\s*\[native \w/,hn=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,bn=/[+~]/,vn=new RegExp("\\\\([\\da-f]{1,6}"+nn+"?|("+nn+")|.)","ig"),xn=function(n,r,t){var e="0x"+r-65536;return e!=e||t?r:e<0?String.fromCharCode(e+65536):String.fromCharCode(e>>10|55296,1023&e|56320)},yn=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,wn=function(n,r){return r?"\0"===n?"�":n.slice(0,-1)+"\\"+n.charCodeAt(n.length-1).toString(16)+" ":"\\"+n},kn=function(){N()},_n=u(function(n){return!0===n.disabled&&("form"in n||"label"in n)},{dir:"parentNode",next:"legend"});try{G.apply($=X.call(F.childNodes),F.childNodes),$[F.childNodes.length].nodeType}catch(n){G={apply:$.length?function(n,r){Y.apply(n,X.call(r))}:function(n,r){for(var t=n.length,e=0;n[t++]=r[e++];);n.length=t-1}}}y=r.support={},_=r.isXML=function(n){var r=n&&(n.ownerDocument||n).documentElement;return!!r&&"HTML"!==r.nodeName},N=r.setDocument=function(n){var r,t,e=n?n.ownerDocument||n:F;return e!==I&&9===e.nodeType&&e.documentElement?(I=e,j=I.documentElement,O=!_(I),F!==I&&(t=I.defaultView)&&t.top!==t&&(t.addEventListener?t.addEventListener("unload",kn,!1):t.attachEvent&&t.attachEvent("onunload",kn)),y.attributes=o(function(n){return n.className="i",!n.getAttribute("className")}),y.getElementsByTagName=o(function(n){return n.appendChild(I.createComment("")),!n.getElementsByTagName("*").length}),y.getElementsByClassName=gn.test(I.getElementsByClassName),y.getById=o(function(n){return j.appendChild(n).id=M,!I.getElementsByName||!I.getElementsByName(M).length}),y.getById?(w.filter.ID=function(n){var r=n.replace(vn,xn);return function(n){return n.getAttribute("id")===r}},w.find.ID=function(n,r){if(void 0!==r.getElementById&&O){var t=r.getElementById(n);return t?[t]:[]}}):(w.filter.ID=function(n){var r=n.replace(vn,xn);return function(n){var t=void 0!==n.getAttributeNode&&n.getAttributeNode("id");return t&&t.value===r}},w.find.ID=function(n,r){if(void 0!==r.getElementById&&O){var t,e,o,i=r.getElementById(n);if(i){if((t=i.getAttributeNode("id"))&&t.value===n)return[i];for(o=r.getElementsByName(n),e=0;i=o[e++];)if((t=i.getAttributeNode("id"))&&t.value===n)return[i]}return[]}}),w.find.TAG=y.getElementsByTagName?function(n,r){return void 0!==r.getElementsByTagName?r.getElementsByTagName(n):y.qsa?r.querySelectorAll(n):void 0}:function(n,r){var t,e=[],o=0,i=r.getElementsByTagName(n);if("*"===n){for(;t=i[o++];)1===t.nodeType&&e.push(t);return e}return i},w.find.CLASS=y.getElementsByClassName&&function(n,r){if(void 0!==r.getElementsByClassName&&O)return r.getElementsByClassName(n)},P=[],L=[],(y.qsa=gn.test(I.querySelectorAll))&&(o(function(n){j.appendChild(n).innerHTML="<a id='"+M+"'></a><select id='"+M+"-\r\\' msallowcapture=''><option selected=''></option></select>",n.querySelectorAll("[msallowcapture^='']").length&&L.push("[*^$]="+nn+"*(?:''|\"\")"),n.querySelectorAll("[selected]").length||L.push("\\["+nn+"*(?:value|"+Z+")"),n.querySelectorAll("[id~="+M+"-]").length||L.push("~="),n.querySelectorAll(":checked").length||L.push(":checked"),n.querySelectorAll("a#"+M+"+*").length||L.push(".#.+[+~]")}),o(function(n){n.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var r=I.createElement("input");r.setAttribute("type","hidden"),n.appendChild(r).setAttribute("name","D"),n.querySelectorAll("[name=d]").length&&L.push("name"+nn+"*[*^$|!~]?="),2!==n.querySelectorAll(":enabled").length&&L.push(":enabled",":disabled"),j.appendChild(n).disabled=!0,2!==n.querySelectorAll(":disabled").length&&L.push(":enabled",":disabled"),n.querySelectorAll("*,:x"),L.push(",.*:")})),(y.matchesSelector=gn.test(H=j.matches||j.webkitMatchesSelector||j.mozMatchesSelector||j.oMatchesSelector||j.msMatchesSelector))&&o(function(n){y.disconnectedMatch=H.call(n,"*"),H.call(n,"[s!='']:x"),P.push("!=",en)}),L=L.length&&new RegExp(L.join("|")),P=P.length&&new RegExp(P.join("|")),r=gn.test(j.compareDocumentPosition),R=r||gn.test(j.contains)?function(n,r){var t=9===n.nodeType?n.documentElement:n,e=r&&r.parentNode;return n===e||!(!e||1!==e.nodeType||!(t.contains?t.contains(e):n.compareDocumentPosition&&16&n.compareDocumentPosition(e)))}:function(n,r){if(r)for(;r=r.parentNode;)if(r===n)return!0;return!1},V=r?function(n,r){if(n===r)return D=!0,0;var t=!n.compareDocumentPosition-!r.compareDocumentPosition;return t||(1&(t=(n.ownerDocument||n)===(r.ownerDocument||r)?n.compareDocumentPosition(r):1)||!y.sortDetached&&r.compareDocumentPosition(n)===t?n===I||n.ownerDocument===F&&R(F,n)?-1:r===I||r.ownerDocument===F&&R(F,r)?1:S?J(S,n)-J(S,r):0:4&t?-1:1)}:function(n,r){if(n===r)return D=!0,0;var t,e=0,o=n.parentNode,i=r.parentNode,l=[n],s=[r];if(!o||!i)return n===I?-1:r===I?1:o?-1:i?1:S?J(S,n)-J(S,r):0;if(o===i)return a(n,r);for(t=n;t=t.parentNode;)l.unshift(t);for(t=r;t=t.parentNode;)s.unshift(t);for(;l[e]===s[e];)e++;return e?a(l[e],s[e]):l[e]===F?-1:s[e]===F?1:0},I):I},r.matches=function(n,t){return r(n,null,null,t)},r.matchesSelector=function(n,t){if((n.ownerDocument||n)!==I&&N(n),t=t.replace(dn,"='$1']"),y.matchesSelector&&O&&!U[t+" "]&&(!P||!P.test(t))&&(!L||!L.test(t)))try{var e=H.call(n,t);if(e||y.disconnectedMatch||n.document&&11!==n.document.nodeType)return e}catch(n){}return r(t,I,null,[n]).length>0},r.contains=function(n,r){return(n.ownerDocument||n)!==I&&N(n),R(n,r)},r.attr=function(n,r){(n.ownerDocument||n)!==I&&N(n);var t=w.attrHandle[r.toLowerCase()],e=t&&K.call(w.attrHandle,r.toLowerCase())?t(n,r,!O):void 0;return void 0!==e?e:y.attributes||!O?n.getAttribute(r):(e=n.getAttributeNode(r))&&e.specified?e.value:null},r.escape=function(n){return(n+"").replace(yn,wn)},r.error=function(n){throw new Error("Syntax error, unrecognized expression: "+n)},r.uniqueSort=function(n){var r,t=[],e=0,o=0;if(D=!y.detectDuplicates,S=!y.sortStable&&n.slice(0),n.sort(V),D){for(;r=n[o++];)r===n[o]&&(e=t.push(o));for(;e--;)n.splice(t[e],1)}return S=null,n},k=r.getText=function(n){var r,t="",e=0,o=n.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof n.textContent)return n.textContent;for(n=n.firstChild;n;n=n.nextSibling)t+=k(n)}else if(3===o||4===o)return n.nodeValue}else for(;r=n[e++];)t+=k(r);return t},(w=r.selectors={cacheLength:50,createPseudo:e,match:mn,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(n){return n[1]=n[1].replace(vn,xn),n[3]=(n[3]||n[4]||n[5]||"").replace(vn,xn),"~="===n[2]&&(n[3]=" "+n[3]+" "),n.slice(0,4)},CHILD:function(n){return n[1]=n[1].toLowerCase(),"nth"===n[1].slice(0,3)?(n[3]||r.error(n[0]),n[4]=+(n[4]?n[5]+(n[6]||1):2*("even"===n[3]||"odd"===n[3])),n[5]=+(n[7]+n[8]||"odd"===n[3])):n[3]&&r.error(n[0]),n},PSEUDO:function(n){var r,t=!n[6]&&n[2];return mn.CHILD.test(n[0])?null:(n[3]?n[2]=n[4]||n[5]||"":t&&cn.test(t)&&(r=E(t,!0))&&(r=t.indexOf(")",t.length-r)-t.length)&&(n[0]=n[0].slice(0,r),n[2]=t.slice(0,r)),n.slice(0,3))}},filter:{TAG:function(n){var r=n.replace(vn,xn).toLowerCase();return"*"===n?function(){return!0}:function(n){return n.nodeName&&n.nodeName.toLowerCase()===r}},CLASS:function(n){var r=q[n+" "];return r||(r=new RegExp("(^|"+nn+")"+n+"("+nn+"|$)"))&&q(n,function(n){return r.test("string"==typeof n.className&&n.className||void 0!==n.getAttribute&&n.getAttribute("class")||"")})},ATTR:function(n,t,e){return function(o){var i=r.attr(o,n);return null==i?"!="===t:!t||(i+="","="===t?i===e:"!="===t?i!==e:"^="===t?e&&0===i.indexOf(e):"*="===t?e&&i.indexOf(e)>-1:"$="===t?e&&i.slice(-e.length)===e:"~="===t?(" "+i.replace(on," ")+" ").indexOf(e)>-1:"|="===t&&(i===e||i.slice(0,e.length+1)===e+"-"))}},CHILD:function(n,r,t,e,o){var i="nth"!==n.slice(0,3),a="last"!==n.slice(-4),l="of-type"===r;return 1===e&&0===o?function(n){return!!n.parentNode}:function(r,t,s){var d,c,p,m,f,u,g=i!==a?"nextSibling":"previousSibling",h=r.parentNode,b=l&&r.nodeName.toLowerCase(),v=!s&&!l,x=!1;if(h){if(i){for(;g;){for(m=r;m=m[g];)if(l?m.nodeName.toLowerCase()===b:1===m.nodeType)return!1;u=g="only"===n&&!u&&"nextSibling"}return!0}if(u=[a?h.firstChild:h.lastChild],a&&v){for(x=(f=(d=(c=(p=(m=h)[M]||(m[M]={}))[m.uniqueID]||(p[m.uniqueID]={}))[n]||[])[0]===W&&d[1])&&d[2],m=f&&h.childNodes[f];m=++f&&m&&m[g]||(x=f=0)||u.pop();)if(1===m.nodeType&&++x&&m===r){c[n]=[W,f,x];break}}else if(v&&(x=f=(d=(c=(p=(m=r)[M]||(m[M]={}))[m.uniqueID]||(p[m.uniqueID]={}))[n]||[])[0]===W&&d[1]),!1===x)for(;(m=++f&&m&&m[g]||(x=f=0)||u.pop())&&((l?m.nodeName.toLowerCase()!==b:1!==m.nodeType)||!++x||(v&&((c=(p=m[M]||(m[M]={}))[m.uniqueID]||(p[m.uniqueID]={}))[n]=[W,x]),m!==r)););return(x-=o)===e||x%e==0&&x/e>=0}}},PSEUDO:function(n,t){var o,i=w.pseudos[n]||w.setFilters[n.toLowerCase()]||r.error("unsupported pseudo: "+n);return i[M]?i(t):i.length>1?(o=[n,n,"",t],w.setFilters.hasOwnProperty(n.toLowerCase())?e(function(n,r){for(var e,o=i(n,t),a=o.length;a--;)n[e=J(n,o[a])]=!(r[e]=o[a])}):function(n){return i(n,0,o)}):i}},pseudos:{not:e(function(n){var r=[],t=[],o=T(n.replace(an,"$1"));return o[M]?e(function(n,r,t,e){for(var i,a=o(n,null,e,[]),l=n.length;l--;)(i=a[l])&&(n[l]=!(r[l]=i))}):function(n,e,i){return r[0]=n,o(r,null,i,t),r[0]=null,!t.pop()}}),has:e(function(n){return function(t){return r(n,t).length>0}}),contains:e(function(n){return n=n.replace(vn,xn),function(r){return(r.textContent||r.innerText||k(r)).indexOf(n)>-1}}),lang:e(function(n){return pn.test(n||"")||r.error("unsupported lang: "+n),n=n.replace(vn,xn).toLowerCase(),function(r){var t;do{if(t=O?r.lang:r.getAttribute("xml:lang")||r.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((r=r.parentNode)&&1===r.nodeType);return!1}}),target:function(r){var t=n.location&&n.location.hash;return t&&t.slice(1)===r.id},root:function(n){return n===j},focus:function(n){return n===I.activeElement&&(!I.hasFocus||I.hasFocus())&&!!(n.type||n.href||~n.tabIndex)},enabled:d(!1),disabled:d(!0),checked:function(n){var r=n.nodeName.toLowerCase();return"input"===r&&!!n.checked||"option"===r&&!!n.selected},selected:function(n){return n.parentNode&&n.parentNode.selectedIndex,!0===n.selected},empty:function(n){for(n=n.firstChild;n;n=n.nextSibling)if(n.nodeType<6)return!1;return!0},parent:function(n){return!w.pseudos.empty(n)},header:function(n){return un.test(n.nodeName)},input:function(n){return fn.test(n.nodeName)},button:function(n){var r=n.nodeName.toLowerCase();return"input"===r&&"button"===n.type||"button"===r},text:function(n){var r;return"input"===n.nodeName.toLowerCase()&&"text"===n.type&&(null==(r=n.getAttribute("type"))||"text"===r.toLowerCase())},first:c(function(){return[0]}),last:c(function(n,r){return[r-1]}),eq:c(function(n,r,t){return[t<0?t+r:t]}),even:c(function(n,r){for(var t=0;t<r;t+=2)n.push(t);return n}),odd:c(function(n,r){for(var t=1;t<r;t+=2)n.push(t);return n}),lt:c(function(n,r,t){for(var e=t<0?t+r:t;--e>=0;)n.push(e);return n}),gt:c(function(n,r,t){for(var e=t<0?t+r:t;++e<r;)n.push(e);return n})}}).pseudos.nth=w.pseudos.eq;for(x in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[x]=l(x);for(x in{submit:!0,reset:!0})w.pseudos[x]=s(x);return m.prototype=w.filters=w.pseudos,w.setFilters=new m,E=r.tokenize=function(n,t){var e,o,i,a,l,s,d,c=z[n+" "];if(c)return t?0:c.slice(0);for(l=n,s=[],d=w.preFilter;l;){e&&!(o=ln.exec(l))||(o&&(l=l.slice(o[0].length)||l),s.push(i=[])),e=!1,(o=sn.exec(l))&&(e=o.shift(),i.push({value:e,type:o[0].replace(an," ")}),l=l.slice(e.length));for(a in w.filter)!(o=mn[a].exec(l))||d[a]&&!(o=d[a](o))||(e=o.shift(),i.push({value:e,type:a,matches:o}),l=l.slice(e.length));if(!e)break}return t?l.length:l?r.error(n):z(n,s).slice(0)},T=r.compile=function(n,t){var o,i=[],a=[],l=U[n+" "];if(!l){for(t||(t=E(n)),o=t.length;o--;)(l=v(t[o]))[M]?i.push(l):a.push(l);(l=U(n,function(n,t){var o=t.length>0,i=n.length>0,a=function(e,a,l,s,d){var c,p,m,f=0,u="0",g=e&&[],b=[],v=A,x=e||i&&w.find.TAG("*",d),y=W+=null==v?1:Math.random()||.1,k=x.length;for(d&&(A=a===I||a||d);u!==k&&null!=(c=x[u]);u++){if(i&&c){for(p=0,a||c.ownerDocument===I||(N(c),l=!O);m=n[p++];)if(m(c,a||I,l)){s.push(c);break}d&&(W=y)}o&&((c=!m&&c)&&f--,e&&g.push(c))}if(f+=u,o&&u!==f){for(p=0;m=t[p++];)m(g,b,a,l);if(e){if(f>0)for(;u--;)g[u]||b[u]||(b[u]=Q.call(s));b=h(b)}G.apply(s,b),d&&!e&&b.length>0&&f+t.length>1&&r.uniqueSort(s)}return d&&(W=y,A=v),g};return o?e(a):a}(a,i))).selector=n}return l},C=r.select=function(n,r,t,e){var o,i,a,l,s,d="function"==typeof n&&n,c=!e&&E(n=d.selector||n);if(t=t||[],1===c.length){if((i=c[0]=c[0].slice(0)).length>2&&"ID"===(a=i[0]).type&&9===r.nodeType&&O&&w.relative[i[1].type]){if(!(r=(w.find.ID(a.matches[0].replace(vn,xn),r)||[])[0]))return t;d&&(r=r.parentNode),n=n.slice(i.shift().value.length)}for(o=mn.needsContext.test(n)?0:i.length;o--&&(a=i[o],!w.relative[l=a.type]);)if((s=w.find[l])&&(e=s(a.matches[0].replace(vn,xn),bn.test(i[0].type)&&p(r.parentNode)||r))){if(i.splice(o,1),!(n=e.length&&f(i)))return G.apply(t,e),t;break}}return(d||T(n,c))(e,r,!O,t,!r||bn.test(n)&&p(r.parentNode)||r),t},y.sortStable=M.split("").sort(V).join("")===M,y.detectDuplicates=!!D,N(),y.sortDetached=o(function(n){return 1&n.compareDocumentPosition(I.createElement("fieldset"))}),o(function(n){return n.innerHTML="<a href='#'></a>","#"===n.firstChild.getAttribute("href")})||i("type|href|height|width",function(n,r,t){if(!t)return n.getAttribute(r,"type"===r.toLowerCase()?1:2)}),y.attributes&&o(function(n){return n.innerHTML="<input/>",n.firstChild.setAttribute("value",""),""===n.firstChild.getAttribute("value")})||i("value",function(n,r,t){if(!t&&"input"===n.nodeName.toLowerCase())return n.defaultValue}),o(function(n){return null==n.getAttribute("disabled")})||i(Z,function(n,r,t){var e;if(!t)return!0===n[r]?r.toLowerCase():(e=n.getAttributeNode(r))&&e.specified?e.value:null}),r}(t);pn.find=hn,pn.expr=hn.selectors,pn.expr[":"]=pn.expr.pseudos,pn.uniqueSort=pn.unique=hn.uniqueSort,pn.text=hn.getText,pn.isXMLDoc=hn.isXML,pn.contains=hn.contains,pn.escapeSelector=hn.escape;var bn=function(n,r,t){for(var e=[],o=void 0!==t;(n=n[r])&&9!==n.nodeType;)if(1===n.nodeType){if(o&&pn(n).is(t))break;e.push(n)}return e},vn=function(n,r){for(var t=[];n;n=n.nextSibling)1===n.nodeType&&n!==r&&t.push(n);return t},xn=pn.expr.match.needsContext,yn=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,wn=/^.[^:#\[\.,]*$/;pn.filter=function(n,r,t){var e=r[0];return t&&(n=":not("+n+")"),1===r.length&&1===e.nodeType?pn.find.matchesSelector(e,n)?[e]:[]:pn.find.matches(n,pn.grep(r,function(n){return 1===n.nodeType}))},pn.fn.extend({find:function(n){var r,t,e=this.length,o=this;if("string"!=typeof n)return this.pushStack(pn(n).filter(function(){for(r=0;r<e;r++)if(pn.contains(o[r],this))return!0}));for(t=this.pushStack([]),r=0;r<e;r++)pn.find(n,o[r],t);return e>1?pn.uniqueSort(t):t},filter:function(n){return this.pushStack(s(this,n||[],!1))},not:function(n){return this.pushStack(s(this,n||[],!0))},is:function(n){return!!s(this,"string"==typeof n&&xn.test(n)?pn(n):n||[],!1).length}});var kn,_n=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(pn.fn.init=function(n,r,t){var e,o;if(!n)return this;if(t=t||kn,"string"==typeof n){if(!(e="<"===n[0]&&">"===n[n.length-1]&&n.length>=3?[null,n,null]:_n.exec(n))||!e[1]&&r)return!r||r.jquery?(r||t).find(n):this.constructor(r).find(n);if(e[1]){if(r=r instanceof pn?r[0]:r,pn.merge(this,pn.parseHTML(e[1],r&&r.nodeType?r.ownerDocument||r:J,!0)),yn.test(e[1])&&pn.isPlainObject(r))for(e in r)pn.isFunction(this[e])?this[e](r[e]):this.attr(e,r[e]);return this}return(o=J.getElementById(e[2]))&&(this[0]=o,this.length=1),this}return n.nodeType?(this[0]=n,this.length=1,this):pn.isFunction(n)?void 0!==t.ready?t.ready(n):n(pn):pn.makeArray(n,this)}).prototype=pn.fn,kn=pn(J);var En=/^(?:parents|prev(?:Until|All))/,Tn={children:!0,contents:!0,next:!0,prev:!0};pn.fn.extend({has:function(n){var r=pn(n,this),t=r.length;return this.filter(function(){for(var n=0;n<t;n++)if(pn.contains(this,r[n]))return!0})},closest:function(n,r){var t,e=0,o=this.length,i=[],a="string"!=typeof n&&pn(n);if(!xn.test(n))for(;e<o;e++)for(t=this[e];t&&t!==r;t=t.parentNode)if(t.nodeType<11&&(a?a.index(t)>-1:1===t.nodeType&&pn.find.matchesSelector(t,n))){i.push(t);break}return this.pushStack(i.length>1?pn.uniqueSort(i):i)},index:function(n){return n?"string"==typeof n?en.call(pn(n),this[0]):en.call(this,n.jquery?n[0]:n):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(n,r){return this.pushStack(pn.uniqueSort(pn.merge(this.get(),pn(n,r))))},addBack:function(n){return this.add(null==n?this.prevObject:this.prevObject.filter(n))}}),pn.each({parent:function(n){var r=n.parentNode;return r&&11!==r.nodeType?r:null},parents:function(n){return bn(n,"parentNode")},parentsUntil:function(n,r,t){return bn(n,"parentNode",t)},next:function(n){return d(n,"nextSibling")},prev:function(n){return d(n,"previousSibling")},nextAll:function(n){return bn(n,"nextSibling")},prevAll:function(n){return bn(n,"previousSibling")},nextUntil:function(n,r,t){return bn(n,"nextSibling",t)},prevUntil:function(n,r,t){return bn(n,"previousSibling",t)},siblings:function(n){return vn((n.parentNode||{}).firstChild,n)},children:function(n){return vn(n.firstChild)},contents:function(n){return l(n,"iframe")?n.contentDocument:(l(n,"template")&&(n=n.content||n),pn.merge([],n.childNodes))}},function(n,r){pn.fn[n]=function(t,e){var o=pn.map(this,r,t);return"Until"!==n.slice(-5)&&(e=t),e&&"string"==typeof e&&(o=pn.filter(e,o)),this.length>1&&(Tn[n]||pn.uniqueSort(o),En.test(n)&&o.reverse()),this.pushStack(o)}});var Cn=/[^\x20\t\r\n\f]+/g;pn.Callbacks=function(n){n="string"==typeof n?function(n){var r={};return pn.each(n.match(Cn)||[],function(n,t){r[t]=!0}),r}(n):pn.extend({},n);var r,t,e,o,i=[],a=[],l=-1,s=function(){for(o=o||n.once,e=r=!0;a.length;l=-1)for(t=a.shift();++l<i.length;)!1===i[l].apply(t[0],t[1])&&n.stopOnFalse&&(l=i.length,t=!1);n.memory||(t=!1),r=!1,o&&(i=t?[]:"")},d={add:function(){return i&&(t&&!r&&(l=i.length-1,a.push(t)),function r(t){pn.each(t,function(t,e){pn.isFunction(e)?n.unique&&d.has(e)||i.push(e):e&&e.length&&"string"!==pn.type(e)&&r(e)})}(arguments),t&&!r&&s()),this},remove:function(){return pn.each(arguments,function(n,r){for(var t;(t=pn.inArray(r,i,t))>-1;)i.splice(t,1),t<=l&&l--}),this},has:function(n){return n?pn.inArray(n,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=a=[],i=t="",this},disabled:function(){return!i},lock:function(){return o=a=[],t||r||(i=t=""),this},locked:function(){return!!o},fireWith:function(n,t){return o||(t=[n,(t=t||[]).slice?t.slice():t],a.push(t),r||s()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!e}};return d},pn.extend({Deferred:function(n){var r=[["notify","progress",pn.Callbacks("memory"),pn.Callbacks("memory"),2],["resolve","done",pn.Callbacks("once memory"),pn.Callbacks("once memory"),0,"resolved"],["reject","fail",pn.Callbacks("once memory"),pn.Callbacks("once memory"),1,"rejected"]],e="pending",o={state:function(){return e},always:function(){return i.done(arguments).fail(arguments),this},catch:function(n){return o.then(null,n)},pipe:function(){var n=arguments;return pn.Deferred(function(t){pn.each(r,function(r,e){var o=pn.isFunction(n[e[4]])&&n[e[4]];i[e[1]](function(){var n=o&&o.apply(this,arguments);n&&pn.isFunction(n.promise)?n.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[e[0]+"With"](this,o?[n]:arguments)})}),n=null}).promise()},then:function(n,e,o){function i(n,r,e,o){return function(){var l=this,s=arguments,d=function(){var t,d;if(!(n<a)){if((t=e.apply(l,s))===r.promise())throw new TypeError("Thenable self-resolution");d=t&&("object"==typeof t||"function"==typeof t)&&t.then,pn.isFunction(d)?o?d.call(t,i(a,r,c,o),i(a,r,p,o)):(a++,d.call(t,i(a,r,c,o),i(a,r,p,o),i(a,r,c,r.notifyWith))):(e!==c&&(l=void 0,s=[t]),(o||r.resolveWith)(l,s))}},m=o?d:function(){try{d()}catch(t){pn.Deferred.exceptionHook&&pn.Deferred.exceptionHook(t,m.stackTrace),n+1>=a&&(e!==p&&(l=void 0,s=[t]),r.rejectWith(l,s))}};n?m():(pn.Deferred.getStackHook&&(m.stackTrace=pn.Deferred.getStackHook()),t.setTimeout(m))}}var a=0;return pn.Deferred(function(t){r[0][3].add(i(0,t,pn.isFunction(o)?o:c,t.notifyWith)),r[1][3].add(i(0,t,pn.isFunction(n)?n:c)),r[2][3].add(i(0,t,pn.isFunction(e)?e:p))}).promise()},promise:function(n){return null!=n?pn.extend(n,o):o}},i={};return pn.each(r,function(n,t){var a=t[2],l=t[5];o[t[1]]=a.add,l&&a.add(function(){e=l},r[3-n][2].disable,r[0][2].lock),a.add(t[3].fire),i[t[0]]=function(){return i[t[0]+"With"](this===i?void 0:this,arguments),this},i[t[0]+"With"]=a.fireWith}),o.promise(i),n&&n.call(i,i),i},when:function(n){var r=arguments.length,t=r,e=Array(t),o=nn.call(arguments),i=pn.Deferred(),a=function(n){return function(t){e[n]=this,o[n]=arguments.length>1?nn.call(arguments):t,--r||i.resolveWith(e,o)}};if(r<=1&&(m(n,i.done(a(t)).resolve,i.reject,!r),"pending"===i.state()||pn.isFunction(o[t]&&o[t].then)))return i.then();for(;t--;)m(o[t],a(t),i.reject);return i.promise()}});var An=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;pn.Deferred.exceptionHook=function(n,r){t.console&&t.console.warn&&n&&An.test(n.name)&&t.console.warn("jQuery.Deferred exception: "+n.message,n.stack,r)},pn.readyException=function(n){t.setTimeout(function(){throw n})};var Sn=pn.Deferred();pn.fn.ready=function(n){return Sn.then(n).catch(function(n){pn.readyException(n)}),this},pn.extend({isReady:!1,readyWait:1,ready:function(n){(!0===n?--pn.readyWait:pn.isReady)||(pn.isReady=!0,!0!==n&&--pn.readyWait>0||Sn.resolveWith(J,[pn]))}}),pn.ready.then=Sn.then,"complete"===J.readyState||"loading"!==J.readyState&&!J.documentElement.doScroll?t.setTimeout(pn.ready):(J.addEventListener("DOMContentLoaded",f),t.addEventListener("load",f));var Dn=function(n,r,t,e,o,i,a){var l=0,s=n.length,d=null==t;if("object"===pn.type(t)){o=!0;for(l in t)Dn(n,r,l,t[l],!0,i,a)}else if(void 0!==e&&(o=!0,pn.isFunction(e)||(a=!0),d&&(a?(r.call(n,e),r=null):(d=r,r=function(n,r,t){return d.call(pn(n),t)})),r))for(;l<s;l++)r(n[l],t,a?e:e.call(n[l],l,r(n[l],t)));return o?n:d?r.call(n):s?r(n[0],t):i},Nn=function(n){return 1===n.nodeType||9===n.nodeType||!+n.nodeType};u.uid=1,u.prototype={cache:function(n){var r=n[this.expando];return r||(r={},Nn(n)&&(n.nodeType?n[this.expando]=r:Object.defineProperty(n,this.expando,{value:r,configurable:!0}))),r},set:function(n,r,t){var e,o=this.cache(n);if("string"==typeof r)o[pn.camelCase(r)]=t;else for(e in r)o[pn.camelCase(e)]=r[e];return o},get:function(n,r){return void 0===r?this.cache(n):n[this.expando]&&n[this.expando][pn.camelCase(r)]},access:function(n,r,t){return void 0===r||r&&"string"==typeof r&&void 0===t?this.get(n,r):(this.set(n,r,t),void 0!==t?t:r)},remove:function(n,r){var t,e=n[this.expando];if(void 0!==e){if(void 0!==r){t=(r=Array.isArray(r)?r.map(pn.camelCase):(r=pn.camelCase(r))in e?[r]:r.match(Cn)||[]).length;for(;t--;)delete e[r[t]]}(void 0===r||pn.isEmptyObject(e))&&(n.nodeType?n[this.expando]=void 0:delete n[this.expando])}},hasData:function(n){var r=n[this.expando];return void 0!==r&&!pn.isEmptyObject(r)}};var In=new u,jn=new u,On=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ln=/[A-Z]/g;pn.extend({hasData:function(n){return jn.hasData(n)||In.hasData(n)},data:function(n,r,t){return jn.access(n,r,t)},removeData:function(n,r){jn.remove(n,r)},_data:function(n,r,t){return In.access(n,r,t)},_removeData:function(n,r){In.remove(n,r)}}),pn.fn.extend({data:function(n,r){var t,e,o,i=this[0],a=i&&i.attributes;if(void 0===n){if(this.length&&(o=jn.get(i),1===i.nodeType&&!In.get(i,"hasDataAttrs"))){for(t=a.length;t--;)a[t]&&0===(e=a[t].name).indexOf("data-")&&(e=pn.camelCase(e.slice(5)),g(i,e,o[e]));In.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof n?this.each(function(){jn.set(this,n)}):Dn(this,function(r){var t;if(i&&void 0===r){if(void 0!==(t=jn.get(i,n)))return t;if(void 0!==(t=g(i,n)))return t}else this.each(function(){jn.set(this,n,r)})},null,r,arguments.length>1,null,!0)},removeData:function(n){return this.each(function(){jn.remove(this,n)})}}),pn.extend({queue:function(n,r,t){var e;if(n)return r=(r||"fx")+"queue",e=In.get(n,r),t&&(!e||Array.isArray(t)?e=In.access(n,r,pn.makeArray(t)):e.push(t)),e||[]},dequeue:function(n,r){r=r||"fx";var t=pn.queue(n,r),e=t.length,o=t.shift(),i=pn._queueHooks(n,r),a=function(){pn.dequeue(n,r)};"inprogress"===o&&(o=t.shift(),e--),o&&("fx"===r&&t.unshift("inprogress"),delete i.stop,o.call(n,a,i)),!e&&i&&i.empty.fire()},_queueHooks:function(n,r){var t=r+"queueHooks";return In.get(n,t)||In.access(n,t,{empty:pn.Callbacks("once memory").add(function(){In.remove(n,[r+"queue",t])})})}}),pn.fn.extend({queue:function(n,r){var t=2;return"string"!=typeof n&&(r=n,n="fx",t--),arguments.length<t?pn.queue(this[0],n):void 0===r?this:this.each(function(){var t=pn.queue(this,n,r);pn._queueHooks(this,n),"fx"===n&&"inprogress"!==t[0]&&pn.dequeue(this,n)})},dequeue:function(n){return this.each(function(){pn.dequeue(this,n)})},clearQueue:function(n){return this.queue(n||"fx",[])},promise:function(n,r){var t,e=1,o=pn.Deferred(),i=this,a=this.length,l=function(){--e||o.resolveWith(i,[i])};for("string"!=typeof n&&(r=n,n=void 0),n=n||"fx";a--;)(t=In.get(i[a],n+"queueHooks"))&&t.empty&&(e++,t.empty.add(l));return l(),o.promise(r)}});var Pn=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Hn=new RegExp("^(?:([+-])=|)("+Pn+")([a-z%]*)$","i"),Rn=["Top","Right","Bottom","Left"],Mn=function(n,r){return"none"===(n=r||n).style.display||""===n.style.display&&pn.contains(n.ownerDocument,n)&&"none"===pn.css(n,"display")},Fn=function(n,r,t,e){var o,i,a={};for(i in r)a[i]=n.style[i],n.style[i]=r[i];o=t.apply(n,e||[]);for(i in r)n.style[i]=a[i];return o},Wn={};pn.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(n){return"boolean"==typeof n?n?this.show():this.hide():this.each(function(){Mn(this)?pn(this).show():pn(this).hide()})}});var Bn=/^(?:checkbox|radio)$/i,qn=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,zn=/^$|\/(?:java|ecma)script/i,Un={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Un.optgroup=Un.option,Un.tbody=Un.tfoot=Un.colgroup=Un.caption=Un.thead,Un.th=Un.td;var Vn=/<|&#?\w+;/;!function(){var n=J.createDocumentFragment().appendChild(J.createElement("div")),r=J.createElement("input");r.setAttribute("type","radio"),r.setAttribute("checked","checked"),r.setAttribute("name","t"),n.appendChild(r),cn.checkClone=n.cloneNode(!0).cloneNode(!0).lastChild.checked,n.innerHTML="<textarea>x</textarea>",cn.noCloneChecked=!!n.cloneNode(!0).lastChild.defaultValue}();var Kn=J.documentElement,$n=/^key/,Qn=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Yn=/^([^.]*)(?:\.(.+)|)/;pn.event={global:{},add:function(n,r,t,e,o){var i,a,l,s,d,c,p,m,f,u,g,h=In.get(n);if(h)for(t.handler&&(t=(i=t).handler,o=i.selector),o&&pn.find.matchesSelector(Kn,o),t.guid||(t.guid=pn.guid++),(s=h.events)||(s=h.events={}),(a=h.handle)||(a=h.handle=function(r){return void 0!==pn&&pn.event.triggered!==r.type?pn.event.dispatch.apply(n,arguments):void 0}),d=(r=(r||"").match(Cn)||[""]).length;d--;)f=g=(l=Yn.exec(r[d])||[])[1],u=(l[2]||"").split(".").sort(),f&&(p=pn.event.special[f]||{},f=(o?p.delegateType:p.bindType)||f,p=pn.event.special[f]||{},c=pn.extend({type:f,origType:g,data:e,handler:t,guid:t.guid,selector:o,needsContext:o&&pn.expr.match.needsContext.test(o),namespace:u.join(".")},i),(m=s[f])||((m=s[f]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(n,e,u,a)||n.addEventListener&&n.addEventListener(f,a)),p.add&&(p.add.call(n,c),c.handler.guid||(c.handler.guid=t.guid)),o?m.splice(m.delegateCount++,0,c):m.push(c),pn.event.global[f]=!0)},remove:function(n,r,t,e,o){var i,a,l,s,d,c,p,m,f,u,g,h=In.hasData(n)&&In.get(n);if(h&&(s=h.events)){for(d=(r=(r||"").match(Cn)||[""]).length;d--;)if(l=Yn.exec(r[d])||[],f=g=l[1],u=(l[2]||"").split(".").sort(),f){for(p=pn.event.special[f]||{},m=s[f=(e?p.delegateType:p.bindType)||f]||[],l=l[2]&&new RegExp("(^|\\.)"+u.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=i=m.length;i--;)c=m[i],!o&&g!==c.origType||t&&t.guid!==c.guid||l&&!l.test(c.namespace)||e&&e!==c.selector&&("**"!==e||!c.selector)||(m.splice(i,1),c.selector&&m.delegateCount--,p.remove&&p.remove.call(n,c));a&&!m.length&&(p.teardown&&!1!==p.teardown.call(n,u,h.handle)||pn.removeEvent(n,f,h.handle),delete s[f])}else for(f in s)pn.event.remove(n,f+r[d],t,e,!0);pn.isEmptyObject(s)&&In.remove(n,"handle events")}},dispatch:function(n){var r,t,e,o,i,a,l=pn.event.fix(n),s=new Array(arguments.length),d=(In.get(this,"events")||{})[l.type]||[],c=pn.event.special[l.type]||{};for(s[0]=l,r=1;r<arguments.length;r++)s[r]=arguments[r];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(a=pn.event.handlers.call(this,l,d),r=0;(o=a[r++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,t=0;(i=o.handlers[t++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!l.rnamespace.test(i.namespace)||(l.handleObj=i,l.data=i.data,void 0!==(e=((pn.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,s))&&!1===(l.result=e)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(n,r){var t,e,o,i,a,l=[],s=r.delegateCount,d=n.target;if(s&&d.nodeType&&!("click"===n.type&&n.button>=1))for(;d!==this;d=d.parentNode||this)if(1===d.nodeType&&("click"!==n.type||!0!==d.disabled)){for(i=[],a={},t=0;t<s;t++)void 0===a[o=(e=r[t]).selector+" "]&&(a[o]=e.needsContext?pn(o,this).index(d)>-1:pn.find(o,this,null,[d]).length),a[o]&&i.push(e);i.length&&l.push({elem:d,handlers:i})}return d=this,s<r.length&&l.push({elem:d,handlers:r.slice(s)}),l},addProp:function(n,r){Object.defineProperty(pn.Event.prototype,n,{enumerable:!0,configurable:!0,get:pn.isFunction(r)?function(){if(this.originalEvent)return r(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[n]},set:function(r){Object.defineProperty(this,n,{enumerable:!0,configurable:!0,writable:!0,value:r})}})},fix:function(n){return n[pn.expando]?n:new pn.Event(n)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==E()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===E()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&l(this,"input"))return this.click(),!1},_default:function(n){return l(n.target,"a")}},beforeunload:{postDispatch:function(n){void 0!==n.result&&n.originalEvent&&(n.originalEvent.returnValue=n.result)}}}},pn.removeEvent=function(n,r,t){n.removeEventListener&&n.removeEventListener(r,t)},pn.Event=function(n,r){if(!(this instanceof pn.Event))return new pn.Event(n,r);n&&n.type?(this.originalEvent=n,this.type=n.type,this.isDefaultPrevented=n.defaultPrevented||void 0===n.defaultPrevented&&!1===n.returnValue?k:_,this.target=n.target&&3===n.target.nodeType?n.target.parentNode:n.target,this.currentTarget=n.currentTarget,this.relatedTarget=n.relatedTarget):this.type=n,r&&pn.extend(this,r),this.timeStamp=n&&n.timeStamp||pn.now(),this[pn.expando]=!0},pn.Event.prototype={constructor:pn.Event,isDefaultPrevented:_,isPropagationStopped:_,isImmediatePropagationStopped:_,isSimulated:!1,preventDefault:function(){var n=this.originalEvent;this.isDefaultPrevented=k,n&&!this.isSimulated&&n.preventDefault()},stopPropagation:function(){var n=this.originalEvent;this.isPropagationStopped=k,n&&!this.isSimulated&&n.stopPropagation()},stopImmediatePropagation:function(){var n=this.originalEvent;this.isImmediatePropagationStopped=k,n&&!this.isSimulated&&n.stopImmediatePropagation(),this.stopPropagation()}},pn.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(n){var r=n.button;return null==n.which&&$n.test(n.type)?null!=n.charCode?n.charCode:n.keyCode:!n.which&&void 0!==r&&Qn.test(n.type)?1&r?1:2&r?3:4&r?2:0:n.which}},pn.event.addProp),pn.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(n,r){pn.event.special[n]={delegateType:r,bindType:r,handle:function(n){var t,e=n.relatedTarget,o=n.handleObj;return e&&(e===this||pn.contains(this,e))||(n.type=o.origType,t=o.handler.apply(this,arguments),n.type=r),t}}}),pn.fn.extend({on:function(n,r,t,e){return T(this,n,r,t,e)},one:function(n,r,t,e){return T(this,n,r,t,e,1)},off:function(n,r,t){var e,o;if(n&&n.preventDefault&&n.handleObj)return e=n.handleObj,pn(n.delegateTarget).off(e.namespace?e.origType+"."+e.namespace:e.origType,e.selector,e.handler),this;if("object"==typeof n){for(o in n)this.off(o,r,n[o]);return this}return!1!==r&&"function"!=typeof r||(t=r,r=void 0),!1===t&&(t=_),this.each(function(){pn.event.remove(this,n,t,r)})}});var Gn=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Xn=/<script|<style|<link/i,Jn=/checked\s*(?:[^=]|=\s*.checked.)/i,Zn=/^true\/(.*)/,nr=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;pn.extend({htmlPrefilter:function(n){return n.replace(Gn,"<$1></$2>")},clone:function(n,r,t){var e,o,i,a,l=n.cloneNode(!0),s=pn.contains(n.ownerDocument,n);if(!(cn.noCloneChecked||1!==n.nodeType&&11!==n.nodeType||pn.isXMLDoc(n)))for(a=x(l),e=0,o=(i=x(n)).length;e<o;e++)N(i[e],a[e]);if(r)if(t)for(i=i||x(n),a=a||x(l),e=0,o=i.length;e<o;e++)D(i[e],a[e]);else D(n,l);return(a=x(l,"script")).length>0&&y(a,!s&&x(n,"script")),l},cleanData:function(n){for(var r,t,e,o=pn.event.special,i=0;void 0!==(t=n[i]);i++)if(Nn(t)){if(r=t[In.expando]){if(r.events)for(e in r.events)o[e]?pn.event.remove(t,e):pn.removeEvent(t,e,r.handle);t[In.expando]=void 0}t[jn.expando]&&(t[jn.expando]=void 0)}}}),pn.fn.extend({detach:function(n){return j(this,n,!0)},remove:function(n){return j(this,n)},text:function(n){return Dn(this,function(n){return void 0===n?pn.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=n)})},null,n,arguments.length)},append:function(){return I(this,arguments,function(n){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){C(this,n).appendChild(n)}})},prepend:function(){return I(this,arguments,function(n){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var r=C(this,n);r.insertBefore(n,r.firstChild)}})},before:function(){return I(this,arguments,function(n){this.parentNode&&this.parentNode.insertBefore(n,this)})},after:function(){return I(this,arguments,function(n){this.parentNode&&this.parentNode.insertBefore(n,this.nextSibling)})},empty:function(){for(var n,r=0;null!=(n=this[r]);r++)1===n.nodeType&&(pn.cleanData(x(n,!1)),n.textContent="");return this},clone:function(n,r){return n=null!=n&&n,r=null==r?n:r,this.map(function(){return pn.clone(this,n,r)})},html:function(n){return Dn(this,function(n){var r=this[0]||{},t=0,e=this.length;if(void 0===n&&1===r.nodeType)return r.innerHTML;if("string"==typeof n&&!Xn.test(n)&&!Un[(qn.exec(n)||["",""])[1].toLowerCase()]){n=pn.htmlPrefilter(n);try{for(;t<e;t++)1===(r=this[t]||{}).nodeType&&(pn.cleanData(x(r,!1)),r.innerHTML=n);r=0}catch(n){}}r&&this.empty().append(n)},null,n,arguments.length)},replaceWith:function(){var n=[];return I(this,arguments,function(r){var t=this.parentNode;pn.inArray(this,n)<0&&(pn.cleanData(x(this)),t&&t.replaceChild(r,this))},n)}}),pn.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(n,r){pn.fn[n]=function(n){for(var t,e=[],o=pn(n),i=o.length-1,a=0;a<=i;a++)t=a===i?this:this.clone(!0),pn(o[a])[r](t),tn.apply(e,t.get());return this.pushStack(e)}});var rr=/^margin/,tr=new RegExp("^("+Pn+")(?!px)[a-z%]+$","i"),er=function(n){var r=n.ownerDocument.defaultView;return r&&r.opener||(r=t),r.getComputedStyle(n)};!function(){function n(){if(l){l.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",l.innerHTML="",Kn.appendChild(a);var n=t.getComputedStyle(l);r="1%"!==n.top,i="2px"===n.marginLeft,e="4px"===n.width,l.style.marginRight="50%",o="4px"===n.marginRight,Kn.removeChild(a),l=null}}var r,e,o,i,a=J.createElement("div"),l=J.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",cn.clearCloneStyle="content-box"===l.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(l),pn.extend(cn,{pixelPosition:function(){return n(),r},boxSizingReliable:function(){return n(),e},pixelMarginRight:function(){return n(),o},reliableMarginLeft:function(){return n(),i}}))}();var or=/^(none|table(?!-c[ea]).+)/,ir=/^--/,ar={position:"absolute",visibility:"hidden",display:"block"},lr={letterSpacing:"0",fontWeight:"400"},sr=["Webkit","Moz","ms"],dr=J.createElement("div").style;pn.extend({cssHooks:{opacity:{get:function(n,r){if(r){var t=O(n,"opacity");return""===t?"1":t}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(n,r,t,e){if(n&&3!==n.nodeType&&8!==n.nodeType&&n.style){var o,i,a,l=pn.camelCase(r),s=ir.test(r),d=n.style;if(s||(r=P(l)),a=pn.cssHooks[r]||pn.cssHooks[l],void 0===t)return a&&"get"in a&&void 0!==(o=a.get(n,!1,e))?o:d[r];"string"==(i=typeof t)&&(o=Hn.exec(t))&&o[1]&&(t=h(n,r,o),i="number"),null!=t&&t==t&&("number"===i&&(t+=o&&o[3]||(pn.cssNumber[l]?"":"px")),cn.clearCloneStyle||""!==t||0!==r.indexOf("background")||(d[r]="inherit"),a&&"set"in a&&void 0===(t=a.set(n,t,e))||(s?d.setProperty(r,t):d[r]=t))}},css:function(n,r,t,e){var o,i,a,l=pn.camelCase(r);return ir.test(r)||(r=P(l)),(a=pn.cssHooks[r]||pn.cssHooks[l])&&"get"in a&&(o=a.get(n,!0,t)),void 0===o&&(o=O(n,r,e)),"normal"===o&&r in lr&&(o=lr[r]),""===t||t?(i=parseFloat(o),!0===t||isFinite(i)?i||0:o):o}}),pn.each(["height","width"],function(n,r){pn.cssHooks[r]={get:function(n,t,e){if(t)return!or.test(pn.css(n,"display"))||n.getClientRects().length&&n.getBoundingClientRect().width?M(n,r,e):Fn(n,ar,function(){return M(n,r,e)})},set:function(n,t,e){var o,i=e&&er(n),a=e&&R(n,r,e,"border-box"===pn.css(n,"boxSizing",!1,i),i);return a&&(o=Hn.exec(t))&&"px"!==(o[3]||"px")&&(n.style[r]=t,t=pn.css(n,r)),H(0,t,a)}}}),pn.cssHooks.marginLeft=L(cn.reliableMarginLeft,function(n,r){if(r)return(parseFloat(O(n,"marginLeft"))||n.getBoundingClientRect().left-Fn(n,{marginLeft:0},function(){return n.getBoundingClientRect().left}))+"px"}),pn.each({margin:"",padding:"",border:"Width"},function(n,r){pn.cssHooks[n+r]={expand:function(t){for(var e=0,o={},i="string"==typeof t?t.split(" "):[t];e<4;e++)o[n+Rn[e]+r]=i[e]||i[e-2]||i[0];return o}},rr.test(n)||(pn.cssHooks[n+r].set=H)}),pn.fn.extend({css:function(n,r){return Dn(this,function(n,r,t){var e,o,i={},a=0;if(Array.isArray(r)){for(e=er(n),o=r.length;a<o;a++)i[r[a]]=pn.css(n,r[a],!1,e);return i}return void 0!==t?pn.style(n,r,t):pn.css(n,r)},n,r,arguments.length>1)}}),pn.Tween=F,(F.prototype={constructor:F,init:function(n,r,t,e,o,i){this.elem=n,this.prop=t,this.easing=o||pn.easing._default,this.options=r,this.start=this.now=this.cur(),this.end=e,this.unit=i||(pn.cssNumber[t]?"":"px")},cur:function(){var n=F.propHooks[this.prop];return n&&n.get?n.get(this):F.propHooks._default.get(this)},run:function(n){var r,t=F.propHooks[this.prop];return this.options.duration?this.pos=r=pn.easing[this.easing](n,this.options.duration*n,0,1,this.options.duration):this.pos=r=n,this.now=(this.end-this.start)*r+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),t&&t.set?t.set(this):F.propHooks._default.set(this),this}}).init.prototype=F.prototype,(F.propHooks={_default:{get:function(n){var r;return 1!==n.elem.nodeType||null!=n.elem[n.prop]&&null==n.elem.style[n.prop]?n.elem[n.prop]:(r=pn.css(n.elem,n.prop,""))&&"auto"!==r?r:0},set:function(n){pn.fx.step[n.prop]?pn.fx.step[n.prop](n):1!==n.elem.nodeType||null==n.elem.style[pn.cssProps[n.prop]]&&!pn.cssHooks[n.prop]?n.elem[n.prop]=n.now:pn.style(n.elem,n.prop,n.now+n.unit)}}}).scrollTop=F.propHooks.scrollLeft={set:function(n){n.elem.nodeType&&n.elem.parentNode&&(n.elem[n.prop]=n.now)}},pn.easing={linear:function(n){return n},swing:function(n){return.5-Math.cos(n*Math.PI)/2},_default:"swing"},pn.fx=F.prototype.init,pn.fx.step={};var cr,pr,mr=/^(?:toggle|show|hide)$/,fr=/queueHooks$/;pn.Animation=pn.extend(U,{tweeners:{"*":[function(n,r){var t=this.createTween(n,r);return h(t.elem,n,Hn.exec(r),t),t}]},tweener:function(n,r){pn.isFunction(n)?(r=n,n=["*"]):n=n.match(Cn);for(var t,e=0,o=n.length;e<o;e++)t=n[e],U.tweeners[t]=U.tweeners[t]||[],U.tweeners[t].unshift(r)},prefilters:[function(n,r,t){var e,o,i,a,l,s,d,c,p="width"in r||"height"in r,m=this,f={},u=n.style,g=n.nodeType&&Mn(n),h=In.get(n,"fxshow");t.queue||(null==(a=pn._queueHooks(n,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,m.always(function(){m.always(function(){a.unqueued--,pn.queue(n,"fx").length||a.empty.fire()})}));for(e in r)if(o=r[e],mr.test(o)){if(delete r[e],i=i||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!h||void 0===h[e])continue;g=!0}f[e]=h&&h[e]||pn.style(n,e)}if((s=!pn.isEmptyObject(r))||!pn.isEmptyObject(f)){p&&1===n.nodeType&&(t.overflow=[u.overflow,u.overflowX,u.overflowY],null==(d=h&&h.display)&&(d=In.get(n,"display")),"none"===(c=pn.css(n,"display"))&&(d?c=d:(v([n],!0),d=n.style.display||d,c=pn.css(n,"display"),v([n]))),("inline"===c||"inline-block"===c&&null!=d)&&"none"===pn.css(n,"float")&&(s||(m.done(function(){u.display=d}),null==d&&(c=u.display,d="none"===c?"":c)),u.display="inline-block")),t.overflow&&(u.overflow="hidden",m.always(function(){u.overflow=t.overflow[0],u.overflowX=t.overflow[1],u.overflowY=t.overflow[2]})),s=!1;for(e in f)s||(h?"hidden"in h&&(g=h.hidden):h=In.access(n,"fxshow",{display:d}),i&&(h.hidden=!g),g&&v([n],!0),m.done(function(){g||v([n]),In.remove(n,"fxshow");for(e in f)pn.style(n,e,f[e])})),s=z(g?h[e]:0,e,m),e in h||(h[e]=s.start,g&&(s.end=s.start,s.start=0))}}],prefilter:function(n,r){r?U.prefilters.unshift(n):U.prefilters.push(n)}}),pn.speed=function(n,r,t){var e=n&&"object"==typeof n?pn.extend({},n):{complete:t||!t&&r||pn.isFunction(n)&&n,duration:n,easing:t&&r||r&&!pn.isFunction(r)&&r};return pn.fx.off?e.duration=0:"number"!=typeof e.duration&&(e.duration in pn.fx.speeds?e.duration=pn.fx.speeds[e.duration]:e.duration=pn.fx.speeds._default),null!=e.queue&&!0!==e.queue||(e.queue="fx"),e.old=e.complete,e.complete=function(){pn.isFunction(e.old)&&e.old.call(this),e.queue&&pn.dequeue(this,e.queue)},e},pn.fn.extend({fadeTo:function(n,r,t,e){return this.filter(Mn).css("opacity",0).show().end().animate({opacity:r},n,t,e)},animate:function(n,r,t,e){var o=pn.isEmptyObject(n),i=pn.speed(r,t,e),a=function(){var r=U(this,pn.extend({},n),i);(o||In.get(this,"finish"))&&r.stop(!0)};return a.finish=a,o||!1===i.queue?this.each(a):this.queue(i.queue,a)},stop:function(n,r,t){var e=function(n){var r=n.stop;delete n.stop,r(t)};return"string"!=typeof n&&(t=r,r=n,n=void 0),r&&!1!==n&&this.queue(n||"fx",[]),this.each(function(){var r=!0,o=null!=n&&n+"queueHooks",i=pn.timers,a=In.get(this);if(o)a[o]&&a[o].stop&&e(a[o]);else for(o in a)a[o]&&a[o].stop&&fr.test(o)&&e(a[o]);for(o=i.length;o--;)i[o].elem!==this||null!=n&&i[o].queue!==n||(i[o].anim.stop(t),r=!1,i.splice(o,1));!r&&t||pn.dequeue(this,n)})},finish:function(n){return!1!==n&&(n=n||"fx"),this.each(function(){var r,t=In.get(this),e=t[n+"queue"],o=t[n+"queueHooks"],i=pn.timers,a=e?e.length:0;for(t.finish=!0,pn.queue(this,n,[]),o&&o.stop&&o.stop.call(this,!0),r=i.length;r--;)i[r].elem===this&&i[r].queue===n&&(i[r].anim.stop(!0),i.splice(r,1));for(r=0;r<a;r++)e[r]&&e[r].finish&&e[r].finish.call(this);delete t.finish})}}),pn.each(["toggle","show","hide"],function(n,r){var t=pn.fn[r];pn.fn[r]=function(n,e,o){return null==n||"boolean"==typeof n?t.apply(this,arguments):this.animate(q(r,!0),n,e,o)}}),pn.each({slideDown:q("show"),slideUp:q("hide"),slideToggle:q("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(n,r){pn.fn[n]=function(n,t,e){return this.animate(r,n,t,e)}}),pn.timers=[],pn.fx.tick=function(){var n,r=0,t=pn.timers;for(cr=pn.now();r<t.length;r++)(n=t[r])()||t[r]!==n||t.splice(r--,1);t.length||pn.fx.stop(),cr=void 0},pn.fx.timer=function(n){pn.timers.push(n),pn.fx.start()},pn.fx.interval=13,pn.fx.start=function(){pr||(pr=!0,W())},pn.fx.stop=function(){pr=null},pn.fx.speeds={slow:600,fast:200,_default:400},pn.fn.delay=function(n,r){return n=pn.fx?pn.fx.speeds[n]||n:n,r=r||"fx",this.queue(r,function(r,e){var o=t.setTimeout(r,n);e.stop=function(){t.clearTimeout(o)}})},function(){var n=J.createElement("input"),r=J.createElement("select").appendChild(J.createElement("option"));n.type="checkbox",cn.checkOn=""!==n.value,cn.optSelected=r.selected,(n=J.createElement("input")).value="t",n.type="radio",cn.radioValue="t"===n.value}();var ur,gr=pn.expr.attrHandle;pn.fn.extend({attr:function(n,r){return Dn(this,pn.attr,n,r,arguments.length>1)},removeAttr:function(n){return this.each(function(){pn.removeAttr(this,n)})}}),pn.extend({attr:function(n,r,t){var e,o,i=n.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===n.getAttribute?pn.prop(n,r,t):(1===i&&pn.isXMLDoc(n)||(o=pn.attrHooks[r.toLowerCase()]||(pn.expr.match.bool.test(r)?ur:void 0)),void 0!==t?null===t?void pn.removeAttr(n,r):o&&"set"in o&&void 0!==(e=o.set(n,t,r))?e:(n.setAttribute(r,t+""),t):o&&"get"in o&&null!==(e=o.get(n,r))?e:null==(e=pn.find.attr(n,r))?void 0:e)},attrHooks:{type:{set:function(n,r){if(!cn.radioValue&&"radio"===r&&l(n,"input")){var t=n.value;return n.setAttribute("type",r),t&&(n.value=t),r}}}},removeAttr:function(n,r){var t,e=0,o=r&&r.match(Cn);if(o&&1===n.nodeType)for(;t=o[e++];)n.removeAttribute(t)}}),ur={set:function(n,r,t){return!1===r?pn.removeAttr(n,t):n.setAttribute(t,t),t}},pn.each(pn.expr.match.bool.source.match(/\w+/g),function(n,r){var t=gr[r]||pn.find.attr;gr[r]=function(n,r,e){var o,i,a=r.toLowerCase();return e||(i=gr[a],gr[a]=o,o=null!=t(n,r,e)?a:null,gr[a]=i),o}});var hr=/^(?:input|select|textarea|button)$/i,br=/^(?:a|area)$/i;pn.fn.extend({prop:function(n,r){return Dn(this,pn.prop,n,r,arguments.length>1)},removeProp:function(n){return this.each(function(){delete this[pn.propFix[n]||n]})}}),pn.extend({prop:function(n,r,t){var e,o,i=n.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&pn.isXMLDoc(n)||(r=pn.propFix[r]||r,o=pn.propHooks[r]),void 0!==t?o&&"set"in o&&void 0!==(e=o.set(n,t,r))?e:n[r]=t:o&&"get"in o&&null!==(e=o.get(n,r))?e:n[r]},propHooks:{tabIndex:{get:function(n){var r=pn.find.attr(n,"tabindex");return r?parseInt(r,10):hr.test(n.nodeName)||br.test(n.nodeName)&&n.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),cn.optSelected||(pn.propHooks.selected={get:function(n){var r=n.parentNode;return r&&r.parentNode&&r.parentNode.selectedIndex,null},set:function(n){var r=n.parentNode;r&&(r.selectedIndex,r.parentNode&&r.parentNode.selectedIndex)}}),pn.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){pn.propFix[this.toLowerCase()]=this}),pn.fn.extend({addClass:function(n){var r,t,e,o,i,a,l,s=0;if(pn.isFunction(n))return this.each(function(r){pn(this).addClass(n.call(this,r,K(this)))});if("string"==typeof n&&n)for(r=n.match(Cn)||[];t=this[s++];)if(o=K(t),e=1===t.nodeType&&" "+V(o)+" "){for(a=0;i=r[a++];)e.indexOf(" "+i+" ")<0&&(e+=i+" ");o!==(l=V(e))&&t.setAttribute("class",l)}return this},removeClass:function(n){var r,t,e,o,i,a,l,s=0;if(pn.isFunction(n))return this.each(function(r){pn(this).removeClass(n.call(this,r,K(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof n&&n)for(r=n.match(Cn)||[];t=this[s++];)if(o=K(t),e=1===t.nodeType&&" "+V(o)+" "){for(a=0;i=r[a++];)for(;e.indexOf(" "+i+" ")>-1;)e=e.replace(" "+i+" "," ");o!==(l=V(e))&&t.setAttribute("class",l)}return this},toggleClass:function(n,r){var t=typeof n;return"boolean"==typeof r&&"string"===t?r?this.addClass(n):this.removeClass(n):pn.isFunction(n)?this.each(function(t){pn(this).toggleClass(n.call(this,t,K(this),r),r)}):this.each(function(){var r,e,o,i;if("string"===t)for(e=0,o=pn(this),i=n.match(Cn)||[];r=i[e++];)o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==n&&"boolean"!==t||((r=K(this))&&In.set(this,"__className__",r),this.setAttribute&&this.setAttribute("class",r||!1===n?"":In.get(this,"__className__")||""))})},hasClass:function(n){var r,t,e=0;for(r=" "+n+" ";t=this[e++];)if(1===t.nodeType&&(" "+V(K(t))+" ").indexOf(r)>-1)return!0;return!1}});var vr=/\r/g;pn.fn.extend({val:function(n){var r,t,e,o=this[0];if(arguments.length)return e=pn.isFunction(n),this.each(function(t){var o;1===this.nodeType&&(null==(o=e?n.call(this,t,pn(this).val()):n)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=pn.map(o,function(n){return null==n?"":n+""})),(r=pn.valHooks[this.type]||pn.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&void 0!==r.set(this,o,"value")||(this.value=o))});if(o)return(r=pn.valHooks[o.type]||pn.valHooks[o.nodeName.toLowerCase()])&&"get"in r&&void 0!==(t=r.get(o,"value"))?t:"string"==typeof(t=o.value)?t.replace(vr,""):null==t?"":t}}),pn.extend({valHooks:{option:{get:function(n){var r=pn.find.attr(n,"value");return null!=r?r:V(pn.text(n))}},select:{get:function(n){var r,t,e,o=n.options,i=n.selectedIndex,a="select-one"===n.type,s=a?null:[],d=a?i+1:o.length;for(e=i<0?d:a?i:0;e<d;e++)if(((t=o[e]).selected||e===i)&&!t.disabled&&(!t.parentNode.disabled||!l(t.parentNode,"optgroup"))){if(r=pn(t).val(),a)return r;s.push(r)}return s},set:function(n,r){for(var t,e,o=n.options,i=pn.makeArray(r),a=o.length;a--;)((e=o[a]).selected=pn.inArray(pn.valHooks.option.get(e),i)>-1)&&(t=!0);return t||(n.selectedIndex=-1),i}}}}),pn.each(["radio","checkbox"],function(){pn.valHooks[this]={set:function(n,r){if(Array.isArray(r))return n.checked=pn.inArray(pn(n).val(),r)>-1}},cn.checkOn||(pn.valHooks[this].get=function(n){return null===n.getAttribute("value")?"on":n.value})});var xr=/^(?:focusinfocus|focusoutblur)$/;pn.extend(pn.event,{trigger:function(n,r,e,o){var i,a,l,s,d,c,p,m=[e||J],f=ln.call(n,"type")?n.type:n,u=ln.call(n,"namespace")?n.namespace.split("."):[];if(a=l=e=e||J,3!==e.nodeType&&8!==e.nodeType&&!xr.test(f+pn.event.triggered)&&(f.indexOf(".")>-1&&(f=(u=f.split(".")).shift(),u.sort()),d=f.indexOf(":")<0&&"on"+f,n=n[pn.expando]?n:new pn.Event(f,"object"==typeof n&&n),n.isTrigger=o?2:3,n.namespace=u.join("."),n.rnamespace=n.namespace?new RegExp("(^|\\.)"+u.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,n.result=void 0,n.target||(n.target=e),r=null==r?[n]:pn.makeArray(r,[n]),p=pn.event.special[f]||{},o||!p.trigger||!1!==p.trigger.apply(e,r))){if(!o&&!p.noBubble&&!pn.isWindow(e)){for(s=p.delegateType||f,xr.test(s+f)||(a=a.parentNode);a;a=a.parentNode)m.push(a),l=a;l===(e.ownerDocument||J)&&m.push(l.defaultView||l.parentWindow||t)}for(i=0;(a=m[i++])&&!n.isPropagationStopped();)n.type=i>1?s:p.bindType||f,(c=(In.get(a,"events")||{})[n.type]&&In.get(a,"handle"))&&c.apply(a,r),(c=d&&a[d])&&c.apply&&Nn(a)&&(n.result=c.apply(a,r),!1===n.result&&n.preventDefault());return n.type=f,o||n.isDefaultPrevented()||p._default&&!1!==p._default.apply(m.pop(),r)||!Nn(e)||d&&pn.isFunction(e[f])&&!pn.isWindow(e)&&((l=e[d])&&(e[d]=null),pn.event.triggered=f,e[f](),pn.event.triggered=void 0,l&&(e[d]=l)),n.result}},simulate:function(n,r,t){var e=pn.extend(new pn.Event,t,{type:n,isSimulated:!0});pn.event.trigger(e,null,r)}}),pn.fn.extend({trigger:function(n,r){return this.each(function(){pn.event.trigger(n,r,this)})},triggerHandler:function(n,r){var t=this[0];if(t)return pn.event.trigger(n,r,t,!0)}}),pn.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(n,r){pn.fn[r]=function(n,t){return arguments.length>0?this.on(r,null,n,t):this.trigger(r)}}),pn.fn.extend({hover:function(n,r){return this.mouseenter(n).mouseleave(r||n)}}),cn.focusin="onfocusin"in t,cn.focusin||pn.each({focus:"focusin",blur:"focusout"},function(n,r){var t=function(n){pn.event.simulate(r,n.target,pn.event.fix(n))};pn.event.special[r]={setup:function(){var e=this.ownerDocument||this,o=In.access(e,r);o||e.addEventListener(n,t,!0),In.access(e,r,(o||0)+1)},teardown:function(){var e=this.ownerDocument||this,o=In.access(e,r)-1;o?In.access(e,r,o):(e.removeEventListener(n,t,!0),In.remove(e,r))}}});var yr=t.location,wr=pn.now(),kr=/\?/;pn.parseXML=function(n){var r;if(!n||"string"!=typeof n)return null;try{r=(new t.DOMParser).parseFromString(n,"text/xml")}catch(n){r=void 0}return r&&!r.getElementsByTagName("parsererror").length||pn.error("Invalid XML: "+n),r};var _r=/\[\]$/,Er=/\r?\n/g,Tr=/^(?:submit|button|image|reset|file)$/i,Cr=/^(?:input|select|textarea|keygen)/i;pn.param=function(n,r){var t,e=[],o=function(n,r){var t=pn.isFunction(r)?r():r;e[e.length]=encodeURIComponent(n)+"="+encodeURIComponent(null==t?"":t)};if(Array.isArray(n)||n.jquery&&!pn.isPlainObject(n))pn.each(n,function(){o(this.name,this.value)});else for(t in n)$(t,n[t],r,o);return e.join("&")},pn.fn.extend({serialize:function(){return pn.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var n=pn.prop(this,"elements");return n?pn.makeArray(n):this}).filter(function(){var n=this.type;return this.name&&!pn(this).is(":disabled")&&Cr.test(this.nodeName)&&!Tr.test(n)&&(this.checked||!Bn.test(n))}).map(function(n,r){var t=pn(this).val();return null==t?null:Array.isArray(t)?pn.map(t,function(n){return{name:r.name,value:n.replace(Er,"\r\n")}}):{name:r.name,value:t.replace(Er,"\r\n")}}).get()}});var Ar=/%20/g,Sr=/#.*$/,Dr=/([?&])_=[^&]*/,Nr=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ir=/^(?:GET|HEAD)$/,jr=/^\/\//,Or={},Lr={},Pr="*/".concat("*"),Hr=J.createElement("a");Hr.href=yr.href,pn.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:yr.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(yr.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Pr,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":pn.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(n,r){return r?G(G(n,pn.ajaxSettings),r):G(pn.ajaxSettings,n)},ajaxPrefilter:Q(Or),ajaxTransport:Q(Lr),ajax:function(n,r){function e(n,r,e,l){var d,m,f,y,w,k=r;c||(c=!0,s&&t.clearTimeout(s),o=void 0,a=l||"",_.readyState=n>0?4:0,d=n>=200&&n<300||304===n,e&&(y=function(n,r,t){for(var e,o,i,a,l=n.contents,s=n.dataTypes;"*"===s[0];)s.shift(),void 0===e&&(e=n.mimeType||r.getResponseHeader("Content-Type"));if(e)for(o in l)if(l[o]&&l[o].test(e)){s.unshift(o);break}if(s[0]in t)i=s[0];else{for(o in t){if(!s[0]||n.converters[o+" "+s[0]]){i=o;break}a||(a=o)}i=i||a}if(i)return i!==s[0]&&s.unshift(i),t[i]}(u,_,e)),y=function(n,r,t,e){var o,i,a,l,s,d={},c=n.dataTypes.slice();if(c[1])for(a in n.converters)d[a.toLowerCase()]=n.converters[a];for(i=c.shift();i;)if(n.responseFields[i]&&(t[n.responseFields[i]]=r),!s&&e&&n.dataFilter&&(r=n.dataFilter(r,n.dataType)),s=i,i=c.shift())if("*"===i)i=s;else if("*"!==s&&s!==i){if(!(a=d[s+" "+i]||d["* "+i]))for(o in d)if((l=o.split(" "))[1]===i&&(a=d[s+" "+l[0]]||d["* "+l[0]])){!0===a?a=d[o]:!0!==d[o]&&(i=l[0],c.unshift(l[1]));break}if(!0!==a)if(a&&n.throws)r=a(r);else try{r=a(r)}catch(n){return{state:"parsererror",error:a?n:"No conversion from "+s+" to "+i}}}return{state:"success",data:r}}(u,y,_,d),d?(u.ifModified&&((w=_.getResponseHeader("Last-Modified"))&&(pn.lastModified[i]=w),(w=_.getResponseHeader("etag"))&&(pn.etag[i]=w)),204===n||"HEAD"===u.type?k="nocontent":304===n?k="notmodified":(k=y.state,m=y.data,d=!(f=y.error))):(f=k,!n&&k||(k="error",n<0&&(n=0))),_.status=n,_.statusText=(r||k)+"",d?b.resolveWith(g,[m,k,_]):b.rejectWith(g,[_,k,f]),_.statusCode(x),x=void 0,p&&h.trigger(d?"ajaxSuccess":"ajaxError",[_,u,d?m:f]),v.fireWith(g,[_,k]),p&&(h.trigger("ajaxComplete",[_,u]),--pn.active||pn.event.trigger("ajaxStop")))}"object"==typeof n&&(r=n,n=void 0),r=r||{};var o,i,a,l,s,d,c,p,m,f,u=pn.ajaxSetup({},r),g=u.context||u,h=u.context&&(g.nodeType||g.jquery)?pn(g):pn.event,b=pn.Deferred(),v=pn.Callbacks("once memory"),x=u.statusCode||{},y={},w={},k="canceled",_={readyState:0,getResponseHeader:function(n){var r;if(c){if(!l)for(l={};r=Nr.exec(a);)l[r[1].toLowerCase()]=r[2];r=l[n.toLowerCase()]}return null==r?null:r},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(n,r){return null==c&&(n=w[n.toLowerCase()]=w[n.toLowerCase()]||n,y[n]=r),this},overrideMimeType:function(n){return null==c&&(u.mimeType=n),this},statusCode:function(n){var r;if(n)if(c)_.always(n[_.status]);else for(r in n)x[r]=[x[r],n[r]];return this},abort:function(n){var r=n||k;return o&&o.abort(r),e(0,r),this}};if(b.promise(_),u.url=((n||u.url||yr.href)+"").replace(jr,yr.protocol+"//"),u.type=r.method||r.type||u.method||u.type,u.dataTypes=(u.dataType||"*").toLowerCase().match(Cn)||[""],null==u.crossDomain){d=J.createElement("a");try{d.href=u.url,d.href=d.href,u.crossDomain=Hr.protocol+"//"+Hr.host!=d.protocol+"//"+d.host}catch(n){u.crossDomain=!0}}if(u.data&&u.processData&&"string"!=typeof u.data&&(u.data=pn.param(u.data,u.traditional)),Y(Or,u,r,_),c)return _;(p=pn.event&&u.global)&&0==pn.active++&&pn.event.trigger("ajaxStart"),u.type=u.type.toUpperCase(),u.hasContent=!Ir.test(u.type),i=u.url.replace(Sr,""),u.hasContent?u.data&&u.processData&&0===(u.contentType||"").indexOf("application/x-www-form-urlencoded")&&(u.data=u.data.replace(Ar,"+")):(f=u.url.slice(i.length),u.data&&(i+=(kr.test(i)?"&":"?")+u.data,delete u.data),!1===u.cache&&(i=i.replace(Dr,"$1"),f=(kr.test(i)?"&":"?")+"_="+wr+++f),u.url=i+f),u.ifModified&&(pn.lastModified[i]&&_.setRequestHeader("If-Modified-Since",pn.lastModified[i]),pn.etag[i]&&_.setRequestHeader("If-None-Match",pn.etag[i])),(u.data&&u.hasContent&&!1!==u.contentType||r.contentType)&&_.setRequestHeader("Content-Type",u.contentType),_.setRequestHeader("Accept",u.dataTypes[0]&&u.accepts[u.dataTypes[0]]?u.accepts[u.dataTypes[0]]+("*"!==u.dataTypes[0]?", "+Pr+"; q=0.01":""):u.accepts["*"]);for(m in u.headers)_.setRequestHeader(m,u.headers[m]);if(u.beforeSend&&(!1===u.beforeSend.call(g,_,u)||c))return _.abort();if(k="abort",v.add(u.complete),_.done(u.success),_.fail(u.error),o=Y(Lr,u,r,_)){if(_.readyState=1,p&&h.trigger("ajaxSend",[_,u]),c)return _;u.async&&u.timeout>0&&(s=t.setTimeout(function(){_.abort("timeout")},u.timeout));try{c=!1,o.send(y,e)}catch(n){if(c)throw n;e(-1,n)}}else e(-1,"No Transport");return _},getJSON:function(n,r,t){return pn.get(n,r,t,"json")},getScript:function(n,r){return pn.get(n,void 0,r,"script")}}),pn.each(["get","post"],function(n,r){pn[r]=function(n,t,e,o){return pn.isFunction(t)&&(o=o||e,e=t,t=void 0),pn.ajax(pn.extend({url:n,type:r,dataType:o,data:t,success:e},pn.isPlainObject(n)&&n))}}),pn._evalUrl=function(n){return pn.ajax({url:n,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},pn.fn.extend({wrapAll:function(n){var r;return this[0]&&(pn.isFunction(n)&&(n=n.call(this[0])),r=pn(n,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&r.insertBefore(this[0]),r.map(function(){for(var n=this;n.firstElementChild;)n=n.firstElementChild;return n}).append(this)),this},wrapInner:function(n){return pn.isFunction(n)?this.each(function(r){pn(this).wrapInner(n.call(this,r))}):this.each(function(){var r=pn(this),t=r.contents();t.length?t.wrapAll(n):r.append(n)})},wrap:function(n){var r=pn.isFunction(n);return this.each(function(t){pn(this).wrapAll(r?n.call(this,t):n)})},unwrap:function(n){return this.parent(n).not("body").each(function(){pn(this).replaceWith(this.childNodes)}),this}}),pn.expr.pseudos.hidden=function(n){return!pn.expr.pseudos.visible(n)},pn.expr.pseudos.visible=function(n){return!!(n.offsetWidth||n.offsetHeight||n.getClientRects().length)},pn.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(n){}};var Rr={0:200,1223:204},Mr=pn.ajaxSettings.xhr();cn.cors=!!Mr&&"withCredentials"in Mr,cn.ajax=Mr=!!Mr,pn.ajaxTransport(function(n){var r,e;if(cn.cors||Mr&&!n.crossDomain)return{send:function(o,i){var a,l=n.xhr();if(l.open(n.type,n.url,n.async,n.username,n.password),n.xhrFields)for(a in n.xhrFields)l[a]=n.xhrFields[a];n.mimeType&&l.overrideMimeType&&l.overrideMimeType(n.mimeType),n.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest");for(a in o)l.setRequestHeader(a,o[a]);r=function(n){return function(){r&&(r=e=l.onload=l.onerror=l.onabort=l.onreadystatechange=null,"abort"===n?l.abort():"error"===n?"number"!=typeof l.status?i(0,"error"):i(l.status,l.statusText):i(Rr[l.status]||l.status,l.statusText,"text"!==(l.responseType||"text")||"string"!=typeof l.responseText?{binary:l.response}:{text:l.responseText},l.getAllResponseHeaders()))}},l.onload=r(),e=l.onerror=r("error"),void 0!==l.onabort?l.onabort=e:l.onreadystatechange=function(){4===l.readyState&&t.setTimeout(function(){r&&e()})},r=r("abort");try{l.send(n.hasContent&&n.data||null)}catch(n){if(r)throw n}},abort:function(){r&&r()}}}),pn.ajaxPrefilter(function(n){n.crossDomain&&(n.contents.script=!1)}),pn.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(n){return pn.globalEval(n),n}}}),pn.ajaxPrefilter("script",function(n){void 0===n.cache&&(n.cache=!1),n.crossDomain&&(n.type="GET")}),pn.ajaxTransport("script",function(n){if(n.crossDomain){var r,t;return{send:function(e,o){r=pn("<script>").prop({charset:n.scriptCharset,src:n.url}).on("load error",t=function(n){r.remove(),t=null,n&&o("error"===n.type?404:200,n.type)}),J.head.appendChild(r[0])},abort:function(){t&&t()}}}});var Fr=[],Wr=/(=)\?(?=&|$)|\?\?/;pn.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var n=Fr.pop()||pn.expando+"_"+wr++;return this[n]=!0,n}}),pn.ajaxPrefilter("json jsonp",function(n,r,e){var o,i,a,l=!1!==n.jsonp&&(Wr.test(n.url)?"url":"string"==typeof n.data&&0===(n.contentType||"").indexOf("application/x-www-form-urlencoded")&&Wr.test(n.data)&&"data");if(l||"jsonp"===n.dataTypes[0])return o=n.jsonpCallback=pn.isFunction(n.jsonpCallback)?n.jsonpCallback():n.jsonpCallback,l?n[l]=n[l].replace(Wr,"$1"+o):!1!==n.jsonp&&(n.url+=(kr.test(n.url)?"&":"?")+n.jsonp+"="+o),n.converters["script json"]=function(){return a||pn.error(o+" was not called"),a[0]},n.dataTypes[0]="json",i=t[o],t[o]=function(){a=arguments},e.always(function(){void 0===i?pn(t).removeProp(o):t[o]=i,n[o]&&(n.jsonpCallback=r.jsonpCallback,Fr.push(o)),a&&pn.isFunction(i)&&i(a[0]),a=i=void 0}),"script"}),cn.createHTMLDocument=function(){var n=J.implementation.createHTMLDocument("").body;return n.innerHTML="<form></form><form></form>",2===n.childNodes.length}(),pn.parseHTML=function(n,r,t){if("string"!=typeof n)return[];"boolean"==typeof r&&(t=r,r=!1);var e,o,i;return r||(cn.createHTMLDocument?((e=(r=J.implementation.createHTMLDocument("")).createElement("base")).href=J.location.href,r.head.appendChild(e)):r=J),o=yn.exec(n),i=!t&&[],o?[r.createElement(o[1])]:(o=w([n],r,i),i&&i.length&&pn(i).remove(),pn.merge([],o.childNodes))},pn.fn.load=function(n,r,t){var e,o,i,a=this,l=n.indexOf(" ");return l>-1&&(e=V(n.slice(l)),n=n.slice(0,l)),pn.isFunction(r)?(t=r,r=void 0):r&&"object"==typeof r&&(o="POST"),a.length>0&&pn.ajax({url:n,type:o||"GET",dataType:"html",data:r}).done(function(n){i=arguments,a.html(e?pn("<div>").append(pn.parseHTML(n)).find(e):n)}).always(t&&function(n,r){a.each(function(){t.apply(this,i||[n.responseText,r,n])})}),this},pn.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(n,r){pn.fn[r]=function(n){return this.on(r,n)}}),pn.expr.pseudos.animated=function(n){return pn.grep(pn.timers,function(r){return n===r.elem}).length},pn.offset={setOffset:function(n,r,t){var e,o,i,a,l,s,d=pn.css(n,"position"),c=pn(n),p={};"static"===d&&(n.style.position="relative"),l=c.offset(),i=pn.css(n,"top"),s=pn.css(n,"left"),("absolute"===d||"fixed"===d)&&(i+s).indexOf("auto")>-1?(a=(e=c.position()).top,o=e.left):(a=parseFloat(i)||0,o=parseFloat(s)||0),pn.isFunction(r)&&(r=r.call(n,t,pn.extend({},l))),null!=r.top&&(p.top=r.top-l.top+a),null!=r.left&&(p.left=r.left-l.left+o),"using"in r?r.using.call(n,p):c.css(p)}},pn.fn.extend({offset:function(n){if(arguments.length)return void 0===n?this:this.each(function(r){pn.offset.setOffset(this,n,r)});var r,t,e,o,i=this[0];if(i)return i.getClientRects().length?(e=i.getBoundingClientRect(),r=i.ownerDocument,t=r.documentElement,o=r.defaultView,{top:e.top+o.pageYOffset-t.clientTop,left:e.left+o.pageXOffset-t.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var n,r,t=this[0],e={top:0,left:0};return"fixed"===pn.css(t,"position")?r=t.getBoundingClientRect():(n=this.offsetParent(),r=this.offset(),l(n[0],"html")||(e=n.offset()),e={top:e.top+pn.css(n[0],"borderTopWidth",!0),left:e.left+pn.css(n[0],"borderLeftWidth",!0)}),{top:r.top-e.top-pn.css(t,"marginTop",!0),left:r.left-e.left-pn.css(t,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var n=this.offsetParent;n&&"static"===pn.css(n,"position");)n=n.offsetParent;return n||Kn})}}),pn.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(n,r){var t="pageYOffset"===r;pn.fn[n]=function(e){return Dn(this,function(n,e,o){var i;if(pn.isWindow(n)?i=n:9===n.nodeType&&(i=n.defaultView),void 0===o)return i?i[r]:n[e];i?i.scrollTo(t?i.pageXOffset:o,t?o:i.pageYOffset):n[e]=o},n,e,arguments.length)}}),pn.each(["top","left"],function(n,r){pn.cssHooks[r]=L(cn.pixelPosition,function(n,t){if(t)return t=O(n,r),tr.test(t)?pn(n).position()[r]+"px":t})}),pn.each({Height:"height",Width:"width"},function(n,r){pn.each({padding:"inner"+n,content:r,"":"outer"+n},function(t,e){pn.fn[e]=function(o,i){var a=arguments.length&&(t||"boolean"!=typeof o),l=t||(!0===o||!0===i?"margin":"border");return Dn(this,function(r,t,o){var i;return pn.isWindow(r)?0===e.indexOf("outer")?r["inner"+n]:r.document.documentElement["client"+n]:9===r.nodeType?(i=r.documentElement,Math.max(r.body["scroll"+n],i["scroll"+n],r.body["offset"+n],i["offset"+n],i["client"+n])):void 0===o?pn.css(r,t,l):pn.style(r,t,o,l)},r,a?o:void 0,a)}})}),pn.fn.extend({bind:function(n,r,t){return this.on(n,null,r,t)},unbind:function(n,r){return this.off(n,null,r)},delegate:function(n,r,t,e){return this.on(r,n,t,e)},undelegate:function(n,r,t){return 1===arguments.length?this.off(n,"**"):this.off(r,n||"**",t)}}),pn.holdReady=function(n){n?pn.readyWait++:pn.ready(!0)},pn.isArray=Array.isArray,pn.parseJSON=JSON.parse,pn.nodeName=l,void 0===(e=function(){return pn}.apply(r,[]))||(n.exports=e);var Br=t.jQuery,qr=t.$;return pn.noConflict=function(n){return t.$===pn&&(t.$=qr),n&&t.jQuery===pn&&(t.jQuery=Br),pn},o||(t.jQuery=t.$=pn),pn})},function(n,r,t){var e=t(3);"string"==typeof e&&(e=[[n.i,e,""]]);var o={hmr:!0};o.transform=void 0;t(5)(e,o);e.locals&&(n.exports=e.locals)},function(n,r,t){(r=n.exports=t(4)(void 0)).push([n.i,"@import url(//use.fontawesome.com/releases/v4.7.0/css/font-awesome-css.min.css);",""]),r.push([n.i,'@media print {\r\n  *,\r\n  *::before,\r\n  *::after {\r\n    text-shadow: none !important;\r\n    box-shadow: none !important; }\r\n\r\n  a,\r\n  a:visited {\r\n    text-decoration: underline; }\r\n\r\n  abbr[title]::after {\r\n    content: " (" attr(title) ")"; }\r\n\r\n  pre {\r\n    white-space: pre-wrap !important; }\r\n\r\n  pre,\r\n  blockquote {\r\n    border: 1px solid #999;\r\n    page-break-inside: avoid; }\r\n\r\n  thead {\r\n    display: table-header-group; }\r\n\r\n  tr,\r\n  img {\r\n    page-break-inside: avoid; }\r\n\r\n  p,\r\n  h2,\r\n  h3 {\r\n    orphans: 3;\r\n    widows: 3; }\r\n\r\n  h2,\r\n  h3 {\r\n    page-break-after: avoid; }\r\n\r\n  .navbar {\r\n    display: none; }\r\n\r\n  .badge {\r\n    border: 1px solid #000; }\r\n\r\n  .table {\r\n    border-collapse: collapse !important; }\r\n    .table td,\r\n    .table th {\r\n      background-color: #fff !important; }\r\n\r\n  .table-bordered th,\r\n  .table-bordered td {\r\n    border: 1px solid #ddd !important; } }\r\n*,\r\n*::before,\r\n*::after {\r\n  box-sizing: border-box; }\r\n\r\nhtml {\r\n  font-family: sans-serif;\r\n  line-height: 1.15;\r\n  -webkit-text-size-adjust: 100%;\r\n  -ms-text-size-adjust: 100%;\r\n  -ms-overflow-style: scrollbar;\r\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0); }\r\n\r\n@-ms-viewport {\r\n  width: device-width; }\r\narticle, aside, dialog, figcaption, figure, footer, header, hgroup, main, nav, section {\r\n  display: block; }\r\n\r\nbody {\r\n  margin: 0;\r\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\r\n  font-size: 1rem;\r\n  font-weight: 400;\r\n  line-height: 1.5;\r\n  color: #212529;\r\n  text-align: left;\r\n  background-color: #fff; }\r\n\r\n[tabindex="-1"]:focus {\r\n  outline: none !important; }\r\n\r\nhr {\r\n  box-sizing: content-box;\r\n  height: 0;\r\n  overflow: visible; }\r\n\r\nh1, h2, h3, h4, h5, h6 {\r\n  margin-top: 0;\r\n  margin-bottom: 0.5rem; }\r\n\r\np {\r\n  margin-top: 0;\r\n  margin-bottom: 1rem; }\r\n\r\nabbr[title],\r\nabbr[data-original-title] {\r\n  text-decoration: underline;\r\n  text-decoration: underline dotted;\r\n  cursor: help;\r\n  border-bottom: 0; }\r\n\r\naddress {\r\n  margin-bottom: 1rem;\r\n  font-style: normal;\r\n  line-height: inherit; }\r\n\r\nol,\r\nul,\r\ndl {\r\n  margin-top: 0;\r\n  margin-bottom: 1rem; }\r\n\r\nol ol,\r\nul ul,\r\nol ul,\r\nul ol {\r\n  margin-bottom: 0; }\r\n\r\ndt {\r\n  font-weight: 700; }\r\n\r\ndd {\r\n  margin-bottom: .5rem;\r\n  margin-left: 0; }\r\n\r\nblockquote {\r\n  margin: 0 0 1rem; }\r\n\r\ndfn {\r\n  font-style: italic; }\r\n\r\nb,\r\nstrong {\r\n  font-weight: bolder; }\r\n\r\nsmall {\r\n  font-size: 80%; }\r\n\r\nsub,\r\nsup {\r\n  position: relative;\r\n  font-size: 75%;\r\n  line-height: 0;\r\n  vertical-align: baseline; }\r\n\r\nsub {\r\n  bottom: -.25em; }\r\n\r\nsup {\r\n  top: -.5em; }\r\n\r\na {\r\n  color: #007bff;\r\n  text-decoration: none;\r\n  background-color: transparent;\r\n  -webkit-text-decoration-skip: objects; }\r\n  a:hover {\r\n    color: #0056b3;\r\n    text-decoration: underline; }\r\n\r\na:not([href]):not([tabindex]) {\r\n  color: inherit;\r\n  text-decoration: none; }\r\n  a:not([href]):not([tabindex]):focus, a:not([href]):not([tabindex]):hover {\r\n    color: inherit;\r\n    text-decoration: none; }\r\n  a:not([href]):not([tabindex]):focus {\r\n    outline: 0; }\r\n\r\npre,\r\ncode,\r\nkbd,\r\nsamp {\r\n  font-family: monospace, monospace;\r\n  font-size: 1em; }\r\n\r\npre {\r\n  margin-top: 0;\r\n  margin-bottom: 1rem;\r\n  overflow: auto;\r\n  -ms-overflow-style: scrollbar; }\r\n\r\nfigure {\r\n  margin: 0 0 1rem; }\r\n\r\nimg {\r\n  vertical-align: middle;\r\n  border-style: none; }\r\n\r\nsvg:not(:root) {\r\n  overflow: hidden; }\r\n\r\na,\r\narea,\r\nbutton,\r\n[role="button"],\r\ninput:not([type="range"]),\r\nlabel,\r\nselect,\r\nsummary,\r\ntextarea {\r\n  touch-action: manipulation; }\r\n\r\ntable {\r\n  border-collapse: collapse; }\r\n\r\ncaption {\r\n  padding-top: 0.75rem;\r\n  padding-bottom: 0.75rem;\r\n  color: #868e96;\r\n  text-align: left;\r\n  caption-side: bottom; }\r\n\r\nth {\r\n  text-align: inherit; }\r\n\r\nlabel {\r\n  display: inline-block;\r\n  margin-bottom: .5rem; }\r\n\r\nbutton {\r\n  border-radius: 0; }\r\n\r\nbutton:focus {\r\n  outline: 1px dotted;\r\n  outline: 5px auto -webkit-focus-ring-color; }\r\n\r\ninput,\r\nbutton,\r\nselect,\r\noptgroup,\r\ntextarea {\r\n  margin: 0;\r\n  font-family: inherit;\r\n  font-size: inherit;\r\n  line-height: inherit; }\r\n\r\nbutton,\r\ninput {\r\n  overflow: visible; }\r\n\r\nbutton,\r\nselect {\r\n  text-transform: none; }\r\n\r\nbutton,\r\nhtml [type="button"],\r\n[type="reset"],\r\n[type="submit"] {\r\n  -webkit-appearance: button; }\r\n\r\nbutton::-moz-focus-inner,\r\n[type="button"]::-moz-focus-inner,\r\n[type="reset"]::-moz-focus-inner,\r\n[type="submit"]::-moz-focus-inner {\r\n  padding: 0;\r\n  border-style: none; }\r\n\r\ninput[type="radio"],\r\ninput[type="checkbox"] {\r\n  box-sizing: border-box;\r\n  padding: 0; }\r\n\r\ninput[type="date"],\r\ninput[type="time"],\r\ninput[type="datetime-local"],\r\ninput[type="month"] {\r\n  -webkit-appearance: listbox; }\r\n\r\ntextarea {\r\n  overflow: auto;\r\n  resize: vertical; }\r\n\r\nfieldset {\r\n  min-width: 0;\r\n  padding: 0;\r\n  margin: 0;\r\n  border: 0; }\r\n\r\nlegend {\r\n  display: block;\r\n  width: 100%;\r\n  max-width: 100%;\r\n  padding: 0;\r\n  margin-bottom: .5rem;\r\n  font-size: 1.5rem;\r\n  line-height: inherit;\r\n  color: inherit;\r\n  white-space: normal; }\r\n\r\nprogress {\r\n  vertical-align: baseline; }\r\n\r\n[type="number"]::-webkit-inner-spin-button,\r\n[type="number"]::-webkit-outer-spin-button {\r\n  height: auto; }\r\n\r\n[type="search"] {\r\n  outline-offset: -2px;\r\n  -webkit-appearance: none; }\r\n\r\n[type="search"]::-webkit-search-cancel-button,\r\n[type="search"]::-webkit-search-decoration {\r\n  -webkit-appearance: none; }\r\n\r\n::-webkit-file-upload-button {\r\n  font: inherit;\r\n  -webkit-appearance: button; }\r\n\r\noutput {\r\n  display: inline-block; }\r\n\r\nsummary {\r\n  display: list-item; }\r\n\r\ntemplate {\r\n  display: none; }\r\n\r\n[hidden] {\r\n  display: none !important; }\r\n\r\nh1, h2, h3, h4, h5, h6,\r\n.h1, .h2, .h3, .h4, .h5, .h6 {\r\n  margin-bottom: 0.5rem;\r\n  font-family: inherit;\r\n  font-weight: 500;\r\n  line-height: 1.2;\r\n  color: inherit; }\r\n\r\nh1, .h1 {\r\n  font-size: 2.5rem; }\r\n\r\nh2, .h2 {\r\n  font-size: 2rem; }\r\n\r\nh3, .h3 {\r\n  font-size: 1.75rem; }\r\n\r\nh4, .h4 {\r\n  font-size: 1.5rem; }\r\n\r\nh5, .h5 {\r\n  font-size: 1.25rem; }\r\n\r\nh6, .h6 {\r\n  font-size: 1rem; }\r\n\r\n.lead {\r\n  font-size: 1.25rem;\r\n  font-weight: 300; }\r\n\r\n.display-1 {\r\n  font-size: 6rem;\r\n  font-weight: 300;\r\n  line-height: 1.2; }\r\n\r\n.display-2 {\r\n  font-size: 5.5rem;\r\n  font-weight: 300;\r\n  line-height: 1.2; }\r\n\r\n.display-3 {\r\n  font-size: 4.5rem;\r\n  font-weight: 300;\r\n  line-height: 1.2; }\r\n\r\n.display-4 {\r\n  font-size: 3.5rem;\r\n  font-weight: 300;\r\n  line-height: 1.2; }\r\n\r\nhr {\r\n  margin-top: 1rem;\r\n  margin-bottom: 1rem;\r\n  border: 0;\r\n  border-top: 1px solid rgba(0, 0, 0, 0.1); }\r\n\r\nsmall,\r\n.small {\r\n  font-size: 80%;\r\n  font-weight: 400; }\r\n\r\nmark,\r\n.mark {\r\n  padding: 0.2em;\r\n  background-color: #fcf8e3; }\r\n\r\n.list-unstyled {\r\n  padding-left: 0;\r\n  list-style: none; }\r\n\r\n.list-inline {\r\n  padding-left: 0;\r\n  list-style: none; }\r\n\r\n.list-inline-item {\r\n  display: inline-block; }\r\n  .list-inline-item:not(:last-child) {\r\n    margin-right: 5px; }\r\n\r\n.initialism {\r\n  font-size: 90%;\r\n  text-transform: uppercase; }\r\n\r\n.blockquote {\r\n  margin-bottom: 1rem;\r\n  font-size: 1.25rem; }\r\n\r\n.blockquote-footer {\r\n  display: block;\r\n  font-size: 80%;\r\n  color: #868e96; }\r\n  .blockquote-footer::before {\r\n    content: "\\2014   \\A0"; }\r\n\r\n.img-fluid {\r\n  max-width: 100%;\r\n  height: auto; }\r\n\r\n.img-thumbnail {\r\n  padding: 0.25rem;\r\n  background-color: #fff;\r\n  border: 1px solid #ddd;\r\n  border-radius: 0.25rem;\r\n  transition: all 0.2s ease-in-out;\r\n  max-width: 100%;\r\n  height: auto; }\r\n\r\n.figure {\r\n  display: inline-block; }\r\n\r\n.figure-img {\r\n  margin-bottom: 0.5rem;\r\n  line-height: 1; }\r\n\r\n.figure-caption {\r\n  font-size: 90%;\r\n  color: #868e96; }\r\n\r\n.container {\r\n  width: 100%;\r\n  padding-right: 15px;\r\n  padding-left: 15px;\r\n  margin-right: auto;\r\n  margin-left: auto; }\r\n  @media (min-width: 576px) {\r\n    .container {\r\n      max-width: 540px; } }\r\n  @media (min-width: 768px) {\r\n    .container {\r\n      max-width: 720px; } }\r\n  @media (min-width: 992px) {\r\n    .container {\r\n      max-width: 960px; } }\r\n  @media (min-width: 1200px) {\r\n    .container {\r\n      max-width: 1140px; } }\r\n\r\n.container-fluid {\r\n  width: 100%;\r\n  padding-right: 15px;\r\n  padding-left: 15px;\r\n  margin-right: auto;\r\n  margin-left: auto; }\r\n\r\n.row {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-right: -15px;\r\n  margin-left: -15px; }\r\n\r\n.no-gutters {\r\n  margin-right: 0;\r\n  margin-left: 0; }\r\n  .no-gutters > .col,\r\n  .no-gutters > [class*="col-"] {\r\n    padding-right: 0;\r\n    padding-left: 0; }\r\n\r\n.col-1, .col-2, .col-3, .col-4, .col-5, .col-6, .col-7, .col-8, .col-9, .col-10, .col-11, .col-12, .col,\r\n.col-auto, .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm,\r\n.col-sm-auto, .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12, .col-md,\r\n.col-md-auto, .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg,\r\n.col-lg-auto, .col-xl-1, .col-xl-2, .col-xl-3, .col-xl-4, .col-xl-5, .col-xl-6, .col-xl-7, .col-xl-8, .col-xl-9, .col-xl-10, .col-xl-11, .col-xl-12, .col-xl,\r\n.col-xl-auto {\r\n  position: relative;\r\n  width: 100%;\r\n  min-height: 1px;\r\n  padding-right: 15px;\r\n  padding-left: 15px; }\r\n\r\n.col {\r\n  flex-basis: 0;\r\n  flex-grow: 1;\r\n  max-width: 100%; }\r\n\r\n.col-auto {\r\n  flex: 0 0 auto;\r\n  width: auto;\r\n  max-width: none; }\r\n\r\n.col-1 {\r\n  flex: 0 0 8.3333333333%;\r\n  max-width: 8.3333333333%; }\r\n\r\n.col-2 {\r\n  flex: 0 0 16.6666666667%;\r\n  max-width: 16.6666666667%; }\r\n\r\n.col-3 {\r\n  flex: 0 0 25%;\r\n  max-width: 25%; }\r\n\r\n.col-4 {\r\n  flex: 0 0 33.3333333333%;\r\n  max-width: 33.3333333333%; }\r\n\r\n.col-5 {\r\n  flex: 0 0 41.6666666667%;\r\n  max-width: 41.6666666667%; }\r\n\r\n.col-6 {\r\n  flex: 0 0 50%;\r\n  max-width: 50%; }\r\n\r\n.col-7 {\r\n  flex: 0 0 58.3333333333%;\r\n  max-width: 58.3333333333%; }\r\n\r\n.col-8 {\r\n  flex: 0 0 66.6666666667%;\r\n  max-width: 66.6666666667%; }\r\n\r\n.col-9 {\r\n  flex: 0 0 75%;\r\n  max-width: 75%; }\r\n\r\n.col-10 {\r\n  flex: 0 0 83.3333333333%;\r\n  max-width: 83.3333333333%; }\r\n\r\n.col-11 {\r\n  flex: 0 0 91.6666666667%;\r\n  max-width: 91.6666666667%; }\r\n\r\n.col-12 {\r\n  flex: 0 0 100%;\r\n  max-width: 100%; }\r\n\r\n.order-first {\r\n  order: -1; }\r\n\r\n.order-1 {\r\n  order: 1; }\r\n\r\n.order-2 {\r\n  order: 2; }\r\n\r\n.order-3 {\r\n  order: 3; }\r\n\r\n.order-4 {\r\n  order: 4; }\r\n\r\n.order-5 {\r\n  order: 5; }\r\n\r\n.order-6 {\r\n  order: 6; }\r\n\r\n.order-7 {\r\n  order: 7; }\r\n\r\n.order-8 {\r\n  order: 8; }\r\n\r\n.order-9 {\r\n  order: 9; }\r\n\r\n.order-10 {\r\n  order: 10; }\r\n\r\n.order-11 {\r\n  order: 11; }\r\n\r\n.order-12 {\r\n  order: 12; }\r\n\r\n.offset-1 {\r\n  margin-left: 8.3333333333%; }\r\n\r\n.offset-2 {\r\n  margin-left: 16.6666666667%; }\r\n\r\n.offset-3 {\r\n  margin-left: 25%; }\r\n\r\n.offset-4 {\r\n  margin-left: 33.3333333333%; }\r\n\r\n.offset-5 {\r\n  margin-left: 41.6666666667%; }\r\n\r\n.offset-6 {\r\n  margin-left: 50%; }\r\n\r\n.offset-7 {\r\n  margin-left: 58.3333333333%; }\r\n\r\n.offset-8 {\r\n  margin-left: 66.6666666667%; }\r\n\r\n.offset-9 {\r\n  margin-left: 75%; }\r\n\r\n.offset-10 {\r\n  margin-left: 83.3333333333%; }\r\n\r\n.offset-11 {\r\n  margin-left: 91.6666666667%; }\r\n\r\n@media (min-width: 576px) {\r\n  .col-sm {\r\n    flex-basis: 0;\r\n    flex-grow: 1;\r\n    max-width: 100%; }\r\n\r\n  .col-sm-auto {\r\n    flex: 0 0 auto;\r\n    width: auto;\r\n    max-width: none; }\r\n\r\n  .col-sm-1 {\r\n    flex: 0 0 8.3333333333%;\r\n    max-width: 8.3333333333%; }\r\n\r\n  .col-sm-2 {\r\n    flex: 0 0 16.6666666667%;\r\n    max-width: 16.6666666667%; }\r\n\r\n  .col-sm-3 {\r\n    flex: 0 0 25%;\r\n    max-width: 25%; }\r\n\r\n  .col-sm-4 {\r\n    flex: 0 0 33.3333333333%;\r\n    max-width: 33.3333333333%; }\r\n\r\n  .col-sm-5 {\r\n    flex: 0 0 41.6666666667%;\r\n    max-width: 41.6666666667%; }\r\n\r\n  .col-sm-6 {\r\n    flex: 0 0 50%;\r\n    max-width: 50%; }\r\n\r\n  .col-sm-7 {\r\n    flex: 0 0 58.3333333333%;\r\n    max-width: 58.3333333333%; }\r\n\r\n  .col-sm-8 {\r\n    flex: 0 0 66.6666666667%;\r\n    max-width: 66.6666666667%; }\r\n\r\n  .col-sm-9 {\r\n    flex: 0 0 75%;\r\n    max-width: 75%; }\r\n\r\n  .col-sm-10 {\r\n    flex: 0 0 83.3333333333%;\r\n    max-width: 83.3333333333%; }\r\n\r\n  .col-sm-11 {\r\n    flex: 0 0 91.6666666667%;\r\n    max-width: 91.6666666667%; }\r\n\r\n  .col-sm-12 {\r\n    flex: 0 0 100%;\r\n    max-width: 100%; }\r\n\r\n  .order-sm-first {\r\n    order: -1; }\r\n\r\n  .order-sm-1 {\r\n    order: 1; }\r\n\r\n  .order-sm-2 {\r\n    order: 2; }\r\n\r\n  .order-sm-3 {\r\n    order: 3; }\r\n\r\n  .order-sm-4 {\r\n    order: 4; }\r\n\r\n  .order-sm-5 {\r\n    order: 5; }\r\n\r\n  .order-sm-6 {\r\n    order: 6; }\r\n\r\n  .order-sm-7 {\r\n    order: 7; }\r\n\r\n  .order-sm-8 {\r\n    order: 8; }\r\n\r\n  .order-sm-9 {\r\n    order: 9; }\r\n\r\n  .order-sm-10 {\r\n    order: 10; }\r\n\r\n  .order-sm-11 {\r\n    order: 11; }\r\n\r\n  .order-sm-12 {\r\n    order: 12; }\r\n\r\n  .offset-sm-0 {\r\n    margin-left: 0; }\r\n\r\n  .offset-sm-1 {\r\n    margin-left: 8.3333333333%; }\r\n\r\n  .offset-sm-2 {\r\n    margin-left: 16.6666666667%; }\r\n\r\n  .offset-sm-3 {\r\n    margin-left: 25%; }\r\n\r\n  .offset-sm-4 {\r\n    margin-left: 33.3333333333%; }\r\n\r\n  .offset-sm-5 {\r\n    margin-left: 41.6666666667%; }\r\n\r\n  .offset-sm-6 {\r\n    margin-left: 50%; }\r\n\r\n  .offset-sm-7 {\r\n    margin-left: 58.3333333333%; }\r\n\r\n  .offset-sm-8 {\r\n    margin-left: 66.6666666667%; }\r\n\r\n  .offset-sm-9 {\r\n    margin-left: 75%; }\r\n\r\n  .offset-sm-10 {\r\n    margin-left: 83.3333333333%; }\r\n\r\n  .offset-sm-11 {\r\n    margin-left: 91.6666666667%; } }\r\n@media (min-width: 768px) {\r\n  .col-md {\r\n    flex-basis: 0;\r\n    flex-grow: 1;\r\n    max-width: 100%; }\r\n\r\n  .col-md-auto {\r\n    flex: 0 0 auto;\r\n    width: auto;\r\n    max-width: none; }\r\n\r\n  .col-md-1 {\r\n    flex: 0 0 8.3333333333%;\r\n    max-width: 8.3333333333%; }\r\n\r\n  .col-md-2 {\r\n    flex: 0 0 16.6666666667%;\r\n    max-width: 16.6666666667%; }\r\n\r\n  .col-md-3 {\r\n    flex: 0 0 25%;\r\n    max-width: 25%; }\r\n\r\n  .col-md-4 {\r\n    flex: 0 0 33.3333333333%;\r\n    max-width: 33.3333333333%; }\r\n\r\n  .col-md-5 {\r\n    flex: 0 0 41.6666666667%;\r\n    max-width: 41.6666666667%; }\r\n\r\n  .col-md-6 {\r\n    flex: 0 0 50%;\r\n    max-width: 50%; }\r\n\r\n  .col-md-7 {\r\n    flex: 0 0 58.3333333333%;\r\n    max-width: 58.3333333333%; }\r\n\r\n  .col-md-8 {\r\n    flex: 0 0 66.6666666667%;\r\n    max-width: 66.6666666667%; }\r\n\r\n  .col-md-9 {\r\n    flex: 0 0 75%;\r\n    max-width: 75%; }\r\n\r\n  .col-md-10 {\r\n    flex: 0 0 83.3333333333%;\r\n    max-width: 83.3333333333%; }\r\n\r\n  .col-md-11 {\r\n    flex: 0 0 91.6666666667%;\r\n    max-width: 91.6666666667%; }\r\n\r\n  .col-md-12 {\r\n    flex: 0 0 100%;\r\n    max-width: 100%; }\r\n\r\n  .order-md-first {\r\n    order: -1; }\r\n\r\n  .order-md-1 {\r\n    order: 1; }\r\n\r\n  .order-md-2 {\r\n    order: 2; }\r\n\r\n  .order-md-3 {\r\n    order: 3; }\r\n\r\n  .order-md-4 {\r\n    order: 4; }\r\n\r\n  .order-md-5 {\r\n    order: 5; }\r\n\r\n  .order-md-6 {\r\n    order: 6; }\r\n\r\n  .order-md-7 {\r\n    order: 7; }\r\n\r\n  .order-md-8 {\r\n    order: 8; }\r\n\r\n  .order-md-9 {\r\n    order: 9; }\r\n\r\n  .order-md-10 {\r\n    order: 10; }\r\n\r\n  .order-md-11 {\r\n    order: 11; }\r\n\r\n  .order-md-12 {\r\n    order: 12; }\r\n\r\n  .offset-md-0 {\r\n    margin-left: 0; }\r\n\r\n  .offset-md-1 {\r\n    margin-left: 8.3333333333%; }\r\n\r\n  .offset-md-2 {\r\n    margin-left: 16.6666666667%; }\r\n\r\n  .offset-md-3 {\r\n    margin-left: 25%; }\r\n\r\n  .offset-md-4 {\r\n    margin-left: 33.3333333333%; }\r\n\r\n  .offset-md-5 {\r\n    margin-left: 41.6666666667%; }\r\n\r\n  .offset-md-6 {\r\n    margin-left: 50%; }\r\n\r\n  .offset-md-7 {\r\n    margin-left: 58.3333333333%; }\r\n\r\n  .offset-md-8 {\r\n    margin-left: 66.6666666667%; }\r\n\r\n  .offset-md-9 {\r\n    margin-left: 75%; }\r\n\r\n  .offset-md-10 {\r\n    margin-left: 83.3333333333%; }\r\n\r\n  .offset-md-11 {\r\n    margin-left: 91.6666666667%; } }\r\n@media (min-width: 992px) {\r\n  .col-lg {\r\n    flex-basis: 0;\r\n    flex-grow: 1;\r\n    max-width: 100%; }\r\n\r\n  .col-lg-auto {\r\n    flex: 0 0 auto;\r\n    width: auto;\r\n    max-width: none; }\r\n\r\n  .col-lg-1 {\r\n    flex: 0 0 8.3333333333%;\r\n    max-width: 8.3333333333%; }\r\n\r\n  .col-lg-2 {\r\n    flex: 0 0 16.6666666667%;\r\n    max-width: 16.6666666667%; }\r\n\r\n  .col-lg-3 {\r\n    flex: 0 0 25%;\r\n    max-width: 25%; }\r\n\r\n  .col-lg-4 {\r\n    flex: 0 0 33.3333333333%;\r\n    max-width: 33.3333333333%; }\r\n\r\n  .col-lg-5 {\r\n    flex: 0 0 41.6666666667%;\r\n    max-width: 41.6666666667%; }\r\n\r\n  .col-lg-6 {\r\n    flex: 0 0 50%;\r\n    max-width: 50%; }\r\n\r\n  .col-lg-7 {\r\n    flex: 0 0 58.3333333333%;\r\n    max-width: 58.3333333333%; }\r\n\r\n  .col-lg-8 {\r\n    flex: 0 0 66.6666666667%;\r\n    max-width: 66.6666666667%; }\r\n\r\n  .col-lg-9 {\r\n    flex: 0 0 75%;\r\n    max-width: 75%; }\r\n\r\n  .col-lg-10 {\r\n    flex: 0 0 83.3333333333%;\r\n    max-width: 83.3333333333%; }\r\n\r\n  .col-lg-11 {\r\n    flex: 0 0 91.6666666667%;\r\n    max-width: 91.6666666667%; }\r\n\r\n  .col-lg-12 {\r\n    flex: 0 0 100%;\r\n    max-width: 100%; }\r\n\r\n  .order-lg-first {\r\n    order: -1; }\r\n\r\n  .order-lg-1 {\r\n    order: 1; }\r\n\r\n  .order-lg-2 {\r\n    order: 2; }\r\n\r\n  .order-lg-3 {\r\n    order: 3; }\r\n\r\n  .order-lg-4 {\r\n    order: 4; }\r\n\r\n  .order-lg-5 {\r\n    order: 5; }\r\n\r\n  .order-lg-6 {\r\n    order: 6; }\r\n\r\n  .order-lg-7 {\r\n    order: 7; }\r\n\r\n  .order-lg-8 {\r\n    order: 8; }\r\n\r\n  .order-lg-9 {\r\n    order: 9; }\r\n\r\n  .order-lg-10 {\r\n    order: 10; }\r\n\r\n  .order-lg-11 {\r\n    order: 11; }\r\n\r\n  .order-lg-12 {\r\n    order: 12; }\r\n\r\n  .offset-lg-0 {\r\n    margin-left: 0; }\r\n\r\n  .offset-lg-1 {\r\n    margin-left: 8.3333333333%; }\r\n\r\n  .offset-lg-2 {\r\n    margin-left: 16.6666666667%; }\r\n\r\n  .offset-lg-3 {\r\n    margin-left: 25%; }\r\n\r\n  .offset-lg-4 {\r\n    margin-left: 33.3333333333%; }\r\n\r\n  .offset-lg-5 {\r\n    margin-left: 41.6666666667%; }\r\n\r\n  .offset-lg-6 {\r\n    margin-left: 50%; }\r\n\r\n  .offset-lg-7 {\r\n    margin-left: 58.3333333333%; }\r\n\r\n  .offset-lg-8 {\r\n    margin-left: 66.6666666667%; }\r\n\r\n  .offset-lg-9 {\r\n    margin-left: 75%; }\r\n\r\n  .offset-lg-10 {\r\n    margin-left: 83.3333333333%; }\r\n\r\n  .offset-lg-11 {\r\n    margin-left: 91.6666666667%; } }\r\n@media (min-width: 1200px) {\r\n  .col-xl {\r\n    flex-basis: 0;\r\n    flex-grow: 1;\r\n    max-width: 100%; }\r\n\r\n  .col-xl-auto {\r\n    flex: 0 0 auto;\r\n    width: auto;\r\n    max-width: none; }\r\n\r\n  .col-xl-1 {\r\n    flex: 0 0 8.3333333333%;\r\n    max-width: 8.3333333333%; }\r\n\r\n  .col-xl-2 {\r\n    flex: 0 0 16.6666666667%;\r\n    max-width: 16.6666666667%; }\r\n\r\n  .col-xl-3 {\r\n    flex: 0 0 25%;\r\n    max-width: 25%; }\r\n\r\n  .col-xl-4 {\r\n    flex: 0 0 33.3333333333%;\r\n    max-width: 33.3333333333%; }\r\n\r\n  .col-xl-5 {\r\n    flex: 0 0 41.6666666667%;\r\n    max-width: 41.6666666667%; }\r\n\r\n  .col-xl-6 {\r\n    flex: 0 0 50%;\r\n    max-width: 50%; }\r\n\r\n  .col-xl-7 {\r\n    flex: 0 0 58.3333333333%;\r\n    max-width: 58.3333333333%; }\r\n\r\n  .col-xl-8 {\r\n    flex: 0 0 66.6666666667%;\r\n    max-width: 66.6666666667%; }\r\n\r\n  .col-xl-9 {\r\n    flex: 0 0 75%;\r\n    max-width: 75%; }\r\n\r\n  .col-xl-10 {\r\n    flex: 0 0 83.3333333333%;\r\n    max-width: 83.3333333333%; }\r\n\r\n  .col-xl-11 {\r\n    flex: 0 0 91.6666666667%;\r\n    max-width: 91.6666666667%; }\r\n\r\n  .col-xl-12 {\r\n    flex: 0 0 100%;\r\n    max-width: 100%; }\r\n\r\n  .order-xl-first {\r\n    order: -1; }\r\n\r\n  .order-xl-1 {\r\n    order: 1; }\r\n\r\n  .order-xl-2 {\r\n    order: 2; }\r\n\r\n  .order-xl-3 {\r\n    order: 3; }\r\n\r\n  .order-xl-4 {\r\n    order: 4; }\r\n\r\n  .order-xl-5 {\r\n    order: 5; }\r\n\r\n  .order-xl-6 {\r\n    order: 6; }\r\n\r\n  .order-xl-7 {\r\n    order: 7; }\r\n\r\n  .order-xl-8 {\r\n    order: 8; }\r\n\r\n  .order-xl-9 {\r\n    order: 9; }\r\n\r\n  .order-xl-10 {\r\n    order: 10; }\r\n\r\n  .order-xl-11 {\r\n    order: 11; }\r\n\r\n  .order-xl-12 {\r\n    order: 12; }\r\n\r\n  .offset-xl-0 {\r\n    margin-left: 0; }\r\n\r\n  .offset-xl-1 {\r\n    margin-left: 8.3333333333%; }\r\n\r\n  .offset-xl-2 {\r\n    margin-left: 16.6666666667%; }\r\n\r\n  .offset-xl-3 {\r\n    margin-left: 25%; }\r\n\r\n  .offset-xl-4 {\r\n    margin-left: 33.3333333333%; }\r\n\r\n  .offset-xl-5 {\r\n    margin-left: 41.6666666667%; }\r\n\r\n  .offset-xl-6 {\r\n    margin-left: 50%; }\r\n\r\n  .offset-xl-7 {\r\n    margin-left: 58.3333333333%; }\r\n\r\n  .offset-xl-8 {\r\n    margin-left: 66.6666666667%; }\r\n\r\n  .offset-xl-9 {\r\n    margin-left: 75%; }\r\n\r\n  .offset-xl-10 {\r\n    margin-left: 83.3333333333%; }\r\n\r\n  .offset-xl-11 {\r\n    margin-left: 91.6666666667%; } }\r\n.form-control {\r\n  display: block;\r\n  width: 100%;\r\n  padding: 0.375rem 0.75rem;\r\n  font-size: 1rem;\r\n  line-height: 1.5;\r\n  color: #495057;\r\n  background-color: #fff;\r\n  background-image: none;\r\n  background-clip: padding-box;\r\n  border: 1px solid #ced4da;\r\n  border-radius: 0.25rem;\r\n  transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s; }\r\n  .form-control::-ms-expand {\r\n    background-color: transparent;\r\n    border: 0; }\r\n  .form-control:focus {\r\n    color: #495057;\r\n    background-color: #fff;\r\n    border-color: #80bdff;\r\n    outline: none;\r\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); }\r\n  .form-control::placeholder {\r\n    color: #868e96;\r\n    opacity: 1; }\r\n  .form-control:disabled, .form-control[readonly] {\r\n    background-color: #e9ecef;\r\n    opacity: 1; }\r\n\r\nselect.form-control:not([size]):not([multiple]) {\r\n  height: calc(2.25rem + 2px); }\r\nselect.form-control:focus::-ms-value {\r\n  color: #495057;\r\n  background-color: #fff; }\r\n\r\n.form-control-file,\r\n.form-control-range {\r\n  display: block; }\r\n\r\n.col-form-label {\r\n  padding-top: calc(0.375rem + 1px);\r\n  padding-bottom: calc(0.375rem + 1px);\r\n  margin-bottom: 0;\r\n  line-height: 1.5; }\r\n\r\n.col-form-label-lg {\r\n  padding-top: calc(0.5rem + 1px);\r\n  padding-bottom: calc(0.5rem + 1px);\r\n  font-size: 1.25rem;\r\n  line-height: 1.5; }\r\n\r\n.col-form-label-sm {\r\n  padding-top: calc(0.25rem + 1px);\r\n  padding-bottom: calc(0.25rem + 1px);\r\n  font-size: 0.875rem;\r\n  line-height: 1.5; }\r\n\r\n.col-form-legend {\r\n  padding-top: 0.375rem;\r\n  padding-bottom: 0.375rem;\r\n  margin-bottom: 0;\r\n  font-size: 1rem; }\r\n\r\n.form-control-plaintext {\r\n  padding-top: 0.375rem;\r\n  padding-bottom: 0.375rem;\r\n  margin-bottom: 0;\r\n  line-height: 1.5;\r\n  background-color: transparent;\r\n  border: solid transparent;\r\n  border-width: 1px 0; }\r\n  .form-control-plaintext.form-control-sm, .form-control-plaintext.form-control-lg {\r\n    padding-right: 0;\r\n    padding-left: 0; }\r\n\r\n.form-control-sm {\r\n  padding: 0.25rem 0.5rem;\r\n  font-size: 0.875rem;\r\n  line-height: 1.5;\r\n  border-radius: 0.2rem; }\r\n\r\nselect.form-control-sm:not([size]):not([multiple]) {\r\n  height: calc(1.8125rem + 2px); }\r\n\r\n.form-control-lg {\r\n  padding: 0.5rem 1rem;\r\n  font-size: 1.25rem;\r\n  line-height: 1.5;\r\n  border-radius: 0.3rem; }\r\n\r\nselect.form-control-lg:not([size]):not([multiple]) {\r\n  height: calc(2.875rem + 2px); }\r\n\r\n.form-group {\r\n  margin-bottom: 1rem; }\r\n\r\n.form-text {\r\n  display: block;\r\n  margin-top: 0.25rem; }\r\n\r\n.form-row {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-right: -5px;\r\n  margin-left: -5px; }\r\n  .form-row > .col,\r\n  .form-row > [class*="col-"] {\r\n    padding-right: 5px;\r\n    padding-left: 5px; }\r\n\r\n.form-check {\r\n  position: relative;\r\n  display: block;\r\n  margin-bottom: 0.5rem; }\r\n  .form-check.disabled .form-check-label {\r\n    color: #868e96; }\r\n\r\n.form-check-label {\r\n  padding-left: 1.25rem;\r\n  margin-bottom: 0; }\r\n\r\n.form-check-input {\r\n  position: absolute;\r\n  margin-top: 0.25rem;\r\n  margin-left: -1.25rem; }\r\n\r\n.form-check-inline {\r\n  display: inline-block;\r\n  margin-right: 0.75rem; }\r\n  .form-check-inline .form-check-label {\r\n    vertical-align: middle; }\r\n\r\n.valid-feedback {\r\n  display: none;\r\n  margin-top: .25rem;\r\n  font-size: .875rem;\r\n  color: #28a745; }\r\n\r\n.valid-tooltip {\r\n  position: absolute;\r\n  top: 100%;\r\n  z-index: 5;\r\n  display: none;\r\n  width: 250px;\r\n  padding: .5rem;\r\n  margin-top: .1rem;\r\n  font-size: .875rem;\r\n  line-height: 1;\r\n  color: #fff;\r\n  background-color: rgba(40, 167, 69, 0.8);\r\n  border-radius: .2rem; }\r\n\r\n.was-validated .form-control:valid, .form-control.is-valid,\r\n.was-validated .custom-select:valid,\r\n.custom-select.is-valid {\r\n  border-color: #28a745; }\r\n  .was-validated .form-control:valid:focus, .form-control.is-valid:focus,\r\n  .was-validated .custom-select:valid:focus,\r\n  .custom-select.is-valid:focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25); }\r\n  .was-validated .form-control:valid ~ .valid-feedback,\r\n  .was-validated .form-control:valid ~ .valid-tooltip, .form-control.is-valid ~ .valid-feedback,\r\n  .form-control.is-valid ~ .valid-tooltip,\r\n  .was-validated .custom-select:valid ~ .valid-feedback,\r\n  .was-validated .custom-select:valid ~ .valid-tooltip,\r\n  .custom-select.is-valid ~ .valid-feedback,\r\n  .custom-select.is-valid ~ .valid-tooltip {\r\n    display: block; }\r\n\r\n.was-validated .form-check-input:valid + .form-check-label, .form-check-input.is-valid + .form-check-label {\r\n  color: #28a745; }\r\n\r\n.was-validated .custom-control-input:valid ~ .custom-control-indicator, .custom-control-input.is-valid ~ .custom-control-indicator {\r\n  background-color: rgba(40, 167, 69, 0.25); }\r\n.was-validated .custom-control-input:valid ~ .custom-control-description, .custom-control-input.is-valid ~ .custom-control-description {\r\n  color: #28a745; }\r\n\r\n.was-validated .custom-file-input:valid ~ .custom-file-control, .custom-file-input.is-valid ~ .custom-file-control {\r\n  border-color: #28a745; }\r\n  .was-validated .custom-file-input:valid ~ .custom-file-control::before, .custom-file-input.is-valid ~ .custom-file-control::before {\r\n    border-color: inherit; }\r\n.was-validated .custom-file-input:valid:focus, .custom-file-input.is-valid:focus {\r\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25); }\r\n\r\n.invalid-feedback {\r\n  display: none;\r\n  margin-top: .25rem;\r\n  font-size: .875rem;\r\n  color: #dc3545; }\r\n\r\n.invalid-tooltip {\r\n  position: absolute;\r\n  top: 100%;\r\n  z-index: 5;\r\n  display: none;\r\n  width: 250px;\r\n  padding: .5rem;\r\n  margin-top: .1rem;\r\n  font-size: .875rem;\r\n  line-height: 1;\r\n  color: #fff;\r\n  background-color: rgba(220, 53, 69, 0.8);\r\n  border-radius: .2rem; }\r\n\r\n.was-validated .form-control:invalid, .form-control.is-invalid,\r\n.was-validated .custom-select:invalid,\r\n.custom-select.is-invalid {\r\n  border-color: #dc3545; }\r\n  .was-validated .form-control:invalid:focus, .form-control.is-invalid:focus,\r\n  .was-validated .custom-select:invalid:focus,\r\n  .custom-select.is-invalid:focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25); }\r\n  .was-validated .form-control:invalid ~ .invalid-feedback,\r\n  .was-validated .form-control:invalid ~ .invalid-tooltip, .form-control.is-invalid ~ .invalid-feedback,\r\n  .form-control.is-invalid ~ .invalid-tooltip,\r\n  .was-validated .custom-select:invalid ~ .invalid-feedback,\r\n  .was-validated .custom-select:invalid ~ .invalid-tooltip,\r\n  .custom-select.is-invalid ~ .invalid-feedback,\r\n  .custom-select.is-invalid ~ .invalid-tooltip {\r\n    display: block; }\r\n\r\n.was-validated .form-check-input:invalid + .form-check-label, .form-check-input.is-invalid + .form-check-label {\r\n  color: #dc3545; }\r\n\r\n.was-validated .custom-control-input:invalid ~ .custom-control-indicator, .custom-control-input.is-invalid ~ .custom-control-indicator {\r\n  background-color: rgba(220, 53, 69, 0.25); }\r\n.was-validated .custom-control-input:invalid ~ .custom-control-description, .custom-control-input.is-invalid ~ .custom-control-description {\r\n  color: #dc3545; }\r\n\r\n.was-validated .custom-file-input:invalid ~ .custom-file-control, .custom-file-input.is-invalid ~ .custom-file-control {\r\n  border-color: #dc3545; }\r\n  .was-validated .custom-file-input:invalid ~ .custom-file-control::before, .custom-file-input.is-invalid ~ .custom-file-control::before {\r\n    border-color: inherit; }\r\n.was-validated .custom-file-input:invalid:focus, .custom-file-input.is-invalid:focus {\r\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25); }\r\n\r\n.form-inline {\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  align-items: center; }\r\n  .form-inline .form-check {\r\n    width: 100%; }\r\n  @media (min-width: 576px) {\r\n    .form-inline label {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      margin-bottom: 0; }\r\n    .form-inline .form-group {\r\n      display: flex;\r\n      flex: 0 0 auto;\r\n      flex-flow: row wrap;\r\n      align-items: center;\r\n      margin-bottom: 0; }\r\n    .form-inline .form-control {\r\n      display: inline-block;\r\n      width: auto;\r\n      vertical-align: middle; }\r\n    .form-inline .form-control-plaintext {\r\n      display: inline-block; }\r\n    .form-inline .input-group {\r\n      width: auto; }\r\n    .form-inline .form-check {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      width: auto;\r\n      margin-top: 0;\r\n      margin-bottom: 0; }\r\n    .form-inline .form-check-label {\r\n      padding-left: 0; }\r\n    .form-inline .form-check-input {\r\n      position: relative;\r\n      margin-top: 0;\r\n      margin-right: 0.25rem;\r\n      margin-left: 0; }\r\n    .form-inline .custom-control {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      padding-left: 0; }\r\n    .form-inline .custom-control-indicator {\r\n      position: static;\r\n      display: inline-block;\r\n      margin-right: 0.25rem;\r\n      vertical-align: text-bottom; }\r\n    .form-inline .has-feedback .form-control-feedback {\r\n      top: 0; } }\r\n\r\n.btn {\r\n  display: inline-block;\r\n  font-weight: 400;\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  vertical-align: middle;\r\n  user-select: none;\r\n  border: 1px solid transparent;\r\n  padding: 0.375rem 0.75rem;\r\n  font-size: 1rem;\r\n  line-height: 1.5;\r\n  border-radius: 0.25rem;\r\n  transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out; }\r\n  .btn:focus, .btn:hover {\r\n    text-decoration: none; }\r\n  .btn:focus, .btn.focus {\r\n    outline: 0;\r\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); }\r\n  .btn.disabled, .btn:disabled {\r\n    opacity: .65; }\r\n  .btn:not([disabled]):not(.disabled):active, .btn:not([disabled]):not(.disabled).active {\r\n    background-image: none; }\r\n\r\na.btn.disabled,\r\nfieldset[disabled] a.btn {\r\n  pointer-events: none; }\r\n\r\n.btn-primary {\r\n  color: #fff;\r\n  background-color: #007bff;\r\n  border-color: #007bff; }\r\n  .btn-primary:hover {\r\n    color: #fff;\r\n    background-color: #0069d9;\r\n    border-color: #0062cc; }\r\n  .btn-primary:focus, .btn-primary.focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5); }\r\n  .btn-primary.disabled, .btn-primary:disabled {\r\n    background-color: #007bff;\r\n    border-color: #007bff; }\r\n  .btn-primary:not([disabled]):not(.disabled):active, .btn-primary:not([disabled]):not(.disabled).active, .show > .btn-primary.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #0062cc;\r\n    border-color: #005cbf;\r\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5); }\r\n\r\n.btn-secondary {\r\n  color: #fff;\r\n  background-color: #868e96;\r\n  border-color: #868e96; }\r\n  .btn-secondary:hover {\r\n    color: #fff;\r\n    background-color: #727b84;\r\n    border-color: #6c757d; }\r\n  .btn-secondary:focus, .btn-secondary.focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(134, 142, 150, 0.5); }\r\n  .btn-secondary.disabled, .btn-secondary:disabled {\r\n    background-color: #868e96;\r\n    border-color: #868e96; }\r\n  .btn-secondary:not([disabled]):not(.disabled):active, .btn-secondary:not([disabled]):not(.disabled).active, .show > .btn-secondary.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #6c757d;\r\n    border-color: #666e76;\r\n    box-shadow: 0 0 0 0.2rem rgba(134, 142, 150, 0.5); }\r\n\r\n.btn-success {\r\n  color: #fff;\r\n  background-color: #28a745;\r\n  border-color: #28a745; }\r\n  .btn-success:hover {\r\n    color: #fff;\r\n    background-color: #218838;\r\n    border-color: #1e7e34; }\r\n  .btn-success:focus, .btn-success.focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5); }\r\n  .btn-success.disabled, .btn-success:disabled {\r\n    background-color: #28a745;\r\n    border-color: #28a745; }\r\n  .btn-success:not([disabled]):not(.disabled):active, .btn-success:not([disabled]):not(.disabled).active, .show > .btn-success.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #1e7e34;\r\n    border-color: #1c7430;\r\n    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5); }\r\n\r\n.btn-info {\r\n  color: #fff;\r\n  background-color: #17a2b8;\r\n  border-color: #17a2b8; }\r\n  .btn-info:hover {\r\n    color: #fff;\r\n    background-color: #138496;\r\n    border-color: #117a8b; }\r\n  .btn-info:focus, .btn-info.focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5); }\r\n  .btn-info.disabled, .btn-info:disabled {\r\n    background-color: #17a2b8;\r\n    border-color: #17a2b8; }\r\n  .btn-info:not([disabled]):not(.disabled):active, .btn-info:not([disabled]):not(.disabled).active, .show > .btn-info.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #117a8b;\r\n    border-color: #10707f;\r\n    box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5); }\r\n\r\n.btn-warning {\r\n  color: #111;\r\n  background-color: #ffc107;\r\n  border-color: #ffc107; }\r\n  .btn-warning:hover {\r\n    color: #111;\r\n    background-color: #e0a800;\r\n    border-color: #d39e00; }\r\n  .btn-warning:focus, .btn-warning.focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5); }\r\n  .btn-warning.disabled, .btn-warning:disabled {\r\n    background-color: #ffc107;\r\n    border-color: #ffc107; }\r\n  .btn-warning:not([disabled]):not(.disabled):active, .btn-warning:not([disabled]):not(.disabled).active, .show > .btn-warning.dropdown-toggle {\r\n    color: #111;\r\n    background-color: #d39e00;\r\n    border-color: #c69500;\r\n    box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5); }\r\n\r\n.btn-danger {\r\n  color: #fff;\r\n  background-color: #dc3545;\r\n  border-color: #dc3545; }\r\n  .btn-danger:hover {\r\n    color: #fff;\r\n    background-color: #c82333;\r\n    border-color: #bd2130; }\r\n  .btn-danger:focus, .btn-danger.focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5); }\r\n  .btn-danger.disabled, .btn-danger:disabled {\r\n    background-color: #dc3545;\r\n    border-color: #dc3545; }\r\n  .btn-danger:not([disabled]):not(.disabled):active, .btn-danger:not([disabled]):not(.disabled).active, .show > .btn-danger.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #bd2130;\r\n    border-color: #b21f2d;\r\n    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5); }\r\n\r\n.btn-light {\r\n  color: #111;\r\n  background-color: #f8f9fa;\r\n  border-color: #f8f9fa; }\r\n  .btn-light:hover {\r\n    color: #111;\r\n    background-color: #e2e6ea;\r\n    border-color: #dae0e5; }\r\n  .btn-light:focus, .btn-light.focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5); }\r\n  .btn-light.disabled, .btn-light:disabled {\r\n    background-color: #f8f9fa;\r\n    border-color: #f8f9fa; }\r\n  .btn-light:not([disabled]):not(.disabled):active, .btn-light:not([disabled]):not(.disabled).active, .show > .btn-light.dropdown-toggle {\r\n    color: #111;\r\n    background-color: #dae0e5;\r\n    border-color: #d3d9df;\r\n    box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5); }\r\n\r\n.btn-dark {\r\n  color: #fff;\r\n  background-color: #343a40;\r\n  border-color: #343a40; }\r\n  .btn-dark:hover {\r\n    color: #fff;\r\n    background-color: #23272b;\r\n    border-color: #1d2124; }\r\n  .btn-dark:focus, .btn-dark.focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5); }\r\n  .btn-dark.disabled, .btn-dark:disabled {\r\n    background-color: #343a40;\r\n    border-color: #343a40; }\r\n  .btn-dark:not([disabled]):not(.disabled):active, .btn-dark:not([disabled]):not(.disabled).active, .show > .btn-dark.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #1d2124;\r\n    border-color: #171a1d;\r\n    box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5); }\r\n\r\n.btn-outline-primary {\r\n  color: #007bff;\r\n  background-color: transparent;\r\n  background-image: none;\r\n  border-color: #007bff; }\r\n  .btn-outline-primary:hover {\r\n    color: #fff;\r\n    background-color: #007bff;\r\n    border-color: #007bff; }\r\n  .btn-outline-primary:focus, .btn-outline-primary.focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5); }\r\n  .btn-outline-primary.disabled, .btn-outline-primary:disabled {\r\n    color: #007bff;\r\n    background-color: transparent; }\r\n  .btn-outline-primary:not([disabled]):not(.disabled):active, .btn-outline-primary:not([disabled]):not(.disabled).active, .show > .btn-outline-primary.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #007bff;\r\n    border-color: #007bff;\r\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5); }\r\n\r\n.btn-outline-secondary {\r\n  color: #868e96;\r\n  background-color: transparent;\r\n  background-image: none;\r\n  border-color: #868e96; }\r\n  .btn-outline-secondary:hover {\r\n    color: #fff;\r\n    background-color: #868e96;\r\n    border-color: #868e96; }\r\n  .btn-outline-secondary:focus, .btn-outline-secondary.focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(134, 142, 150, 0.5); }\r\n  .btn-outline-secondary.disabled, .btn-outline-secondary:disabled {\r\n    color: #868e96;\r\n    background-color: transparent; }\r\n  .btn-outline-secondary:not([disabled]):not(.disabled):active, .btn-outline-secondary:not([disabled]):not(.disabled).active, .show > .btn-outline-secondary.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #868e96;\r\n    border-color: #868e96;\r\n    box-shadow: 0 0 0 0.2rem rgba(134, 142, 150, 0.5); }\r\n\r\n.btn-outline-success {\r\n  color: #28a745;\r\n  background-color: transparent;\r\n  background-image: none;\r\n  border-color: #28a745; }\r\n  .btn-outline-success:hover {\r\n    color: #fff;\r\n    background-color: #28a745;\r\n    border-color: #28a745; }\r\n  .btn-outline-success:focus, .btn-outline-success.focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5); }\r\n  .btn-outline-success.disabled, .btn-outline-success:disabled {\r\n    color: #28a745;\r\n    background-color: transparent; }\r\n  .btn-outline-success:not([disabled]):not(.disabled):active, .btn-outline-success:not([disabled]):not(.disabled).active, .show > .btn-outline-success.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #28a745;\r\n    border-color: #28a745;\r\n    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5); }\r\n\r\n.btn-outline-info {\r\n  color: #17a2b8;\r\n  background-color: transparent;\r\n  background-image: none;\r\n  border-color: #17a2b8; }\r\n  .btn-outline-info:hover {\r\n    color: #fff;\r\n    background-color: #17a2b8;\r\n    border-color: #17a2b8; }\r\n  .btn-outline-info:focus, .btn-outline-info.focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5); }\r\n  .btn-outline-info.disabled, .btn-outline-info:disabled {\r\n    color: #17a2b8;\r\n    background-color: transparent; }\r\n  .btn-outline-info:not([disabled]):not(.disabled):active, .btn-outline-info:not([disabled]):not(.disabled).active, .show > .btn-outline-info.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #17a2b8;\r\n    border-color: #17a2b8;\r\n    box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5); }\r\n\r\n.btn-outline-warning {\r\n  color: #ffc107;\r\n  background-color: transparent;\r\n  background-image: none;\r\n  border-color: #ffc107; }\r\n  .btn-outline-warning:hover {\r\n    color: #fff;\r\n    background-color: #ffc107;\r\n    border-color: #ffc107; }\r\n  .btn-outline-warning:focus, .btn-outline-warning.focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5); }\r\n  .btn-outline-warning.disabled, .btn-outline-warning:disabled {\r\n    color: #ffc107;\r\n    background-color: transparent; }\r\n  .btn-outline-warning:not([disabled]):not(.disabled):active, .btn-outline-warning:not([disabled]):not(.disabled).active, .show > .btn-outline-warning.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #ffc107;\r\n    border-color: #ffc107;\r\n    box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5); }\r\n\r\n.btn-outline-danger {\r\n  color: #dc3545;\r\n  background-color: transparent;\r\n  background-image: none;\r\n  border-color: #dc3545; }\r\n  .btn-outline-danger:hover {\r\n    color: #fff;\r\n    background-color: #dc3545;\r\n    border-color: #dc3545; }\r\n  .btn-outline-danger:focus, .btn-outline-danger.focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5); }\r\n  .btn-outline-danger.disabled, .btn-outline-danger:disabled {\r\n    color: #dc3545;\r\n    background-color: transparent; }\r\n  .btn-outline-danger:not([disabled]):not(.disabled):active, .btn-outline-danger:not([disabled]):not(.disabled).active, .show > .btn-outline-danger.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #dc3545;\r\n    border-color: #dc3545;\r\n    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5); }\r\n\r\n.btn-outline-light {\r\n  color: #f8f9fa;\r\n  background-color: transparent;\r\n  background-image: none;\r\n  border-color: #f8f9fa; }\r\n  .btn-outline-light:hover {\r\n    color: #212529;\r\n    background-color: #f8f9fa;\r\n    border-color: #f8f9fa; }\r\n  .btn-outline-light:focus, .btn-outline-light.focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5); }\r\n  .btn-outline-light.disabled, .btn-outline-light:disabled {\r\n    color: #f8f9fa;\r\n    background-color: transparent; }\r\n  .btn-outline-light:not([disabled]):not(.disabled):active, .btn-outline-light:not([disabled]):not(.disabled).active, .show > .btn-outline-light.dropdown-toggle {\r\n    color: #212529;\r\n    background-color: #f8f9fa;\r\n    border-color: #f8f9fa;\r\n    box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5); }\r\n\r\n.btn-outline-dark {\r\n  color: #343a40;\r\n  background-color: transparent;\r\n  background-image: none;\r\n  border-color: #343a40; }\r\n  .btn-outline-dark:hover {\r\n    color: #fff;\r\n    background-color: #343a40;\r\n    border-color: #343a40; }\r\n  .btn-outline-dark:focus, .btn-outline-dark.focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5); }\r\n  .btn-outline-dark.disabled, .btn-outline-dark:disabled {\r\n    color: #343a40;\r\n    background-color: transparent; }\r\n  .btn-outline-dark:not([disabled]):not(.disabled):active, .btn-outline-dark:not([disabled]):not(.disabled).active, .show > .btn-outline-dark.dropdown-toggle {\r\n    color: #fff;\r\n    background-color: #343a40;\r\n    border-color: #343a40;\r\n    box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5); }\r\n\r\n.btn-link {\r\n  font-weight: 400;\r\n  color: #007bff;\r\n  background-color: transparent; }\r\n  .btn-link:hover {\r\n    color: #0056b3;\r\n    text-decoration: underline;\r\n    background-color: transparent;\r\n    border-color: transparent; }\r\n  .btn-link:focus, .btn-link.focus {\r\n    border-color: transparent;\r\n    box-shadow: none; }\r\n  .btn-link:disabled, .btn-link.disabled {\r\n    color: #868e96; }\r\n\r\n.btn-lg {\r\n  padding: 0.5rem 1rem;\r\n  font-size: 1.25rem;\r\n  line-height: 1.5;\r\n  border-radius: 0.3rem; }\r\n\r\n.btn-sm {\r\n  padding: 0.25rem 0.5rem;\r\n  font-size: 0.875rem;\r\n  line-height: 1.5;\r\n  border-radius: 0.2rem; }\r\n\r\n.btn-block {\r\n  display: block;\r\n  width: 100%; }\r\n\r\n.btn-block + .btn-block {\r\n  margin-top: 0.5rem; }\r\n\r\ninput[type="submit"].btn-block,\r\ninput[type="reset"].btn-block,\r\ninput[type="button"].btn-block {\r\n  width: 100%; }\r\n\r\n.fade {\r\n  opacity: 0;\r\n  transition: opacity 0.15s linear; }\r\n  .fade.show {\r\n    opacity: 1; }\r\n\r\n.collapse {\r\n  display: none; }\r\n  .collapse.show {\r\n    display: block; }\r\n\r\ntr.collapse.show {\r\n  display: table-row; }\r\n\r\ntbody.collapse.show {\r\n  display: table-row-group; }\r\n\r\n.collapsing {\r\n  position: relative;\r\n  height: 0;\r\n  overflow: hidden;\r\n  transition: height 0.35s ease; }\r\n\r\n.dropup,\r\n.dropdown {\r\n  position: relative; }\r\n\r\n.dropdown-toggle::after {\r\n  display: inline-block;\r\n  width: 0;\r\n  height: 0;\r\n  margin-left: 0.255em;\r\n  vertical-align: 0.255em;\r\n  content: "";\r\n  border-top: 0.3em solid;\r\n  border-right: 0.3em solid transparent;\r\n  border-bottom: 0;\r\n  border-left: 0.3em solid transparent; }\r\n.dropdown-toggle:empty::after {\r\n  margin-left: 0; }\r\n\r\n.dropdown-menu {\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n  z-index: 1000;\r\n  display: none;\r\n  float: left;\r\n  min-width: 10rem;\r\n  padding: 0.5rem 0;\r\n  margin: 0.125rem 0 0;\r\n  font-size: 1rem;\r\n  color: #212529;\r\n  text-align: left;\r\n  list-style: none;\r\n  background-color: #fff;\r\n  background-clip: padding-box;\r\n  border: 1px solid rgba(0, 0, 0, 0.15);\r\n  border-radius: 0.25rem; }\r\n\r\n.dropup .dropdown-menu {\r\n  margin-top: 0;\r\n  margin-bottom: 0.125rem; }\r\n.dropup .dropdown-toggle::after {\r\n  display: inline-block;\r\n  width: 0;\r\n  height: 0;\r\n  margin-left: 0.255em;\r\n  vertical-align: 0.255em;\r\n  content: "";\r\n  border-top: 0;\r\n  border-right: 0.3em solid transparent;\r\n  border-bottom: 0.3em solid;\r\n  border-left: 0.3em solid transparent; }\r\n.dropup .dropdown-toggle:empty::after {\r\n  margin-left: 0; }\r\n\r\n.dropdown-divider {\r\n  height: 0;\r\n  margin: 0.5rem 0;\r\n  overflow: hidden;\r\n  border-top: 1px solid #e9ecef; }\r\n\r\n.dropdown-item {\r\n  display: block;\r\n  width: 100%;\r\n  padding: 0.25rem 1.5rem;\r\n  clear: both;\r\n  font-weight: 400;\r\n  color: #212529;\r\n  text-align: inherit;\r\n  white-space: nowrap;\r\n  background: none;\r\n  border: 0; }\r\n  .dropdown-item:focus, .dropdown-item:hover {\r\n    color: #16181b;\r\n    text-decoration: none;\r\n    background-color: #f8f9fa; }\r\n  .dropdown-item.active, .dropdown-item:active {\r\n    color: #fff;\r\n    text-decoration: none;\r\n    background-color: #007bff; }\r\n  .dropdown-item.disabled, .dropdown-item:disabled {\r\n    color: #868e96;\r\n    background-color: transparent; }\r\n\r\n.dropdown-menu.show {\r\n  display: block; }\r\n\r\n.dropdown-header {\r\n  display: block;\r\n  padding: 0.5rem 1.5rem;\r\n  margin-bottom: 0;\r\n  font-size: 0.875rem;\r\n  color: #868e96;\r\n  white-space: nowrap; }\r\n\r\n.custom-control {\r\n  position: relative;\r\n  display: inline-flex;\r\n  min-height: 1.5rem;\r\n  padding-left: 1.5rem;\r\n  margin-right: 1rem; }\r\n\r\n.custom-control-input {\r\n  position: absolute;\r\n  z-index: -1;\r\n  opacity: 0; }\r\n  .custom-control-input:checked ~ .custom-control-indicator {\r\n    color: #fff;\r\n    background-color: #007bff; }\r\n  .custom-control-input:focus ~ .custom-control-indicator {\r\n    box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(0, 123, 255, 0.25); }\r\n  .custom-control-input:active ~ .custom-control-indicator {\r\n    color: #fff;\r\n    background-color: #b3d7ff; }\r\n  .custom-control-input:disabled ~ .custom-control-indicator {\r\n    background-color: #e9ecef; }\r\n  .custom-control-input:disabled ~ .custom-control-description {\r\n    color: #868e96; }\r\n\r\n.custom-control-indicator {\r\n  position: absolute;\r\n  top: 0.25rem;\r\n  left: 0;\r\n  display: block;\r\n  width: 1rem;\r\n  height: 1rem;\r\n  pointer-events: none;\r\n  user-select: none;\r\n  background-color: #ddd;\r\n  background-repeat: no-repeat;\r\n  background-position: center center;\r\n  background-size: 50% 50%; }\r\n\r\n.custom-checkbox .custom-control-indicator {\r\n  border-radius: 0.25rem; }\r\n.custom-checkbox .custom-control-input:checked ~ .custom-control-indicator {\r\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 8 8\'%3E%3Cpath fill=\'%23fff\' d=\'M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z\'/%3E%3C/svg%3E"); }\r\n.custom-checkbox .custom-control-input:indeterminate ~ .custom-control-indicator {\r\n  background-color: #007bff;\r\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 4 4\'%3E%3Cpath stroke=\'%23fff\' d=\'M0 2h4\'/%3E%3C/svg%3E"); }\r\n\r\n.custom-radio .custom-control-indicator {\r\n  border-radius: 50%; }\r\n.custom-radio .custom-control-input:checked ~ .custom-control-indicator {\r\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'-4 -4 8 8\'%3E%3Ccircle r=\'3\' fill=\'%23fff\'/%3E%3C/svg%3E"); }\r\n\r\n.custom-controls-stacked {\r\n  display: flex;\r\n  flex-direction: column; }\r\n  .custom-controls-stacked .custom-control {\r\n    margin-bottom: 0.25rem; }\r\n    .custom-controls-stacked .custom-control + .custom-control {\r\n      margin-left: 0; }\r\n\r\n.custom-select {\r\n  display: inline-block;\r\n  max-width: 100%;\r\n  height: calc(2.25rem + 2px);\r\n  padding: 0.375rem 1.75rem 0.375rem 0.75rem;\r\n  line-height: 1.5;\r\n  color: #495057;\r\n  vertical-align: middle;\r\n  background: #fff url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 4 5\'%3E%3Cpath fill=\'%23333\' d=\'M2 0L0 2h4zm0 5L0 3h4z\'/%3E%3C/svg%3E") no-repeat right 0.75rem center;\r\n  background-size: 8px 10px;\r\n  border: 1px solid #ced4da;\r\n  border-radius: 0.25rem;\r\n  appearance: none; }\r\n  .custom-select:focus {\r\n    border-color: #80bdff;\r\n    outline: none; }\r\n    .custom-select:focus::-ms-value {\r\n      color: #495057;\r\n      background-color: #fff; }\r\n  .custom-select[multiple] {\r\n    height: auto;\r\n    background-image: none; }\r\n  .custom-select:disabled {\r\n    color: #868e96;\r\n    background-color: #e9ecef; }\r\n  .custom-select::-ms-expand {\r\n    opacity: 0; }\r\n\r\n.custom-select-sm {\r\n  height: calc(1.8125rem + 2px);\r\n  padding-top: 0.375rem;\r\n  padding-bottom: 0.375rem;\r\n  font-size: 75%; }\r\n\r\n.custom-file {\r\n  position: relative;\r\n  display: inline-block;\r\n  max-width: 100%;\r\n  height: calc(2.25rem + 2px);\r\n  margin-bottom: 0; }\r\n\r\n.custom-file-input {\r\n  min-width: 14rem;\r\n  max-width: 100%;\r\n  height: calc(2.25rem + 2px);\r\n  margin: 0;\r\n  opacity: 0; }\r\n  .custom-file-input:focus ~ .custom-file-control {\r\n    box-shadow: 0 0 0 0.075rem #fff, 0 0 0 0.2rem #007bff; }\r\n\r\n.custom-file-control {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n  z-index: 5;\r\n  height: calc(2.25rem + 2px);\r\n  padding: 0.375rem 0.75rem;\r\n  line-height: 1.5;\r\n  color: #495057;\r\n  pointer-events: none;\r\n  user-select: none;\r\n  background-color: #fff;\r\n  border: 1px solid #ced4da;\r\n  border-radius: 0.25rem; }\r\n  .custom-file-control:lang(en):empty::after {\r\n    content: "Choose file..."; }\r\n  .custom-file-control::before {\r\n    position: absolute;\r\n    top: -1px;\r\n    right: -1px;\r\n    bottom: -1px;\r\n    z-index: 6;\r\n    display: block;\r\n    height: calc(2.25rem + 2px);\r\n    padding: 0.375rem 0.75rem;\r\n    line-height: 1.5;\r\n    color: #495057;\r\n    background-color: #e9ecef;\r\n    border: 1px solid #ced4da;\r\n    border-radius: 0 0.25rem 0.25rem 0; }\r\n  .custom-file-control:lang(en)::before {\r\n    content: "Browse"; }\r\n\r\n.nav {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  padding-left: 0;\r\n  margin-bottom: 0;\r\n  list-style: none; }\r\n\r\n.nav-link {\r\n  display: block;\r\n  padding: 0.5rem 1rem; }\r\n  .nav-link:focus, .nav-link:hover {\r\n    text-decoration: none; }\r\n  .nav-link.disabled {\r\n    color: #868e96; }\r\n\r\n.nav-tabs {\r\n  border-bottom: 1px solid #ddd; }\r\n  .nav-tabs .nav-item {\r\n    margin-bottom: -1px; }\r\n  .nav-tabs .nav-link {\r\n    border: 1px solid transparent;\r\n    border-top-left-radius: 0.25rem;\r\n    border-top-right-radius: 0.25rem; }\r\n    .nav-tabs .nav-link:focus, .nav-tabs .nav-link:hover {\r\n      border-color: #e9ecef #e9ecef #ddd; }\r\n    .nav-tabs .nav-link.disabled {\r\n      color: #868e96;\r\n      background-color: transparent;\r\n      border-color: transparent; }\r\n  .nav-tabs .nav-link.active,\r\n  .nav-tabs .nav-item.show .nav-link {\r\n    color: #495057;\r\n    background-color: #fff;\r\n    border-color: #ddd #ddd #fff; }\r\n  .nav-tabs .dropdown-menu {\r\n    margin-top: -1px;\r\n    border-top-left-radius: 0;\r\n    border-top-right-radius: 0; }\r\n\r\n.nav-pills .nav-link {\r\n  border-radius: 0.25rem; }\r\n.nav-pills .nav-link.active,\r\n.nav-pills .show > .nav-link {\r\n  color: #fff;\r\n  background-color: #007bff; }\r\n\r\n.nav-fill .nav-item {\r\n  flex: 1 1 auto;\r\n  text-align: center; }\r\n\r\n.nav-justified .nav-item {\r\n  flex-basis: 0;\r\n  flex-grow: 1;\r\n  text-align: center; }\r\n\r\n.tab-content > .tab-pane {\r\n  display: none; }\r\n.tab-content > .active {\r\n  display: block; }\r\n\r\n.navbar {\r\n  position: relative;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0.5rem 1rem; }\r\n  .navbar > .container,\r\n  .navbar > .container-fluid {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: space-between; }\r\n\r\n.navbar-brand {\r\n  display: inline-block;\r\n  padding-top: 0.3125rem;\r\n  padding-bottom: 0.3125rem;\r\n  margin-right: 1rem;\r\n  font-size: 1.25rem;\r\n  line-height: inherit;\r\n  white-space: nowrap; }\r\n  .navbar-brand:focus, .navbar-brand:hover {\r\n    text-decoration: none; }\r\n\r\n.navbar-nav {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-left: 0;\r\n  margin-bottom: 0;\r\n  list-style: none; }\r\n  .navbar-nav .nav-link {\r\n    padding-right: 0;\r\n    padding-left: 0; }\r\n  .navbar-nav .dropdown-menu {\r\n    position: static;\r\n    float: none; }\r\n\r\n.navbar-text {\r\n  display: inline-block;\r\n  padding-top: 0.5rem;\r\n  padding-bottom: 0.5rem; }\r\n\r\n.navbar-collapse {\r\n  flex-basis: 100%;\r\n  flex-grow: 1;\r\n  align-items: center; }\r\n\r\n.navbar-toggler {\r\n  padding: 0.25rem 0.75rem;\r\n  font-size: 1.25rem;\r\n  line-height: 1;\r\n  background: transparent;\r\n  border: 1px solid transparent;\r\n  border-radius: 0.25rem; }\r\n  .navbar-toggler:focus, .navbar-toggler:hover {\r\n    text-decoration: none; }\r\n\r\n.navbar-toggler-icon {\r\n  display: inline-block;\r\n  width: 1.5em;\r\n  height: 1.5em;\r\n  vertical-align: middle;\r\n  content: "";\r\n  background: no-repeat center center;\r\n  background-size: 100% 100%; }\r\n\r\n@media (max-width: 575px) {\r\n  .navbar-expand-sm > .container,\r\n  .navbar-expand-sm > .container-fluid {\r\n    padding-right: 0;\r\n    padding-left: 0; } }\r\n@media (min-width: 576px) {\r\n  .navbar-expand-sm {\r\n    flex-flow: row nowrap;\r\n    justify-content: flex-start; }\r\n    .navbar-expand-sm .navbar-nav {\r\n      flex-direction: row; }\r\n      .navbar-expand-sm .navbar-nav .dropdown-menu {\r\n        position: absolute; }\r\n      .navbar-expand-sm .navbar-nav .dropdown-menu-right {\r\n        right: 0;\r\n        left: auto; }\r\n      .navbar-expand-sm .navbar-nav .nav-link {\r\n        padding-right: .5rem;\r\n        padding-left: .5rem; }\r\n    .navbar-expand-sm > .container,\r\n    .navbar-expand-sm > .container-fluid {\r\n      flex-wrap: nowrap; }\r\n    .navbar-expand-sm .navbar-collapse {\r\n      display: flex !important;\r\n      flex-basis: auto; }\r\n    .navbar-expand-sm .navbar-toggler {\r\n      display: none; }\r\n    .navbar-expand-sm .dropup .dropdown-menu {\r\n      top: auto;\r\n      bottom: 100%; } }\r\n@media (max-width: 767px) {\r\n  .navbar-expand-md > .container,\r\n  .navbar-expand-md > .container-fluid {\r\n    padding-right: 0;\r\n    padding-left: 0; } }\r\n@media (min-width: 768px) {\r\n  .navbar-expand-md {\r\n    flex-flow: row nowrap;\r\n    justify-content: flex-start; }\r\n    .navbar-expand-md .navbar-nav {\r\n      flex-direction: row; }\r\n      .navbar-expand-md .navbar-nav .dropdown-menu {\r\n        position: absolute; }\r\n      .navbar-expand-md .navbar-nav .dropdown-menu-right {\r\n        right: 0;\r\n        left: auto; }\r\n      .navbar-expand-md .navbar-nav .nav-link {\r\n        padding-right: .5rem;\r\n        padding-left: .5rem; }\r\n    .navbar-expand-md > .container,\r\n    .navbar-expand-md > .container-fluid {\r\n      flex-wrap: nowrap; }\r\n    .navbar-expand-md .navbar-collapse {\r\n      display: flex !important;\r\n      flex-basis: auto; }\r\n    .navbar-expand-md .navbar-toggler {\r\n      display: none; }\r\n    .navbar-expand-md .dropup .dropdown-menu {\r\n      top: auto;\r\n      bottom: 100%; } }\r\n@media (max-width: 991px) {\r\n  .navbar-expand-lg > .container,\r\n  .navbar-expand-lg > .container-fluid {\r\n    padding-right: 0;\r\n    padding-left: 0; } }\r\n@media (min-width: 992px) {\r\n  .navbar-expand-lg {\r\n    flex-flow: row nowrap;\r\n    justify-content: flex-start; }\r\n    .navbar-expand-lg .navbar-nav {\r\n      flex-direction: row; }\r\n      .navbar-expand-lg .navbar-nav .dropdown-menu {\r\n        position: absolute; }\r\n      .navbar-expand-lg .navbar-nav .dropdown-menu-right {\r\n        right: 0;\r\n        left: auto; }\r\n      .navbar-expand-lg .navbar-nav .nav-link {\r\n        padding-right: .5rem;\r\n        padding-left: .5rem; }\r\n    .navbar-expand-lg > .container,\r\n    .navbar-expand-lg > .container-fluid {\r\n      flex-wrap: nowrap; }\r\n    .navbar-expand-lg .navbar-collapse {\r\n      display: flex !important;\r\n      flex-basis: auto; }\r\n    .navbar-expand-lg .navbar-toggler {\r\n      display: none; }\r\n    .navbar-expand-lg .dropup .dropdown-menu {\r\n      top: auto;\r\n      bottom: 100%; } }\r\n@media (max-width: 1199px) {\r\n  .navbar-expand-xl > .container,\r\n  .navbar-expand-xl > .container-fluid {\r\n    padding-right: 0;\r\n    padding-left: 0; } }\r\n@media (min-width: 1200px) {\r\n  .navbar-expand-xl {\r\n    flex-flow: row nowrap;\r\n    justify-content: flex-start; }\r\n    .navbar-expand-xl .navbar-nav {\r\n      flex-direction: row; }\r\n      .navbar-expand-xl .navbar-nav .dropdown-menu {\r\n        position: absolute; }\r\n      .navbar-expand-xl .navbar-nav .dropdown-menu-right {\r\n        right: 0;\r\n        left: auto; }\r\n      .navbar-expand-xl .navbar-nav .nav-link {\r\n        padding-right: .5rem;\r\n        padding-left: .5rem; }\r\n    .navbar-expand-xl > .container,\r\n    .navbar-expand-xl > .container-fluid {\r\n      flex-wrap: nowrap; }\r\n    .navbar-expand-xl .navbar-collapse {\r\n      display: flex !important;\r\n      flex-basis: auto; }\r\n    .navbar-expand-xl .navbar-toggler {\r\n      display: none; }\r\n    .navbar-expand-xl .dropup .dropdown-menu {\r\n      top: auto;\r\n      bottom: 100%; } }\r\n.navbar-expand {\r\n  flex-flow: row nowrap;\r\n  justify-content: flex-start; }\r\n  .navbar-expand > .container,\r\n  .navbar-expand > .container-fluid {\r\n    padding-right: 0;\r\n    padding-left: 0; }\r\n  .navbar-expand .navbar-nav {\r\n    flex-direction: row; }\r\n    .navbar-expand .navbar-nav .dropdown-menu {\r\n      position: absolute; }\r\n    .navbar-expand .navbar-nav .dropdown-menu-right {\r\n      right: 0;\r\n      left: auto; }\r\n    .navbar-expand .navbar-nav .nav-link {\r\n      padding-right: .5rem;\r\n      padding-left: .5rem; }\r\n  .navbar-expand > .container,\r\n  .navbar-expand > .container-fluid {\r\n    flex-wrap: nowrap; }\r\n  .navbar-expand .navbar-collapse {\r\n    display: flex !important;\r\n    flex-basis: auto; }\r\n  .navbar-expand .navbar-toggler {\r\n    display: none; }\r\n  .navbar-expand .dropup .dropdown-menu {\r\n    top: auto;\r\n    bottom: 100%; }\r\n\r\n.navbar-light .navbar-brand {\r\n  color: rgba(0, 0, 0, 0.9); }\r\n  .navbar-light .navbar-brand:focus, .navbar-light .navbar-brand:hover {\r\n    color: rgba(0, 0, 0, 0.9); }\r\n.navbar-light .navbar-nav .nav-link {\r\n  color: rgba(0, 0, 0, 0.5); }\r\n  .navbar-light .navbar-nav .nav-link:focus, .navbar-light .navbar-nav .nav-link:hover {\r\n    color: rgba(0, 0, 0, 0.7); }\r\n  .navbar-light .navbar-nav .nav-link.disabled {\r\n    color: rgba(0, 0, 0, 0.3); }\r\n.navbar-light .navbar-nav .show > .nav-link,\r\n.navbar-light .navbar-nav .active > .nav-link,\r\n.navbar-light .navbar-nav .nav-link.show,\r\n.navbar-light .navbar-nav .nav-link.active {\r\n  color: rgba(0, 0, 0, 0.9); }\r\n.navbar-light .navbar-toggler {\r\n  color: rgba(0, 0, 0, 0.5);\r\n  border-color: rgba(0, 0, 0, 0.1); }\r\n.navbar-light .navbar-toggler-icon {\r\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg viewBox=\'0 0 30 30\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cpath stroke=\'rgba(0, 0, 0, 0.5)\' stroke-width=\'2\' stroke-linecap=\'round\' stroke-miterlimit=\'10\' d=\'M4 7h22M4 15h22M4 23h22\'/%3E%3C/svg%3E"); }\r\n.navbar-light .navbar-text {\r\n  color: rgba(0, 0, 0, 0.5); }\r\n  .navbar-light .navbar-text a {\r\n    color: rgba(0, 0, 0, 0.9); }\r\n    .navbar-light .navbar-text a:focus, .navbar-light .navbar-text a:hover {\r\n      color: rgba(0, 0, 0, 0.9); }\r\n\r\n.navbar-dark .navbar-brand {\r\n  color: #fff; }\r\n  .navbar-dark .navbar-brand:focus, .navbar-dark .navbar-brand:hover {\r\n    color: #fff; }\r\n.navbar-dark .navbar-nav .nav-link {\r\n  color: rgba(255, 255, 255, 0.5); }\r\n  .navbar-dark .navbar-nav .nav-link:focus, .navbar-dark .navbar-nav .nav-link:hover {\r\n    color: rgba(255, 255, 255, 0.75); }\r\n  .navbar-dark .navbar-nav .nav-link.disabled {\r\n    color: rgba(255, 255, 255, 0.25); }\r\n.navbar-dark .navbar-nav .show > .nav-link,\r\n.navbar-dark .navbar-nav .active > .nav-link,\r\n.navbar-dark .navbar-nav .nav-link.show,\r\n.navbar-dark .navbar-nav .nav-link.active {\r\n  color: #fff; }\r\n.navbar-dark .navbar-toggler {\r\n  color: rgba(255, 255, 255, 0.5);\r\n  border-color: rgba(255, 255, 255, 0.1); }\r\n.navbar-dark .navbar-toggler-icon {\r\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg viewBox=\'0 0 30 30\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cpath stroke=\'rgba(255, 255, 255, 0.5)\' stroke-width=\'2\' stroke-linecap=\'round\' stroke-miterlimit=\'10\' d=\'M4 7h22M4 15h22M4 23h22\'/%3E%3C/svg%3E"); }\r\n.navbar-dark .navbar-text {\r\n  color: rgba(255, 255, 255, 0.5); }\r\n  .navbar-dark .navbar-text a {\r\n    color: #fff; }\r\n    .navbar-dark .navbar-text a:focus, .navbar-dark .navbar-text a:hover {\r\n      color: #fff; }\r\n\r\n.card {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-width: 0;\r\n  word-wrap: break-word;\r\n  background-color: #fff;\r\n  background-clip: border-box;\r\n  border: 1px solid rgba(0, 0, 0, 0.125);\r\n  border-radius: 0.25rem; }\r\n  .card > hr {\r\n    margin-right: 0;\r\n    margin-left: 0; }\r\n  .card > .list-group:first-child .list-group-item:first-child {\r\n    border-top-left-radius: 0.25rem;\r\n    border-top-right-radius: 0.25rem; }\r\n  .card > .list-group:last-child .list-group-item:last-child {\r\n    border-bottom-right-radius: 0.25rem;\r\n    border-bottom-left-radius: 0.25rem; }\r\n\r\n.card-body {\r\n  flex: 1 1 auto;\r\n  padding: 1.25rem; }\r\n\r\n.card-title {\r\n  margin-bottom: 0.75rem; }\r\n\r\n.card-subtitle {\r\n  margin-top: -0.375rem;\r\n  margin-bottom: 0; }\r\n\r\n.card-text:last-child {\r\n  margin-bottom: 0; }\r\n\r\n.card-link:hover {\r\n  text-decoration: none; }\r\n.card-link + .card-link {\r\n  margin-left: 1.25rem; }\r\n\r\n.card-header {\r\n  padding: 0.75rem 1.25rem;\r\n  margin-bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.03);\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.125); }\r\n  .card-header:first-child {\r\n    border-radius: calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0; }\r\n  .card-header + .list-group .list-group-item:first-child {\r\n    border-top: 0; }\r\n\r\n.card-footer {\r\n  padding: 0.75rem 1.25rem;\r\n  background-color: rgba(0, 0, 0, 0.03);\r\n  border-top: 1px solid rgba(0, 0, 0, 0.125); }\r\n  .card-footer:last-child {\r\n    border-radius: 0 0 calc(0.25rem - 1px) calc(0.25rem - 1px); }\r\n\r\n.card-header-tabs {\r\n  margin-right: -0.625rem;\r\n  margin-bottom: -0.75rem;\r\n  margin-left: -0.625rem;\r\n  border-bottom: 0; }\r\n\r\n.card-header-pills {\r\n  margin-right: -0.625rem;\r\n  margin-left: -0.625rem; }\r\n\r\n.card-img-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  padding: 1.25rem; }\r\n\r\n.card-img {\r\n  width: 100%;\r\n  border-radius: calc(0.25rem - 1px); }\r\n\r\n.card-img-top {\r\n  width: 100%;\r\n  border-top-left-radius: calc(0.25rem - 1px);\r\n  border-top-right-radius: calc(0.25rem - 1px); }\r\n\r\n.card-img-bottom {\r\n  width: 100%;\r\n  border-bottom-right-radius: calc(0.25rem - 1px);\r\n  border-bottom-left-radius: calc(0.25rem - 1px); }\r\n\r\n.card-deck {\r\n  display: flex;\r\n  flex-direction: column; }\r\n  .card-deck .card {\r\n    margin-bottom: 15px; }\r\n  @media (min-width: 576px) {\r\n    .card-deck {\r\n      flex-flow: row wrap;\r\n      margin-right: -15px;\r\n      margin-left: -15px; }\r\n      .card-deck .card {\r\n        display: flex;\r\n        flex: 1 0 0%;\r\n        flex-direction: column;\r\n        margin-right: 15px;\r\n        margin-bottom: 0;\r\n        margin-left: 15px; } }\r\n\r\n.card-group {\r\n  display: flex;\r\n  flex-direction: column; }\r\n  .card-group .card {\r\n    margin-bottom: 15px; }\r\n  @media (min-width: 576px) {\r\n    .card-group {\r\n      flex-flow: row wrap; }\r\n      .card-group .card {\r\n        flex: 1 0 0%;\r\n        margin-bottom: 0; }\r\n        .card-group .card + .card {\r\n          margin-left: 0;\r\n          border-left: 0; }\r\n        .card-group .card:first-child {\r\n          border-top-right-radius: 0;\r\n          border-bottom-right-radius: 0; }\r\n          .card-group .card:first-child .card-img-top {\r\n            border-top-right-radius: 0; }\r\n          .card-group .card:first-child .card-img-bottom {\r\n            border-bottom-right-radius: 0; }\r\n        .card-group .card:last-child {\r\n          border-top-left-radius: 0;\r\n          border-bottom-left-radius: 0; }\r\n          .card-group .card:last-child .card-img-top {\r\n            border-top-left-radius: 0; }\r\n          .card-group .card:last-child .card-img-bottom {\r\n            border-bottom-left-radius: 0; }\r\n        .card-group .card:only-child {\r\n          border-radius: 0.25rem; }\r\n          .card-group .card:only-child .card-img-top {\r\n            border-top-left-radius: 0.25rem;\r\n            border-top-right-radius: 0.25rem; }\r\n          .card-group .card:only-child .card-img-bottom {\r\n            border-bottom-right-radius: 0.25rem;\r\n            border-bottom-left-radius: 0.25rem; }\r\n        .card-group .card:not(:first-child):not(:last-child):not(:only-child) {\r\n          border-radius: 0; }\r\n          .card-group .card:not(:first-child):not(:last-child):not(:only-child) .card-img-top,\r\n          .card-group .card:not(:first-child):not(:last-child):not(:only-child) .card-img-bottom {\r\n            border-radius: 0; } }\r\n\r\n.card-columns .card {\r\n  margin-bottom: 0.75rem; }\r\n@media (min-width: 576px) {\r\n  .card-columns {\r\n    column-count: 3;\r\n    column-gap: 1.25rem; }\r\n    .card-columns .card {\r\n      display: inline-block;\r\n      width: 100%; } }\r\n\r\n.breadcrumb {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  padding: 0.75rem 1rem;\r\n  margin-bottom: 1rem;\r\n  list-style: none;\r\n  background-color: #e9ecef;\r\n  border-radius: 0.25rem; }\r\n\r\n.breadcrumb-item + .breadcrumb-item::before {\r\n  display: inline-block;\r\n  padding-right: 0.5rem;\r\n  padding-left: 0.5rem;\r\n  color: #868e96;\r\n  content: "/"; }\r\n.breadcrumb-item + .breadcrumb-item:hover::before {\r\n  text-decoration: underline; }\r\n.breadcrumb-item + .breadcrumb-item:hover::before {\r\n  text-decoration: none; }\r\n.breadcrumb-item.active {\r\n  color: #868e96; }\r\n\r\n.pagination {\r\n  display: flex;\r\n  padding-left: 0;\r\n  list-style: none;\r\n  border-radius: 0.25rem; }\r\n\r\n.page-item:first-child .page-link {\r\n  margin-left: 0;\r\n  border-top-left-radius: 0.25rem;\r\n  border-bottom-left-radius: 0.25rem; }\r\n.page-item:last-child .page-link {\r\n  border-top-right-radius: 0.25rem;\r\n  border-bottom-right-radius: 0.25rem; }\r\n.page-item.active .page-link {\r\n  z-index: 2;\r\n  color: #fff;\r\n  background-color: #007bff;\r\n  border-color: #007bff; }\r\n.page-item.disabled .page-link {\r\n  color: #868e96;\r\n  pointer-events: none;\r\n  background-color: #fff;\r\n  border-color: #ddd; }\r\n\r\n.page-link {\r\n  position: relative;\r\n  display: block;\r\n  padding: 0.5rem 0.75rem;\r\n  margin-left: -1px;\r\n  line-height: 1.25;\r\n  color: #007bff;\r\n  background-color: #fff;\r\n  border: 1px solid #ddd; }\r\n  .page-link:focus, .page-link:hover {\r\n    color: #0056b3;\r\n    text-decoration: none;\r\n    background-color: #e9ecef;\r\n    border-color: #ddd; }\r\n\r\n.pagination-lg .page-link {\r\n  padding: 0.75rem 1.5rem;\r\n  font-size: 1.25rem;\r\n  line-height: 1.5; }\r\n.pagination-lg .page-item:first-child .page-link {\r\n  border-top-left-radius: 0.3rem;\r\n  border-bottom-left-radius: 0.3rem; }\r\n.pagination-lg .page-item:last-child .page-link {\r\n  border-top-right-radius: 0.3rem;\r\n  border-bottom-right-radius: 0.3rem; }\r\n\r\n.pagination-sm .page-link {\r\n  padding: 0.25rem 0.5rem;\r\n  font-size: 0.875rem;\r\n  line-height: 1.5; }\r\n.pagination-sm .page-item:first-child .page-link {\r\n  border-top-left-radius: 0.2rem;\r\n  border-bottom-left-radius: 0.2rem; }\r\n.pagination-sm .page-item:last-child .page-link {\r\n  border-top-right-radius: 0.2rem;\r\n  border-bottom-right-radius: 0.2rem; }\r\n\r\n.badge {\r\n  display: inline-block;\r\n  padding: 0.25em 0.4em;\r\n  font-size: 75%;\r\n  font-weight: 700;\r\n  line-height: 1;\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  vertical-align: baseline;\r\n  border-radius: 0.25rem; }\r\n  .badge:empty {\r\n    display: none; }\r\n\r\n.btn .badge {\r\n  position: relative;\r\n  top: -1px; }\r\n\r\n.badge-pill {\r\n  padding-right: 0.6em;\r\n  padding-left: 0.6em;\r\n  border-radius: 10rem; }\r\n\r\n.badge-primary {\r\n  color: #fff;\r\n  background-color: #007bff; }\r\n  .badge-primary[href]:focus, .badge-primary[href]:hover {\r\n    color: #fff;\r\n    text-decoration: none;\r\n    background-color: #0062cc; }\r\n\r\n.badge-secondary {\r\n  color: #fff;\r\n  background-color: #868e96; }\r\n  .badge-secondary[href]:focus, .badge-secondary[href]:hover {\r\n    color: #fff;\r\n    text-decoration: none;\r\n    background-color: #6c757d; }\r\n\r\n.badge-success {\r\n  color: #fff;\r\n  background-color: #28a745; }\r\n  .badge-success[href]:focus, .badge-success[href]:hover {\r\n    color: #fff;\r\n    text-decoration: none;\r\n    background-color: #1e7e34; }\r\n\r\n.badge-info {\r\n  color: #fff;\r\n  background-color: #17a2b8; }\r\n  .badge-info[href]:focus, .badge-info[href]:hover {\r\n    color: #fff;\r\n    text-decoration: none;\r\n    background-color: #117a8b; }\r\n\r\n.badge-warning {\r\n  color: #111;\r\n  background-color: #ffc107; }\r\n  .badge-warning[href]:focus, .badge-warning[href]:hover {\r\n    color: #111;\r\n    text-decoration: none;\r\n    background-color: #d39e00; }\r\n\r\n.badge-danger {\r\n  color: #fff;\r\n  background-color: #dc3545; }\r\n  .badge-danger[href]:focus, .badge-danger[href]:hover {\r\n    color: #fff;\r\n    text-decoration: none;\r\n    background-color: #bd2130; }\r\n\r\n.badge-light {\r\n  color: #111;\r\n  background-color: #f8f9fa; }\r\n  .badge-light[href]:focus, .badge-light[href]:hover {\r\n    color: #111;\r\n    text-decoration: none;\r\n    background-color: #dae0e5; }\r\n\r\n.badge-dark {\r\n  color: #fff;\r\n  background-color: #343a40; }\r\n  .badge-dark[href]:focus, .badge-dark[href]:hover {\r\n    color: #fff;\r\n    text-decoration: none;\r\n    background-color: #1d2124; }\r\n\r\n.alert {\r\n  position: relative;\r\n  padding: 0.75rem 1.25rem;\r\n  margin-bottom: 1rem;\r\n  border: 1px solid transparent;\r\n  border-radius: 0.25rem; }\r\n\r\n.alert-heading {\r\n  color: inherit; }\r\n\r\n.alert-link {\r\n  font-weight: 700; }\r\n\r\n.alert-dismissible .close {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  padding: 0.75rem 1.25rem;\r\n  color: inherit; }\r\n\r\n.alert-primary {\r\n  color: #004085;\r\n  background-color: #cce5ff;\r\n  border-color: #b8daff; }\r\n  .alert-primary hr {\r\n    border-top-color: #9fcdff; }\r\n  .alert-primary .alert-link {\r\n    color: #002752; }\r\n\r\n.alert-secondary {\r\n  color: #464a4e;\r\n  background-color: #e7e8ea;\r\n  border-color: #dddfe2; }\r\n  .alert-secondary hr {\r\n    border-top-color: #cfd2d6; }\r\n  .alert-secondary .alert-link {\r\n    color: #2e3133; }\r\n\r\n.alert-success {\r\n  color: #155724;\r\n  background-color: #d4edda;\r\n  border-color: #c3e6cb; }\r\n  .alert-success hr {\r\n    border-top-color: #b1dfbb; }\r\n  .alert-success .alert-link {\r\n    color: #0b2e13; }\r\n\r\n.alert-info {\r\n  color: #0c5460;\r\n  background-color: #d1ecf1;\r\n  border-color: #bee5eb; }\r\n  .alert-info hr {\r\n    border-top-color: #abdde5; }\r\n  .alert-info .alert-link {\r\n    color: #062c33; }\r\n\r\n.alert-warning {\r\n  color: #856404;\r\n  background-color: #fff3cd;\r\n  border-color: #ffeeba; }\r\n  .alert-warning hr {\r\n    border-top-color: #ffe8a1; }\r\n  .alert-warning .alert-link {\r\n    color: #533f03; }\r\n\r\n.alert-danger {\r\n  color: #721c24;\r\n  background-color: #f8d7da;\r\n  border-color: #f5c6cb; }\r\n  .alert-danger hr {\r\n    border-top-color: #f1b0b7; }\r\n  .alert-danger .alert-link {\r\n    color: #491217; }\r\n\r\n.alert-light {\r\n  color: #818182;\r\n  background-color: #fefefe;\r\n  border-color: #fdfdfe; }\r\n  .alert-light hr {\r\n    border-top-color: #ececf6; }\r\n  .alert-light .alert-link {\r\n    color: #686868; }\r\n\r\n.alert-dark {\r\n  color: #1b1e21;\r\n  background-color: #d6d8d9;\r\n  border-color: #c6c8ca; }\r\n  .alert-dark hr {\r\n    border-top-color: #b9bbbe; }\r\n  .alert-dark .alert-link {\r\n    color: #040505; }\r\n\r\n.media {\r\n  display: flex;\r\n  align-items: flex-start; }\r\n\r\n.media-body {\r\n  flex: 1; }\r\n\r\n.close {\r\n  float: right;\r\n  font-size: 1.5rem;\r\n  font-weight: 700;\r\n  line-height: 1;\r\n  color: #000;\r\n  text-shadow: 0 1px 0 #fff;\r\n  opacity: .5; }\r\n  .close:focus, .close:hover {\r\n    color: #000;\r\n    text-decoration: none;\r\n    opacity: .75; }\r\n\r\nbutton.close {\r\n  padding: 0;\r\n  background: transparent;\r\n  border: 0;\r\n  -webkit-appearance: none; }\r\n\r\n.modal-open {\r\n  overflow: hidden; }\r\n\r\n.modal {\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 1050;\r\n  display: none;\r\n  overflow: hidden;\r\n  outline: 0; }\r\n  .modal.fade .modal-dialog {\r\n    transition: transform 0.3s ease-out;\r\n    transform: translate(0, -25%); }\r\n  .modal.show .modal-dialog {\r\n    transform: translate(0, 0); }\r\n\r\n.modal-open .modal {\r\n  overflow-x: hidden;\r\n  overflow-y: auto; }\r\n\r\n.modal-dialog {\r\n  position: relative;\r\n  width: auto;\r\n  margin: 10px;\r\n  pointer-events: none; }\r\n\r\n.modal-content {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  pointer-events: auto;\r\n  background-color: #fff;\r\n  background-clip: padding-box;\r\n  border: 1px solid rgba(0, 0, 0, 0.2);\r\n  border-radius: 0.3rem;\r\n  outline: 0; }\r\n\r\n.modal-backdrop {\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 1040;\r\n  background-color: #000; }\r\n  .modal-backdrop.fade {\r\n    opacity: 0; }\r\n  .modal-backdrop.show {\r\n    opacity: 0.5; }\r\n\r\n.modal-header {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: space-between;\r\n  padding: 15px;\r\n  border-bottom: 1px solid #e9ecef;\r\n  border-top-left-radius: 0.3rem;\r\n  border-top-right-radius: 0.3rem; }\r\n  .modal-header .close {\r\n    padding: 15px;\r\n    margin: -15px -15px -15px auto; }\r\n\r\n.modal-title {\r\n  margin-bottom: 0;\r\n  line-height: 1.5; }\r\n\r\n.modal-body {\r\n  position: relative;\r\n  flex: 1 1 auto;\r\n  padding: 15px; }\r\n\r\n.modal-footer {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  padding: 15px;\r\n  border-top: 1px solid #e9ecef; }\r\n  .modal-footer > :not(:first-child) {\r\n    margin-left: .25rem; }\r\n  .modal-footer > :not(:last-child) {\r\n    margin-right: .25rem; }\r\n\r\n.modal-scrollbar-measure {\r\n  position: absolute;\r\n  top: -9999px;\r\n  width: 50px;\r\n  height: 50px;\r\n  overflow: scroll; }\r\n\r\n@media (min-width: 576px) {\r\n  .modal-dialog {\r\n    max-width: 500px;\r\n    margin: 30px auto; }\r\n\r\n  .modal-sm {\r\n    max-width: 300px; } }\r\n@media (min-width: 992px) {\r\n  .modal-lg {\r\n    max-width: 800px; } }\r\n.tooltip {\r\n  position: absolute;\r\n  z-index: 1070;\r\n  display: block;\r\n  margin: 0;\r\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  line-height: 1.5;\r\n  text-align: left;\r\n  text-align: start;\r\n  text-decoration: none;\r\n  text-shadow: none;\r\n  text-transform: none;\r\n  letter-spacing: normal;\r\n  word-break: normal;\r\n  word-spacing: normal;\r\n  white-space: normal;\r\n  line-break: auto;\r\n  font-size: 0.875rem;\r\n  word-wrap: break-word;\r\n  opacity: 0; }\r\n  .tooltip.show {\r\n    opacity: 0.9; }\r\n  .tooltip .arrow {\r\n    position: absolute;\r\n    display: block;\r\n    width: 5px;\r\n    height: 5px; }\r\n  .tooltip .arrow::before {\r\n    position: absolute;\r\n    border-color: transparent;\r\n    border-style: solid; }\r\n  .tooltip.bs-tooltip-top, .tooltip.bs-tooltip-auto[x-placement^="top"] {\r\n    padding: 5px 0; }\r\n    .tooltip.bs-tooltip-top .arrow, .tooltip.bs-tooltip-auto[x-placement^="top"] .arrow {\r\n      bottom: 0; }\r\n    .tooltip.bs-tooltip-top .arrow::before, .tooltip.bs-tooltip-auto[x-placement^="top"] .arrow::before {\r\n      margin-left: -3px;\r\n      content: "";\r\n      border-width: 5px 5px 0;\r\n      border-top-color: #000; }\r\n  .tooltip.bs-tooltip-right, .tooltip.bs-tooltip-auto[x-placement^="right"] {\r\n    padding: 0 5px; }\r\n    .tooltip.bs-tooltip-right .arrow, .tooltip.bs-tooltip-auto[x-placement^="right"] .arrow {\r\n      left: 0; }\r\n    .tooltip.bs-tooltip-right .arrow::before, .tooltip.bs-tooltip-auto[x-placement^="right"] .arrow::before {\r\n      margin-top: -3px;\r\n      content: "";\r\n      border-width: 5px 5px 5px 0;\r\n      border-right-color: #000; }\r\n  .tooltip.bs-tooltip-bottom, .tooltip.bs-tooltip-auto[x-placement^="bottom"] {\r\n    padding: 5px 0; }\r\n    .tooltip.bs-tooltip-bottom .arrow, .tooltip.bs-tooltip-auto[x-placement^="bottom"] .arrow {\r\n      top: 0; }\r\n    .tooltip.bs-tooltip-bottom .arrow::before, .tooltip.bs-tooltip-auto[x-placement^="bottom"] .arrow::before {\r\n      margin-left: -3px;\r\n      content: "";\r\n      border-width: 0 5px 5px;\r\n      border-bottom-color: #000; }\r\n  .tooltip.bs-tooltip-left, .tooltip.bs-tooltip-auto[x-placement^="left"] {\r\n    padding: 0 5px; }\r\n    .tooltip.bs-tooltip-left .arrow, .tooltip.bs-tooltip-auto[x-placement^="left"] .arrow {\r\n      right: 0; }\r\n    .tooltip.bs-tooltip-left .arrow::before, .tooltip.bs-tooltip-auto[x-placement^="left"] .arrow::before {\r\n      right: 0;\r\n      margin-top: -3px;\r\n      content: "";\r\n      border-width: 5px 0 5px 5px;\r\n      border-left-color: #000; }\r\n\r\n.tooltip-inner {\r\n  max-width: 200px;\r\n  padding: 3px 8px;\r\n  color: #fff;\r\n  text-align: center;\r\n  background-color: #000;\r\n  border-radius: 0.25rem; }\r\n\r\n.popover {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 1060;\r\n  display: block;\r\n  max-width: 276px;\r\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  line-height: 1.5;\r\n  text-align: left;\r\n  text-align: start;\r\n  text-decoration: none;\r\n  text-shadow: none;\r\n  text-transform: none;\r\n  letter-spacing: normal;\r\n  word-break: normal;\r\n  word-spacing: normal;\r\n  white-space: normal;\r\n  line-break: auto;\r\n  font-size: 0.875rem;\r\n  word-wrap: break-word;\r\n  background-color: #fff;\r\n  background-clip: padding-box;\r\n  border: 1px solid rgba(0, 0, 0, 0.2);\r\n  border-radius: 0.3rem; }\r\n  .popover .arrow {\r\n    position: absolute;\r\n    display: block;\r\n    width: 0.8rem;\r\n    height: 0.4rem; }\r\n  .popover .arrow::before,\r\n  .popover .arrow::after {\r\n    position: absolute;\r\n    display: block;\r\n    border-color: transparent;\r\n    border-style: solid; }\r\n  .popover .arrow::before {\r\n    content: "";\r\n    border-width: 0.8rem; }\r\n  .popover .arrow::after {\r\n    content: "";\r\n    border-width: 0.8rem; }\r\n  .popover.bs-popover-top, .popover.bs-popover-auto[x-placement^="top"] {\r\n    margin-bottom: 0.8rem; }\r\n    .popover.bs-popover-top .arrow, .popover.bs-popover-auto[x-placement^="top"] .arrow {\r\n      bottom: 0; }\r\n    .popover.bs-popover-top .arrow::before, .popover.bs-popover-auto[x-placement^="top"] .arrow::before,\r\n    .popover.bs-popover-top .arrow::after,\r\n    .popover.bs-popover-auto[x-placement^="top"] .arrow::after {\r\n      border-bottom-width: 0; }\r\n    .popover.bs-popover-top .arrow::before, .popover.bs-popover-auto[x-placement^="top"] .arrow::before {\r\n      bottom: -0.8rem;\r\n      margin-left: -0.8rem;\r\n      border-top-color: rgba(0, 0, 0, 0.25); }\r\n    .popover.bs-popover-top .arrow::after, .popover.bs-popover-auto[x-placement^="top"] .arrow::after {\r\n      bottom: calc((0.8rem - 1px) * -1);\r\n      margin-left: -0.8rem;\r\n      border-top-color: #fff; }\r\n  .popover.bs-popover-right, .popover.bs-popover-auto[x-placement^="right"] {\r\n    margin-left: 0.8rem; }\r\n    .popover.bs-popover-right .arrow, .popover.bs-popover-auto[x-placement^="right"] .arrow {\r\n      left: 0; }\r\n    .popover.bs-popover-right .arrow::before, .popover.bs-popover-auto[x-placement^="right"] .arrow::before,\r\n    .popover.bs-popover-right .arrow::after,\r\n    .popover.bs-popover-auto[x-placement^="right"] .arrow::after {\r\n      margin-top: -0.8rem;\r\n      border-left-width: 0; }\r\n    .popover.bs-popover-right .arrow::before, .popover.bs-popover-auto[x-placement^="right"] .arrow::before {\r\n      left: -0.8rem;\r\n      border-right-color: rgba(0, 0, 0, 0.25); }\r\n    .popover.bs-popover-right .arrow::after, .popover.bs-popover-auto[x-placement^="right"] .arrow::after {\r\n      left: calc((0.8rem - 1px) * -1);\r\n      border-right-color: #fff; }\r\n  .popover.bs-popover-bottom, .popover.bs-popover-auto[x-placement^="bottom"] {\r\n    margin-top: 0.8rem; }\r\n    .popover.bs-popover-bottom .arrow, .popover.bs-popover-auto[x-placement^="bottom"] .arrow {\r\n      top: 0; }\r\n    .popover.bs-popover-bottom .arrow::before, .popover.bs-popover-auto[x-placement^="bottom"] .arrow::before,\r\n    .popover.bs-popover-bottom .arrow::after,\r\n    .popover.bs-popover-auto[x-placement^="bottom"] .arrow::after {\r\n      margin-left: -0.8rem;\r\n      border-top-width: 0; }\r\n    .popover.bs-popover-bottom .arrow::before, .popover.bs-popover-auto[x-placement^="bottom"] .arrow::before {\r\n      top: -0.8rem;\r\n      border-bottom-color: rgba(0, 0, 0, 0.25); }\r\n    .popover.bs-popover-bottom .arrow::after, .popover.bs-popover-auto[x-placement^="bottom"] .arrow::after {\r\n      top: calc((0.8rem - 1px) * -1);\r\n      border-bottom-color: #fff; }\r\n    .popover.bs-popover-bottom .popover-header::before, .popover.bs-popover-auto[x-placement^="bottom"] .popover-header::before {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 50%;\r\n      display: block;\r\n      width: 20px;\r\n      margin-left: -10px;\r\n      content: "";\r\n      border-bottom: 1px solid #f7f7f7; }\r\n  .popover.bs-popover-left, .popover.bs-popover-auto[x-placement^="left"] {\r\n    margin-right: 0.8rem; }\r\n    .popover.bs-popover-left .arrow, .popover.bs-popover-auto[x-placement^="left"] .arrow {\r\n      right: 0; }\r\n    .popover.bs-popover-left .arrow::before, .popover.bs-popover-auto[x-placement^="left"] .arrow::before,\r\n    .popover.bs-popover-left .arrow::after,\r\n    .popover.bs-popover-auto[x-placement^="left"] .arrow::after {\r\n      margin-top: -0.8rem;\r\n      border-right-width: 0; }\r\n    .popover.bs-popover-left .arrow::before, .popover.bs-popover-auto[x-placement^="left"] .arrow::before {\r\n      right: -0.8rem;\r\n      border-left-color: rgba(0, 0, 0, 0.25); }\r\n    .popover.bs-popover-left .arrow::after, .popover.bs-popover-auto[x-placement^="left"] .arrow::after {\r\n      right: calc((0.8rem - 1px) * -1);\r\n      border-left-color: #fff; }\r\n\r\n.popover-header {\r\n  padding: 0.5rem 0.75rem;\r\n  margin-bottom: 0;\r\n  font-size: 1rem;\r\n  color: inherit;\r\n  background-color: #f7f7f7;\r\n  border-bottom: 1px solid #ebebeb;\r\n  border-top-left-radius: calc(0.3rem - 1px);\r\n  border-top-right-radius: calc(0.3rem - 1px); }\r\n  .popover-header:empty {\r\n    display: none; }\r\n\r\n.popover-body {\r\n  padding: 0.5rem 0.75rem;\r\n  color: #212529; }\r\n\r\n.align-baseline {\r\n  vertical-align: baseline !important; }\r\n\r\n.align-top {\r\n  vertical-align: top !important; }\r\n\r\n.align-middle {\r\n  vertical-align: middle !important; }\r\n\r\n.align-bottom {\r\n  vertical-align: bottom !important; }\r\n\r\n.align-text-bottom {\r\n  vertical-align: text-bottom !important; }\r\n\r\n.align-text-top {\r\n  vertical-align: text-top !important; }\r\n\r\n.bg-primary {\r\n  background-color: #007bff !important; }\r\n\r\na.bg-primary:focus, a.bg-primary:hover {\r\n  background-color: #0062cc !important; }\r\n\r\n.bg-secondary {\r\n  background-color: #868e96 !important; }\r\n\r\na.bg-secondary:focus, a.bg-secondary:hover {\r\n  background-color: #6c757d !important; }\r\n\r\n.bg-success {\r\n  background-color: #28a745 !important; }\r\n\r\na.bg-success:focus, a.bg-success:hover {\r\n  background-color: #1e7e34 !important; }\r\n\r\n.bg-info {\r\n  background-color: #17a2b8 !important; }\r\n\r\na.bg-info:focus, a.bg-info:hover {\r\n  background-color: #117a8b !important; }\r\n\r\n.bg-warning {\r\n  background-color: #ffc107 !important; }\r\n\r\na.bg-warning:focus, a.bg-warning:hover {\r\n  background-color: #d39e00 !important; }\r\n\r\n.bg-danger {\r\n  background-color: #dc3545 !important; }\r\n\r\na.bg-danger:focus, a.bg-danger:hover {\r\n  background-color: #bd2130 !important; }\r\n\r\n.bg-light {\r\n  background-color: #f8f9fa !important; }\r\n\r\na.bg-light:focus, a.bg-light:hover {\r\n  background-color: #dae0e5 !important; }\r\n\r\n.bg-dark {\r\n  background-color: #343a40 !important; }\r\n\r\na.bg-dark:focus, a.bg-dark:hover {\r\n  background-color: #1d2124 !important; }\r\n\r\n.bg-white {\r\n  background-color: #fff !important; }\r\n\r\n.bg-transparent {\r\n  background-color: transparent !important; }\r\n\r\n.border {\r\n  border: 1px solid #e9ecef !important; }\r\n\r\n.border-0 {\r\n  border: 0 !important; }\r\n\r\n.border-top-0 {\r\n  border-top: 0 !important; }\r\n\r\n.border-right-0 {\r\n  border-right: 0 !important; }\r\n\r\n.border-bottom-0 {\r\n  border-bottom: 0 !important; }\r\n\r\n.border-left-0 {\r\n  border-left: 0 !important; }\r\n\r\n.border-primary {\r\n  border-color: #007bff !important; }\r\n\r\n.border-secondary {\r\n  border-color: #868e96 !important; }\r\n\r\n.border-success {\r\n  border-color: #28a745 !important; }\r\n\r\n.border-info {\r\n  border-color: #17a2b8 !important; }\r\n\r\n.border-warning {\r\n  border-color: #ffc107 !important; }\r\n\r\n.border-danger {\r\n  border-color: #dc3545 !important; }\r\n\r\n.border-light {\r\n  border-color: #f8f9fa !important; }\r\n\r\n.border-dark {\r\n  border-color: #343a40 !important; }\r\n\r\n.border-white {\r\n  border-color: #fff !important; }\r\n\r\n.rounded {\r\n  border-radius: 0.25rem !important; }\r\n\r\n.rounded-top {\r\n  border-top-left-radius: 0.25rem !important;\r\n  border-top-right-radius: 0.25rem !important; }\r\n\r\n.rounded-right {\r\n  border-top-right-radius: 0.25rem !important;\r\n  border-bottom-right-radius: 0.25rem !important; }\r\n\r\n.rounded-bottom {\r\n  border-bottom-right-radius: 0.25rem !important;\r\n  border-bottom-left-radius: 0.25rem !important; }\r\n\r\n.rounded-left {\r\n  border-top-left-radius: 0.25rem !important;\r\n  border-bottom-left-radius: 0.25rem !important; }\r\n\r\n.rounded-circle {\r\n  border-radius: 50% !important; }\r\n\r\n.rounded-0 {\r\n  border-radius: 0 !important; }\r\n\r\n.clearfix::after {\r\n  display: block;\r\n  clear: both;\r\n  content: ""; }\r\n\r\n.d-none {\r\n  display: none !important; }\r\n\r\n.d-inline {\r\n  display: inline !important; }\r\n\r\n.d-inline-block {\r\n  display: inline-block !important; }\r\n\r\n.d-block {\r\n  display: block !important; }\r\n\r\n.d-table {\r\n  display: table !important; }\r\n\r\n.d-table-row {\r\n  display: table-row !important; }\r\n\r\n.d-table-cell {\r\n  display: table-cell !important; }\r\n\r\n.d-flex {\r\n  display: flex !important; }\r\n\r\n.d-inline-flex {\r\n  display: inline-flex !important; }\r\n\r\n@media (min-width: 576px) {\r\n  .d-sm-none {\r\n    display: none !important; }\r\n\r\n  .d-sm-inline {\r\n    display: inline !important; }\r\n\r\n  .d-sm-inline-block {\r\n    display: inline-block !important; }\r\n\r\n  .d-sm-block {\r\n    display: block !important; }\r\n\r\n  .d-sm-table {\r\n    display: table !important; }\r\n\r\n  .d-sm-table-row {\r\n    display: table-row !important; }\r\n\r\n  .d-sm-table-cell {\r\n    display: table-cell !important; }\r\n\r\n  .d-sm-flex {\r\n    display: flex !important; }\r\n\r\n  .d-sm-inline-flex {\r\n    display: inline-flex !important; } }\r\n@media (min-width: 768px) {\r\n  .d-md-none {\r\n    display: none !important; }\r\n\r\n  .d-md-inline {\r\n    display: inline !important; }\r\n\r\n  .d-md-inline-block {\r\n    display: inline-block !important; }\r\n\r\n  .d-md-block {\r\n    display: block !important; }\r\n\r\n  .d-md-table {\r\n    display: table !important; }\r\n\r\n  .d-md-table-row {\r\n    display: table-row !important; }\r\n\r\n  .d-md-table-cell {\r\n    display: table-cell !important; }\r\n\r\n  .d-md-flex {\r\n    display: flex !important; }\r\n\r\n  .d-md-inline-flex {\r\n    display: inline-flex !important; } }\r\n@media (min-width: 992px) {\r\n  .d-lg-none {\r\n    display: none !important; }\r\n\r\n  .d-lg-inline {\r\n    display: inline !important; }\r\n\r\n  .d-lg-inline-block {\r\n    display: inline-block !important; }\r\n\r\n  .d-lg-block {\r\n    display: block !important; }\r\n\r\n  .d-lg-table {\r\n    display: table !important; }\r\n\r\n  .d-lg-table-row {\r\n    display: table-row !important; }\r\n\r\n  .d-lg-table-cell {\r\n    display: table-cell !important; }\r\n\r\n  .d-lg-flex {\r\n    display: flex !important; }\r\n\r\n  .d-lg-inline-flex {\r\n    display: inline-flex !important; } }\r\n@media (min-width: 1200px) {\r\n  .d-xl-none {\r\n    display: none !important; }\r\n\r\n  .d-xl-inline {\r\n    display: inline !important; }\r\n\r\n  .d-xl-inline-block {\r\n    display: inline-block !important; }\r\n\r\n  .d-xl-block {\r\n    display: block !important; }\r\n\r\n  .d-xl-table {\r\n    display: table !important; }\r\n\r\n  .d-xl-table-row {\r\n    display: table-row !important; }\r\n\r\n  .d-xl-table-cell {\r\n    display: table-cell !important; }\r\n\r\n  .d-xl-flex {\r\n    display: flex !important; }\r\n\r\n  .d-xl-inline-flex {\r\n    display: inline-flex !important; } }\r\n.d-print-block {\r\n  display: none !important; }\r\n  @media print {\r\n    .d-print-block {\r\n      display: block !important; } }\r\n\r\n.d-print-inline {\r\n  display: none !important; }\r\n  @media print {\r\n    .d-print-inline {\r\n      display: inline !important; } }\r\n\r\n.d-print-inline-block {\r\n  display: none !important; }\r\n  @media print {\r\n    .d-print-inline-block {\r\n      display: inline-block !important; } }\r\n\r\n@media print {\r\n  .d-print-none {\r\n    display: none !important; } }\r\n\r\n.embed-responsive {\r\n  position: relative;\r\n  display: block;\r\n  width: 100%;\r\n  padding: 0;\r\n  overflow: hidden; }\r\n  .embed-responsive::before {\r\n    display: block;\r\n    content: ""; }\r\n  .embed-responsive .embed-responsive-item,\r\n  .embed-responsive iframe,\r\n  .embed-responsive embed,\r\n  .embed-responsive object,\r\n  .embed-responsive video {\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    border: 0; }\r\n\r\n.embed-responsive-21by9::before {\r\n  padding-top: 42.8571428571%; }\r\n\r\n.embed-responsive-16by9::before {\r\n  padding-top: 56.25%; }\r\n\r\n.embed-responsive-4by3::before {\r\n  padding-top: 75%; }\r\n\r\n.embed-responsive-1by1::before {\r\n  padding-top: 100%; }\r\n\r\n.flex-row {\r\n  flex-direction: row !important; }\r\n\r\n.flex-column {\r\n  flex-direction: column !important; }\r\n\r\n.flex-row-reverse {\r\n  flex-direction: row-reverse !important; }\r\n\r\n.flex-column-reverse {\r\n  flex-direction: column-reverse !important; }\r\n\r\n.flex-wrap {\r\n  flex-wrap: wrap !important; }\r\n\r\n.flex-nowrap {\r\n  flex-wrap: nowrap !important; }\r\n\r\n.flex-wrap-reverse {\r\n  flex-wrap: wrap-reverse !important; }\r\n\r\n.justify-content-start {\r\n  justify-content: flex-start !important; }\r\n\r\n.justify-content-end {\r\n  justify-content: flex-end !important; }\r\n\r\n.justify-content-center {\r\n  justify-content: center !important; }\r\n\r\n.justify-content-between {\r\n  justify-content: space-between !important; }\r\n\r\n.justify-content-around {\r\n  justify-content: space-around !important; }\r\n\r\n.align-items-start {\r\n  align-items: flex-start !important; }\r\n\r\n.align-items-end {\r\n  align-items: flex-end !important; }\r\n\r\n.align-items-center {\r\n  align-items: center !important; }\r\n\r\n.align-items-baseline {\r\n  align-items: baseline !important; }\r\n\r\n.align-items-stretch {\r\n  align-items: stretch !important; }\r\n\r\n.align-content-start {\r\n  align-content: flex-start !important; }\r\n\r\n.align-content-end {\r\n  align-content: flex-end !important; }\r\n\r\n.align-content-center {\r\n  align-content: center !important; }\r\n\r\n.align-content-between {\r\n  align-content: space-between !important; }\r\n\r\n.align-content-around {\r\n  align-content: space-around !important; }\r\n\r\n.align-content-stretch {\r\n  align-content: stretch !important; }\r\n\r\n.align-self-auto {\r\n  align-self: auto !important; }\r\n\r\n.align-self-start {\r\n  align-self: flex-start !important; }\r\n\r\n.align-self-end {\r\n  align-self: flex-end !important; }\r\n\r\n.align-self-center {\r\n  align-self: center !important; }\r\n\r\n.align-self-baseline {\r\n  align-self: baseline !important; }\r\n\r\n.align-self-stretch {\r\n  align-self: stretch !important; }\r\n\r\n@media (min-width: 576px) {\r\n  .flex-sm-row {\r\n    flex-direction: row !important; }\r\n\r\n  .flex-sm-column {\r\n    flex-direction: column !important; }\r\n\r\n  .flex-sm-row-reverse {\r\n    flex-direction: row-reverse !important; }\r\n\r\n  .flex-sm-column-reverse {\r\n    flex-direction: column-reverse !important; }\r\n\r\n  .flex-sm-wrap {\r\n    flex-wrap: wrap !important; }\r\n\r\n  .flex-sm-nowrap {\r\n    flex-wrap: nowrap !important; }\r\n\r\n  .flex-sm-wrap-reverse {\r\n    flex-wrap: wrap-reverse !important; }\r\n\r\n  .justify-content-sm-start {\r\n    justify-content: flex-start !important; }\r\n\r\n  .justify-content-sm-end {\r\n    justify-content: flex-end !important; }\r\n\r\n  .justify-content-sm-center {\r\n    justify-content: center !important; }\r\n\r\n  .justify-content-sm-between {\r\n    justify-content: space-between !important; }\r\n\r\n  .justify-content-sm-around {\r\n    justify-content: space-around !important; }\r\n\r\n  .align-items-sm-start {\r\n    align-items: flex-start !important; }\r\n\r\n  .align-items-sm-end {\r\n    align-items: flex-end !important; }\r\n\r\n  .align-items-sm-center {\r\n    align-items: center !important; }\r\n\r\n  .align-items-sm-baseline {\r\n    align-items: baseline !important; }\r\n\r\n  .align-items-sm-stretch {\r\n    align-items: stretch !important; }\r\n\r\n  .align-content-sm-start {\r\n    align-content: flex-start !important; }\r\n\r\n  .align-content-sm-end {\r\n    align-content: flex-end !important; }\r\n\r\n  .align-content-sm-center {\r\n    align-content: center !important; }\r\n\r\n  .align-content-sm-between {\r\n    align-content: space-between !important; }\r\n\r\n  .align-content-sm-around {\r\n    align-content: space-around !important; }\r\n\r\n  .align-content-sm-stretch {\r\n    align-content: stretch !important; }\r\n\r\n  .align-self-sm-auto {\r\n    align-self: auto !important; }\r\n\r\n  .align-self-sm-start {\r\n    align-self: flex-start !important; }\r\n\r\n  .align-self-sm-end {\r\n    align-self: flex-end !important; }\r\n\r\n  .align-self-sm-center {\r\n    align-self: center !important; }\r\n\r\n  .align-self-sm-baseline {\r\n    align-self: baseline !important; }\r\n\r\n  .align-self-sm-stretch {\r\n    align-self: stretch !important; } }\r\n@media (min-width: 768px) {\r\n  .flex-md-row {\r\n    flex-direction: row !important; }\r\n\r\n  .flex-md-column {\r\n    flex-direction: column !important; }\r\n\r\n  .flex-md-row-reverse {\r\n    flex-direction: row-reverse !important; }\r\n\r\n  .flex-md-column-reverse {\r\n    flex-direction: column-reverse !important; }\r\n\r\n  .flex-md-wrap {\r\n    flex-wrap: wrap !important; }\r\n\r\n  .flex-md-nowrap {\r\n    flex-wrap: nowrap !important; }\r\n\r\n  .flex-md-wrap-reverse {\r\n    flex-wrap: wrap-reverse !important; }\r\n\r\n  .justify-content-md-start {\r\n    justify-content: flex-start !important; }\r\n\r\n  .justify-content-md-end {\r\n    justify-content: flex-end !important; }\r\n\r\n  .justify-content-md-center {\r\n    justify-content: center !important; }\r\n\r\n  .justify-content-md-between {\r\n    justify-content: space-between !important; }\r\n\r\n  .justify-content-md-around {\r\n    justify-content: space-around !important; }\r\n\r\n  .align-items-md-start {\r\n    align-items: flex-start !important; }\r\n\r\n  .align-items-md-end {\r\n    align-items: flex-end !important; }\r\n\r\n  .align-items-md-center {\r\n    align-items: center !important; }\r\n\r\n  .align-items-md-baseline {\r\n    align-items: baseline !important; }\r\n\r\n  .align-items-md-stretch {\r\n    align-items: stretch !important; }\r\n\r\n  .align-content-md-start {\r\n    align-content: flex-start !important; }\r\n\r\n  .align-content-md-end {\r\n    align-content: flex-end !important; }\r\n\r\n  .align-content-md-center {\r\n    align-content: center !important; }\r\n\r\n  .align-content-md-between {\r\n    align-content: space-between !important; }\r\n\r\n  .align-content-md-around {\r\n    align-content: space-around !important; }\r\n\r\n  .align-content-md-stretch {\r\n    align-content: stretch !important; }\r\n\r\n  .align-self-md-auto {\r\n    align-self: auto !important; }\r\n\r\n  .align-self-md-start {\r\n    align-self: flex-start !important; }\r\n\r\n  .align-self-md-end {\r\n    align-self: flex-end !important; }\r\n\r\n  .align-self-md-center {\r\n    align-self: center !important; }\r\n\r\n  .align-self-md-baseline {\r\n    align-self: baseline !important; }\r\n\r\n  .align-self-md-stretch {\r\n    align-self: stretch !important; } }\r\n@media (min-width: 992px) {\r\n  .flex-lg-row {\r\n    flex-direction: row !important; }\r\n\r\n  .flex-lg-column {\r\n    flex-direction: column !important; }\r\n\r\n  .flex-lg-row-reverse {\r\n    flex-direction: row-reverse !important; }\r\n\r\n  .flex-lg-column-reverse {\r\n    flex-direction: column-reverse !important; }\r\n\r\n  .flex-lg-wrap {\r\n    flex-wrap: wrap !important; }\r\n\r\n  .flex-lg-nowrap {\r\n    flex-wrap: nowrap !important; }\r\n\r\n  .flex-lg-wrap-reverse {\r\n    flex-wrap: wrap-reverse !important; }\r\n\r\n  .justify-content-lg-start {\r\n    justify-content: flex-start !important; }\r\n\r\n  .justify-content-lg-end {\r\n    justify-content: flex-end !important; }\r\n\r\n  .justify-content-lg-center {\r\n    justify-content: center !important; }\r\n\r\n  .justify-content-lg-between {\r\n    justify-content: space-between !important; }\r\n\r\n  .justify-content-lg-around {\r\n    justify-content: space-around !important; }\r\n\r\n  .align-items-lg-start {\r\n    align-items: flex-start !important; }\r\n\r\n  .align-items-lg-end {\r\n    align-items: flex-end !important; }\r\n\r\n  .align-items-lg-center {\r\n    align-items: center !important; }\r\n\r\n  .align-items-lg-baseline {\r\n    align-items: baseline !important; }\r\n\r\n  .align-items-lg-stretch {\r\n    align-items: stretch !important; }\r\n\r\n  .align-content-lg-start {\r\n    align-content: flex-start !important; }\r\n\r\n  .align-content-lg-end {\r\n    align-content: flex-end !important; }\r\n\r\n  .align-content-lg-center {\r\n    align-content: center !important; }\r\n\r\n  .align-content-lg-between {\r\n    align-content: space-between !important; }\r\n\r\n  .align-content-lg-around {\r\n    align-content: space-around !important; }\r\n\r\n  .align-content-lg-stretch {\r\n    align-content: stretch !important; }\r\n\r\n  .align-self-lg-auto {\r\n    align-self: auto !important; }\r\n\r\n  .align-self-lg-start {\r\n    align-self: flex-start !important; }\r\n\r\n  .align-self-lg-end {\r\n    align-self: flex-end !important; }\r\n\r\n  .align-self-lg-center {\r\n    align-self: center !important; }\r\n\r\n  .align-self-lg-baseline {\r\n    align-self: baseline !important; }\r\n\r\n  .align-self-lg-stretch {\r\n    align-self: stretch !important; } }\r\n@media (min-width: 1200px) {\r\n  .flex-xl-row {\r\n    flex-direction: row !important; }\r\n\r\n  .flex-xl-column {\r\n    flex-direction: column !important; }\r\n\r\n  .flex-xl-row-reverse {\r\n    flex-direction: row-reverse !important; }\r\n\r\n  .flex-xl-column-reverse {\r\n    flex-direction: column-reverse !important; }\r\n\r\n  .flex-xl-wrap {\r\n    flex-wrap: wrap !important; }\r\n\r\n  .flex-xl-nowrap {\r\n    flex-wrap: nowrap !important; }\r\n\r\n  .flex-xl-wrap-reverse {\r\n    flex-wrap: wrap-reverse !important; }\r\n\r\n  .justify-content-xl-start {\r\n    justify-content: flex-start !important; }\r\n\r\n  .justify-content-xl-end {\r\n    justify-content: flex-end !important; }\r\n\r\n  .justify-content-xl-center {\r\n    justify-content: center !important; }\r\n\r\n  .justify-content-xl-between {\r\n    justify-content: space-between !important; }\r\n\r\n  .justify-content-xl-around {\r\n    justify-content: space-around !important; }\r\n\r\n  .align-items-xl-start {\r\n    align-items: flex-start !important; }\r\n\r\n  .align-items-xl-end {\r\n    align-items: flex-end !important; }\r\n\r\n  .align-items-xl-center {\r\n    align-items: center !important; }\r\n\r\n  .align-items-xl-baseline {\r\n    align-items: baseline !important; }\r\n\r\n  .align-items-xl-stretch {\r\n    align-items: stretch !important; }\r\n\r\n  .align-content-xl-start {\r\n    align-content: flex-start !important; }\r\n\r\n  .align-content-xl-end {\r\n    align-content: flex-end !important; }\r\n\r\n  .align-content-xl-center {\r\n    align-content: center !important; }\r\n\r\n  .align-content-xl-between {\r\n    align-content: space-between !important; }\r\n\r\n  .align-content-xl-around {\r\n    align-content: space-around !important; }\r\n\r\n  .align-content-xl-stretch {\r\n    align-content: stretch !important; }\r\n\r\n  .align-self-xl-auto {\r\n    align-self: auto !important; }\r\n\r\n  .align-self-xl-start {\r\n    align-self: flex-start !important; }\r\n\r\n  .align-self-xl-end {\r\n    align-self: flex-end !important; }\r\n\r\n  .align-self-xl-center {\r\n    align-self: center !important; }\r\n\r\n  .align-self-xl-baseline {\r\n    align-self: baseline !important; }\r\n\r\n  .align-self-xl-stretch {\r\n    align-self: stretch !important; } }\r\n.float-left {\r\n  float: left !important; }\r\n\r\n.float-right {\r\n  float: right !important; }\r\n\r\n.float-none {\r\n  float: none !important; }\r\n\r\n@media (min-width: 576px) {\r\n  .float-sm-left {\r\n    float: left !important; }\r\n\r\n  .float-sm-right {\r\n    float: right !important; }\r\n\r\n  .float-sm-none {\r\n    float: none !important; } }\r\n@media (min-width: 768px) {\r\n  .float-md-left {\r\n    float: left !important; }\r\n\r\n  .float-md-right {\r\n    float: right !important; }\r\n\r\n  .float-md-none {\r\n    float: none !important; } }\r\n@media (min-width: 992px) {\r\n  .float-lg-left {\r\n    float: left !important; }\r\n\r\n  .float-lg-right {\r\n    float: right !important; }\r\n\r\n  .float-lg-none {\r\n    float: none !important; } }\r\n@media (min-width: 1200px) {\r\n  .float-xl-left {\r\n    float: left !important; }\r\n\r\n  .float-xl-right {\r\n    float: right !important; }\r\n\r\n  .float-xl-none {\r\n    float: none !important; } }\r\n.position-static {\r\n  position: static !important; }\r\n\r\n.position-relative {\r\n  position: relative !important; }\r\n\r\n.position-absolute {\r\n  position: absolute !important; }\r\n\r\n.position-fixed {\r\n  position: fixed !important; }\r\n\r\n.position-sticky {\r\n  position: sticky !important; }\r\n\r\n.fixed-top {\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n  z-index: 1030; }\r\n\r\n.fixed-bottom {\r\n  position: fixed;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 1030; }\r\n\r\n@supports (position: sticky) {\r\n  .sticky-top {\r\n    position: sticky;\r\n    top: 0;\r\n    z-index: 1020; } }\r\n\r\n.sr-only {\r\n  position: absolute;\r\n  width: 1px;\r\n  height: 1px;\r\n  padding: 0;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0);\r\n  white-space: nowrap;\r\n  clip-path: inset(50%);\r\n  border: 0; }\r\n\r\n.sr-only-focusable:active, .sr-only-focusable:focus {\r\n  position: static;\r\n  width: auto;\r\n  height: auto;\r\n  overflow: visible;\r\n  clip: auto;\r\n  white-space: normal;\r\n  clip-path: none; }\r\n\r\n.w-25 {\r\n  width: 25% !important; }\r\n\r\n.w-50 {\r\n  width: 50% !important; }\r\n\r\n.w-75 {\r\n  width: 75% !important; }\r\n\r\n.w-100 {\r\n  width: 100% !important; }\r\n\r\n.h-25 {\r\n  height: 25% !important; }\r\n\r\n.h-50 {\r\n  height: 50% !important; }\r\n\r\n.h-75 {\r\n  height: 75% !important; }\r\n\r\n.h-100 {\r\n  height: 100% !important; }\r\n\r\n.mw-100 {\r\n  max-width: 100% !important; }\r\n\r\n.mh-100 {\r\n  max-height: 100% !important; }\r\n\r\n.m-0 {\r\n  margin: 0 !important; }\r\n\r\n.mt-0,\r\n.my-0 {\r\n  margin-top: 0 !important; }\r\n\r\n.mr-0,\r\n.mx-0 {\r\n  margin-right: 0 !important; }\r\n\r\n.mb-0,\r\n.my-0 {\r\n  margin-bottom: 0 !important; }\r\n\r\n.ml-0,\r\n.mx-0 {\r\n  margin-left: 0 !important; }\r\n\r\n.m-1 {\r\n  margin: 0.25rem !important; }\r\n\r\n.mt-1,\r\n.my-1 {\r\n  margin-top: 0.25rem !important; }\r\n\r\n.mr-1,\r\n.mx-1 {\r\n  margin-right: 0.25rem !important; }\r\n\r\n.mb-1,\r\n.my-1 {\r\n  margin-bottom: 0.25rem !important; }\r\n\r\n.ml-1,\r\n.mx-1 {\r\n  margin-left: 0.25rem !important; }\r\n\r\n.m-2 {\r\n  margin: 0.5rem !important; }\r\n\r\n.mt-2,\r\n.my-2 {\r\n  margin-top: 0.5rem !important; }\r\n\r\n.mr-2,\r\n.mx-2 {\r\n  margin-right: 0.5rem !important; }\r\n\r\n.mb-2,\r\n.my-2 {\r\n  margin-bottom: 0.5rem !important; }\r\n\r\n.ml-2,\r\n.mx-2 {\r\n  margin-left: 0.5rem !important; }\r\n\r\n.m-3 {\r\n  margin: 1rem !important; }\r\n\r\n.mt-3,\r\n.my-3 {\r\n  margin-top: 1rem !important; }\r\n\r\n.mr-3,\r\n.mx-3 {\r\n  margin-right: 1rem !important; }\r\n\r\n.mb-3,\r\n.my-3 {\r\n  margin-bottom: 1rem !important; }\r\n\r\n.ml-3,\r\n.mx-3 {\r\n  margin-left: 1rem !important; }\r\n\r\n.m-4 {\r\n  margin: 1.5rem !important; }\r\n\r\n.mt-4,\r\n.my-4 {\r\n  margin-top: 1.5rem !important; }\r\n\r\n.mr-4,\r\n.mx-4 {\r\n  margin-right: 1.5rem !important; }\r\n\r\n.mb-4,\r\n.my-4 {\r\n  margin-bottom: 1.5rem !important; }\r\n\r\n.ml-4,\r\n.mx-4 {\r\n  margin-left: 1.5rem !important; }\r\n\r\n.m-5 {\r\n  margin: 3rem !important; }\r\n\r\n.mt-5,\r\n.my-5 {\r\n  margin-top: 3rem !important; }\r\n\r\n.mr-5,\r\n.mx-5 {\r\n  margin-right: 3rem !important; }\r\n\r\n.mb-5,\r\n.my-5 {\r\n  margin-bottom: 3rem !important; }\r\n\r\n.ml-5,\r\n.mx-5 {\r\n  margin-left: 3rem !important; }\r\n\r\n.p-0 {\r\n  padding: 0 !important; }\r\n\r\n.pt-0,\r\n.py-0 {\r\n  padding-top: 0 !important; }\r\n\r\n.pr-0,\r\n.px-0 {\r\n  padding-right: 0 !important; }\r\n\r\n.pb-0,\r\n.py-0 {\r\n  padding-bottom: 0 !important; }\r\n\r\n.pl-0,\r\n.px-0 {\r\n  padding-left: 0 !important; }\r\n\r\n.p-1 {\r\n  padding: 0.25rem !important; }\r\n\r\n.pt-1,\r\n.py-1 {\r\n  padding-top: 0.25rem !important; }\r\n\r\n.pr-1,\r\n.px-1 {\r\n  padding-right: 0.25rem !important; }\r\n\r\n.pb-1,\r\n.py-1 {\r\n  padding-bottom: 0.25rem !important; }\r\n\r\n.pl-1,\r\n.px-1 {\r\n  padding-left: 0.25rem !important; }\r\n\r\n.p-2 {\r\n  padding: 0.5rem !important; }\r\n\r\n.pt-2,\r\n.py-2 {\r\n  padding-top: 0.5rem !important; }\r\n\r\n.pr-2,\r\n.px-2 {\r\n  padding-right: 0.5rem !important; }\r\n\r\n.pb-2,\r\n.py-2 {\r\n  padding-bottom: 0.5rem !important; }\r\n\r\n.pl-2,\r\n.px-2 {\r\n  padding-left: 0.5rem !important; }\r\n\r\n.p-3 {\r\n  padding: 1rem !important; }\r\n\r\n.pt-3,\r\n.py-3 {\r\n  padding-top: 1rem !important; }\r\n\r\n.pr-3,\r\n.px-3 {\r\n  padding-right: 1rem !important; }\r\n\r\n.pb-3,\r\n.py-3 {\r\n  padding-bottom: 1rem !important; }\r\n\r\n.pl-3,\r\n.px-3 {\r\n  padding-left: 1rem !important; }\r\n\r\n.p-4 {\r\n  padding: 1.5rem !important; }\r\n\r\n.pt-4,\r\n.py-4 {\r\n  padding-top: 1.5rem !important; }\r\n\r\n.pr-4,\r\n.px-4 {\r\n  padding-right: 1.5rem !important; }\r\n\r\n.pb-4,\r\n.py-4 {\r\n  padding-bottom: 1.5rem !important; }\r\n\r\n.pl-4,\r\n.px-4 {\r\n  padding-left: 1.5rem !important; }\r\n\r\n.p-5 {\r\n  padding: 3rem !important; }\r\n\r\n.pt-5,\r\n.py-5 {\r\n  padding-top: 3rem !important; }\r\n\r\n.pr-5,\r\n.px-5 {\r\n  padding-right: 3rem !important; }\r\n\r\n.pb-5,\r\n.py-5 {\r\n  padding-bottom: 3rem !important; }\r\n\r\n.pl-5,\r\n.px-5 {\r\n  padding-left: 3rem !important; }\r\n\r\n.m-auto {\r\n  margin: auto !important; }\r\n\r\n.mt-auto,\r\n.my-auto {\r\n  margin-top: auto !important; }\r\n\r\n.mr-auto,\r\n.mx-auto {\r\n  margin-right: auto !important; }\r\n\r\n.mb-auto,\r\n.my-auto {\r\n  margin-bottom: auto !important; }\r\n\r\n.ml-auto,\r\n.mx-auto {\r\n  margin-left: auto !important; }\r\n\r\n@media (min-width: 576px) {\r\n  .m-sm-0 {\r\n    margin: 0 !important; }\r\n\r\n  .mt-sm-0,\r\n  .my-sm-0 {\r\n    margin-top: 0 !important; }\r\n\r\n  .mr-sm-0,\r\n  .mx-sm-0 {\r\n    margin-right: 0 !important; }\r\n\r\n  .mb-sm-0,\r\n  .my-sm-0 {\r\n    margin-bottom: 0 !important; }\r\n\r\n  .ml-sm-0,\r\n  .mx-sm-0 {\r\n    margin-left: 0 !important; }\r\n\r\n  .m-sm-1 {\r\n    margin: 0.25rem !important; }\r\n\r\n  .mt-sm-1,\r\n  .my-sm-1 {\r\n    margin-top: 0.25rem !important; }\r\n\r\n  .mr-sm-1,\r\n  .mx-sm-1 {\r\n    margin-right: 0.25rem !important; }\r\n\r\n  .mb-sm-1,\r\n  .my-sm-1 {\r\n    margin-bottom: 0.25rem !important; }\r\n\r\n  .ml-sm-1,\r\n  .mx-sm-1 {\r\n    margin-left: 0.25rem !important; }\r\n\r\n  .m-sm-2 {\r\n    margin: 0.5rem !important; }\r\n\r\n  .mt-sm-2,\r\n  .my-sm-2 {\r\n    margin-top: 0.5rem !important; }\r\n\r\n  .mr-sm-2,\r\n  .mx-sm-2 {\r\n    margin-right: 0.5rem !important; }\r\n\r\n  .mb-sm-2,\r\n  .my-sm-2 {\r\n    margin-bottom: 0.5rem !important; }\r\n\r\n  .ml-sm-2,\r\n  .mx-sm-2 {\r\n    margin-left: 0.5rem !important; }\r\n\r\n  .m-sm-3 {\r\n    margin: 1rem !important; }\r\n\r\n  .mt-sm-3,\r\n  .my-sm-3 {\r\n    margin-top: 1rem !important; }\r\n\r\n  .mr-sm-3,\r\n  .mx-sm-3 {\r\n    margin-right: 1rem !important; }\r\n\r\n  .mb-sm-3,\r\n  .my-sm-3 {\r\n    margin-bottom: 1rem !important; }\r\n\r\n  .ml-sm-3,\r\n  .mx-sm-3 {\r\n    margin-left: 1rem !important; }\r\n\r\n  .m-sm-4 {\r\n    margin: 1.5rem !important; }\r\n\r\n  .mt-sm-4,\r\n  .my-sm-4 {\r\n    margin-top: 1.5rem !important; }\r\n\r\n  .mr-sm-4,\r\n  .mx-sm-4 {\r\n    margin-right: 1.5rem !important; }\r\n\r\n  .mb-sm-4,\r\n  .my-sm-4 {\r\n    margin-bottom: 1.5rem !important; }\r\n\r\n  .ml-sm-4,\r\n  .mx-sm-4 {\r\n    margin-left: 1.5rem !important; }\r\n\r\n  .m-sm-5 {\r\n    margin: 3rem !important; }\r\n\r\n  .mt-sm-5,\r\n  .my-sm-5 {\r\n    margin-top: 3rem !important; }\r\n\r\n  .mr-sm-5,\r\n  .mx-sm-5 {\r\n    margin-right: 3rem !important; }\r\n\r\n  .mb-sm-5,\r\n  .my-sm-5 {\r\n    margin-bottom: 3rem !important; }\r\n\r\n  .ml-sm-5,\r\n  .mx-sm-5 {\r\n    margin-left: 3rem !important; }\r\n\r\n  .p-sm-0 {\r\n    padding: 0 !important; }\r\n\r\n  .pt-sm-0,\r\n  .py-sm-0 {\r\n    padding-top: 0 !important; }\r\n\r\n  .pr-sm-0,\r\n  .px-sm-0 {\r\n    padding-right: 0 !important; }\r\n\r\n  .pb-sm-0,\r\n  .py-sm-0 {\r\n    padding-bottom: 0 !important; }\r\n\r\n  .pl-sm-0,\r\n  .px-sm-0 {\r\n    padding-left: 0 !important; }\r\n\r\n  .p-sm-1 {\r\n    padding: 0.25rem !important; }\r\n\r\n  .pt-sm-1,\r\n  .py-sm-1 {\r\n    padding-top: 0.25rem !important; }\r\n\r\n  .pr-sm-1,\r\n  .px-sm-1 {\r\n    padding-right: 0.25rem !important; }\r\n\r\n  .pb-sm-1,\r\n  .py-sm-1 {\r\n    padding-bottom: 0.25rem !important; }\r\n\r\n  .pl-sm-1,\r\n  .px-sm-1 {\r\n    padding-left: 0.25rem !important; }\r\n\r\n  .p-sm-2 {\r\n    padding: 0.5rem !important; }\r\n\r\n  .pt-sm-2,\r\n  .py-sm-2 {\r\n    padding-top: 0.5rem !important; }\r\n\r\n  .pr-sm-2,\r\n  .px-sm-2 {\r\n    padding-right: 0.5rem !important; }\r\n\r\n  .pb-sm-2,\r\n  .py-sm-2 {\r\n    padding-bottom: 0.5rem !important; }\r\n\r\n  .pl-sm-2,\r\n  .px-sm-2 {\r\n    padding-left: 0.5rem !important; }\r\n\r\n  .p-sm-3 {\r\n    padding: 1rem !important; }\r\n\r\n  .pt-sm-3,\r\n  .py-sm-3 {\r\n    padding-top: 1rem !important; }\r\n\r\n  .pr-sm-3,\r\n  .px-sm-3 {\r\n    padding-right: 1rem !important; }\r\n\r\n  .pb-sm-3,\r\n  .py-sm-3 {\r\n    padding-bottom: 1rem !important; }\r\n\r\n  .pl-sm-3,\r\n  .px-sm-3 {\r\n    padding-left: 1rem !important; }\r\n\r\n  .p-sm-4 {\r\n    padding: 1.5rem !important; }\r\n\r\n  .pt-sm-4,\r\n  .py-sm-4 {\r\n    padding-top: 1.5rem !important; }\r\n\r\n  .pr-sm-4,\r\n  .px-sm-4 {\r\n    padding-right: 1.5rem !important; }\r\n\r\n  .pb-sm-4,\r\n  .py-sm-4 {\r\n    padding-bottom: 1.5rem !important; }\r\n\r\n  .pl-sm-4,\r\n  .px-sm-4 {\r\n    padding-left: 1.5rem !important; }\r\n\r\n  .p-sm-5 {\r\n    padding: 3rem !important; }\r\n\r\n  .pt-sm-5,\r\n  .py-sm-5 {\r\n    padding-top: 3rem !important; }\r\n\r\n  .pr-sm-5,\r\n  .px-sm-5 {\r\n    padding-right: 3rem !important; }\r\n\r\n  .pb-sm-5,\r\n  .py-sm-5 {\r\n    padding-bottom: 3rem !important; }\r\n\r\n  .pl-sm-5,\r\n  .px-sm-5 {\r\n    padding-left: 3rem !important; }\r\n\r\n  .m-sm-auto {\r\n    margin: auto !important; }\r\n\r\n  .mt-sm-auto,\r\n  .my-sm-auto {\r\n    margin-top: auto !important; }\r\n\r\n  .mr-sm-auto,\r\n  .mx-sm-auto {\r\n    margin-right: auto !important; }\r\n\r\n  .mb-sm-auto,\r\n  .my-sm-auto {\r\n    margin-bottom: auto !important; }\r\n\r\n  .ml-sm-auto,\r\n  .mx-sm-auto {\r\n    margin-left: auto !important; } }\r\n@media (min-width: 768px) {\r\n  .m-md-0 {\r\n    margin: 0 !important; }\r\n\r\n  .mt-md-0,\r\n  .my-md-0 {\r\n    margin-top: 0 !important; }\r\n\r\n  .mr-md-0,\r\n  .mx-md-0 {\r\n    margin-right: 0 !important; }\r\n\r\n  .mb-md-0,\r\n  .my-md-0 {\r\n    margin-bottom: 0 !important; }\r\n\r\n  .ml-md-0,\r\n  .mx-md-0 {\r\n    margin-left: 0 !important; }\r\n\r\n  .m-md-1 {\r\n    margin: 0.25rem !important; }\r\n\r\n  .mt-md-1,\r\n  .my-md-1 {\r\n    margin-top: 0.25rem !important; }\r\n\r\n  .mr-md-1,\r\n  .mx-md-1 {\r\n    margin-right: 0.25rem !important; }\r\n\r\n  .mb-md-1,\r\n  .my-md-1 {\r\n    margin-bottom: 0.25rem !important; }\r\n\r\n  .ml-md-1,\r\n  .mx-md-1 {\r\n    margin-left: 0.25rem !important; }\r\n\r\n  .m-md-2 {\r\n    margin: 0.5rem !important; }\r\n\r\n  .mt-md-2,\r\n  .my-md-2 {\r\n    margin-top: 0.5rem !important; }\r\n\r\n  .mr-md-2,\r\n  .mx-md-2 {\r\n    margin-right: 0.5rem !important; }\r\n\r\n  .mb-md-2,\r\n  .my-md-2 {\r\n    margin-bottom: 0.5rem !important; }\r\n\r\n  .ml-md-2,\r\n  .mx-md-2 {\r\n    margin-left: 0.5rem !important; }\r\n\r\n  .m-md-3 {\r\n    margin: 1rem !important; }\r\n\r\n  .mt-md-3,\r\n  .my-md-3 {\r\n    margin-top: 1rem !important; }\r\n\r\n  .mr-md-3,\r\n  .mx-md-3 {\r\n    margin-right: 1rem !important; }\r\n\r\n  .mb-md-3,\r\n  .my-md-3 {\r\n    margin-bottom: 1rem !important; }\r\n\r\n  .ml-md-3,\r\n  .mx-md-3 {\r\n    margin-left: 1rem !important; }\r\n\r\n  .m-md-4 {\r\n    margin: 1.5rem !important; }\r\n\r\n  .mt-md-4,\r\n  .my-md-4 {\r\n    margin-top: 1.5rem !important; }\r\n\r\n  .mr-md-4,\r\n  .mx-md-4 {\r\n    margin-right: 1.5rem !important; }\r\n\r\n  .mb-md-4,\r\n  .my-md-4 {\r\n    margin-bottom: 1.5rem !important; }\r\n\r\n  .ml-md-4,\r\n  .mx-md-4 {\r\n    margin-left: 1.5rem !important; }\r\n\r\n  .m-md-5 {\r\n    margin: 3rem !important; }\r\n\r\n  .mt-md-5,\r\n  .my-md-5 {\r\n    margin-top: 3rem !important; }\r\n\r\n  .mr-md-5,\r\n  .mx-md-5 {\r\n    margin-right: 3rem !important; }\r\n\r\n  .mb-md-5,\r\n  .my-md-5 {\r\n    margin-bottom: 3rem !important; }\r\n\r\n  .ml-md-5,\r\n  .mx-md-5 {\r\n    margin-left: 3rem !important; }\r\n\r\n  .p-md-0 {\r\n    padding: 0 !important; }\r\n\r\n  .pt-md-0,\r\n  .py-md-0 {\r\n    padding-top: 0 !important; }\r\n\r\n  .pr-md-0,\r\n  .px-md-0 {\r\n    padding-right: 0 !important; }\r\n\r\n  .pb-md-0,\r\n  .py-md-0 {\r\n    padding-bottom: 0 !important; }\r\n\r\n  .pl-md-0,\r\n  .px-md-0 {\r\n    padding-left: 0 !important; }\r\n\r\n  .p-md-1 {\r\n    padding: 0.25rem !important; }\r\n\r\n  .pt-md-1,\r\n  .py-md-1 {\r\n    padding-top: 0.25rem !important; }\r\n\r\n  .pr-md-1,\r\n  .px-md-1 {\r\n    padding-right: 0.25rem !important; }\r\n\r\n  .pb-md-1,\r\n  .py-md-1 {\r\n    padding-bottom: 0.25rem !important; }\r\n\r\n  .pl-md-1,\r\n  .px-md-1 {\r\n    padding-left: 0.25rem !important; }\r\n\r\n  .p-md-2 {\r\n    padding: 0.5rem !important; }\r\n\r\n  .pt-md-2,\r\n  .py-md-2 {\r\n    padding-top: 0.5rem !important; }\r\n\r\n  .pr-md-2,\r\n  .px-md-2 {\r\n    padding-right: 0.5rem !important; }\r\n\r\n  .pb-md-2,\r\n  .py-md-2 {\r\n    padding-bottom: 0.5rem !important; }\r\n\r\n  .pl-md-2,\r\n  .px-md-2 {\r\n    padding-left: 0.5rem !important; }\r\n\r\n  .p-md-3 {\r\n    padding: 1rem !important; }\r\n\r\n  .pt-md-3,\r\n  .py-md-3 {\r\n    padding-top: 1rem !important; }\r\n\r\n  .pr-md-3,\r\n  .px-md-3 {\r\n    padding-right: 1rem !important; }\r\n\r\n  .pb-md-3,\r\n  .py-md-3 {\r\n    padding-bottom: 1rem !important; }\r\n\r\n  .pl-md-3,\r\n  .px-md-3 {\r\n    padding-left: 1rem !important; }\r\n\r\n  .p-md-4 {\r\n    padding: 1.5rem !important; }\r\n\r\n  .pt-md-4,\r\n  .py-md-4 {\r\n    padding-top: 1.5rem !important; }\r\n\r\n  .pr-md-4,\r\n  .px-md-4 {\r\n    padding-right: 1.5rem !important; }\r\n\r\n  .pb-md-4,\r\n  .py-md-4 {\r\n    padding-bottom: 1.5rem !important; }\r\n\r\n  .pl-md-4,\r\n  .px-md-4 {\r\n    padding-left: 1.5rem !important; }\r\n\r\n  .p-md-5 {\r\n    padding: 3rem !important; }\r\n\r\n  .pt-md-5,\r\n  .py-md-5 {\r\n    padding-top: 3rem !important; }\r\n\r\n  .pr-md-5,\r\n  .px-md-5 {\r\n    padding-right: 3rem !important; }\r\n\r\n  .pb-md-5,\r\n  .py-md-5 {\r\n    padding-bottom: 3rem !important; }\r\n\r\n  .pl-md-5,\r\n  .px-md-5 {\r\n    padding-left: 3rem !important; }\r\n\r\n  .m-md-auto {\r\n    margin: auto !important; }\r\n\r\n  .mt-md-auto,\r\n  .my-md-auto {\r\n    margin-top: auto !important; }\r\n\r\n  .mr-md-auto,\r\n  .mx-md-auto {\r\n    margin-right: auto !important; }\r\n\r\n  .mb-md-auto,\r\n  .my-md-auto {\r\n    margin-bottom: auto !important; }\r\n\r\n  .ml-md-auto,\r\n  .mx-md-auto {\r\n    margin-left: auto !important; } }\r\n@media (min-width: 992px) {\r\n  .m-lg-0 {\r\n    margin: 0 !important; }\r\n\r\n  .mt-lg-0,\r\n  .my-lg-0 {\r\n    margin-top: 0 !important; }\r\n\r\n  .mr-lg-0,\r\n  .mx-lg-0 {\r\n    margin-right: 0 !important; }\r\n\r\n  .mb-lg-0,\r\n  .my-lg-0 {\r\n    margin-bottom: 0 !important; }\r\n\r\n  .ml-lg-0,\r\n  .mx-lg-0 {\r\n    margin-left: 0 !important; }\r\n\r\n  .m-lg-1 {\r\n    margin: 0.25rem !important; }\r\n\r\n  .mt-lg-1,\r\n  .my-lg-1 {\r\n    margin-top: 0.25rem !important; }\r\n\r\n  .mr-lg-1,\r\n  .mx-lg-1 {\r\n    margin-right: 0.25rem !important; }\r\n\r\n  .mb-lg-1,\r\n  .my-lg-1 {\r\n    margin-bottom: 0.25rem !important; }\r\n\r\n  .ml-lg-1,\r\n  .mx-lg-1 {\r\n    margin-left: 0.25rem !important; }\r\n\r\n  .m-lg-2 {\r\n    margin: 0.5rem !important; }\r\n\r\n  .mt-lg-2,\r\n  .my-lg-2 {\r\n    margin-top: 0.5rem !important; }\r\n\r\n  .mr-lg-2,\r\n  .mx-lg-2 {\r\n    margin-right: 0.5rem !important; }\r\n\r\n  .mb-lg-2,\r\n  .my-lg-2 {\r\n    margin-bottom: 0.5rem !important; }\r\n\r\n  .ml-lg-2,\r\n  .mx-lg-2 {\r\n    margin-left: 0.5rem !important; }\r\n\r\n  .m-lg-3 {\r\n    margin: 1rem !important; }\r\n\r\n  .mt-lg-3,\r\n  .my-lg-3 {\r\n    margin-top: 1rem !important; }\r\n\r\n  .mr-lg-3,\r\n  .mx-lg-3 {\r\n    margin-right: 1rem !important; }\r\n\r\n  .mb-lg-3,\r\n  .my-lg-3 {\r\n    margin-bottom: 1rem !important; }\r\n\r\n  .ml-lg-3,\r\n  .mx-lg-3 {\r\n    margin-left: 1rem !important; }\r\n\r\n  .m-lg-4 {\r\n    margin: 1.5rem !important; }\r\n\r\n  .mt-lg-4,\r\n  .my-lg-4 {\r\n    margin-top: 1.5rem !important; }\r\n\r\n  .mr-lg-4,\r\n  .mx-lg-4 {\r\n    margin-right: 1.5rem !important; }\r\n\r\n  .mb-lg-4,\r\n  .my-lg-4 {\r\n    margin-bottom: 1.5rem !important; }\r\n\r\n  .ml-lg-4,\r\n  .mx-lg-4 {\r\n    margin-left: 1.5rem !important; }\r\n\r\n  .m-lg-5 {\r\n    margin: 3rem !important; }\r\n\r\n  .mt-lg-5,\r\n  .my-lg-5 {\r\n    margin-top: 3rem !important; }\r\n\r\n  .mr-lg-5,\r\n  .mx-lg-5 {\r\n    margin-right: 3rem !important; }\r\n\r\n  .mb-lg-5,\r\n  .my-lg-5 {\r\n    margin-bottom: 3rem !important; }\r\n\r\n  .ml-lg-5,\r\n  .mx-lg-5 {\r\n    margin-left: 3rem !important; }\r\n\r\n  .p-lg-0 {\r\n    padding: 0 !important; }\r\n\r\n  .pt-lg-0,\r\n  .py-lg-0 {\r\n    padding-top: 0 !important; }\r\n\r\n  .pr-lg-0,\r\n  .px-lg-0 {\r\n    padding-right: 0 !important; }\r\n\r\n  .pb-lg-0,\r\n  .py-lg-0 {\r\n    padding-bottom: 0 !important; }\r\n\r\n  .pl-lg-0,\r\n  .px-lg-0 {\r\n    padding-left: 0 !important; }\r\n\r\n  .p-lg-1 {\r\n    padding: 0.25rem !important; }\r\n\r\n  .pt-lg-1,\r\n  .py-lg-1 {\r\n    padding-top: 0.25rem !important; }\r\n\r\n  .pr-lg-1,\r\n  .px-lg-1 {\r\n    padding-right: 0.25rem !important; }\r\n\r\n  .pb-lg-1,\r\n  .py-lg-1 {\r\n    padding-bottom: 0.25rem !important; }\r\n\r\n  .pl-lg-1,\r\n  .px-lg-1 {\r\n    padding-left: 0.25rem !important; }\r\n\r\n  .p-lg-2 {\r\n    padding: 0.5rem !important; }\r\n\r\n  .pt-lg-2,\r\n  .py-lg-2 {\r\n    padding-top: 0.5rem !important; }\r\n\r\n  .pr-lg-2,\r\n  .px-lg-2 {\r\n    padding-right: 0.5rem !important; }\r\n\r\n  .pb-lg-2,\r\n  .py-lg-2 {\r\n    padding-bottom: 0.5rem !important; }\r\n\r\n  .pl-lg-2,\r\n  .px-lg-2 {\r\n    padding-left: 0.5rem !important; }\r\n\r\n  .p-lg-3 {\r\n    padding: 1rem !important; }\r\n\r\n  .pt-lg-3,\r\n  .py-lg-3 {\r\n    padding-top: 1rem !important; }\r\n\r\n  .pr-lg-3,\r\n  .px-lg-3 {\r\n    padding-right: 1rem !important; }\r\n\r\n  .pb-lg-3,\r\n  .py-lg-3 {\r\n    padding-bottom: 1rem !important; }\r\n\r\n  .pl-lg-3,\r\n  .px-lg-3 {\r\n    padding-left: 1rem !important; }\r\n\r\n  .p-lg-4 {\r\n    padding: 1.5rem !important; }\r\n\r\n  .pt-lg-4,\r\n  .py-lg-4 {\r\n    padding-top: 1.5rem !important; }\r\n\r\n  .pr-lg-4,\r\n  .px-lg-4 {\r\n    padding-right: 1.5rem !important; }\r\n\r\n  .pb-lg-4,\r\n  .py-lg-4 {\r\n    padding-bottom: 1.5rem !important; }\r\n\r\n  .pl-lg-4,\r\n  .px-lg-4 {\r\n    padding-left: 1.5rem !important; }\r\n\r\n  .p-lg-5 {\r\n    padding: 3rem !important; }\r\n\r\n  .pt-lg-5,\r\n  .py-lg-5 {\r\n    padding-top: 3rem !important; }\r\n\r\n  .pr-lg-5,\r\n  .px-lg-5 {\r\n    padding-right: 3rem !important; }\r\n\r\n  .pb-lg-5,\r\n  .py-lg-5 {\r\n    padding-bottom: 3rem !important; }\r\n\r\n  .pl-lg-5,\r\n  .px-lg-5 {\r\n    padding-left: 3rem !important; }\r\n\r\n  .m-lg-auto {\r\n    margin: auto !important; }\r\n\r\n  .mt-lg-auto,\r\n  .my-lg-auto {\r\n    margin-top: auto !important; }\r\n\r\n  .mr-lg-auto,\r\n  .mx-lg-auto {\r\n    margin-right: auto !important; }\r\n\r\n  .mb-lg-auto,\r\n  .my-lg-auto {\r\n    margin-bottom: auto !important; }\r\n\r\n  .ml-lg-auto,\r\n  .mx-lg-auto {\r\n    margin-left: auto !important; } }\r\n@media (min-width: 1200px) {\r\n  .m-xl-0 {\r\n    margin: 0 !important; }\r\n\r\n  .mt-xl-0,\r\n  .my-xl-0 {\r\n    margin-top: 0 !important; }\r\n\r\n  .mr-xl-0,\r\n  .mx-xl-0 {\r\n    margin-right: 0 !important; }\r\n\r\n  .mb-xl-0,\r\n  .my-xl-0 {\r\n    margin-bottom: 0 !important; }\r\n\r\n  .ml-xl-0,\r\n  .mx-xl-0 {\r\n    margin-left: 0 !important; }\r\n\r\n  .m-xl-1 {\r\n    margin: 0.25rem !important; }\r\n\r\n  .mt-xl-1,\r\n  .my-xl-1 {\r\n    margin-top: 0.25rem !important; }\r\n\r\n  .mr-xl-1,\r\n  .mx-xl-1 {\r\n    margin-right: 0.25rem !important; }\r\n\r\n  .mb-xl-1,\r\n  .my-xl-1 {\r\n    margin-bottom: 0.25rem !important; }\r\n\r\n  .ml-xl-1,\r\n  .mx-xl-1 {\r\n    margin-left: 0.25rem !important; }\r\n\r\n  .m-xl-2 {\r\n    margin: 0.5rem !important; }\r\n\r\n  .mt-xl-2,\r\n  .my-xl-2 {\r\n    margin-top: 0.5rem !important; }\r\n\r\n  .mr-xl-2,\r\n  .mx-xl-2 {\r\n    margin-right: 0.5rem !important; }\r\n\r\n  .mb-xl-2,\r\n  .my-xl-2 {\r\n    margin-bottom: 0.5rem !important; }\r\n\r\n  .ml-xl-2,\r\n  .mx-xl-2 {\r\n    margin-left: 0.5rem !important; }\r\n\r\n  .m-xl-3 {\r\n    margin: 1rem !important; }\r\n\r\n  .mt-xl-3,\r\n  .my-xl-3 {\r\n    margin-top: 1rem !important; }\r\n\r\n  .mr-xl-3,\r\n  .mx-xl-3 {\r\n    margin-right: 1rem !important; }\r\n\r\n  .mb-xl-3,\r\n  .my-xl-3 {\r\n    margin-bottom: 1rem !important; }\r\n\r\n  .ml-xl-3,\r\n  .mx-xl-3 {\r\n    margin-left: 1rem !important; }\r\n\r\n  .m-xl-4 {\r\n    margin: 1.5rem !important; }\r\n\r\n  .mt-xl-4,\r\n  .my-xl-4 {\r\n    margin-top: 1.5rem !important; }\r\n\r\n  .mr-xl-4,\r\n  .mx-xl-4 {\r\n    margin-right: 1.5rem !important; }\r\n\r\n  .mb-xl-4,\r\n  .my-xl-4 {\r\n    margin-bottom: 1.5rem !important; }\r\n\r\n  .ml-xl-4,\r\n  .mx-xl-4 {\r\n    margin-left: 1.5rem !important; }\r\n\r\n  .m-xl-5 {\r\n    margin: 3rem !important; }\r\n\r\n  .mt-xl-5,\r\n  .my-xl-5 {\r\n    margin-top: 3rem !important; }\r\n\r\n  .mr-xl-5,\r\n  .mx-xl-5 {\r\n    margin-right: 3rem !important; }\r\n\r\n  .mb-xl-5,\r\n  .my-xl-5 {\r\n    margin-bottom: 3rem !important; }\r\n\r\n  .ml-xl-5,\r\n  .mx-xl-5 {\r\n    margin-left: 3rem !important; }\r\n\r\n  .p-xl-0 {\r\n    padding: 0 !important; }\r\n\r\n  .pt-xl-0,\r\n  .py-xl-0 {\r\n    padding-top: 0 !important; }\r\n\r\n  .pr-xl-0,\r\n  .px-xl-0 {\r\n    padding-right: 0 !important; }\r\n\r\n  .pb-xl-0,\r\n  .py-xl-0 {\r\n    padding-bottom: 0 !important; }\r\n\r\n  .pl-xl-0,\r\n  .px-xl-0 {\r\n    padding-left: 0 !important; }\r\n\r\n  .p-xl-1 {\r\n    padding: 0.25rem !important; }\r\n\r\n  .pt-xl-1,\r\n  .py-xl-1 {\r\n    padding-top: 0.25rem !important; }\r\n\r\n  .pr-xl-1,\r\n  .px-xl-1 {\r\n    padding-right: 0.25rem !important; }\r\n\r\n  .pb-xl-1,\r\n  .py-xl-1 {\r\n    padding-bottom: 0.25rem !important; }\r\n\r\n  .pl-xl-1,\r\n  .px-xl-1 {\r\n    padding-left: 0.25rem !important; }\r\n\r\n  .p-xl-2 {\r\n    padding: 0.5rem !important; }\r\n\r\n  .pt-xl-2,\r\n  .py-xl-2 {\r\n    padding-top: 0.5rem !important; }\r\n\r\n  .pr-xl-2,\r\n  .px-xl-2 {\r\n    padding-right: 0.5rem !important; }\r\n\r\n  .pb-xl-2,\r\n  .py-xl-2 {\r\n    padding-bottom: 0.5rem !important; }\r\n\r\n  .pl-xl-2,\r\n  .px-xl-2 {\r\n    padding-left: 0.5rem !important; }\r\n\r\n  .p-xl-3 {\r\n    padding: 1rem !important; }\r\n\r\n  .pt-xl-3,\r\n  .py-xl-3 {\r\n    padding-top: 1rem !important; }\r\n\r\n  .pr-xl-3,\r\n  .px-xl-3 {\r\n    padding-right: 1rem !important; }\r\n\r\n  .pb-xl-3,\r\n  .py-xl-3 {\r\n    padding-bottom: 1rem !important; }\r\n\r\n  .pl-xl-3,\r\n  .px-xl-3 {\r\n    padding-left: 1rem !important; }\r\n\r\n  .p-xl-4 {\r\n    padding: 1.5rem !important; }\r\n\r\n  .pt-xl-4,\r\n  .py-xl-4 {\r\n    padding-top: 1.5rem !important; }\r\n\r\n  .pr-xl-4,\r\n  .px-xl-4 {\r\n    padding-right: 1.5rem !important; }\r\n\r\n  .pb-xl-4,\r\n  .py-xl-4 {\r\n    padding-bottom: 1.5rem !important; }\r\n\r\n  .pl-xl-4,\r\n  .px-xl-4 {\r\n    padding-left: 1.5rem !important; }\r\n\r\n  .p-xl-5 {\r\n    padding: 3rem !important; }\r\n\r\n  .pt-xl-5,\r\n  .py-xl-5 {\r\n    padding-top: 3rem !important; }\r\n\r\n  .pr-xl-5,\r\n  .px-xl-5 {\r\n    padding-right: 3rem !important; }\r\n\r\n  .pb-xl-5,\r\n  .py-xl-5 {\r\n    padding-bottom: 3rem !important; }\r\n\r\n  .pl-xl-5,\r\n  .px-xl-5 {\r\n    padding-left: 3rem !important; }\r\n\r\n  .m-xl-auto {\r\n    margin: auto !important; }\r\n\r\n  .mt-xl-auto,\r\n  .my-xl-auto {\r\n    margin-top: auto !important; }\r\n\r\n  .mr-xl-auto,\r\n  .mx-xl-auto {\r\n    margin-right: auto !important; }\r\n\r\n  .mb-xl-auto,\r\n  .my-xl-auto {\r\n    margin-bottom: auto !important; }\r\n\r\n  .ml-xl-auto,\r\n  .mx-xl-auto {\r\n    margin-left: auto !important; } }\r\n.text-justify {\r\n  text-align: justify !important; }\r\n\r\n.text-nowrap {\r\n  white-space: nowrap !important; }\r\n\r\n.text-truncate {\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap; }\r\n\r\n.text-left {\r\n  text-align: left !important; }\r\n\r\n.text-right {\r\n  text-align: right !important; }\r\n\r\n.text-center {\r\n  text-align: center !important; }\r\n\r\n@media (min-width: 576px) {\r\n  .text-sm-left {\r\n    text-align: left !important; }\r\n\r\n  .text-sm-right {\r\n    text-align: right !important; }\r\n\r\n  .text-sm-center {\r\n    text-align: center !important; } }\r\n@media (min-width: 768px) {\r\n  .text-md-left {\r\n    text-align: left !important; }\r\n\r\n  .text-md-right {\r\n    text-align: right !important; }\r\n\r\n  .text-md-center {\r\n    text-align: center !important; } }\r\n@media (min-width: 992px) {\r\n  .text-lg-left {\r\n    text-align: left !important; }\r\n\r\n  .text-lg-right {\r\n    text-align: right !important; }\r\n\r\n  .text-lg-center {\r\n    text-align: center !important; } }\r\n@media (min-width: 1200px) {\r\n  .text-xl-left {\r\n    text-align: left !important; }\r\n\r\n  .text-xl-right {\r\n    text-align: right !important; }\r\n\r\n  .text-xl-center {\r\n    text-align: center !important; } }\r\n.text-lowercase {\r\n  text-transform: lowercase !important; }\r\n\r\n.text-uppercase {\r\n  text-transform: uppercase !important; }\r\n\r\n.text-capitalize {\r\n  text-transform: capitalize !important; }\r\n\r\n.font-weight-light {\r\n  font-weight: 300 !important; }\r\n\r\n.font-weight-normal {\r\n  font-weight: 400 !important; }\r\n\r\n.font-weight-bold {\r\n  font-weight: 700 !important; }\r\n\r\n.font-italic {\r\n  font-style: italic !important; }\r\n\r\n.text-white {\r\n  color: #fff !important; }\r\n\r\n.text-primary {\r\n  color: #007bff !important; }\r\n\r\na.text-primary:focus, a.text-primary:hover {\r\n  color: #0062cc !important; }\r\n\r\n.text-secondary {\r\n  color: #868e96 !important; }\r\n\r\na.text-secondary:focus, a.text-secondary:hover {\r\n  color: #6c757d !important; }\r\n\r\n.text-success {\r\n  color: #28a745 !important; }\r\n\r\na.text-success:focus, a.text-success:hover {\r\n  color: #1e7e34 !important; }\r\n\r\n.text-info {\r\n  color: #17a2b8 !important; }\r\n\r\na.text-info:focus, a.text-info:hover {\r\n  color: #117a8b !important; }\r\n\r\n.text-warning {\r\n  color: #ffc107 !important; }\r\n\r\na.text-warning:focus, a.text-warning:hover {\r\n  color: #d39e00 !important; }\r\n\r\n.text-danger {\r\n  color: #dc3545 !important; }\r\n\r\na.text-danger:focus, a.text-danger:hover {\r\n  color: #bd2130 !important; }\r\n\r\n.text-light {\r\n  color: #f8f9fa !important; }\r\n\r\na.text-light:focus, a.text-light:hover {\r\n  color: #dae0e5 !important; }\r\n\r\n.text-dark {\r\n  color: #343a40 !important; }\r\n\r\na.text-dark:focus, a.text-dark:hover {\r\n  color: #1d2124 !important; }\r\n\r\n.text-muted {\r\n  color: #868e96 !important; }\r\n\r\n.text-hide {\r\n  font: 0/0 a;\r\n  color: transparent;\r\n  text-shadow: none;\r\n  background-color: transparent;\r\n  border: 0; }\r\n\r\n.visible {\r\n  visibility: visible !important; }\r\n\r\n.invisible {\r\n  visibility: hidden !important; }\r\n\r\n/***\r\n#F2C100\r\n#FB493A\r\n#1C0203\r\n#E08955\r\n**/\r\n@font-face {\r\n  font-family: \'FontAwesome\';\r\n  src: url("//use.fontawesome.com/releases/v4.7.0/fonts/fontawesome-webfont.eot");\r\n  src: url("//use.fontawesome.com/releases/v4.7.0/fonts/fontawesome-webfont.eot?#iefix") format("embedded-opentype"), url("//use.fontawesome.com/releases/v4.7.0/fonts/fontawesome-webfont.woff2") format("woff2"), url("//use.fontawesome.com/releases/v4.7.0/fonts/fontawesome-webfont.woff") format("woff"), url("//use.fontawesome.com/releases/v4.7.0/fonts/fontawesome-webfont.ttf") format("truetype"), url("//use.fontawesome.com/releases/v4.7.0/fonts/fontawesome-webfont.svg#fontawesomeregular") format("svg");\r\n  font-weight: normal;\r\n  font-style: normal; }\r\nbody {\r\n  font-size: 1rem;\r\n  color: #000; }\r\n\r\na, button, input {\r\n  -webkit-transition: all 0.3s ease;\r\n  transition: all 0.3s ease; }\r\n\r\nsection {\r\n  margin-bottom: 2.5rem; }\r\n\r\n.no-mb {\r\n  margin-bottom: 0; }\r\n\r\na {\r\n  color: #FB493A; }\r\n  a:hover, a:focus {\r\n    color: #fa1b08; }\r\n\r\nh1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {\r\n  margin-bottom: 1.5rem; }\r\n\r\n.avg-m-top {\r\n  margin-top: 40px; }\r\n\r\n.form-control {\r\n  border-color: #f4bb3a; }\r\n  .form-control:focus {\r\n    border-color: #eea90d; }\r\n\r\n.btn-primary {\r\n  background-color: #f4bb3a;\r\n  border-color: #f4bb3a; }\r\n  .btn-primary:hover, .btn-primary:focus, .btn-primary:active, .btn-primary.active {\r\n    background-color: #FB493A;\r\n    border-color: #FB493A; }\r\n\r\n.container {\r\n  padding-left: 25px;\r\n  padding-right: 25px; }\r\n\r\n.bg-cover {\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: center; }\r\n\r\n.dark-bg {\r\n  background-color: #2f3135;\r\n  color: #fff; }\r\n\r\n.no-style {\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none; }\r\n\r\n.page-link {\r\n  color: #FB493A; }\r\n  .page-link:focus, .page-link:hover {\r\n    color: #FB493A; }\r\n\r\n.page-item.active .page-link {\r\n  background-color: #FB493A;\r\n  border-color: #FB493A; }\r\n\r\n.padding-tb {\r\n  padding: 40px 0; }\r\n\r\n@media (min-width: 768px) {\r\n  .container {\r\n    padding-right: 15px;\r\n    padding-left: 15px; }\r\n\r\n  .w-medium {\r\n    max-width: 740px; }\r\n\r\n  .avg-m-top {\r\n    margin-top: 60px; } }\r\nheader > .container {\r\n  padding-top: 15px;\r\n  padding-bottom: 15px;\r\n  text-align: center; }\r\n\r\n/** top navigation **/\r\n.navbar {\r\n  background-color: #2f3135;\r\n  padding-left: 25px;\r\n  padding-right: 25px; }\r\n\r\n.navbar-dark .navbar-nav .nav-link {\r\n  color: #fff; }\r\n  .navbar-dark .navbar-nav .nav-link.active {\r\n    color: #f4bb3a; }\r\n\r\n/*** footer ***/\r\nfooter {\r\n  background-color: #2f3135;\r\n  padding: 40px 0;\r\n  color: #999999; }\r\n  footer span {\r\n    display: block;\r\n    text-align: center; }\r\n  footer a {\r\n    margin: 0 1rem;\r\n    color: #777777; }\r\n    footer a:hover, footer a:focus {\r\n      color: #b3b3b3;\r\n      text-decoration: none; }\r\n\r\n.social-links {\r\n  margin: 1rem 0;\r\n  font-size: 1.4rem; }\r\n\r\n.share-social {\r\n  cursor: pointer; }\r\n  .share-social .dropdown-toggle {\r\n    margin: 0 auto;\r\n    border: 1px solid;\r\n    width: 2rem;\r\n    height: 2rem;\r\n    line-height: 2rem; }\r\n    .share-social .dropdown-toggle::after {\r\n      display: none; }\r\n  .share-social .dropdown-menu {\r\n    font-size: 20px; }\r\n\r\n/***** home page****/\r\n.page-home h3 {\r\n  font-size: 1.5rem; }\r\n\r\n.banner {\r\n  padding: 80px 0;\r\n  background-color: #f5f5f5;\r\n  background-image: url(/images/banner.jpg); }\r\n  .banner p {\r\n    font-size: 1.5rem; }\r\n\r\n.search-form {\r\n  position: relative; }\r\n  .search-form .form-control {\r\n    padding-right: 70px; }\r\n    .search-form .form-control:focus {\r\n      box-shadow: 0 10px 40px 0 rgba(0, 0, 0, 0.1); }\r\n  .search-form .btn {\r\n    position: absolute;\r\n    right: 2px;\r\n    top: 2px;\r\n    height: 44px;\r\n    line-height: 0px; }\r\n  .search-form.inner .form-control:focus {\r\n    box-shadow: none; }\r\n  .search-form.inner .btn {\r\n    height: 34px; }\r\n\r\n.study-locations .wrap {\r\n  margin-top: 1rem;\r\n  background-color: #f5f5f5; }\r\n.study-locations .thumbnail {\r\n  min-height: 250px;\r\n  margin-bottom: 1rem; }\r\n.study-locations .copy {\r\n  padding: 1rem; }\r\n\r\n.articles,\r\n.levels {\r\n  padding: 2.5rem 0 .5rem; }\r\n\r\n.articles article {\r\n  color: initial;\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-bottom: 5px solid #999999;\r\n  margin-bottom: 2rem; }\r\n\r\n.levels {\r\n  background-color: #f5f5f5; }\r\n  .levels .col-md-6 {\r\n    margin-bottom: 2rem; }\r\n\r\n.test-block {\r\n  border: 1px solid #f5f5f5;\r\n  padding: 1rem;\r\n  margin-bottom: 1.5rem; }\r\n\r\n/******* Universities (search) **********/\r\n.search-banner {\r\n  position: relative;\r\n  background-color: #f4bb3a; }\r\n\r\n.search-filter {\r\n  background-color: #f5f5f5; }\r\n\r\n#universities h3 {\r\n  font-size: 1.25rem; }\r\n#universities .wrapper {\r\n  margin: 0 0 40px;\r\n  border: 1px solid #f5f5f5;\r\n  padding: 1.5rem;\r\n  box-shadow: 0 0px 20px 0 rgba(116, 116, 116, 0.1); }\r\n#universities .logo {\r\n  width: 100px;\r\n  height: 100px;\r\n  border: 1px solid #f5f5f5;\r\n  margin-bottom: 1rem;\r\n  overflow: hidden; }\r\n#universities address {\r\n  color: #999999;\r\n  margin-top: 5px; }\r\n#universities .feature {\r\n  color: #777777; }\r\n#universities .rankings strong {\r\n  display: inline-block;\r\n  margin-bottom: 5px;\r\n  color: #f4bb3a; }\r\n#universities .fa {\r\n  margin-right: 15px; }\r\n\r\n.blog article .wrap {\r\n  border-bottom: 5px solid;\r\n  margin: 0 2rem 2.5rem 0; }\r\n.blog article:nth-of-type(2n) .wrap {\r\n  margin-right: 0; }\r\n.blog h3 {\r\n  font-size: 1.5rem; }\r\n\r\n@media (min-width: 768px) {\r\n  section {\r\n    margin-bottom: 4rem; }\r\n\r\n  header > .container {\r\n    text-align: left; }\r\n\r\n  .navbar {\r\n    padding: 0 1rem; }\r\n\r\n  .nav-link {\r\n    padding: 1rem 2rem; }\r\n\r\n  .navbar-dark .navbar-nav .nav-link:hover, .navbar-dark .navbar-nav .nav-link:focus {\r\n    color: #f4bb3a; }\r\n  .navbar-dark .navbar-nav .nav-link.active {\r\n    border-top: 2px solid #f4bb3a; }\r\n\r\n  footer {\r\n    padding: 60px 0; }\r\n    footer p {\r\n      float: left; }\r\n\r\n  .ft-links,\r\n  .social-links {\r\n    display: inline-block; }\r\n\r\n  .social-links {\r\n    margin: 0; }\r\n\r\n  .share-social {\r\n    margin-top: 2rem; }\r\n    .share-social .dropdown-toggle {\r\n      margin: 0; }\r\n\r\n  /*** Home page *********/\r\n  .banner {\r\n    min-height: 550px; }\r\n    .banner h1 {\r\n      margin-top: 60px; }\r\n\r\n  .study-locations .wrap {\r\n    margin-top: 2rem; }\r\n    .study-locations .wrap .col-md-5 {\r\n      padding-right: 0; }\r\n  .study-locations .thumbnail {\r\n    margin-bottom: 0; }\r\n\r\n  .articles,\r\n  .levels {\r\n    padding: 4rem 0 2.5rem; }\r\n\r\n  /*************** Universities (search) **************/\r\n  .cover-50 {\r\n    background-image: url(/images/search-banner.jpg);\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    position: absolute;\r\n    right: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    width: 50%; }\r\n\r\n  #universities .wrapper {\r\n    margin: 0 10px 60px; } }\r\n@media (min-width: 992px) {\r\n  .navbar-expand-lg .navbar-nav .nav-link {\r\n    padding: 1rem 2rem; } }\r\n',""])},function(n,r){function t(n,r){var t=n[1]||"",e=n[3];if(!e)return t;if(r&&"function"==typeof btoa){var o=function(n){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"}(e),i=e.sources.map(function(n){return"/*# sourceURL="+e.sourceRoot+n+" */"});return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}n.exports=function(n){var r=[];return r.toString=function(){return this.map(function(r){var e=t(r,n);return r[2]?"@media "+r[2]+"{"+e+"}":e}).join("")},r.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var e={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(e[i]=!0)}for(o=0;o<n.length;o++){var a=n[o];"number"==typeof a[0]&&e[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),r.push(a))}},r}},function(n,r,t){function e(n,r){for(var t=0;t<n.length;t++){var e=n[t],o=p[e.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](e.parts[i]);for(;i<e.parts.length;i++)o.parts.push(d(e.parts[i],r))}else{var a=[];for(i=0;i<e.parts.length;i++)a.push(d(e.parts[i],r));p[e.id]={id:e.id,refs:1,parts:a}}}}function o(n,r){for(var t=[],e={},o=0;o<n.length;o++){var i=n[o],a=r.base?i[0]+r.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};e[a]?e[a].parts.push(l):t.push(e[a]={id:a,parts:[l]})}return t}function i(n,r){var t=f(n.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var e=h[h.length-1];if("top"===n.insertAt)e?e.nextSibling?t.insertBefore(r,e.nextSibling):t.appendChild(r):t.insertBefore(r,t.firstChild),h.push(r);else if("bottom"===n.insertAt)t.appendChild(r);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=f(n.insertInto+" "+n.insertAt.before);t.insertBefore(r,o)}}function a(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var r=h.indexOf(n);r>=0&&h.splice(r,1)}function l(n){var r=document.createElement("style");return n.attrs.type="text/css",s(r,n.attrs),i(n,r),r}function s(n,r){Object.keys(r).forEach(function(t){n.setAttribute(t,r[t])})}function d(n,r){var t,e,o,d;if(r.transform&&n.css){if(!(d=r.transform(n.css)))return function(){};n.css=d}if(r.singleton){var p=g++;t=u||(u=l(r)),e=c.bind(null,t,p,!1),o=c.bind(null,t,p,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(n){var r=document.createElement("link");return n.attrs.type="text/css",n.attrs.rel="stylesheet",s(r,n.attrs),i(n,r),r}(r),e=function(n,r,t){var e=t.css,o=t.sourceMap,i=void 0===r.convertToAbsoluteUrls&&o;(r.convertToAbsoluteUrls||i)&&(e=b(e));o&&(e+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([e],{type:"text/css"}),l=n.href;n.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}.bind(null,t,r),o=function(){a(t),t.href&&URL.revokeObjectURL(t.href)}):(t=l(r),e=function(n,r){var t=r.css,e=r.media;e&&n.setAttribute("media",e);if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}.bind(null,t),o=function(){a(t)});return e(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap)return;e(n=r)}else o()}}function c(n,r,t,e){var o=t?"":e.css;if(n.styleSheet)n.styleSheet.cssText=v(r,o);else{var i=document.createTextNode(o),a=n.childNodes;a[r]&&n.removeChild(a[r]),a.length?n.insertBefore(i,a[r]):n.appendChild(i)}}var p={},m=function(n){var r;return function(){return void 0===r&&(r=n.apply(this,arguments)),r}}(function(){return window&&document&&document.all&&!window.atob}),f=function(n){var r={};return function(n){if(void 0===r[n]){var t=function(n){return document.querySelector(n)}.call(this,n);if(t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}r[n]=t}return r[n]}}(),u=null,g=0,h=[],b=t(6);n.exports=function(n,r){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(r=r||{}).attrs="object"==typeof r.attrs?r.attrs:{},r.singleton||"boolean"==typeof r.singleton||(r.singleton=m()),r.insertInto||(r.insertInto="head"),r.insertAt||(r.insertAt="bottom");var t=o(n,r);return e(t,r),function(n){for(var i=[],a=0;a<t.length;a++){var l=t[a];(s=p[l.id]).refs--,i.push(s)}if(n){e(o(n,r),r)}for(a=0;a<i.length;a++){var s;if(0===(s=i[a]).refs){for(var d=0;d<s.parts.length;d++)s.parts[d]();delete p[s.id]}}}};var v=function(){var n=[];return function(r,t){return n[r]=t,n.filter(Boolean).join("\n")}}()},function(n,r){n.exports=function(n){var r="undefined"!=typeof window&&window.location;if(!r)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var t=r.protocol+"//"+r.host,e=t+r.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,r){var o=r.trim().replace(/^"(.*)"$/,function(n,r){return r}).replace(/^'(.*)'$/,function(n,r){return r});if(/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(o))return n;var i;return i=0===o.indexOf("//")?o:0===o.indexOf("/")?t+o:e+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")"})}},,,function(n,r,t){(function(n,r){!function(n,r,t){"use strict";function e(n,r){for(var t=0;t<r.length;t++){var e=r[t];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}r=r&&r.hasOwnProperty("default")?r.default:r,t=t&&t.hasOwnProperty("default")?t.default:t;var o=function(){function n(n){return{}.toString.call(n).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function t(n){var t=this,e=!1;return r(this).one(i.TRANSITION_END,function(){e=!0}),setTimeout(function(){e||i.triggerTransitionEnd(t)},n),this}var e=!1,o={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"},i={TRANSITION_END:"bsTransitionEnd",getUID:function(n){do{n+=~~(1e6*Math.random())}while(document.getElementById(n));return n},getSelectorFromElement:function(n){var t=n.getAttribute("data-target");t&&"#"!==t||(t=n.getAttribute("href")||"");try{return r(document).find(t).length>0?t:null}catch(n){return null}},reflow:function(n){return n.offsetHeight},triggerTransitionEnd:function(n){r(n).trigger(e.end)},supportsTransitionEnd:function(){return Boolean(e)},isElement:function(n){return(n[0]||n).nodeType},typeCheckConfig:function(r,t,e){for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=e[o],l=t[o],s=l&&i.isElement(l)?"element":n(l);if(!new RegExp(a).test(s))throw new Error(r.toUpperCase()+': Option "'+o+'" provided type "'+s+'" but expected type "'+a+'".')}}};return e=function(){if(window.QUnit)return!1;var n=document.createElement("bootstrap");for(var r in o)if(void 0!==n.style[r])return{end:o[r]};return!1}(),r.fn.emulateTransitionEnd=t,i.supportsTransitionEnd()&&(r.event.special[i.TRANSITION_END]={bindType:e.end,delegateType:e.end,handle:function(n){if(r(n.target).is(this))return n.handleObj.handler.apply(this,arguments)}}),i}(),i=function(n,r,t){return r&&e(n.prototype,r),t&&e(n,t),n},a=function(n,r){n.prototype=Object.create(r.prototype),n.prototype.constructor=n,n.__proto__=r},l=function(){var n=r.fn.alert,t={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},e="alert",a="fade",l="show",s=function(){function n(n){this._element=n}var s=n.prototype;return s.close=function(n){n=n||this._element;var r=this._getRootElement(n);this._triggerCloseEvent(r).isDefaultPrevented()||this._removeElement(r)},s.dispose=function(){r.removeData(this._element,"bs.alert"),this._element=null},s._getRootElement=function(n){var t=o.getSelectorFromElement(n),i=!1;return t&&(i=r(t)[0]),i||(i=r(n).closest("."+e)[0]),i},s._triggerCloseEvent=function(n){var e=r.Event(t.CLOSE);return r(n).trigger(e),e},s._removeElement=function(n){var t=this;r(n).removeClass(l),o.supportsTransitionEnd()&&r(n).hasClass(a)?r(n).one(o.TRANSITION_END,function(r){return t._destroyElement(n,r)}).emulateTransitionEnd(150):this._destroyElement(n)},s._destroyElement=function(n){r(n).detach().trigger(t.CLOSED).remove()},n._jQueryInterface=function(t){return this.each(function(){var e=r(this),o=e.data("bs.alert");o||(o=new n(this),e.data("bs.alert",o)),"close"===t&&o[t](this)})},n._handleDismiss=function(n){return function(r){r&&r.preventDefault(),n.close(this)}},i(n,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}}]),n}();return r(document).on(t.CLICK_DATA_API,'[data-dismiss="alert"]',s._handleDismiss(new s)),r.fn.alert=s._jQueryInterface,r.fn.alert.Constructor=s,r.fn.alert.noConflict=function(){return r.fn.alert=n,s._jQueryInterface},s}(),s=function(){var n=r.fn.button,t="active",e="btn",o="focus",a='[data-toggle^="button"]',l='[data-toggle="buttons"]',s="input",d=".active",c=".btn",p={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},m=function(){function n(n){this._element=n}var e=n.prototype;return e.toggle=function(){var n=!0,e=!0,o=r(this._element).closest(l)[0];if(o){var i=r(this._element).find(s)[0];if(i){if("radio"===i.type)if(i.checked&&r(this._element).hasClass(t))n=!1;else{var a=r(o).find(d)[0];a&&r(a).removeClass(t)}if(n){if(i.hasAttribute("disabled")||o.hasAttribute("disabled")||i.classList.contains("disabled")||o.classList.contains("disabled"))return;i.checked=!r(this._element).hasClass(t),r(i).trigger("change")}i.focus(),e=!1}}e&&this._element.setAttribute("aria-pressed",!r(this._element).hasClass(t)),n&&r(this._element).toggleClass(t)},e.dispose=function(){r.removeData(this._element,"bs.button"),this._element=null},n._jQueryInterface=function(t){return this.each(function(){var e=r(this).data("bs.button");e||(e=new n(this),r(this).data("bs.button",e)),"toggle"===t&&e[t]()})},i(n,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}}]),n}();return r(document).on(p.CLICK_DATA_API,a,function(n){n.preventDefault();var t=n.target;r(t).hasClass(e)||(t=r(t).closest(c)),m._jQueryInterface.call(r(t),"toggle")}).on(p.FOCUS_BLUR_DATA_API,a,function(n){var t=r(n.target).closest(c)[0];r(t).toggleClass(o,/^focus(in)?$/.test(n.type))}),r.fn.button=m._jQueryInterface,r.fn.button.Constructor=m,r.fn.button.noConflict=function(){return r.fn.button=n,m._jQueryInterface},m}(),d=function(){var n="bs.carousel",t="."+n,e=r.fn.carousel,a={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},l={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},s="next",d="prev",c="left",p="right",m={SLIDE:"slide"+t,SLID:"slid"+t,KEYDOWN:"keydown"+t,MOUSEENTER:"mouseenter"+t,MOUSELEAVE:"mouseleave"+t,TOUCHEND:"touchend"+t,LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},f="carousel",u="active",g="slide",h="carousel-item-right",b="carousel-item-left",v="carousel-item-next",x="carousel-item-prev",y={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},w=function(){function e(n,t){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(t),this._element=r(n)[0],this._indicatorsElement=r(this._element).find(y.INDICATORS)[0],this._addEventListeners()}var w=e.prototype;return w.next=function(){this._isSliding||this._slide(s)},w.nextWhenVisible=function(){!document.hidden&&r(this._element).is(":visible")&&"hidden"!==r(this._element).css("visibility")&&this.next()},w.prev=function(){this._isSliding||this._slide(d)},w.pause=function(n){n||(this._isPaused=!0),r(this._element).find(y.NEXT_PREV)[0]&&o.supportsTransitionEnd()&&(o.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},w.cycle=function(n){n||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},w.to=function(n){var t=this;this._activeElement=r(this._element).find(y.ACTIVE_ITEM)[0];var e=this._getItemIndex(this._activeElement);if(!(n>this._items.length-1||n<0))if(this._isSliding)r(this._element).one(m.SLID,function(){return t.to(n)});else{if(e===n)return this.pause(),void this.cycle();var o=n>e?s:d;this._slide(o,this._items[n])}},w.dispose=function(){r(this._element).off(t),r.removeData(this._element,n),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},w._getConfig=function(n){return n=r.extend({},a,n),o.typeCheckConfig("carousel",n,l),n},w._addEventListeners=function(){var n=this;this._config.keyboard&&r(this._element).on(m.KEYDOWN,function(r){return n._keydown(r)}),"hover"===this._config.pause&&(r(this._element).on(m.MOUSEENTER,function(r){return n.pause(r)}).on(m.MOUSELEAVE,function(r){return n.cycle(r)}),"ontouchstart"in document.documentElement&&r(this._element).on(m.TOUCHEND,function(){n.pause(),n.touchTimeout&&clearTimeout(n.touchTimeout),n.touchTimeout=setTimeout(function(r){return n.cycle(r)},500+n._config.interval)}))},w._keydown=function(n){if(!/input|textarea/i.test(n.target.tagName))switch(n.which){case 37:n.preventDefault(),this.prev();break;case 39:n.preventDefault(),this.next();break;default:return}},w._getItemIndex=function(n){return this._items=r.makeArray(r(n).parent().find(y.ITEM)),this._items.indexOf(n)},w._getItemByDirection=function(n,r){var t=n===s,e=n===d,o=this._getItemIndex(r),i=this._items.length-1;if((e&&0===o||t&&o===i)&&!this._config.wrap)return r;var a=(o+(n===d?-1:1))%this._items.length;return-1===a?this._items[this._items.length-1]:this._items[a]},w._triggerSlideEvent=function(n,t){var e=this._getItemIndex(n),o=this._getItemIndex(r(this._element).find(y.ACTIVE_ITEM)[0]),i=r.Event(m.SLIDE,{relatedTarget:n,direction:t,from:o,to:e});return r(this._element).trigger(i),i},w._setActiveIndicatorElement=function(n){if(this._indicatorsElement){r(this._indicatorsElement).find(y.ACTIVE).removeClass(u);var t=this._indicatorsElement.children[this._getItemIndex(n)];t&&r(t).addClass(u)}},w._slide=function(n,t){var e,i,a,l=this,d=r(this._element).find(y.ACTIVE_ITEM)[0],f=this._getItemIndex(d),w=t||d&&this._getItemByDirection(n,d),k=this._getItemIndex(w),_=Boolean(this._interval);if(n===s?(e=b,i=v,a=c):(e=h,i=x,a=p),w&&r(w).hasClass(u))this._isSliding=!1;else{if(!this._triggerSlideEvent(w,a).isDefaultPrevented()&&d&&w){this._isSliding=!0,_&&this.pause(),this._setActiveIndicatorElement(w);var E=r.Event(m.SLID,{relatedTarget:w,direction:a,from:f,to:k});o.supportsTransitionEnd()&&r(this._element).hasClass(g)?(r(w).addClass(i),o.reflow(w),r(d).addClass(e),r(w).addClass(e),r(d).one(o.TRANSITION_END,function(){r(w).removeClass(e+" "+i).addClass(u),r(d).removeClass(u+" "+i+" "+e),l._isSliding=!1,setTimeout(function(){return r(l._element).trigger(E)},0)}).emulateTransitionEnd(600)):(r(d).removeClass(u),r(w).addClass(u),this._isSliding=!1,r(this._element).trigger(E)),_&&this.cycle()}}},e._jQueryInterface=function(t){return this.each(function(){var o=r(this).data(n),i=r.extend({},a,r(this).data());"object"==typeof t&&r.extend(i,t);var l="string"==typeof t?t:i.slide;if(o||(o=new e(this,i),r(this).data(n,o)),"number"==typeof t)o.to(t);else if("string"==typeof l){if(void 0===o[l])throw new Error('No method named "'+l+'"');o[l]()}else i.interval&&(o.pause(),o.cycle())})},e._dataApiClickHandler=function(t){var i=o.getSelectorFromElement(this);if(i){var a=r(i)[0];if(a&&r(a).hasClass(f)){var l=r.extend({},r(a).data(),r(this).data()),s=this.getAttribute("data-slide-to");s&&(l.interval=!1),e._jQueryInterface.call(r(a),l),s&&r(a).data(n).to(s),t.preventDefault()}}},i(e,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return a}}]),e}();return r(document).on(m.CLICK_DATA_API,y.DATA_SLIDE,w._dataApiClickHandler),r(window).on(m.LOAD_DATA_API,function(){r(y.DATA_RIDE).each(function(){var n=r(this);w._jQueryInterface.call(n,n.data())})}),r.fn.carousel=w._jQueryInterface,r.fn.carousel.Constructor=w,r.fn.carousel.noConflict=function(){return r.fn.carousel=e,w._jQueryInterface},w}(),c=function(){var n="bs.collapse",t="."+n,e=r.fn.collapse,a={toggle:!0,parent:""},l={toggle:"boolean",parent:"(string|element)"},s={SHOW:"show"+t,SHOWN:"shown"+t,HIDE:"hide"+t,HIDDEN:"hidden"+t,CLICK_DATA_API:"click.bs.collapse.data-api"},d="show",c="collapse",p="collapsing",m="collapsed",f="width",u="height",g={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},h=function(){function t(n,t){this._isTransitioning=!1,this._element=n,this._config=this._getConfig(t),this._triggerArray=r.makeArray(r('[data-toggle="collapse"][href="#'+n.id+'"],[data-toggle="collapse"][data-target="#'+n.id+'"]'));for(var e=r(g.DATA_TOGGLE),i=0;i<e.length;i++){var a=e[i],l=o.getSelectorFromElement(a);null!==l&&r(l).filter(n).length>0&&this._triggerArray.push(a)}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var e=t.prototype;return e.toggle=function(){r(this._element).hasClass(d)?this.hide():this.show()},e.show=function(){var e=this;if(!this._isTransitioning&&!r(this._element).hasClass(d)){var i,a;if(this._parent&&((i=r.makeArray(r(this._parent).children().children(g.ACTIVES))).length||(i=null)),!(i&&(a=r(i).data(n))&&a._isTransitioning)){var l=r.Event(s.SHOW);if(r(this._element).trigger(l),!l.isDefaultPrevented()){i&&(t._jQueryInterface.call(r(i),"hide"),a||r(i).data(n,null));var f=this._getDimension();r(this._element).removeClass(c).addClass(p),this._element.style[f]=0,this._triggerArray.length&&r(this._triggerArray).removeClass(m).attr("aria-expanded",!0),this.setTransitioning(!0);var u=function(){r(e._element).removeClass(p).addClass(c).addClass(d),e._element.style[f]="",e.setTransitioning(!1),r(e._element).trigger(s.SHOWN)};if(o.supportsTransitionEnd()){var h="scroll"+(f[0].toUpperCase()+f.slice(1));r(this._element).one(o.TRANSITION_END,u).emulateTransitionEnd(600),this._element.style[f]=this._element[h]+"px"}else u()}}}},e.hide=function(){var n=this;if(!this._isTransitioning&&r(this._element).hasClass(d)){var t=r.Event(s.HIDE);if(r(this._element).trigger(t),!t.isDefaultPrevented()){var e=this._getDimension();if(this._element.style[e]=this._element.getBoundingClientRect()[e]+"px",o.reflow(this._element),r(this._element).addClass(p).removeClass(c).removeClass(d),this._triggerArray.length)for(var i=0;i<this._triggerArray.length;i++){var a=this._triggerArray[i],l=o.getSelectorFromElement(a);if(null!==l){r(l).hasClass(d)||r(a).addClass(m).attr("aria-expanded",!1)}}this.setTransitioning(!0);var f=function(){n.setTransitioning(!1),r(n._element).removeClass(p).addClass(c).trigger(s.HIDDEN)};this._element.style[e]="",o.supportsTransitionEnd()?r(this._element).one(o.TRANSITION_END,f).emulateTransitionEnd(600):f()}}},e.setTransitioning=function(n){this._isTransitioning=n},e.dispose=function(){r.removeData(this._element,n),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},e._getConfig=function(n){return n=r.extend({},a,n),n.toggle=Boolean(n.toggle),o.typeCheckConfig("collapse",n,l),n},e._getDimension=function(){return r(this._element).hasClass(f)?f:u},e._getParent=function(){var n=this,e=null;o.isElement(this._config.parent)?(e=this._config.parent,void 0!==this._config.parent.jquery&&(e=this._config.parent[0])):e=r(this._config.parent)[0];var i='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return r(e).find(i).each(function(r,e){n._addAriaAndCollapsedClass(t._getTargetFromElement(e),[e])}),e},e._addAriaAndCollapsedClass=function(n,t){if(n){var e=r(n).hasClass(d);t.length&&r(t).toggleClass(m,!e).attr("aria-expanded",e)}},t._getTargetFromElement=function(n){var t=o.getSelectorFromElement(n);return t?r(t)[0]:null},t._jQueryInterface=function(e){return this.each(function(){var o=r(this),i=o.data(n),l=r.extend({},a,o.data(),"object"==typeof e&&e);if(!i&&l.toggle&&/show|hide/.test(e)&&(l.toggle=!1),i||(i=new t(this,l),o.data(n,i)),"string"==typeof e){if(void 0===i[e])throw new Error('No method named "'+e+'"');i[e]()}})},i(t,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return a}}]),t}();return r(document).on(s.CLICK_DATA_API,g.DATA_TOGGLE,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var e=r(this),i=o.getSelectorFromElement(this);r(i).each(function(){var t=r(this),o=t.data(n)?"toggle":e.data();h._jQueryInterface.call(t,o)})}),r.fn.collapse=h._jQueryInterface,r.fn.collapse.Constructor=h,r.fn.collapse.noConflict=function(){return r.fn.collapse=e,h._jQueryInterface},h}(),p=function(){if(void 0===t)throw new Error("Bootstrap dropdown require Popper.js (https://popper.js.org)");var n="bs.dropdown",e="."+n,a=r.fn.dropdown,l=new RegExp("38|40|27"),s={HIDE:"hide"+e,HIDDEN:"hidden"+e,SHOW:"show"+e,SHOWN:"shown"+e,CLICK:"click"+e,CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},d="disabled",c="show",p="dropup",m="dropdown-menu-right",f="dropdown-menu-left",u='[data-toggle="dropdown"]',g=".dropdown form",h=".dropdown-menu",b=".navbar-nav",v=".dropdown-menu .dropdown-item:not(.disabled)",x="top-start",y="top-end",w="bottom-start",k="bottom-end",_={offset:0,flip:!0},E={offset:"(number|string|function)",flip:"boolean"},T=function(){function a(n,r){this._element=n,this._popper=null,this._config=this._getConfig(r),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var g=a.prototype;return g.toggle=function(){if(!this._element.disabled&&!r(this._element).hasClass(d)){var n=a._getParentFromElement(this._element),e=r(this._menu).hasClass(c);if(a._clearMenus(),!e){var o={relatedTarget:this._element},i=r.Event(s.SHOW,o);if(r(n).trigger(i),!i.isDefaultPrevented()){var l=this._element;r(n).hasClass(p)&&(r(this._menu).hasClass(f)||r(this._menu).hasClass(m))&&(l=n),this._popper=new t(l,this._menu,this._getPopperConfig()),"ontouchstart"in document.documentElement&&!r(n).closest(b).length&&r("body").children().on("mouseover",null,r.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),r(this._menu).toggleClass(c),r(n).toggleClass(c).trigger(r.Event(s.SHOWN,o))}}}},g.dispose=function(){r.removeData(this._element,n),r(this._element).off(e),this._element=null,this._menu=null,null!==this._popper&&this._popper.destroy(),this._popper=null},g.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},g._addEventListeners=function(){var n=this;r(this._element).on(s.CLICK,function(r){r.preventDefault(),r.stopPropagation(),n.toggle()})},g._getConfig=function(n){return n=r.extend({},this.constructor.Default,r(this._element).data(),n),o.typeCheckConfig("dropdown",n,this.constructor.DefaultType),n},g._getMenuElement=function(){if(!this._menu){var n=a._getParentFromElement(this._element);this._menu=r(n).find(h)[0]}return this._menu},g._getPlacement=function(){var n=r(this._element).parent(),t=w;return n.hasClass(p)?(t=x,r(this._menu).hasClass(m)&&(t=y)):r(this._menu).hasClass(m)&&(t=k),t},g._detectNavbar=function(){return r(this._element).closest(".navbar").length>0},g._getPopperConfig=function(){var n=this,t={};"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=r.extend({},t.offsets,n._config.offset(t.offsets)||{}),t}:t.offset=this._config.offset;var e={placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip}}};return this._inNavbar&&(e.modifiers.applyStyle={enabled:!this._inNavbar}),e},a._jQueryInterface=function(t){return this.each(function(){var e=r(this).data(n);if(e||(e=new a(this,"object"==typeof t?t:null),r(this).data(n,e)),"string"==typeof t){if(void 0===e[t])throw new Error('No method named "'+t+'"');e[t]()}})},a._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var e=r.makeArray(r(u)),o=0;o<e.length;o++){var i=a._getParentFromElement(e[o]),l=r(e[o]).data(n),d={relatedTarget:e[o]};if(l){var p=l._menu;if(r(i).hasClass(c)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&r.contains(i,t.target))){var m=r.Event(s.HIDE,d);r(i).trigger(m),m.isDefaultPrevented()||("ontouchstart"in document.documentElement&&r("body").children().off("mouseover",null,r.noop),e[o].setAttribute("aria-expanded","false"),r(p).removeClass(c),r(i).removeClass(c).trigger(r.Event(s.HIDDEN,d)))}}}},a._getParentFromElement=function(n){var t,e=o.getSelectorFromElement(n);return e&&(t=r(e)[0]),t||n.parentNode},a._dataApiKeydownHandler=function(n){if(!(!l.test(n.which)||/button/i.test(n.target.tagName)&&32===n.which||/input|textarea/i.test(n.target.tagName)||(n.preventDefault(),n.stopPropagation(),this.disabled||r(this).hasClass(d)))){var t=a._getParentFromElement(this),e=r(t).hasClass(c);if((e||27===n.which&&32===n.which)&&(!e||27!==n.which&&32!==n.which)){var o=r(t).find(v).get();if(o.length){var i=o.indexOf(n.target);38===n.which&&i>0&&i--,40===n.which&&i<o.length-1&&i++,i<0&&(i=0),o[i].focus()}}else{if(27===n.which){var s=r(t).find(u)[0];r(s).trigger("focus")}r(this).trigger("click")}}},i(a,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return _}},{key:"DefaultType",get:function(){return E}}]),a}();return r(document).on(s.KEYDOWN_DATA_API,u,T._dataApiKeydownHandler).on(s.KEYDOWN_DATA_API,h,T._dataApiKeydownHandler).on(s.CLICK_DATA_API+" "+s.KEYUP_DATA_API,T._clearMenus).on(s.CLICK_DATA_API,u,function(n){n.preventDefault(),n.stopPropagation(),T._jQueryInterface.call(r(this),"toggle")}).on(s.CLICK_DATA_API,g,function(n){n.stopPropagation()}),r.fn.dropdown=T._jQueryInterface,r.fn.dropdown.Constructor=T,r.fn.dropdown.noConflict=function(){return r.fn.dropdown=a,T._jQueryInterface},T}(),m=function(){var n=".bs.modal",t=r.fn.modal,e={backdrop:!0,keyboard:!0,focus:!0,show:!0},a={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},l={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},s="modal-scrollbar-measure",d="modal-backdrop",c="modal-open",p="fade",m="show",f={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top",NAVBAR_TOGGLER:".navbar-toggler"},u=function(){function t(n,t){this._config=this._getConfig(t),this._element=n,this._dialog=r(n).find(f.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}var u=t.prototype;return u.toggle=function(n){return this._isShown?this.hide():this.show(n)},u.show=function(n){var t=this;if(!this._isTransitioning&&!this._isShown){o.supportsTransitionEnd()&&r(this._element).hasClass(p)&&(this._isTransitioning=!0);var e=r.Event(l.SHOW,{relatedTarget:n});r(this._element).trigger(e),this._isShown||e.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),r(document.body).addClass(c),this._setEscapeEvent(),this._setResizeEvent(),r(this._element).on(l.CLICK_DISMISS,f.DATA_DISMISS,function(n){return t.hide(n)}),r(this._dialog).on(l.MOUSEDOWN_DISMISS,function(){r(t._element).one(l.MOUSEUP_DISMISS,function(n){r(n.target).is(t._element)&&(t._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return t._showElement(n)}))}},u.hide=function(n){var t=this;if(n&&n.preventDefault(),!this._isTransitioning&&this._isShown){var e=r.Event(l.HIDE);if(r(this._element).trigger(e),this._isShown&&!e.isDefaultPrevented()){this._isShown=!1;var i=o.supportsTransitionEnd()&&r(this._element).hasClass(p);i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),r(document).off(l.FOCUSIN),r(this._element).removeClass(m),r(this._element).off(l.CLICK_DISMISS),r(this._dialog).off(l.MOUSEDOWN_DISMISS),i?r(this._element).one(o.TRANSITION_END,function(n){return t._hideModal(n)}).emulateTransitionEnd(300):this._hideModal()}}},u.dispose=function(){r.removeData(this._element,"bs.modal"),r(window,document,this._element,this._backdrop).off(n),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},u.handleUpdate=function(){this._adjustDialog()},u._getConfig=function(n){return n=r.extend({},e,n),o.typeCheckConfig("modal",n,a),n},u._showElement=function(n){var t=this,e=o.supportsTransitionEnd()&&r(this._element).hasClass(p);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,e&&o.reflow(this._element),r(this._element).addClass(m),this._config.focus&&this._enforceFocus();var i=r.Event(l.SHOWN,{relatedTarget:n}),a=function(){t._config.focus&&t._element.focus(),t._isTransitioning=!1,r(t._element).trigger(i)};e?r(this._dialog).one(o.TRANSITION_END,a).emulateTransitionEnd(300):a()},u._enforceFocus=function(){var n=this;r(document).off(l.FOCUSIN).on(l.FOCUSIN,function(t){document===t.target||n._element===t.target||r(n._element).has(t.target).length||n._element.focus()})},u._setEscapeEvent=function(){var n=this;this._isShown&&this._config.keyboard?r(this._element).on(l.KEYDOWN_DISMISS,function(r){27===r.which&&(r.preventDefault(),n.hide())}):this._isShown||r(this._element).off(l.KEYDOWN_DISMISS)},u._setResizeEvent=function(){var n=this;this._isShown?r(window).on(l.RESIZE,function(r){return n.handleUpdate(r)}):r(window).off(l.RESIZE)},u._hideModal=function(){var n=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){r(document.body).removeClass(c),n._resetAdjustments(),n._resetScrollbar(),r(n._element).trigger(l.HIDDEN)})},u._removeBackdrop=function(){this._backdrop&&(r(this._backdrop).remove(),this._backdrop=null)},u._showBackdrop=function(n){var t=this,e=r(this._element).hasClass(p)?p:"";if(this._isShown&&this._config.backdrop){var i=o.supportsTransitionEnd()&&e;if(this._backdrop=document.createElement("div"),this._backdrop.className=d,e&&r(this._backdrop).addClass(e),r(this._backdrop).appendTo(document.body),r(this._element).on(l.CLICK_DISMISS,function(n){t._ignoreBackdropClick?t._ignoreBackdropClick=!1:n.target===n.currentTarget&&("static"===t._config.backdrop?t._element.focus():t.hide())}),i&&o.reflow(this._backdrop),r(this._backdrop).addClass(m),!n)return;if(!i)return void n();r(this._backdrop).one(o.TRANSITION_END,n).emulateTransitionEnd(150)}else if(!this._isShown&&this._backdrop){r(this._backdrop).removeClass(m);var a=function(){t._removeBackdrop(),n&&n()};o.supportsTransitionEnd()&&r(this._element).hasClass(p)?r(this._backdrop).one(o.TRANSITION_END,a).emulateTransitionEnd(150):a()}else n&&n()},u._adjustDialog=function(){var n=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&n&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!n&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},u._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},u._checkScrollbar=function(){var n=document.body.getBoundingClientRect();this._isBodyOverflowing=n.left+n.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},u._setScrollbar=function(){var n=this;if(this._isBodyOverflowing){r(f.FIXED_CONTENT).each(function(t,e){var o=r(e)[0].style.paddingRight,i=r(e).css("padding-right");r(e).data("padding-right",o).css("padding-right",parseFloat(i)+n._scrollbarWidth+"px")}),r(f.STICKY_CONTENT).each(function(t,e){var o=r(e)[0].style.marginRight,i=r(e).css("margin-right");r(e).data("margin-right",o).css("margin-right",parseFloat(i)-n._scrollbarWidth+"px")}),r(f.NAVBAR_TOGGLER).each(function(t,e){var o=r(e)[0].style.marginRight,i=r(e).css("margin-right");r(e).data("margin-right",o).css("margin-right",parseFloat(i)+n._scrollbarWidth+"px")});var t=document.body.style.paddingRight,e=r("body").css("padding-right");r("body").data("padding-right",t).css("padding-right",parseFloat(e)+this._scrollbarWidth+"px")}},u._resetScrollbar=function(){r(f.FIXED_CONTENT).each(function(n,t){var e=r(t).data("padding-right");void 0!==e&&r(t).css("padding-right",e).removeData("padding-right")}),r(f.STICKY_CONTENT+", "+f.NAVBAR_TOGGLER).each(function(n,t){var e=r(t).data("margin-right");void 0!==e&&r(t).css("margin-right",e).removeData("margin-right")});var n=r("body").data("padding-right");void 0!==n&&r("body").css("padding-right",n).removeData("padding-right")},u._getScrollbarWidth=function(){var n=document.createElement("div");n.className=s,document.body.appendChild(n);var r=n.getBoundingClientRect().width-n.clientWidth;return document.body.removeChild(n),r},t._jQueryInterface=function(n,e){return this.each(function(){var o=r(this).data("bs.modal"),i=r.extend({},t.Default,r(this).data(),"object"==typeof n&&n);if(o||(o=new t(this,i),r(this).data("bs.modal",o)),"string"==typeof n){if(void 0===o[n])throw new Error('No method named "'+n+'"');o[n](e)}else i.show&&o.show(e)})},i(t,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return e}}]),t}();return r(document).on(l.CLICK_DATA_API,f.DATA_TOGGLE,function(n){var t,e=this,i=o.getSelectorFromElement(this);i&&(t=r(i)[0]);var a=r(t).data("bs.modal")?"toggle":r.extend({},r(t).data(),r(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||n.preventDefault();var s=r(t).one(l.SHOW,function(n){n.isDefaultPrevented()||s.one(l.HIDDEN,function(){r(e).is(":visible")&&e.focus()})});u._jQueryInterface.call(r(t),a,this)}),r.fn.modal=u._jQueryInterface,r.fn.modal.Constructor=u,r.fn.modal.noConflict=function(){return r.fn.modal=t,u._jQueryInterface},u}(),f=function(){if(void 0===t)throw new Error("Bootstrap tooltips require Popper.js (https://popper.js.org)");var n=".bs.tooltip",e=r.fn.tooltip,a=new RegExp("(^|\\s)bs-tooltip\\S+","g"),l={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)"},s={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},d={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip"},c="show",p="out",m={HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n,INSERTED:"inserted"+n,CLICK:"click"+n,FOCUSIN:"focusin"+n,FOCUSOUT:"focusout"+n,MOUSEENTER:"mouseenter"+n,MOUSELEAVE:"mouseleave"+n},f="fade",u="show",g=".tooltip-inner",h=".arrow",b="hover",v="focus",x="click",y="manual",w=function(){function e(n,r){this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=n,this.config=this._getConfig(r),this.tip=null,this._setListeners()}var w=e.prototype;return w.enable=function(){this._isEnabled=!0},w.disable=function(){this._isEnabled=!1},w.toggleEnabled=function(){this._isEnabled=!this._isEnabled},w.toggle=function(n){if(this._isEnabled)if(n){var t=this.constructor.DATA_KEY,e=r(n.currentTarget).data(t);e||(e=new this.constructor(n.currentTarget,this._getDelegateConfig()),r(n.currentTarget).data(t,e)),e._activeTrigger.click=!e._activeTrigger.click,e._isWithActiveTrigger()?e._enter(null,e):e._leave(null,e)}else{if(r(this.getTipElement()).hasClass(u))return void this._leave(null,this);this._enter(null,this)}},w.dispose=function(){clearTimeout(this._timeout),r.removeData(this.element,this.constructor.DATA_KEY),r(this.element).off(this.constructor.EVENT_KEY),r(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&r(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},w.show=function(){var n=this;if("none"===r(this.element).css("display"))throw new Error("Please use show on visible elements");var i=r.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){r(this.element).trigger(i);var a=r.contains(this.element.ownerDocument.documentElement,this.element);if(i.isDefaultPrevented()||!a)return;var l=this.getTipElement(),s=o.getUID(this.constructor.NAME);l.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&r(l).addClass(f);var d="function"==typeof this.config.placement?this.config.placement.call(this,l,this.element):this.config.placement,c=this._getAttachment(d);this.addAttachmentClass(c);var m=!1===this.config.container?document.body:r(this.config.container);r(l).data(this.constructor.DATA_KEY,this),r.contains(this.element.ownerDocument.documentElement,this.tip)||r(l).appendTo(m),r(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new t(this.element,l,{placement:c,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:h}},onCreate:function(r){r.originalPlacement!==r.placement&&n._handlePopperPlacementChange(r)},onUpdate:function(r){n._handlePopperPlacementChange(r)}}),r(l).addClass(u),"ontouchstart"in document.documentElement&&r("body").children().on("mouseover",null,r.noop);var g=function(){n.config.animation&&n._fixTransition();var t=n._hoverState;n._hoverState=null,r(n.element).trigger(n.constructor.Event.SHOWN),t===p&&n._leave(null,n)};o.supportsTransitionEnd()&&r(this.tip).hasClass(f)?r(this.tip).one(o.TRANSITION_END,g).emulateTransitionEnd(e._TRANSITION_DURATION):g()}},w.hide=function(n){var t=this,e=this.getTipElement(),i=r.Event(this.constructor.Event.HIDE),a=function(){t._hoverState!==c&&e.parentNode&&e.parentNode.removeChild(e),t._cleanTipClass(),t.element.removeAttribute("aria-describedby"),r(t.element).trigger(t.constructor.Event.HIDDEN),null!==t._popper&&t._popper.destroy(),n&&n()};r(this.element).trigger(i),i.isDefaultPrevented()||(r(e).removeClass(u),"ontouchstart"in document.documentElement&&r("body").children().off("mouseover",null,r.noop),this._activeTrigger[x]=!1,this._activeTrigger[v]=!1,this._activeTrigger[b]=!1,o.supportsTransitionEnd()&&r(this.tip).hasClass(f)?r(e).one(o.TRANSITION_END,a).emulateTransitionEnd(150):a(),this._hoverState="")},w.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},w.isWithContent=function(){return Boolean(this.getTitle())},w.addAttachmentClass=function(n){r(this.getTipElement()).addClass("bs-tooltip-"+n)},w.getTipElement=function(){return this.tip=this.tip||r(this.config.template)[0],this.tip},w.setContent=function(){var n=r(this.getTipElement());this.setElementContent(n.find(g),this.getTitle()),n.removeClass(f+" "+u)},w.setElementContent=function(n,t){var e=this.config.html;"object"==typeof t&&(t.nodeType||t.jquery)?e?r(t).parent().is(n)||n.empty().append(t):n.text(r(t).text()):n[e?"html":"text"](t)},w.getTitle=function(){var n=this.element.getAttribute("data-original-title");return n||(n="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),n},w._getAttachment=function(n){return s[n.toUpperCase()]},w._setListeners=function(){var n=this;this.config.trigger.split(" ").forEach(function(t){if("click"===t)r(n.element).on(n.constructor.Event.CLICK,n.config.selector,function(r){return n.toggle(r)});else if(t!==y){var e=t===b?n.constructor.Event.MOUSEENTER:n.constructor.Event.FOCUSIN,o=t===b?n.constructor.Event.MOUSELEAVE:n.constructor.Event.FOCUSOUT;r(n.element).on(e,n.config.selector,function(r){return n._enter(r)}).on(o,n.config.selector,function(r){return n._leave(r)})}r(n.element).closest(".modal").on("hide.bs.modal",function(){return n.hide()})}),this.config.selector?this.config=r.extend({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},w._fixTitle=function(){var n=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==n)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},w._enter=function(n,t){var e=this.constructor.DATA_KEY;(t=t||r(n.currentTarget).data(e))||(t=new this.constructor(n.currentTarget,this._getDelegateConfig()),r(n.currentTarget).data(e,t)),n&&(t._activeTrigger["focusin"===n.type?v:b]=!0),r(t.getTipElement()).hasClass(u)||t._hoverState===c?t._hoverState=c:(clearTimeout(t._timeout),t._hoverState=c,t.config.delay&&t.config.delay.show?t._timeout=setTimeout(function(){t._hoverState===c&&t.show()},t.config.delay.show):t.show())},w._leave=function(n,t){var e=this.constructor.DATA_KEY;(t=t||r(n.currentTarget).data(e))||(t=new this.constructor(n.currentTarget,this._getDelegateConfig()),r(n.currentTarget).data(e,t)),n&&(t._activeTrigger["focusout"===n.type?v:b]=!1),t._isWithActiveTrigger()||(clearTimeout(t._timeout),t._hoverState=p,t.config.delay&&t.config.delay.hide?t._timeout=setTimeout(function(){t._hoverState===p&&t.hide()},t.config.delay.hide):t.hide())},w._isWithActiveTrigger=function(){for(var n in this._activeTrigger)if(this._activeTrigger[n])return!0;return!1},w._getConfig=function(n){return"number"==typeof(n=r.extend({},this.constructor.Default,r(this.element).data(),n)).delay&&(n.delay={show:n.delay,hide:n.delay}),"number"==typeof n.title&&(n.title=n.title.toString()),"number"==typeof n.content&&(n.content=n.content.toString()),o.typeCheckConfig("tooltip",n,this.constructor.DefaultType),n},w._getDelegateConfig=function(){var n={};if(this.config)for(var r in this.config)this.constructor.Default[r]!==this.config[r]&&(n[r]=this.config[r]);return n},w._cleanTipClass=function(){var n=r(this.getTipElement()),t=n.attr("class").match(a);null!==t&&t.length>0&&n.removeClass(t.join(""))},w._handlePopperPlacementChange=function(n){this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(n.placement))},w._fixTransition=function(){var n=this.getTipElement(),t=this.config.animation;null===n.getAttribute("x-placement")&&(r(n).removeClass(f),this.config.animation=!1,this.hide(),this.show(),this.config.animation=t)},e._jQueryInterface=function(n){return this.each(function(){var t=r(this).data("bs.tooltip"),o="object"==typeof n&&n;if((t||!/dispose|hide/.test(n))&&(t||(t=new e(this,o),r(this).data("bs.tooltip",t)),"string"==typeof n)){if(void 0===t[n])throw new Error('No method named "'+n+'"');t[n]()}})},i(e,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return d}},{key:"NAME",get:function(){return"tooltip"}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return m}},{key:"EVENT_KEY",get:function(){return n}},{key:"DefaultType",get:function(){return l}}]),e}();return r.fn.tooltip=w._jQueryInterface,r.fn.tooltip.Constructor=w,r.fn.tooltip.noConflict=function(){return r.fn.tooltip=e,w._jQueryInterface},w}(),u=function(){var n=".bs.popover",t=r.fn.popover,e=new RegExp("(^|\\s)bs-popover\\S+","g"),o=r.extend({},f.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),l=r.extend({},f.DefaultType,{content:"(string|element|function)"}),s="fade",d="show",c=".popover-header",p=".popover-body",m={HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n,INSERTED:"inserted"+n,CLICK:"click"+n,FOCUSIN:"focusin"+n,FOCUSOUT:"focusout"+n,MOUSEENTER:"mouseenter"+n,MOUSELEAVE:"mouseleave"+n},u=function(t){function f(){return t.apply(this,arguments)||this}a(f,t);var u=f.prototype;return u.isWithContent=function(){return this.getTitle()||this._getContent()},u.addAttachmentClass=function(n){r(this.getTipElement()).addClass("bs-popover-"+n)},u.getTipElement=function(){return this.tip=this.tip||r(this.config.template)[0],this.tip},u.setContent=function(){var n=r(this.getTipElement());this.setElementContent(n.find(c),this.getTitle()),this.setElementContent(n.find(p),this._getContent()),n.removeClass(s+" "+d)},u._getContent=function(){return this.element.getAttribute("data-content")||("function"==typeof this.config.content?this.config.content.call(this.element):this.config.content)},u._cleanTipClass=function(){var n=r(this.getTipElement()),t=n.attr("class").match(e);null!==t&&t.length>0&&n.removeClass(t.join(""))},f._jQueryInterface=function(n){return this.each(function(){var t=r(this).data("bs.popover"),e="object"==typeof n?n:null;if((t||!/destroy|hide/.test(n))&&(t||(t=new f(this,e),r(this).data("bs.popover",t)),"string"==typeof n)){if(void 0===t[n])throw new Error('No method named "'+n+'"');t[n]()}})},i(f,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return o}},{key:"NAME",get:function(){return"popover"}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return m}},{key:"EVENT_KEY",get:function(){return n}},{key:"DefaultType",get:function(){return l}}]),f}(f);return r.fn.popover=u._jQueryInterface,r.fn.popover.Constructor=u,r.fn.popover.noConflict=function(){return r.fn.popover=t,u._jQueryInterface},u}(),g=function(){var n=".bs.scrollspy",t=r.fn.scrollspy,e={offset:10,method:"auto",target:""},a={offset:"number",method:"string",target:"(string|element)"},l={ACTIVATE:"activate"+n,SCROLL:"scroll"+n,LOAD_DATA_API:"load"+n+".data-api"},s="dropdown-item",d="active",c={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},p="offset",m="position",f=function(){function t(n,t){var e=this;this._element=n,this._scrollElement="BODY"===n.tagName?window:n,this._config=this._getConfig(t),this._selector=this._config.target+" "+c.NAV_LINKS+","+this._config.target+" "+c.LIST_ITEMS+","+this._config.target+" "+c.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,r(this._scrollElement).on(l.SCROLL,function(n){return e._process(n)}),this.refresh(),this._process()}var f=t.prototype;return f.refresh=function(){var n=this,t=this._scrollElement!==this._scrollElement.window?m:p,e="auto"===this._config.method?t:this._config.method,i=e===m?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();r.makeArray(r(this._selector)).map(function(n){var t,a=o.getSelectorFromElement(n);if(a&&(t=r(a)[0]),t){var l=t.getBoundingClientRect();if(l.width||l.height)return[r(t)[e]().top+i,a]}return null}).filter(function(n){return n}).sort(function(n,r){return n[0]-r[0]}).forEach(function(r){n._offsets.push(r[0]),n._targets.push(r[1])})},f.dispose=function(){r.removeData(this._element,"bs.scrollspy"),r(this._scrollElement).off(n),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},f._getConfig=function(n){if("string"!=typeof(n=r.extend({},e,n)).target){var t=r(n.target).attr("id");t||(t=o.getUID("scrollspy"),r(n.target).attr("id",t)),n.target="#"+t}return o.typeCheckConfig("scrollspy",n,a),n},f._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},f._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},f._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},f._process=function(){var n=this._getScrollTop()+this._config.offset,r=this._getScrollHeight(),t=this._config.offset+r-this._getOffsetHeight();if(this._scrollHeight!==r&&this.refresh(),n>=t){var e=this._targets[this._targets.length-1];this._activeTarget!==e&&this._activate(e)}else{if(this._activeTarget&&n<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var o=this._offsets.length;o--;){this._activeTarget!==this._targets[o]&&n>=this._offsets[o]&&(void 0===this._offsets[o+1]||n<this._offsets[o+1])&&this._activate(this._targets[o])}}},f._activate=function(n){this._activeTarget=n,this._clear();var t=this._selector.split(",");t=t.map(function(r){return r+'[data-target="'+n+'"],'+r+'[href="'+n+'"]'});var e=r(t.join(","));e.hasClass(s)?(e.closest(c.DROPDOWN).find(c.DROPDOWN_TOGGLE).addClass(d),e.addClass(d)):(e.addClass(d),e.parents(c.NAV_LIST_GROUP).prev(c.NAV_LINKS+", "+c.LIST_ITEMS).addClass(d),e.parents(c.NAV_LIST_GROUP).prev(c.NAV_ITEMS).children(c.NAV_LINKS).addClass(d)),r(this._scrollElement).trigger(l.ACTIVATE,{relatedTarget:n})},f._clear=function(){r(this._selector).filter(c.ACTIVE).removeClass(d)},t._jQueryInterface=function(n){return this.each(function(){var e=r(this).data("bs.scrollspy");if(e||(e=new t(this,"object"==typeof n&&n),r(this).data("bs.scrollspy",e)),"string"==typeof n){if(void 0===e[n])throw new Error('No method named "'+n+'"');e[n]()}})},i(t,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return e}}]),t}();return r(window).on(l.LOAD_DATA_API,function(){for(var n=r.makeArray(r(c.DATA_SPY)),t=n.length;t--;){var e=r(n[t]);f._jQueryInterface.call(e,e.data())}}),r.fn.scrollspy=f._jQueryInterface,r.fn.scrollspy.Constructor=f,r.fn.scrollspy.noConflict=function(){return r.fn.scrollspy=t,f._jQueryInterface},f}(),h=function(){var n=r.fn.tab,t={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},e="dropdown-menu",a="active",l="disabled",s="fade",d="show",c=".dropdown",p=".nav, .list-group",m=".active",f="> li > .active",u='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',g=".dropdown-toggle",h="> .dropdown-menu .active",b=function(){function n(n){this._element=n}var u=n.prototype;return u.show=function(){var n=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&r(this._element).hasClass(a)||r(this._element).hasClass(l))){var e,i,s=r(this._element).closest(p)[0],d=o.getSelectorFromElement(this._element);if(s){var c="UL"===s.nodeName?f:m;i=(i=r.makeArray(r(s).find(c)))[i.length-1]}var u=r.Event(t.HIDE,{relatedTarget:this._element}),g=r.Event(t.SHOW,{relatedTarget:i});if(i&&r(i).trigger(u),r(this._element).trigger(g),!g.isDefaultPrevented()&&!u.isDefaultPrevented()){d&&(e=r(d)[0]),this._activate(this._element,s);var h=function(){var e=r.Event(t.HIDDEN,{relatedTarget:n._element}),o=r.Event(t.SHOWN,{relatedTarget:i});r(i).trigger(e),r(n._element).trigger(o)};e?this._activate(e,e.parentNode,h):h()}}},u.dispose=function(){r.removeData(this._element,"bs.tab"),this._element=null},u._activate=function(n,t,e){var i=this,a=("UL"===t.nodeName?r(t).find(f):r(t).children(m))[0],l=e&&o.supportsTransitionEnd()&&a&&r(a).hasClass(s),c=function(){return i._transitionComplete(n,a,l,e)};a&&l?r(a).one(o.TRANSITION_END,c).emulateTransitionEnd(150):c(),a&&r(a).removeClass(d)},u._transitionComplete=function(n,t,i,l){if(t){r(t).removeClass(a);var p=r(t.parentNode).find(h)[0];p&&r(p).removeClass(a),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)}if(r(n).addClass(a),"tab"===n.getAttribute("role")&&n.setAttribute("aria-selected",!0),i?(o.reflow(n),r(n).addClass(d)):r(n).removeClass(s),n.parentNode&&r(n.parentNode).hasClass(e)){var m=r(n).closest(c)[0];m&&r(m).find(g).addClass(a),n.setAttribute("aria-expanded",!0)}l&&l()},n._jQueryInterface=function(t){return this.each(function(){var e=r(this),o=e.data("bs.tab");if(o||(o=new n(this),e.data("bs.tab",o)),"string"==typeof t){if(void 0===o[t])throw new Error('No method named "'+t+'"');o[t]()}})},i(n,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}}]),n}();return r(document).on(t.CLICK_DATA_API,u,function(n){n.preventDefault(),b._jQueryInterface.call(r(this),"show")}),r.fn.tab=b._jQueryInterface,r.fn.tab.Constructor=b,r.fn.tab.noConflict=function(){return r.fn.tab=n,b._jQueryInterface},b}();(function(){if(void 0===r)throw new Error("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var n=r.fn.jquery.split(" ")[0].split(".");if(n[0]<2&&n[1]<9||1===n[0]&&9===n[1]&&n[2]<1||n[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")})(),n.Util=o,n.Alert=l,n.Button=s,n.Carousel=d,n.Collapse=c,n.Dropdown=p,n.Modal=m,n.Popover=u,n.Scrollspy=g,n.Tab=h,n.Tooltip=f}({},n,r)}).call(r,t(1),t(10).default)},function(n,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),function(n){function t(n){return n&&"[object Function]"==={}.toString.call(n)}function e(n,r){if(1!==n.nodeType)return[];var t=getComputedStyle(n,null);return r?t[r]:t}function o(n){return"HTML"===n.nodeName?n:n.parentNode||n.host}function i(n){if(!n)return document.body;switch(n.nodeName){case"HTML":case"BODY":return n.ownerDocument.body;case"#document":return n.body}var r=e(n),t=r.overflow,a=r.overflowX,l=r.overflowY;return/(auto|scroll)/.test(t+l+a)?n:i(o(n))}function a(n){var r=n&&n.offsetParent,t=r&&r.nodeName;return t&&"BODY"!==t&&"HTML"!==t?-1!==["TD","TABLE"].indexOf(r.nodeName)&&"static"===e(r,"position")?a(r):r:n?n.ownerDocument.documentElement:document.documentElement}function l(n){return null!==n.parentNode?l(n.parentNode):n}function s(n,r){if(!(n&&n.nodeType&&r&&r.nodeType))return document.documentElement;var t=n.compareDocumentPosition(r)&Node.DOCUMENT_POSITION_FOLLOWING,e=t?n:r,o=t?r:n,i=document.createRange();i.setStart(e,0),i.setEnd(o,0);var d=i.commonAncestorContainer;if(n!==d&&r!==d||e.contains(o))return function(n){var r=n.nodeName;return"BODY"!==r&&("HTML"===r||a(n.firstElementChild)===n)}(d)?d:a(d);var c=l(n);return c.host?s(c.host,r):s(n,l(r).host)}function d(n){var r="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",t=n.nodeName;if("BODY"===t||"HTML"===t){var e=n.ownerDocument.documentElement;return(n.ownerDocument.scrollingElement||e)[r]}return n[r]}function c(n,r){var t="x"===r?"Left":"Top",e="Left"===t?"Right":"Bottom";return parseFloat(n["border"+t+"Width"],10)+parseFloat(n["border"+e+"Width"],10)}function p(n,r,t,e){return Math.max(r["offset"+n],r["scroll"+n],t["client"+n],t["offset"+n],t["scroll"+n],q()?t["offset"+n]+e["margin"+("Height"===n?"Top":"Left")]+e["margin"+("Height"===n?"Bottom":"Right")]:0)}function m(){var n=document.body,r=document.documentElement,t=q()&&getComputedStyle(r);return{height:p("Height",n,r,t),width:p("Width",n,r,t)}}function f(n){return K({},n,{right:n.left+n.width,bottom:n.top+n.height})}function u(n){var r={};if(q())try{r=n.getBoundingClientRect();var t=d(n,"top"),o=d(n,"left");r.top+=t,r.left+=o,r.bottom+=t,r.right+=o}catch(n){}else r=n.getBoundingClientRect();var i={left:r.left,top:r.top,width:r.right-r.left,height:r.bottom-r.top},a="HTML"===n.nodeName?m():{},l=a.width||n.clientWidth||i.right-i.left,s=a.height||n.clientHeight||i.bottom-i.top,p=n.offsetWidth-l,u=n.offsetHeight-s;if(p||u){var g=e(n);p-=c(g,"x"),u-=c(g,"y"),i.width-=p,i.height-=u}return f(i)}function g(n,r){var t=q(),o="HTML"===r.nodeName,a=u(n),l=u(r),s=i(n),c=e(r),p=parseFloat(c.borderTopWidth,10),m=parseFloat(c.borderLeftWidth,10),g=f({top:a.top-l.top-p,left:a.left-l.left-m,width:a.width,height:a.height});if(g.marginTop=0,g.marginLeft=0,!t&&o){var h=parseFloat(c.marginTop,10),b=parseFloat(c.marginLeft,10);g.top-=p-h,g.bottom-=p-h,g.left-=m-b,g.right-=m-b,g.marginTop=h,g.marginLeft=b}return(t?r.contains(s):r===s&&"BODY"!==s.nodeName)&&(g=function(n,r){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],e=d(r,"top"),o=d(r,"left"),i=t?-1:1;return n.top+=e*i,n.bottom+=e*i,n.left+=o*i,n.right+=o*i,n}(g,r)),g}function h(n){var r=n.nodeName;return"BODY"!==r&&"HTML"!==r&&("fixed"===e(n,"position")||h(o(n)))}function b(n,r,t,e){var a={top:0,left:0},l=s(n,r);if("viewport"===e)a=function(n){var r=n.ownerDocument.documentElement,t=g(n,r),e=Math.max(r.clientWidth,window.innerWidth||0),o=Math.max(r.clientHeight,window.innerHeight||0),i=d(r),a=d(r,"left");return f({top:i-t.top+t.marginTop,left:a-t.left+t.marginLeft,width:e,height:o})}(l);else{var c=void 0;"scrollParent"===e?"BODY"===(c=i(o(r))).nodeName&&(c=n.ownerDocument.documentElement):c="window"===e?n.ownerDocument.documentElement:e;var p=g(c,l);if("HTML"!==c.nodeName||h(l))a=p;else{var u=m(),b=u.height,v=u.width;a.top+=p.top-p.marginTop,a.bottom=b+p.top,a.left+=p.left-p.marginLeft,a.right=v+p.left}}return a.left+=t,a.top+=t,a.right-=t,a.bottom-=t,a}function v(n,r,t,e,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===n.indexOf("auto"))return n;var a=b(t,e,i,o),l={top:{width:a.width,height:r.top-a.top},right:{width:a.right-r.right,height:a.height},bottom:{width:a.width,height:a.bottom-r.bottom},left:{width:r.left-a.left,height:a.height}},s=Object.keys(l).map(function(n){return K({key:n},l[n],{area:function(n){return n.width*n.height}(l[n])})}).sort(function(n,r){return r.area-n.area}),d=s.filter(function(n){var r=n.width,e=n.height;return r>=t.clientWidth&&e>=t.clientHeight}),c=d.length>0?d[0].key:s[0].key,p=n.split("-")[1];return c+(p?"-"+p:"")}function x(n,r,t){return g(t,s(r,t))}function y(n){var r=getComputedStyle(n),t=parseFloat(r.marginTop)+parseFloat(r.marginBottom),e=parseFloat(r.marginLeft)+parseFloat(r.marginRight);return{width:n.offsetWidth+e,height:n.offsetHeight+t}}function w(n){var r={left:"right",right:"left",bottom:"top",top:"bottom"};return n.replace(/left|right|bottom|top/g,function(n){return r[n]})}function k(n,r,t){t=t.split("-")[0];var e=y(n),o={width:e.width,height:e.height},i=-1!==["right","left"].indexOf(t),a=i?"top":"left",l=i?"left":"top",s=i?"height":"width",d=i?"width":"height";return o[a]=r[a]+r[s]/2-e[s]/2,o[l]=t===l?r[l]-e[d]:r[w(l)],o}function _(n,r){return Array.prototype.find?n.find(r):n.filter(r)[0]}function E(n,r,e){return(void 0===e?n:n.slice(0,function(n,r,t){if(Array.prototype.findIndex)return n.findIndex(function(n){return n[r]===t});var e=_(n,function(n){return n[r]===t});return n.indexOf(e)}(n,"name",e))).forEach(function(n){n.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var e=n.function||n.fn;n.enabled&&t(e)&&(r.offsets.popper=f(r.offsets.popper),r.offsets.reference=f(r.offsets.reference),r=e(r,n))}),r}function T(n,r){return n.some(function(n){var t=n.name;return n.enabled&&t===r})}function C(n){for(var r=[!1,"ms","Webkit","Moz","O"],t=n.charAt(0).toUpperCase()+n.slice(1),e=0;e<r.length-1;e++){var o=r[e],i=o?""+o+t:n;if(void 0!==document.body.style[i])return i}return null}function A(n){var r=n.ownerDocument;return r?r.defaultView:window}function S(n,r,t,e){var o="BODY"===n.nodeName,a=o?n.ownerDocument.defaultView:n;a.addEventListener(r,t,{passive:!0}),o||S(i(a.parentNode),r,t,e),e.push(a)}function D(){this.state.eventsEnabled||(this.state=function(n,r,t,e){t.updateBound=e,A(n).addEventListener("resize",t.updateBound,{passive:!0});var o=i(n);return S(o,"scroll",t.updateBound,t.scrollParents),t.scrollElement=o,t.eventsEnabled=!0,t}(this.reference,this.options,this.state,this.scheduleUpdate))}function N(){this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=function(n,r){return A(n).removeEventListener("resize",r.updateBound),r.scrollParents.forEach(function(n){n.removeEventListener("scroll",r.updateBound)}),r.updateBound=null,r.scrollParents=[],r.scrollElement=null,r.eventsEnabled=!1,r}(this.reference,this.state))}function I(n){return""!==n&&!isNaN(parseFloat(n))&&isFinite(n)}function j(n,r){Object.keys(r).forEach(function(t){var e="";-1!==["width","height","top","right","bottom","left"].indexOf(t)&&I(r[t])&&(e="px"),n.style[t]=r[t]+e})}function O(n,r,t){var e=_(n,function(n){return n.name===r}),o=!!e&&n.some(function(n){return n.name===t&&n.enabled&&n.order<e.order});if(!o){var i="`"+r+"`",a="`"+t+"`";console.warn(a+" modifier is required by "+i+" modifier in order to work, be sure to include it before "+i+"!")}return o}function L(n){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=Q.indexOf(n),e=Q.slice(t+1).concat(Q.slice(0,t));return r?e.reverse():e}function P(n,r,t,e){var o=[0,0],i=-1!==["right","left"].indexOf(e),a=n.split(/(\+|\-)/).map(function(n){return n.trim()}),l=a.indexOf(_(a,function(n){return-1!==n.search(/,|\s/)}));a[l]&&-1===a[l].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var s=/\s*,\s*|\s+/,d=-1!==l?[a.slice(0,l).concat([a[l].split(s)[0]]),[a[l].split(s)[1]].concat(a.slice(l+1))]:[a];return(d=d.map(function(n,e){var o=(1===e?!i:i)?"height":"width",a=!1;return n.reduce(function(n,r){return""===n[n.length-1]&&-1!==["+","-"].indexOf(r)?(n[n.length-1]=r,a=!0,n):a?(n[n.length-1]+=r,a=!1,n):n.concat(r)},[]).map(function(n){return function(n,r,t,e){var o=n.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),i=+o[1],a=o[2];if(!i)return n;if(0===a.indexOf("%")){var l=void 0;switch(a){case"%p":l=t;break;case"%":case"%r":default:l=e}return f(l)[r]/100*i}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*i;return i}(n,o,r,t)})})).forEach(function(n,r){n.forEach(function(t,e){I(t)&&(o[r]+=t*("-"===n[e-1]?-1:1))})}),o}for(var H="undefined"!=typeof window&&"undefined"!=typeof document,R=["Edge","Trident","Firefox"],M=0,F=0;F<R.length;F+=1)if(H&&navigator.userAgent.indexOf(R[F])>=0){M=1;break}var W=H&&window.Promise?function(n){var r=!1;return function(){r||(r=!0,window.Promise.resolve().then(function(){r=!1,n()}))}}:function(n){var r=!1;return function(){r||(r=!0,setTimeout(function(){r=!1,n()},M))}},B=void 0,q=function(){return void 0===B&&(B=-1!==navigator.appVersion.indexOf("MSIE 10")),B},z=function(n,r){if(!(n instanceof r))throw new TypeError("Cannot call a class as a function")},U=function(){function n(n,r){for(var t=0;t<r.length;t++){var e=r[t];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(r,t,e){return t&&n(r.prototype,t),e&&n(r,e),r}}(),V=function(n,r,t){return r in n?Object.defineProperty(n,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[r]=t,n},K=Object.assign||function(n){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e])}return n},$=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],Q=$.slice(3),Y={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"},G={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(n){var r=n.placement,t=r.split("-")[0],e=r.split("-")[1];if(e){var o=n.offsets,i=o.reference,a=o.popper,l=-1!==["bottom","top"].indexOf(t),s=l?"left":"top",d=l?"width":"height",c={start:V({},s,i[s]),end:V({},s,i[s]+i[d]-a[d])};n.offsets.popper=K({},a,c[e])}return n}},offset:{order:200,enabled:!0,fn:function(n,r){var t=r.offset,e=n.placement,o=n.offsets,i=o.popper,a=o.reference,l=e.split("-")[0],s=void 0;return s=I(+t)?[+t,0]:P(t,i,a,l),"left"===l?(i.top+=s[0],i.left-=s[1]):"right"===l?(i.top+=s[0],i.left+=s[1]):"top"===l?(i.left+=s[0],i.top-=s[1]):"bottom"===l&&(i.left+=s[0],i.top+=s[1]),n.popper=i,n},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(n,r){var t=r.boundariesElement||a(n.instance.popper);n.instance.reference===t&&(t=a(t));var e=b(n.instance.popper,n.instance.reference,r.padding,t);r.boundaries=e;var o=r.priority,i=n.offsets.popper,l={primary:function(n){var t=i[n];return i[n]<e[n]&&!r.escapeWithReference&&(t=Math.max(i[n],e[n])),V({},n,t)},secondary:function(n){var t="right"===n?"left":"top",o=i[t];return i[n]>e[n]&&!r.escapeWithReference&&(o=Math.min(i[t],e[n]-("right"===n?i.width:i.height))),V({},t,o)}};return o.forEach(function(n){var r=-1!==["left","top"].indexOf(n)?"primary":"secondary";i=K({},i,l[r](n))}),n.offsets.popper=i,n},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(n){var r=n.offsets,t=r.popper,e=r.reference,o=n.placement.split("-")[0],i=Math.floor,a=-1!==["top","bottom"].indexOf(o),l=a?"right":"bottom",s=a?"left":"top",d=a?"width":"height";return t[l]<i(e[s])&&(n.offsets.popper[s]=i(e[s])-t[d]),t[s]>i(e[l])&&(n.offsets.popper[s]=i(e[l])),n}},arrow:{order:500,enabled:!0,fn:function(n,r){var t;if(!O(n.instance.modifiers,"arrow","keepTogether"))return n;var o=r.element;if("string"==typeof o){if(!(o=n.instance.popper.querySelector(o)))return n}else if(!n.instance.popper.contains(o))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),n;var i=n.placement.split("-")[0],a=n.offsets,l=a.popper,s=a.reference,d=-1!==["left","right"].indexOf(i),c=d?"height":"width",p=d?"Top":"Left",m=p.toLowerCase(),u=d?"left":"top",g=d?"bottom":"right",h=y(o)[c];s[g]-h<l[m]&&(n.offsets.popper[m]-=l[m]-(s[g]-h)),s[m]+h>l[g]&&(n.offsets.popper[m]+=s[m]+h-l[g]),n.offsets.popper=f(n.offsets.popper);var b=s[m]+s[c]/2-h/2,v=e(n.instance.popper),x=parseFloat(v["margin"+p],10),w=parseFloat(v["border"+p+"Width"],10),k=b-n.offsets.popper[m]-x-w;return k=Math.max(Math.min(l[c]-h,k),0),n.arrowElement=o,n.offsets.arrow=(t={},V(t,m,Math.round(k)),V(t,u,""),t),n},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(n,r){if(T(n.instance.modifiers,"inner"))return n;if(n.flipped&&n.placement===n.originalPlacement)return n;var t=b(n.instance.popper,n.instance.reference,r.padding,r.boundariesElement),e=n.placement.split("-")[0],o=w(e),i=n.placement.split("-")[1]||"",a=[];switch(r.behavior){case Y.FLIP:a=[e,o];break;case Y.CLOCKWISE:a=L(e);break;case Y.COUNTERCLOCKWISE:a=L(e,!0);break;default:a=r.behavior}return a.forEach(function(l,s){if(e!==l||a.length===s+1)return n;e=n.placement.split("-")[0],o=w(e);var d=n.offsets.popper,c=n.offsets.reference,p=Math.floor,m="left"===e&&p(d.right)>p(c.left)||"right"===e&&p(d.left)<p(c.right)||"top"===e&&p(d.bottom)>p(c.top)||"bottom"===e&&p(d.top)<p(c.bottom),f=p(d.left)<p(t.left),u=p(d.right)>p(t.right),g=p(d.top)<p(t.top),h=p(d.bottom)>p(t.bottom),b="left"===e&&f||"right"===e&&u||"top"===e&&g||"bottom"===e&&h,v=-1!==["top","bottom"].indexOf(e),x=!!r.flipVariations&&(v&&"start"===i&&f||v&&"end"===i&&u||!v&&"start"===i&&g||!v&&"end"===i&&h);(m||b||x)&&(n.flipped=!0,(m||b)&&(e=a[s+1]),x&&(i=function(n){return"end"===n?"start":"start"===n?"end":n}(i)),n.placement=e+(i?"-"+i:""),n.offsets.popper=K({},n.offsets.popper,k(n.instance.popper,n.offsets.reference,n.placement)),n=E(n.instance.modifiers,n,"flip"))}),n},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(n){var r=n.placement,t=r.split("-")[0],e=n.offsets,o=e.popper,i=e.reference,a=-1!==["left","right"].indexOf(t),l=-1===["top","left"].indexOf(t);return o[a?"left":"top"]=i[t]-(l?o[a?"width":"height"]:0),n.placement=w(r),n.offsets.popper=f(o),n}},hide:{order:800,enabled:!0,fn:function(n){if(!O(n.instance.modifiers,"hide","preventOverflow"))return n;var r=n.offsets.reference,t=_(n.instance.modifiers,function(n){return"preventOverflow"===n.name}).boundaries;if(r.bottom<t.top||r.left>t.right||r.top>t.bottom||r.right<t.left){if(!0===n.hide)return n;n.hide=!0,n.attributes["x-out-of-boundaries"]=""}else{if(!1===n.hide)return n;n.hide=!1,n.attributes["x-out-of-boundaries"]=!1}return n}},computeStyle:{order:850,enabled:!0,fn:function(n,r){var t=r.x,e=r.y,o=n.offsets.popper,i=_(n.instance.modifiers,function(n){return"applyStyle"===n.name}).gpuAcceleration;void 0!==i&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var l=void 0!==i?i:r.gpuAcceleration,s=u(a(n.instance.popper)),d={position:o.position},c={left:Math.floor(o.left),top:Math.floor(o.top),bottom:Math.floor(o.bottom),right:Math.floor(o.right)},p="bottom"===t?"top":"bottom",m="right"===e?"left":"right",f=C("transform"),g=void 0,h=void 0;if(h="bottom"===p?-s.height+c.bottom:c.top,g="right"===m?-s.width+c.right:c.left,l&&f)d[f]="translate3d("+g+"px, "+h+"px, 0)",d[p]=0,d[m]=0,d.willChange="transform";else{var b="bottom"===p?-1:1,v="right"===m?-1:1;d[p]=h*b,d[m]=g*v,d.willChange=p+", "+m}var x={"x-placement":n.placement};return n.attributes=K({},x,n.attributes),n.styles=K({},d,n.styles),n.arrowStyles=K({},n.offsets.arrow,n.arrowStyles),n},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(n){return j(n.instance.popper,n.styles),function(n,r){Object.keys(r).forEach(function(t){!1!==r[t]?n.setAttribute(t,r[t]):n.removeAttribute(t)})}(n.instance.popper,n.attributes),n.arrowElement&&Object.keys(n.arrowStyles).length&&j(n.arrowElement,n.arrowStyles),n},onLoad:function(n,r,t,e,o){var i=x(0,r,n),a=v(t.placement,i,r,n,t.modifiers.flip.boundariesElement,t.modifiers.flip.padding);return r.setAttribute("x-placement",a),j(r,{position:"absolute"}),t},gpuAcceleration:void 0}}},X=function(){function n(r,e){var o=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};z(this,n),this.scheduleUpdate=function(){return requestAnimationFrame(o.update)},this.update=W(this.update.bind(this)),this.options=K({},n.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=r&&r.jquery?r[0]:r,this.popper=e&&e.jquery?e[0]:e,this.options.modifiers={},Object.keys(K({},n.Defaults.modifiers,i.modifiers)).forEach(function(r){o.options.modifiers[r]=K({},n.Defaults.modifiers[r]||{},i.modifiers?i.modifiers[r]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(n){return K({name:n},o.options.modifiers[n])}).sort(function(n,r){return n.order-r.order}),this.modifiers.forEach(function(n){n.enabled&&t(n.onLoad)&&n.onLoad(o.reference,o.popper,o.options,n,o.state)}),this.update();var a=this.options.eventsEnabled;a&&this.enableEventListeners(),this.state.eventsEnabled=a}return U(n,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var n={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};n.offsets.reference=x(this.state,this.popper,this.reference),n.placement=v(this.options.placement,n.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),n.originalPlacement=n.placement,n.offsets.popper=k(this.popper,n.offsets.reference,n.placement),n.offsets.popper.position="absolute",n=E(this.modifiers,n),this.state.isCreated?this.options.onUpdate(n):(this.state.isCreated=!0,this.options.onCreate(n))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,T(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[C("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return D.call(this)}},{key:"disableEventListeners",value:function(){return N.call(this)}}]),n}();X.Utils=("undefined"!=typeof window?window:n).PopperUtils,X.placements=$,X.Defaults=G,r.default=X}.call(r,t(11))},function(n,r){var t;t=function(){return this}();try{t=t||Function("return this")()||(0,eval)("this")}catch(n){"object"==typeof window&&(t=window)}n.exports=t}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,